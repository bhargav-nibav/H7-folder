
single_ldr_urt_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fa8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009240  08009240  00019240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009280  08009280  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009280  08009280  00019280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009288  08009288  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009288  08009288  00019288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800928c  0800928c  0001928c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08009290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  24000010  080092a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000350  080092a0  00020350  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001174d  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000226e  00000000  00000000  000317ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  00033a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092c  00000000  00000000  00034628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038b8d  00000000  00000000  00034f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000118e1  00000000  00000000  0006dae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00177ae8  00000000  00000000  0007f3c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030c0  00000000  00000000  001f6eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001f9f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009228 	.word	0x08009228

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08009228 	.word	0x08009228

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <getTFminiData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void getTFminiData()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  static uint8_t i = 0;
  uint8_t j = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	71fb      	strb	r3, [r7, #7]
  int checksum = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]

  HAL_UART_Receive(&huart5, &tfminiData[i], 1, 10);
 800070e:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <getTFminiData+0xc8>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <getTFminiData+0xcc>)
 8000716:	18d1      	adds	r1, r2, r3
 8000718:	230a      	movs	r3, #10
 800071a:	2201      	movs	r2, #1
 800071c:	482c      	ldr	r0, [pc, #176]	; (80007d0 <getTFminiData+0xd0>)
 800071e:	f006 fd9f 	bl	8007260 <HAL_UART_Receive>

{
	  //HAL_UART_Transmit(&huart3, tfminiData[i], 1, 100);
  if (tfminiData[0] != 0x59)
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <getTFminiData+0xcc>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b59      	cmp	r3, #89	; 0x59
 8000728:	d003      	beq.n	8000732 <getTFminiData+0x32>
  {
    i = 0;
 800072a:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <getTFminiData+0xc8>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
  else
  {
    i++;
  }
}
}
 8000730:	e046      	b.n	80007c0 <getTFminiData+0xc0>
  else if (i == 1 && tfminiData[1] != 0x59)
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <getTFminiData+0xc8>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d107      	bne.n	800074a <getTFminiData+0x4a>
 800073a:	4b24      	ldr	r3, [pc, #144]	; (80007cc <getTFminiData+0xcc>)
 800073c:	785b      	ldrb	r3, [r3, #1]
 800073e:	2b59      	cmp	r3, #89	; 0x59
 8000740:	d003      	beq.n	800074a <getTFminiData+0x4a>
    i = 0;
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <getTFminiData+0xc8>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
}
 8000748:	e03a      	b.n	80007c0 <getTFminiData+0xc0>
  else if (i == 8)
 800074a:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <getTFminiData+0xc8>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b08      	cmp	r3, #8
 8000750:	d130      	bne.n	80007b4 <getTFminiData+0xb4>
    for (j = 0; j < 8; j++)
 8000752:	2300      	movs	r3, #0
 8000754:	71fb      	strb	r3, [r7, #7]
 8000756:	e009      	b.n	800076c <getTFminiData+0x6c>
      checksum += tfminiData[j];
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <getTFminiData+0xcc>)
 800075c:	5cd3      	ldrb	r3, [r2, r3]
 800075e:	461a      	mov	r2, r3
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	4413      	add	r3, r2
 8000764:	603b      	str	r3, [r7, #0]
    for (j = 0; j < 8; j++)
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	3301      	adds	r3, #1
 800076a:	71fb      	strb	r3, [r7, #7]
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b07      	cmp	r3, #7
 8000770:	d9f2      	bls.n	8000758 <getTFminiData+0x58>
    if (tfminiData[8] == (checksum % 256))
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <getTFminiData+0xcc>)
 8000774:	7a1b      	ldrb	r3, [r3, #8]
 8000776:	4619      	mov	r1, r3
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	425a      	negs	r2, r3
 800077c:	b2db      	uxtb	r3, r3
 800077e:	b2d2      	uxtb	r2, r2
 8000780:	bf58      	it	pl
 8000782:	4253      	negpl	r3, r2
 8000784:	4299      	cmp	r1, r3
 8000786:	d111      	bne.n	80007ac <getTFminiData+0xac>
      distance = tfminiData[2] + (tfminiData[3] << 8);
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <getTFminiData+0xcc>)
 800078a:	789b      	ldrb	r3, [r3, #2]
 800078c:	461a      	mov	r2, r3
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <getTFminiData+0xcc>)
 8000790:	78db      	ldrb	r3, [r3, #3]
 8000792:	021b      	lsls	r3, r3, #8
 8000794:	4413      	add	r3, r2
 8000796:	4a0f      	ldr	r2, [pc, #60]	; (80007d4 <getTFminiData+0xd4>)
 8000798:	6013      	str	r3, [r2, #0]
      strength = tfminiData[4] + (tfminiData[5] << 8);
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <getTFminiData+0xcc>)
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	461a      	mov	r2, r3
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <getTFminiData+0xcc>)
 80007a2:	795b      	ldrb	r3, [r3, #5]
 80007a4:	021b      	lsls	r3, r3, #8
 80007a6:	4413      	add	r3, r2
 80007a8:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <getTFminiData+0xd8>)
 80007aa:	6013      	str	r3, [r2, #0]
    i = 0;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <getTFminiData+0xc8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
}
 80007b2:	e005      	b.n	80007c0 <getTFminiData+0xc0>
    i++;
 80007b4:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <getTFminiData+0xc8>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	3301      	adds	r3, #1
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b02      	ldr	r3, [pc, #8]	; (80007c8 <getTFminiData+0xc8>)
 80007be:	701a      	strb	r2, [r3, #0]
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	24000348 	.word	0x24000348
 80007cc:	24000334 	.word	0x24000334
 80007d0:	2400002c 	.word	0x2400002c
 80007d4:	24000340 	.word	0x24000340
 80007d8:	24000344 	.word	0x24000344

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007e8:	bf00      	nop
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <main+0xa4>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d004      	beq.n	8000800 <main+0x24>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	1e5a      	subs	r2, r3, #1
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	dcf4      	bgt.n	80007ea <main+0xe>
  if ( timeout < 0 )
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	da01      	bge.n	800080a <main+0x2e>
  {
  Error_Handler();
 8000806:	f000 f9e3 	bl	8000bd0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f000 fc29 	bl	8001060 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800080e:	f000 f9b3 	bl	8000b78 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000812:	f000 f837 	bl	8000884 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <main+0xa4>)
 8000818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081c:	4a18      	ldr	r2, [pc, #96]	; (8000880 <main+0xa4>)
 800081e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000822:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <main+0xa4>)
 8000828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000834:	2000      	movs	r0, #0
 8000836:	f003 fe29 	bl	800448c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800083a:	2100      	movs	r1, #0
 800083c:	2000      	movs	r0, #0
 800083e:	f003 fe3f 	bl	80044c0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000846:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000848:	bf00      	nop
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <main+0xa4>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000852:	2b00      	cmp	r3, #0
 8000854:	d104      	bne.n	8000860 <main+0x84>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	1e5a      	subs	r2, r3, #1
 800085a:	607a      	str	r2, [r7, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	dcf4      	bgt.n	800084a <main+0x6e>
if ( timeout < 0 )
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	da01      	bge.n	800086a <main+0x8e>
{
Error_Handler();
 8000866:	f000 f9b3 	bl	8000bd0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086a:	f000 f951 	bl	8000b10 <MX_GPIO_Init>
  MX_DMA_Init();
 800086e:	f000 f917 	bl	8000aa0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000872:	f000 f8c9 	bl	8000a08 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8000876:	f000 f86f 	bl	8000958 <MX_UART5_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  getTFminiData();
 800087a:	f7ff ff41 	bl	8000700 <getTFminiData>
 800087e:	e7fc      	b.n	800087a <main+0x9e>
 8000880:	58024400 	.word	0x58024400

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b09c      	sub	sp, #112	; 0x70
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	224c      	movs	r2, #76	; 0x4c
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f008 fc9c 	bl	80091d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2220      	movs	r2, #32
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f008 fc96 	bl	80091d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008a4:	2004      	movs	r0, #4
 80008a6:	f003 fe1f 	bl	80044e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <SystemClock_Config+0xcc>)
 80008b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b2:	4a27      	ldr	r2, [pc, #156]	; (8000950 <SystemClock_Config+0xcc>)
 80008b4:	f023 0301 	bic.w	r3, r3, #1
 80008b8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <SystemClock_Config+0xcc>)
 80008bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <SystemClock_Config+0xd0>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <SystemClock_Config+0xd0>)
 80008ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <SystemClock_Config+0xd0>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008e0:	bf00      	nop
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <SystemClock_Config+0xd0>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ee:	d1f8      	bne.n	80008e2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f0:	2302      	movs	r3, #2
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008f4:	2301      	movs	r3, #1
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f8:	2340      	movs	r3, #64	; 0x40
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000904:	4618      	mov	r0, r3
 8000906:	f003 fe49 	bl	800459c <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000910:	f000 f95e 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	233f      	movs	r3, #63	; 0x3f
 8000916:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000928:	2340      	movs	r3, #64	; 0x40
 800092a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2101      	movs	r1, #1
 8000938:	4618      	mov	r0, r3
 800093a:	f004 fa89 	bl	8004e50 <HAL_RCC_ClockConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000944:	f000 f944 	bl	8000bd0 <Error_Handler>
  }
}
 8000948:	bf00      	nop
 800094a:	3770      	adds	r7, #112	; 0x70
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	58000400 	.word	0x58000400
 8000954:	58024800 	.word	0x58024800

08000958 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800095c:	4b27      	ldr	r3, [pc, #156]	; (80009fc <MX_UART5_Init+0xa4>)
 800095e:	4a28      	ldr	r2, [pc, #160]	; (8000a00 <MX_UART5_Init+0xa8>)
 8000960:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000962:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_UART5_Init+0xa4>)
 8000964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000968:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b24      	ldr	r3, [pc, #144]	; (80009fc <MX_UART5_Init+0xa4>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_UART5_Init+0xa4>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_UART5_Init+0xa4>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_UART5_Init+0xa4>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_UART5_Init+0xa4>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_UART5_Init+0xa4>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_UART5_Init+0xa4>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_UART5_Init+0xa4>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_UART5_Init+0xa4>)
 800099c:	2200      	movs	r2, #0
 800099e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009a0:	4816      	ldr	r0, [pc, #88]	; (80009fc <MX_UART5_Init+0xa4>)
 80009a2:	f006 fc0d 	bl	80071c0 <HAL_UART_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80009ac:	f000 f910 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b0:	2100      	movs	r1, #0
 80009b2:	4812      	ldr	r0, [pc, #72]	; (80009fc <MX_UART5_Init+0xa4>)
 80009b4:	f008 fb41 	bl	800903a <HAL_UARTEx_SetTxFifoThreshold>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80009be:	f000 f907 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c2:	2100      	movs	r1, #0
 80009c4:	480d      	ldr	r0, [pc, #52]	; (80009fc <MX_UART5_Init+0xa4>)
 80009c6:	f008 fb76 	bl	80090b6 <HAL_UARTEx_SetRxFifoThreshold>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80009d0:	f000 f8fe 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80009d4:	4809      	ldr	r0, [pc, #36]	; (80009fc <MX_UART5_Init+0xa4>)
 80009d6:	f008 faf7 	bl	8008fc8 <HAL_UARTEx_DisableFifoMode>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80009e0:	f000 f8f6 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  if (HAL_UART_Receive_DMA(&huart5, tfminiData, sizeof(tfminiData)) != HAL_OK)
 80009e4:	2209      	movs	r2, #9
 80009e6:	4907      	ldr	r1, [pc, #28]	; (8000a04 <MX_UART5_Init+0xac>)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_UART5_Init+0xa4>)
 80009ea:	f006 fd01 	bl	80073f0 <HAL_UART_Receive_DMA>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_UART5_Init+0xa0>
  {
	Error_Handler();
 80009f4:	f000 f8ec 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE END UART5_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2400002c 	.word	0x2400002c
 8000a00:	40005000 	.word	0x40005000
 8000a04:	24000334 	.word	0x24000334

08000a08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a0e:	4a23      	ldr	r2, [pc, #140]	; (8000a9c <MX_USART3_UART_Init+0x94>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a12:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a50:	4811      	ldr	r0, [pc, #68]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a52:	f006 fbb5 	bl	80071c0 <HAL_UART_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a5c:	f000 f8b8 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a60:	2100      	movs	r1, #0
 8000a62:	480d      	ldr	r0, [pc, #52]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a64:	f008 fae9 	bl	800903a <HAL_UARTEx_SetTxFifoThreshold>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a6e:	f000 f8af 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a72:	2100      	movs	r1, #0
 8000a74:	4808      	ldr	r0, [pc, #32]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a76:	f008 fb1e 	bl	80090b6 <HAL_UARTEx_SetRxFifoThreshold>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a80:	f000 f8a6 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_USART3_UART_Init+0x90>)
 8000a86:	f008 fa9f 	bl	8008fc8 <HAL_UARTEx_DisableFifoMode>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a90:	f000 f89e 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	240000c0 	.word	0x240000c0
 8000a9c:	40004800 	.word	0x40004800

08000aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_DMA_Init+0x6c>)
 8000aa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aac:	4a17      	ldr	r2, [pc, #92]	; (8000b0c <MX_DMA_Init+0x6c>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_DMA_Init+0x6c>)
 8000ab8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	200b      	movs	r0, #11
 8000aca:	f000 fc42 	bl	8001352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ace:	200b      	movs	r0, #11
 8000ad0:	f000 fc59 	bl	8001386 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	200c      	movs	r0, #12
 8000ada:	f000 fc3a 	bl	8001352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ade:	200c      	movs	r0, #12
 8000ae0:	f000 fc51 	bl	8001386 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	200d      	movs	r0, #13
 8000aea:	f000 fc32 	bl	8001352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000aee:	200d      	movs	r0, #13
 8000af0:	f000 fc49 	bl	8001386 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	200e      	movs	r0, #14
 8000afa:	f000 fc2a 	bl	8001352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000afe:	200e      	movs	r0, #14
 8000b00:	f000 fc41 	bl	8001386 <HAL_NVIC_EnableIRQ>

}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	58024400 	.word	0x58024400

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_GPIO_Init+0x50>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1c:	4a10      	ldr	r2, [pc, #64]	; (8000b60 <MX_GPIO_Init+0x50>)
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_GPIO_Init+0x50>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <MX_GPIO_Init+0x50>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3a:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <MX_GPIO_Init+0x50>)
 8000b3c:	f043 0308 	orr.w	r3, r3, #8
 8000b40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_GPIO_Init+0x50>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	58024400 	.word	0x58024400

08000b64 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
        getTFminiData();
 8000b6c:	f7ff fdc8 	bl	8000700 <getTFminiData>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b8a:	f000 fc17 	bl	80013bc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b9a:	231f      	movs	r3, #31
 8000b9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b9e:	2387      	movs	r3, #135	; 0x87
 8000ba0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000baa:	2301      	movs	r3, #1
 8000bac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fc35 	bl	800142c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bc2:	2004      	movs	r0, #4
 8000bc4:	f000 fc12 	bl	80013ec <HAL_MPU_Enable>

}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <Error_Handler+0x8>
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <HAL_MspInit+0x30>)
 8000be4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000be8:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <HAL_MspInit+0x30>)
 8000bea:	f043 0302 	orr.w	r3, r3, #2
 8000bee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_MspInit+0x30>)
 8000bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	58024400 	.word	0x58024400

08000c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b0bc      	sub	sp, #240	; 0xf0
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c28:	f107 0318 	add.w	r3, r7, #24
 8000c2c:	22c0      	movs	r2, #192	; 0xc0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f008 facd 	bl	80091d0 <memset>
  if(huart->Instance==UART5)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a58      	ldr	r2, [pc, #352]	; (8000d9c <HAL_UART_MspInit+0x18c>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	f040 80bb 	bne.w	8000db8 <HAL_UART_MspInit+0x1a8>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000c42:	f04f 0202 	mov.w	r2, #2
 8000c46:	f04f 0300 	mov.w	r3, #0
 8000c4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c54:	f107 0318 	add.w	r3, r7, #24
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f004 fc85 	bl	8005568 <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000c64:	f7ff ffb4 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000c68:	4b4d      	ldr	r3, [pc, #308]	; (8000da0 <HAL_UART_MspInit+0x190>)
 8000c6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c6e:	4a4c      	ldr	r2, [pc, #304]	; (8000da0 <HAL_UART_MspInit+0x190>)
 8000c70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c78:	4b49      	ldr	r3, [pc, #292]	; (8000da0 <HAL_UART_MspInit+0x190>)
 8000c7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	4b46      	ldr	r3, [pc, #280]	; (8000da0 <HAL_UART_MspInit+0x190>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	4a44      	ldr	r2, [pc, #272]	; (8000da0 <HAL_UART_MspInit+0x190>)
 8000c8e:	f043 0302 	orr.w	r3, r3, #2
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c96:	4b42      	ldr	r3, [pc, #264]	; (8000da0 <HAL_UART_MspInit+0x190>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ca4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ca8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8000cbe:	230e      	movs	r3, #14
 8000cc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4836      	ldr	r0, [pc, #216]	; (8000da4 <HAL_UART_MspInit+0x194>)
 8000ccc:	f003 fa2e 	bl	800412c <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream2;
 8000cd0:	4b35      	ldr	r3, [pc, #212]	; (8000da8 <HAL_UART_MspInit+0x198>)
 8000cd2:	4a36      	ldr	r2, [pc, #216]	; (8000dac <HAL_UART_MspInit+0x19c>)
 8000cd4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8000cd6:	4b34      	ldr	r3, [pc, #208]	; (8000da8 <HAL_UART_MspInit+0x198>)
 8000cd8:	2241      	movs	r2, #65	; 0x41
 8000cda:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cdc:	4b32      	ldr	r3, [pc, #200]	; (8000da8 <HAL_UART_MspInit+0x198>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce2:	4b31      	ldr	r3, [pc, #196]	; (8000da8 <HAL_UART_MspInit+0x198>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <HAL_UART_MspInit+0x198>)
 8000cea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cee:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cf0:	4b2d      	ldr	r3, [pc, #180]	; (8000da8 <HAL_UART_MspInit+0x198>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cf6:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <HAL_UART_MspInit+0x198>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8000cfc:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <HAL_UART_MspInit+0x198>)
 8000cfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d02:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d04:	4b28      	ldr	r3, [pc, #160]	; (8000da8 <HAL_UART_MspInit+0x198>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d0a:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <HAL_UART_MspInit+0x198>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000d10:	4825      	ldr	r0, [pc, #148]	; (8000da8 <HAL_UART_MspInit+0x198>)
 8000d12:	f000 fbcf 	bl	80014b4 <HAL_DMA_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000d1c:	f7ff ff58 	bl	8000bd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a21      	ldr	r2, [pc, #132]	; (8000da8 <HAL_UART_MspInit+0x198>)
 8000d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000d28:	4a1f      	ldr	r2, [pc, #124]	; (8000da8 <HAL_UART_MspInit+0x198>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream3;
 8000d2e:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <HAL_UART_MspInit+0x1a0>)
 8000d30:	4a20      	ldr	r2, [pc, #128]	; (8000db4 <HAL_UART_MspInit+0x1a4>)
 8000d32:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <HAL_UART_MspInit+0x1a0>)
 8000d36:	2242      	movs	r2, #66	; 0x42
 8000d38:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <HAL_UART_MspInit+0x1a0>)
 8000d3c:	2240      	movs	r2, #64	; 0x40
 8000d3e:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <HAL_UART_MspInit+0x1a0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <HAL_UART_MspInit+0x1a0>)
 8000d48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d4c:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_UART_MspInit+0x1a0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_UART_MspInit+0x1a0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_UART_MspInit+0x1a0>)
 8000d5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d60:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <HAL_UART_MspInit+0x1a0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_UART_MspInit+0x1a0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8000d6e:	4810      	ldr	r0, [pc, #64]	; (8000db0 <HAL_UART_MspInit+0x1a0>)
 8000d70:	f000 fba0 	bl	80014b4 <HAL_DMA_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 8000d7a:	f7ff ff29 	bl	8000bd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <HAL_UART_MspInit+0x1a0>)
 8000d82:	67da      	str	r2, [r3, #124]	; 0x7c
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_UART_MspInit+0x1a0>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2035      	movs	r0, #53	; 0x35
 8000d90:	f000 fadf 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000d94:	2035      	movs	r0, #53	; 0x35
 8000d96:	f000 faf6 	bl	8001386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d9a:	e0bf      	b.n	8000f1c <HAL_UART_MspInit+0x30c>
 8000d9c:	40005000 	.word	0x40005000
 8000da0:	58024400 	.word	0x58024400
 8000da4:	58020400 	.word	0x58020400
 8000da8:	24000154 	.word	0x24000154
 8000dac:	40020040 	.word	0x40020040
 8000db0:	240001cc 	.word	0x240001cc
 8000db4:	40020058 	.word	0x40020058
  else if(huart->Instance==USART3)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a59      	ldr	r2, [pc, #356]	; (8000f24 <HAL_UART_MspInit+0x314>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	f040 80ac 	bne.w	8000f1c <HAL_UART_MspInit+0x30c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dc4:	f04f 0202 	mov.w	r2, #2
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd6:	f107 0318 	add.w	r3, r7, #24
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f004 fbc4 	bl	8005568 <HAL_RCCEx_PeriphCLKConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8000de6:	f7ff fef3 	bl	8000bd0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dea:	4b4f      	ldr	r3, [pc, #316]	; (8000f28 <HAL_UART_MspInit+0x318>)
 8000dec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000df0:	4a4d      	ldr	r2, [pc, #308]	; (8000f28 <HAL_UART_MspInit+0x318>)
 8000df2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dfa:	4b4b      	ldr	r3, [pc, #300]	; (8000f28 <HAL_UART_MspInit+0x318>)
 8000dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e08:	4b47      	ldr	r3, [pc, #284]	; (8000f28 <HAL_UART_MspInit+0x318>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0e:	4a46      	ldr	r2, [pc, #280]	; (8000f28 <HAL_UART_MspInit+0x318>)
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e18:	4b43      	ldr	r3, [pc, #268]	; (8000f28 <HAL_UART_MspInit+0x318>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1e:	f003 0308 	and.w	r3, r3, #8
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e40:	2307      	movs	r3, #7
 8000e42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e46:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4837      	ldr	r0, [pc, #220]	; (8000f2c <HAL_UART_MspInit+0x31c>)
 8000e4e:	f003 f96d 	bl	800412c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8000e52:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <HAL_UART_MspInit+0x320>)
 8000e54:	4a37      	ldr	r2, [pc, #220]	; (8000f34 <HAL_UART_MspInit+0x324>)
 8000e56:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000e58:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <HAL_UART_MspInit+0x320>)
 8000e5a:	222d      	movs	r2, #45	; 0x2d
 8000e5c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5e:	4b34      	ldr	r3, [pc, #208]	; (8000f30 <HAL_UART_MspInit+0x320>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e64:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <HAL_UART_MspInit+0x320>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e6a:	4b31      	ldr	r3, [pc, #196]	; (8000f30 <HAL_UART_MspInit+0x320>)
 8000e6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e70:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e72:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <HAL_UART_MspInit+0x320>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e78:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <HAL_UART_MspInit+0x320>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000e7e:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <HAL_UART_MspInit+0x320>)
 8000e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e84:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e86:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <HAL_UART_MspInit+0x320>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e8c:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <HAL_UART_MspInit+0x320>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000e92:	4827      	ldr	r0, [pc, #156]	; (8000f30 <HAL_UART_MspInit+0x320>)
 8000e94:	f000 fb0e 	bl	80014b4 <HAL_DMA_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_UART_MspInit+0x292>
      Error_Handler();
 8000e9e:	f7ff fe97 	bl	8000bd0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a22      	ldr	r2, [pc, #136]	; (8000f30 <HAL_UART_MspInit+0x320>)
 8000ea6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000eaa:	4a21      	ldr	r2, [pc, #132]	; (8000f30 <HAL_UART_MspInit+0x320>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8000eb0:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <HAL_UART_MspInit+0x328>)
 8000eb2:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <HAL_UART_MspInit+0x32c>)
 8000eb4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <HAL_UART_MspInit+0x328>)
 8000eb8:	222e      	movs	r2, #46	; 0x2e
 8000eba:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <HAL_UART_MspInit+0x328>)
 8000ebe:	2240      	movs	r2, #64	; 0x40
 8000ec0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <HAL_UART_MspInit+0x328>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_UART_MspInit+0x328>)
 8000eca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ece:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_UART_MspInit+0x328>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_UART_MspInit+0x328>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_UART_MspInit+0x328>)
 8000ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ee2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <HAL_UART_MspInit+0x328>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <HAL_UART_MspInit+0x328>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000ef0:	4811      	ldr	r0, [pc, #68]	; (8000f38 <HAL_UART_MspInit+0x328>)
 8000ef2:	f000 fadf 	bl	80014b4 <HAL_DMA_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_UART_MspInit+0x2f0>
      Error_Handler();
 8000efc:	f7ff fe68 	bl	8000bd0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_UART_MspInit+0x328>)
 8000f04:	67da      	str	r2, [r3, #124]	; 0x7c
 8000f06:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <HAL_UART_MspInit+0x328>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2027      	movs	r0, #39	; 0x27
 8000f12:	f000 fa1e 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f16:	2027      	movs	r0, #39	; 0x27
 8000f18:	f000 fa35 	bl	8001386 <HAL_NVIC_EnableIRQ>
}
 8000f1c:	bf00      	nop
 8000f1e:	37f0      	adds	r7, #240	; 0xf0
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40004800 	.word	0x40004800
 8000f28:	58024400 	.word	0x58024400
 8000f2c:	58020c00 	.word	0x58020c00
 8000f30:	24000244 	.word	0x24000244
 8000f34:	40020010 	.word	0x40020010
 8000f38:	240002bc 	.word	0x240002bc
 8000f3c:	40020028 	.word	0x40020028

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler+0x4>

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8c:	f000 f8da 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <DMA1_Stream0_IRQHandler+0x10>)
 8000f9a:	f001 fdb5 	bl	8002b08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	24000244 	.word	0x24000244

08000fa8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <DMA1_Stream1_IRQHandler+0x10>)
 8000fae:	f001 fdab 	bl	8002b08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	240002bc 	.word	0x240002bc

08000fbc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <DMA1_Stream2_IRQHandler+0x10>)
 8000fc2:	f001 fda1 	bl	8002b08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	24000154 	.word	0x24000154

08000fd0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <DMA1_Stream3_IRQHandler+0x10>)
 8000fd6:	f001 fd97 	bl	8002b08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	240001cc 	.word	0x240001cc

08000fe4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <USART3_IRQHandler+0x10>)
 8000fea:	f006 fa4d 	bl	8007488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	240000c0 	.word	0x240000c0

08000ff8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <UART5_IRQHandler+0x10>)
 8000ffe:	f006 fa43 	bl	8007488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	2400002c 	.word	0x2400002c

0800100c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001044 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001010:	f7ff fae0 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001016:	490d      	ldr	r1, [pc, #52]	; (800104c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800101c:	e002      	b.n	8001024 <LoopCopyDataInit>

0800101e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001022:	3304      	adds	r3, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001028:	d3f9      	bcc.n	800101e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800102c:	4c0a      	ldr	r4, [pc, #40]	; (8001058 <LoopFillZerobss+0x22>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001030:	e001      	b.n	8001036 <LoopFillZerobss>

08001032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001034:	3204      	adds	r2, #4

08001036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001038:	d3fb      	bcc.n	8001032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103a:	f008 f8d1 	bl	80091e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103e:	f7ff fbcd 	bl	80007dc <main>
  bx  lr
 8001042:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001044:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001048:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800104c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001050:	08009290 	.word	0x08009290
  ldr r2, =_sbss
 8001054:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001058:	24000350 	.word	0x24000350

0800105c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC3_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001066:	2003      	movs	r0, #3
 8001068:	f000 f968 	bl	800133c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800106c:	f004 f8a6 	bl	80051bc <HAL_RCC_GetSysClockFreq>
 8001070:	4602      	mov	r2, r0
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_Init+0x68>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	0a1b      	lsrs	r3, r3, #8
 8001078:	f003 030f 	and.w	r3, r3, #15
 800107c:	4913      	ldr	r1, [pc, #76]	; (80010cc <HAL_Init+0x6c>)
 800107e:	5ccb      	ldrb	r3, [r1, r3]
 8001080:	f003 031f 	and.w	r3, r3, #31
 8001084:	fa22 f303 	lsr.w	r3, r2, r3
 8001088:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_Init+0x68>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <HAL_Init+0x6c>)
 8001094:	5cd3      	ldrb	r3, [r2, r3]
 8001096:	f003 031f 	and.w	r3, r3, #31
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	fa22 f303 	lsr.w	r3, r2, r3
 80010a0:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <HAL_Init+0x70>)
 80010a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010a4:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <HAL_Init+0x74>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010aa:	200f      	movs	r0, #15
 80010ac:	f000 f814 	bl	80010d8 <HAL_InitTick>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e002      	b.n	80010c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010ba:	f7ff fd8f 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	58024400 	.word	0x58024400
 80010cc:	08009240 	.word	0x08009240
 80010d0:	24000004 	.word	0x24000004
 80010d4:	24000000 	.word	0x24000000

080010d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_InitTick+0x60>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e021      	b.n	8001130 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <HAL_InitTick+0x64>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_InitTick+0x60>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f94d 	bl	80013a2 <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 f917 	bl	8001352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <HAL_InitTick+0x68>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2400000c 	.word	0x2400000c
 800113c:	24000000 	.word	0x24000000
 8001140:	24000008 	.word	0x24000008

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	2400000c 	.word	0x2400000c
 8001168:	2400034c 	.word	0x2400034c

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	2400034c 	.word	0x2400034c

08001184 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_GetREVID+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	0c1b      	lsrs	r3, r3, #16
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	5c001000 	.word	0x5c001000

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <__NVIC_SetPriorityGrouping+0x40>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <__NVIC_SetPriorityGrouping+0x40>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00
 80011e0:	05fa0000 	.word	0x05fa0000

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0b      	blt.n	800122a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4907      	ldr	r1, [pc, #28]	; (8001238 <__NVIC_EnableIRQ+0x38>)
 800121a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <__NVIC_SetPriority+0x50>)
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001308:	d301      	bcc.n	800130e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130a:	2301      	movs	r3, #1
 800130c:	e00f      	b.n	800132e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <SysTick_Config+0x40>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001316:	210f      	movs	r1, #15
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f7ff ff8e 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <SysTick_Config+0x40>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SysTick_Config+0x40>)
 8001328:	2207      	movs	r2, #7
 800132a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff29 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001360:	f7ff ff40 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 8001364:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	68b9      	ldr	r1, [r7, #8]
 800136a:	6978      	ldr	r0, [r7, #20]
 800136c:	f7ff ff90 	bl	8001290 <NVIC_EncodePriority>
 8001370:	4602      	mov	r2, r0
 8001372:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff5f 	bl	800123c <__NVIC_SetPriority>
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001390:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff33 	bl	8001200 <__NVIC_EnableIRQ>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ffa4 	bl	80012f8 <SysTick_Config>
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80013c0:	f3bf 8f5f 	dmb	sy
}
 80013c4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <HAL_MPU_Disable+0x28>)
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <HAL_MPU_Disable+0x28>)
 80013cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_MPU_Disable+0x2c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	605a      	str	r2, [r3, #4]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00
 80013e8:	e000ed90 	.word	0xe000ed90

080013ec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80013f4:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <HAL_MPU_Enable+0x38>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_MPU_Enable+0x3c>)
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	4a09      	ldr	r2, [pc, #36]	; (8001428 <HAL_MPU_Enable+0x3c>)
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800140a:	f3bf 8f4f 	dsb	sy
}
 800140e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001410:	f3bf 8f6f 	isb	sy
}
 8001414:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed90 	.word	0xe000ed90
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	785a      	ldrb	r2, [r3, #1]
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <HAL_MPU_ConfigRegion+0x84>)
 800143a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d029      	beq.n	8001498 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001444:	4a1a      	ldr	r2, [pc, #104]	; (80014b0 <HAL_MPU_ConfigRegion+0x84>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7b1b      	ldrb	r3, [r3, #12]
 8001450:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	7adb      	ldrb	r3, [r3, #11]
 8001456:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001458:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7a9b      	ldrb	r3, [r3, #10]
 800145e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001460:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7b5b      	ldrb	r3, [r3, #13]
 8001466:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001468:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7b9b      	ldrb	r3, [r3, #14]
 800146e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001470:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7bdb      	ldrb	r3, [r3, #15]
 8001476:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001478:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7a5b      	ldrb	r3, [r3, #9]
 800147e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001480:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	7a1b      	ldrb	r3, [r3, #8]
 8001486:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001488:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	7812      	ldrb	r2, [r2, #0]
 800148e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001490:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001492:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001494:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001496:	e005      	b.n	80014a4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_MPU_ConfigRegion+0x84>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <HAL_MPU_ConfigRegion+0x84>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed90 	.word	0xe000ed90

080014b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80014bc:	f7ff fe56 	bl	800116c <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e316      	b.n	8001afa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a66      	ldr	r2, [pc, #408]	; (800166c <HAL_DMA_Init+0x1b8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d04a      	beq.n	800156c <HAL_DMA_Init+0xb8>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a65      	ldr	r2, [pc, #404]	; (8001670 <HAL_DMA_Init+0x1bc>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d045      	beq.n	800156c <HAL_DMA_Init+0xb8>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a63      	ldr	r2, [pc, #396]	; (8001674 <HAL_DMA_Init+0x1c0>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d040      	beq.n	800156c <HAL_DMA_Init+0xb8>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a62      	ldr	r2, [pc, #392]	; (8001678 <HAL_DMA_Init+0x1c4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d03b      	beq.n	800156c <HAL_DMA_Init+0xb8>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a60      	ldr	r2, [pc, #384]	; (800167c <HAL_DMA_Init+0x1c8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d036      	beq.n	800156c <HAL_DMA_Init+0xb8>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a5f      	ldr	r2, [pc, #380]	; (8001680 <HAL_DMA_Init+0x1cc>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d031      	beq.n	800156c <HAL_DMA_Init+0xb8>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a5d      	ldr	r2, [pc, #372]	; (8001684 <HAL_DMA_Init+0x1d0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d02c      	beq.n	800156c <HAL_DMA_Init+0xb8>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a5c      	ldr	r2, [pc, #368]	; (8001688 <HAL_DMA_Init+0x1d4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d027      	beq.n	800156c <HAL_DMA_Init+0xb8>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a5a      	ldr	r2, [pc, #360]	; (800168c <HAL_DMA_Init+0x1d8>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d022      	beq.n	800156c <HAL_DMA_Init+0xb8>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a59      	ldr	r2, [pc, #356]	; (8001690 <HAL_DMA_Init+0x1dc>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d01d      	beq.n	800156c <HAL_DMA_Init+0xb8>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a57      	ldr	r2, [pc, #348]	; (8001694 <HAL_DMA_Init+0x1e0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d018      	beq.n	800156c <HAL_DMA_Init+0xb8>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a56      	ldr	r2, [pc, #344]	; (8001698 <HAL_DMA_Init+0x1e4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d013      	beq.n	800156c <HAL_DMA_Init+0xb8>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a54      	ldr	r2, [pc, #336]	; (800169c <HAL_DMA_Init+0x1e8>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d00e      	beq.n	800156c <HAL_DMA_Init+0xb8>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a53      	ldr	r2, [pc, #332]	; (80016a0 <HAL_DMA_Init+0x1ec>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d009      	beq.n	800156c <HAL_DMA_Init+0xb8>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a51      	ldr	r2, [pc, #324]	; (80016a4 <HAL_DMA_Init+0x1f0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d004      	beq.n	800156c <HAL_DMA_Init+0xb8>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a50      	ldr	r2, [pc, #320]	; (80016a8 <HAL_DMA_Init+0x1f4>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d101      	bne.n	8001570 <HAL_DMA_Init+0xbc>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <HAL_DMA_Init+0xbe>
 8001570:	2300      	movs	r3, #0
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 813b 	beq.w	80017ee <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2202      	movs	r2, #2
 800157c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a37      	ldr	r2, [pc, #220]	; (800166c <HAL_DMA_Init+0x1b8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d04a      	beq.n	8001628 <HAL_DMA_Init+0x174>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a36      	ldr	r2, [pc, #216]	; (8001670 <HAL_DMA_Init+0x1bc>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d045      	beq.n	8001628 <HAL_DMA_Init+0x174>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a34      	ldr	r2, [pc, #208]	; (8001674 <HAL_DMA_Init+0x1c0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d040      	beq.n	8001628 <HAL_DMA_Init+0x174>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a33      	ldr	r2, [pc, #204]	; (8001678 <HAL_DMA_Init+0x1c4>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d03b      	beq.n	8001628 <HAL_DMA_Init+0x174>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a31      	ldr	r2, [pc, #196]	; (800167c <HAL_DMA_Init+0x1c8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d036      	beq.n	8001628 <HAL_DMA_Init+0x174>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a30      	ldr	r2, [pc, #192]	; (8001680 <HAL_DMA_Init+0x1cc>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d031      	beq.n	8001628 <HAL_DMA_Init+0x174>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a2e      	ldr	r2, [pc, #184]	; (8001684 <HAL_DMA_Init+0x1d0>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d02c      	beq.n	8001628 <HAL_DMA_Init+0x174>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a2d      	ldr	r2, [pc, #180]	; (8001688 <HAL_DMA_Init+0x1d4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d027      	beq.n	8001628 <HAL_DMA_Init+0x174>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a2b      	ldr	r2, [pc, #172]	; (800168c <HAL_DMA_Init+0x1d8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d022      	beq.n	8001628 <HAL_DMA_Init+0x174>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a2a      	ldr	r2, [pc, #168]	; (8001690 <HAL_DMA_Init+0x1dc>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d01d      	beq.n	8001628 <HAL_DMA_Init+0x174>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a28      	ldr	r2, [pc, #160]	; (8001694 <HAL_DMA_Init+0x1e0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d018      	beq.n	8001628 <HAL_DMA_Init+0x174>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a27      	ldr	r2, [pc, #156]	; (8001698 <HAL_DMA_Init+0x1e4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d013      	beq.n	8001628 <HAL_DMA_Init+0x174>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a25      	ldr	r2, [pc, #148]	; (800169c <HAL_DMA_Init+0x1e8>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d00e      	beq.n	8001628 <HAL_DMA_Init+0x174>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a24      	ldr	r2, [pc, #144]	; (80016a0 <HAL_DMA_Init+0x1ec>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d009      	beq.n	8001628 <HAL_DMA_Init+0x174>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a22      	ldr	r2, [pc, #136]	; (80016a4 <HAL_DMA_Init+0x1f0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d004      	beq.n	8001628 <HAL_DMA_Init+0x174>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <HAL_DMA_Init+0x1f4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d108      	bne.n	800163a <HAL_DMA_Init+0x186>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0201 	bic.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	e007      	b.n	800164a <HAL_DMA_Init+0x196>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0201 	bic.w	r2, r2, #1
 8001648:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800164a:	e02f      	b.n	80016ac <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800164c:	f7ff fd8e 	bl	800116c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b05      	cmp	r3, #5
 8001658:	d928      	bls.n	80016ac <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2220      	movs	r2, #32
 800165e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2203      	movs	r2, #3
 8001664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e246      	b.n	8001afa <HAL_DMA_Init+0x646>
 800166c:	40020010 	.word	0x40020010
 8001670:	40020028 	.word	0x40020028
 8001674:	40020040 	.word	0x40020040
 8001678:	40020058 	.word	0x40020058
 800167c:	40020070 	.word	0x40020070
 8001680:	40020088 	.word	0x40020088
 8001684:	400200a0 	.word	0x400200a0
 8001688:	400200b8 	.word	0x400200b8
 800168c:	40020410 	.word	0x40020410
 8001690:	40020428 	.word	0x40020428
 8001694:	40020440 	.word	0x40020440
 8001698:	40020458 	.word	0x40020458
 800169c:	40020470 	.word	0x40020470
 80016a0:	40020488 	.word	0x40020488
 80016a4:	400204a0 	.word	0x400204a0
 80016a8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1c8      	bne.n	800164c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4b83      	ldr	r3, [pc, #524]	; (80018d4 <HAL_DMA_Init+0x420>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80016d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016de:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ea:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d107      	bne.n	8001710 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	4313      	orrs	r3, r2
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4313      	orrs	r3, r2
 800170e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001710:	4b71      	ldr	r3, [pc, #452]	; (80018d8 <HAL_DMA_Init+0x424>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b71      	ldr	r3, [pc, #452]	; (80018dc <HAL_DMA_Init+0x428>)
 8001716:	4013      	ands	r3, r2
 8001718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800171c:	d328      	bcc.n	8001770 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b28      	cmp	r3, #40	; 0x28
 8001724:	d903      	bls.n	800172e <HAL_DMA_Init+0x27a>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b2e      	cmp	r3, #46	; 0x2e
 800172c:	d917      	bls.n	800175e <HAL_DMA_Init+0x2aa>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b3e      	cmp	r3, #62	; 0x3e
 8001734:	d903      	bls.n	800173e <HAL_DMA_Init+0x28a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b42      	cmp	r3, #66	; 0x42
 800173c:	d90f      	bls.n	800175e <HAL_DMA_Init+0x2aa>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b46      	cmp	r3, #70	; 0x46
 8001744:	d903      	bls.n	800174e <HAL_DMA_Init+0x29a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b48      	cmp	r3, #72	; 0x48
 800174c:	d907      	bls.n	800175e <HAL_DMA_Init+0x2aa>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b4e      	cmp	r3, #78	; 0x4e
 8001754:	d905      	bls.n	8001762 <HAL_DMA_Init+0x2ae>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b52      	cmp	r3, #82	; 0x52
 800175c:	d801      	bhi.n	8001762 <HAL_DMA_Init+0x2ae>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_DMA_Init+0x2b0>
 8001762:	2300      	movs	r3, #0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800176e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f023 0307 	bic.w	r3, r3, #7
 8001786:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	4313      	orrs	r3, r2
 8001790:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	2b04      	cmp	r3, #4
 8001798:	d117      	bne.n	80017ca <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00e      	beq.n	80017ca <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f002 fb33 	bl	8003e18 <DMA_CheckFifoParam>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2240      	movs	r2, #64	; 0x40
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e197      	b.n	8001afa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f002 fa6e 	bl	8003cb4 <DMA_CalcBaseAndBitshift>
 80017d8:	4603      	mov	r3, r0
 80017da:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e0:	f003 031f 	and.w	r3, r3, #31
 80017e4:	223f      	movs	r2, #63	; 0x3f
 80017e6:	409a      	lsls	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	e0cd      	b.n	800198a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a3b      	ldr	r2, [pc, #236]	; (80018e0 <HAL_DMA_Init+0x42c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d022      	beq.n	800183e <HAL_DMA_Init+0x38a>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a39      	ldr	r2, [pc, #228]	; (80018e4 <HAL_DMA_Init+0x430>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d01d      	beq.n	800183e <HAL_DMA_Init+0x38a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a38      	ldr	r2, [pc, #224]	; (80018e8 <HAL_DMA_Init+0x434>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d018      	beq.n	800183e <HAL_DMA_Init+0x38a>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a36      	ldr	r2, [pc, #216]	; (80018ec <HAL_DMA_Init+0x438>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_DMA_Init+0x38a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a35      	ldr	r2, [pc, #212]	; (80018f0 <HAL_DMA_Init+0x43c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00e      	beq.n	800183e <HAL_DMA_Init+0x38a>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a33      	ldr	r2, [pc, #204]	; (80018f4 <HAL_DMA_Init+0x440>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d009      	beq.n	800183e <HAL_DMA_Init+0x38a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a32      	ldr	r2, [pc, #200]	; (80018f8 <HAL_DMA_Init+0x444>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d004      	beq.n	800183e <HAL_DMA_Init+0x38a>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a30      	ldr	r2, [pc, #192]	; (80018fc <HAL_DMA_Init+0x448>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d101      	bne.n	8001842 <HAL_DMA_Init+0x38e>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_DMA_Init+0x390>
 8001842:	2300      	movs	r3, #0
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 8097 	beq.w	8001978 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a24      	ldr	r2, [pc, #144]	; (80018e0 <HAL_DMA_Init+0x42c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d021      	beq.n	8001898 <HAL_DMA_Init+0x3e4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a22      	ldr	r2, [pc, #136]	; (80018e4 <HAL_DMA_Init+0x430>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d01c      	beq.n	8001898 <HAL_DMA_Init+0x3e4>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a21      	ldr	r2, [pc, #132]	; (80018e8 <HAL_DMA_Init+0x434>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d017      	beq.n	8001898 <HAL_DMA_Init+0x3e4>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <HAL_DMA_Init+0x438>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d012      	beq.n	8001898 <HAL_DMA_Init+0x3e4>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <HAL_DMA_Init+0x43c>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d00d      	beq.n	8001898 <HAL_DMA_Init+0x3e4>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <HAL_DMA_Init+0x440>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d008      	beq.n	8001898 <HAL_DMA_Init+0x3e4>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <HAL_DMA_Init+0x444>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d003      	beq.n	8001898 <HAL_DMA_Init+0x3e4>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a19      	ldr	r2, [pc, #100]	; (80018fc <HAL_DMA_Init+0x448>)
 8001896:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2202      	movs	r2, #2
 800189c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	4b13      	ldr	r3, [pc, #76]	; (8001900 <HAL_DMA_Init+0x44c>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b40      	cmp	r3, #64	; 0x40
 80018be:	d021      	beq.n	8001904 <HAL_DMA_Init+0x450>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b80      	cmp	r3, #128	; 0x80
 80018c6:	d102      	bne.n	80018ce <HAL_DMA_Init+0x41a>
 80018c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018cc:	e01b      	b.n	8001906 <HAL_DMA_Init+0x452>
 80018ce:	2300      	movs	r3, #0
 80018d0:	e019      	b.n	8001906 <HAL_DMA_Init+0x452>
 80018d2:	bf00      	nop
 80018d4:	fe10803f 	.word	0xfe10803f
 80018d8:	5c001000 	.word	0x5c001000
 80018dc:	ffff0000 	.word	0xffff0000
 80018e0:	58025408 	.word	0x58025408
 80018e4:	5802541c 	.word	0x5802541c
 80018e8:	58025430 	.word	0x58025430
 80018ec:	58025444 	.word	0x58025444
 80018f0:	58025458 	.word	0x58025458
 80018f4:	5802546c 	.word	0x5802546c
 80018f8:	58025480 	.word	0x58025480
 80018fc:	58025494 	.word	0x58025494
 8001900:	fffe000f 	.word	0xfffe000f
 8001904:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68d2      	ldr	r2, [r2, #12]
 800190a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800190c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001914:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800191c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001924:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800192c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001934:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4313      	orrs	r3, r2
 800193a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b6e      	ldr	r3, [pc, #440]	; (8001b04 <HAL_DMA_Init+0x650>)
 800194c:	4413      	add	r3, r2
 800194e:	4a6e      	ldr	r2, [pc, #440]	; (8001b08 <HAL_DMA_Init+0x654>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	009a      	lsls	r2, r3, #2
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f002 f9a9 	bl	8003cb4 <DMA_CalcBaseAndBitshift>
 8001962:	4603      	mov	r3, r0
 8001964:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	2201      	movs	r2, #1
 8001970:	409a      	lsls	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	e008      	b.n	800198a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2240      	movs	r2, #64	; 0x40
 800197c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2203      	movs	r2, #3
 8001982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e0b7      	b.n	8001afa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a5f      	ldr	r2, [pc, #380]	; (8001b0c <HAL_DMA_Init+0x658>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d072      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a5d      	ldr	r2, [pc, #372]	; (8001b10 <HAL_DMA_Init+0x65c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d06d      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a5c      	ldr	r2, [pc, #368]	; (8001b14 <HAL_DMA_Init+0x660>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d068      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a5a      	ldr	r2, [pc, #360]	; (8001b18 <HAL_DMA_Init+0x664>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d063      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a59      	ldr	r2, [pc, #356]	; (8001b1c <HAL_DMA_Init+0x668>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d05e      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a57      	ldr	r2, [pc, #348]	; (8001b20 <HAL_DMA_Init+0x66c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d059      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a56      	ldr	r2, [pc, #344]	; (8001b24 <HAL_DMA_Init+0x670>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d054      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a54      	ldr	r2, [pc, #336]	; (8001b28 <HAL_DMA_Init+0x674>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d04f      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a53      	ldr	r2, [pc, #332]	; (8001b2c <HAL_DMA_Init+0x678>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d04a      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a51      	ldr	r2, [pc, #324]	; (8001b30 <HAL_DMA_Init+0x67c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d045      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a50      	ldr	r2, [pc, #320]	; (8001b34 <HAL_DMA_Init+0x680>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d040      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a4e      	ldr	r2, [pc, #312]	; (8001b38 <HAL_DMA_Init+0x684>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d03b      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a4d      	ldr	r2, [pc, #308]	; (8001b3c <HAL_DMA_Init+0x688>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d036      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a4b      	ldr	r2, [pc, #300]	; (8001b40 <HAL_DMA_Init+0x68c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d031      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a4a      	ldr	r2, [pc, #296]	; (8001b44 <HAL_DMA_Init+0x690>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d02c      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a48      	ldr	r2, [pc, #288]	; (8001b48 <HAL_DMA_Init+0x694>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d027      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a47      	ldr	r2, [pc, #284]	; (8001b4c <HAL_DMA_Init+0x698>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d022      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a45      	ldr	r2, [pc, #276]	; (8001b50 <HAL_DMA_Init+0x69c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01d      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a44      	ldr	r2, [pc, #272]	; (8001b54 <HAL_DMA_Init+0x6a0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d018      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a42      	ldr	r2, [pc, #264]	; (8001b58 <HAL_DMA_Init+0x6a4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a41      	ldr	r2, [pc, #260]	; (8001b5c <HAL_DMA_Init+0x6a8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d00e      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a3f      	ldr	r2, [pc, #252]	; (8001b60 <HAL_DMA_Init+0x6ac>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d009      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a3e      	ldr	r2, [pc, #248]	; (8001b64 <HAL_DMA_Init+0x6b0>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d004      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a3c      	ldr	r2, [pc, #240]	; (8001b68 <HAL_DMA_Init+0x6b4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_DMA_Init+0x5ca>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_DMA_Init+0x5cc>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d032      	beq.n	8001aea <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f002 fa43 	bl	8003f10 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b80      	cmp	r3, #128	; 0x80
 8001a90:	d102      	bne.n	8001a98 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001aac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d010      	beq.n	8001ad8 <HAL_DMA_Init+0x624>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d80c      	bhi.n	8001ad8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f002 fac0 	bl	8004044 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	e008      	b.n	8001aea <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	a7fdabf8 	.word	0xa7fdabf8
 8001b08:	cccccccd 	.word	0xcccccccd
 8001b0c:	40020010 	.word	0x40020010
 8001b10:	40020028 	.word	0x40020028
 8001b14:	40020040 	.word	0x40020040
 8001b18:	40020058 	.word	0x40020058
 8001b1c:	40020070 	.word	0x40020070
 8001b20:	40020088 	.word	0x40020088
 8001b24:	400200a0 	.word	0x400200a0
 8001b28:	400200b8 	.word	0x400200b8
 8001b2c:	40020410 	.word	0x40020410
 8001b30:	40020428 	.word	0x40020428
 8001b34:	40020440 	.word	0x40020440
 8001b38:	40020458 	.word	0x40020458
 8001b3c:	40020470 	.word	0x40020470
 8001b40:	40020488 	.word	0x40020488
 8001b44:	400204a0 	.word	0x400204a0
 8001b48:	400204b8 	.word	0x400204b8
 8001b4c:	58025408 	.word	0x58025408
 8001b50:	5802541c 	.word	0x5802541c
 8001b54:	58025430 	.word	0x58025430
 8001b58:	58025444 	.word	0x58025444
 8001b5c:	58025458 	.word	0x58025458
 8001b60:	5802546c 	.word	0x5802546c
 8001b64:	58025480 	.word	0x58025480
 8001b68:	58025494 	.word	0x58025494

08001b6c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e226      	b.n	8001fd6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_DMA_Start_IT+0x2a>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e21f      	b.n	8001fd6 <HAL_DMA_Start_IT+0x46a>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	f040 820a 	bne.w	8001fc0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a68      	ldr	r2, [pc, #416]	; (8001d60 <HAL_DMA_Start_IT+0x1f4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d04a      	beq.n	8001c5a <HAL_DMA_Start_IT+0xee>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a66      	ldr	r2, [pc, #408]	; (8001d64 <HAL_DMA_Start_IT+0x1f8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d045      	beq.n	8001c5a <HAL_DMA_Start_IT+0xee>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a65      	ldr	r2, [pc, #404]	; (8001d68 <HAL_DMA_Start_IT+0x1fc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d040      	beq.n	8001c5a <HAL_DMA_Start_IT+0xee>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a63      	ldr	r2, [pc, #396]	; (8001d6c <HAL_DMA_Start_IT+0x200>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d03b      	beq.n	8001c5a <HAL_DMA_Start_IT+0xee>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a62      	ldr	r2, [pc, #392]	; (8001d70 <HAL_DMA_Start_IT+0x204>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d036      	beq.n	8001c5a <HAL_DMA_Start_IT+0xee>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a60      	ldr	r2, [pc, #384]	; (8001d74 <HAL_DMA_Start_IT+0x208>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d031      	beq.n	8001c5a <HAL_DMA_Start_IT+0xee>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a5f      	ldr	r2, [pc, #380]	; (8001d78 <HAL_DMA_Start_IT+0x20c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d02c      	beq.n	8001c5a <HAL_DMA_Start_IT+0xee>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a5d      	ldr	r2, [pc, #372]	; (8001d7c <HAL_DMA_Start_IT+0x210>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d027      	beq.n	8001c5a <HAL_DMA_Start_IT+0xee>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a5c      	ldr	r2, [pc, #368]	; (8001d80 <HAL_DMA_Start_IT+0x214>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d022      	beq.n	8001c5a <HAL_DMA_Start_IT+0xee>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a5a      	ldr	r2, [pc, #360]	; (8001d84 <HAL_DMA_Start_IT+0x218>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01d      	beq.n	8001c5a <HAL_DMA_Start_IT+0xee>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a59      	ldr	r2, [pc, #356]	; (8001d88 <HAL_DMA_Start_IT+0x21c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d018      	beq.n	8001c5a <HAL_DMA_Start_IT+0xee>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a57      	ldr	r2, [pc, #348]	; (8001d8c <HAL_DMA_Start_IT+0x220>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d013      	beq.n	8001c5a <HAL_DMA_Start_IT+0xee>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a56      	ldr	r2, [pc, #344]	; (8001d90 <HAL_DMA_Start_IT+0x224>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d00e      	beq.n	8001c5a <HAL_DMA_Start_IT+0xee>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a54      	ldr	r2, [pc, #336]	; (8001d94 <HAL_DMA_Start_IT+0x228>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d009      	beq.n	8001c5a <HAL_DMA_Start_IT+0xee>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a53      	ldr	r2, [pc, #332]	; (8001d98 <HAL_DMA_Start_IT+0x22c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d004      	beq.n	8001c5a <HAL_DMA_Start_IT+0xee>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a51      	ldr	r2, [pc, #324]	; (8001d9c <HAL_DMA_Start_IT+0x230>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d108      	bne.n	8001c6c <HAL_DMA_Start_IT+0x100>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0201 	bic.w	r2, r2, #1
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e007      	b.n	8001c7c <HAL_DMA_Start_IT+0x110>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f001 fe6a 	bl	800395c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a34      	ldr	r2, [pc, #208]	; (8001d60 <HAL_DMA_Start_IT+0x1f4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d04a      	beq.n	8001d28 <HAL_DMA_Start_IT+0x1bc>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a33      	ldr	r2, [pc, #204]	; (8001d64 <HAL_DMA_Start_IT+0x1f8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d045      	beq.n	8001d28 <HAL_DMA_Start_IT+0x1bc>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a31      	ldr	r2, [pc, #196]	; (8001d68 <HAL_DMA_Start_IT+0x1fc>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d040      	beq.n	8001d28 <HAL_DMA_Start_IT+0x1bc>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a30      	ldr	r2, [pc, #192]	; (8001d6c <HAL_DMA_Start_IT+0x200>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d03b      	beq.n	8001d28 <HAL_DMA_Start_IT+0x1bc>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a2e      	ldr	r2, [pc, #184]	; (8001d70 <HAL_DMA_Start_IT+0x204>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d036      	beq.n	8001d28 <HAL_DMA_Start_IT+0x1bc>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a2d      	ldr	r2, [pc, #180]	; (8001d74 <HAL_DMA_Start_IT+0x208>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d031      	beq.n	8001d28 <HAL_DMA_Start_IT+0x1bc>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a2b      	ldr	r2, [pc, #172]	; (8001d78 <HAL_DMA_Start_IT+0x20c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d02c      	beq.n	8001d28 <HAL_DMA_Start_IT+0x1bc>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a2a      	ldr	r2, [pc, #168]	; (8001d7c <HAL_DMA_Start_IT+0x210>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d027      	beq.n	8001d28 <HAL_DMA_Start_IT+0x1bc>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a28      	ldr	r2, [pc, #160]	; (8001d80 <HAL_DMA_Start_IT+0x214>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d022      	beq.n	8001d28 <HAL_DMA_Start_IT+0x1bc>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a27      	ldr	r2, [pc, #156]	; (8001d84 <HAL_DMA_Start_IT+0x218>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d01d      	beq.n	8001d28 <HAL_DMA_Start_IT+0x1bc>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a25      	ldr	r2, [pc, #148]	; (8001d88 <HAL_DMA_Start_IT+0x21c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d018      	beq.n	8001d28 <HAL_DMA_Start_IT+0x1bc>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a24      	ldr	r2, [pc, #144]	; (8001d8c <HAL_DMA_Start_IT+0x220>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d013      	beq.n	8001d28 <HAL_DMA_Start_IT+0x1bc>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <HAL_DMA_Start_IT+0x224>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00e      	beq.n	8001d28 <HAL_DMA_Start_IT+0x1bc>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a21      	ldr	r2, [pc, #132]	; (8001d94 <HAL_DMA_Start_IT+0x228>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d009      	beq.n	8001d28 <HAL_DMA_Start_IT+0x1bc>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1f      	ldr	r2, [pc, #124]	; (8001d98 <HAL_DMA_Start_IT+0x22c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d004      	beq.n	8001d28 <HAL_DMA_Start_IT+0x1bc>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1e      	ldr	r2, [pc, #120]	; (8001d9c <HAL_DMA_Start_IT+0x230>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d101      	bne.n	8001d2c <HAL_DMA_Start_IT+0x1c0>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <HAL_DMA_Start_IT+0x1c2>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d036      	beq.n	8001da0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 021e 	bic.w	r2, r3, #30
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0216 	orr.w	r2, r2, #22
 8001d44:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d03e      	beq.n	8001dcc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 0208 	orr.w	r2, r2, #8
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	e035      	b.n	8001dcc <HAL_DMA_Start_IT+0x260>
 8001d60:	40020010 	.word	0x40020010
 8001d64:	40020028 	.word	0x40020028
 8001d68:	40020040 	.word	0x40020040
 8001d6c:	40020058 	.word	0x40020058
 8001d70:	40020070 	.word	0x40020070
 8001d74:	40020088 	.word	0x40020088
 8001d78:	400200a0 	.word	0x400200a0
 8001d7c:	400200b8 	.word	0x400200b8
 8001d80:	40020410 	.word	0x40020410
 8001d84:	40020428 	.word	0x40020428
 8001d88:	40020440 	.word	0x40020440
 8001d8c:	40020458 	.word	0x40020458
 8001d90:	40020470 	.word	0x40020470
 8001d94:	40020488 	.word	0x40020488
 8001d98:	400204a0 	.word	0x400204a0
 8001d9c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 020e 	bic.w	r2, r3, #14
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 020a 	orr.w	r2, r2, #10
 8001db2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d007      	beq.n	8001dcc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0204 	orr.w	r2, r2, #4
 8001dca:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a83      	ldr	r2, [pc, #524]	; (8001fe0 <HAL_DMA_Start_IT+0x474>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d072      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a82      	ldr	r2, [pc, #520]	; (8001fe4 <HAL_DMA_Start_IT+0x478>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d06d      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a80      	ldr	r2, [pc, #512]	; (8001fe8 <HAL_DMA_Start_IT+0x47c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d068      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a7f      	ldr	r2, [pc, #508]	; (8001fec <HAL_DMA_Start_IT+0x480>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d063      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a7d      	ldr	r2, [pc, #500]	; (8001ff0 <HAL_DMA_Start_IT+0x484>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d05e      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a7c      	ldr	r2, [pc, #496]	; (8001ff4 <HAL_DMA_Start_IT+0x488>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d059      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a7a      	ldr	r2, [pc, #488]	; (8001ff8 <HAL_DMA_Start_IT+0x48c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d054      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a79      	ldr	r2, [pc, #484]	; (8001ffc <HAL_DMA_Start_IT+0x490>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d04f      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a77      	ldr	r2, [pc, #476]	; (8002000 <HAL_DMA_Start_IT+0x494>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d04a      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a76      	ldr	r2, [pc, #472]	; (8002004 <HAL_DMA_Start_IT+0x498>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d045      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a74      	ldr	r2, [pc, #464]	; (8002008 <HAL_DMA_Start_IT+0x49c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d040      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a73      	ldr	r2, [pc, #460]	; (800200c <HAL_DMA_Start_IT+0x4a0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d03b      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a71      	ldr	r2, [pc, #452]	; (8002010 <HAL_DMA_Start_IT+0x4a4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d036      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a70      	ldr	r2, [pc, #448]	; (8002014 <HAL_DMA_Start_IT+0x4a8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d031      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a6e      	ldr	r2, [pc, #440]	; (8002018 <HAL_DMA_Start_IT+0x4ac>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d02c      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a6d      	ldr	r2, [pc, #436]	; (800201c <HAL_DMA_Start_IT+0x4b0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d027      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a6b      	ldr	r2, [pc, #428]	; (8002020 <HAL_DMA_Start_IT+0x4b4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d022      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a6a      	ldr	r2, [pc, #424]	; (8002024 <HAL_DMA_Start_IT+0x4b8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d01d      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a68      	ldr	r2, [pc, #416]	; (8002028 <HAL_DMA_Start_IT+0x4bc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d018      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a67      	ldr	r2, [pc, #412]	; (800202c <HAL_DMA_Start_IT+0x4c0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d013      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a65      	ldr	r2, [pc, #404]	; (8002030 <HAL_DMA_Start_IT+0x4c4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00e      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a64      	ldr	r2, [pc, #400]	; (8002034 <HAL_DMA_Start_IT+0x4c8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d009      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a62      	ldr	r2, [pc, #392]	; (8002038 <HAL_DMA_Start_IT+0x4cc>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d004      	beq.n	8001ebc <HAL_DMA_Start_IT+0x350>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a61      	ldr	r2, [pc, #388]	; (800203c <HAL_DMA_Start_IT+0x4d0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_DMA_Start_IT+0x354>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <HAL_DMA_Start_IT+0x356>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d01a      	beq.n	8001efc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d007      	beq.n	8001ee4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ee2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d007      	beq.n	8001efc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001efa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a37      	ldr	r2, [pc, #220]	; (8001fe0 <HAL_DMA_Start_IT+0x474>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d04a      	beq.n	8001f9c <HAL_DMA_Start_IT+0x430>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a36      	ldr	r2, [pc, #216]	; (8001fe4 <HAL_DMA_Start_IT+0x478>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d045      	beq.n	8001f9c <HAL_DMA_Start_IT+0x430>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a34      	ldr	r2, [pc, #208]	; (8001fe8 <HAL_DMA_Start_IT+0x47c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d040      	beq.n	8001f9c <HAL_DMA_Start_IT+0x430>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a33      	ldr	r2, [pc, #204]	; (8001fec <HAL_DMA_Start_IT+0x480>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d03b      	beq.n	8001f9c <HAL_DMA_Start_IT+0x430>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a31      	ldr	r2, [pc, #196]	; (8001ff0 <HAL_DMA_Start_IT+0x484>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d036      	beq.n	8001f9c <HAL_DMA_Start_IT+0x430>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a30      	ldr	r2, [pc, #192]	; (8001ff4 <HAL_DMA_Start_IT+0x488>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d031      	beq.n	8001f9c <HAL_DMA_Start_IT+0x430>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a2e      	ldr	r2, [pc, #184]	; (8001ff8 <HAL_DMA_Start_IT+0x48c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d02c      	beq.n	8001f9c <HAL_DMA_Start_IT+0x430>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a2d      	ldr	r2, [pc, #180]	; (8001ffc <HAL_DMA_Start_IT+0x490>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d027      	beq.n	8001f9c <HAL_DMA_Start_IT+0x430>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a2b      	ldr	r2, [pc, #172]	; (8002000 <HAL_DMA_Start_IT+0x494>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d022      	beq.n	8001f9c <HAL_DMA_Start_IT+0x430>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a2a      	ldr	r2, [pc, #168]	; (8002004 <HAL_DMA_Start_IT+0x498>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d01d      	beq.n	8001f9c <HAL_DMA_Start_IT+0x430>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a28      	ldr	r2, [pc, #160]	; (8002008 <HAL_DMA_Start_IT+0x49c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d018      	beq.n	8001f9c <HAL_DMA_Start_IT+0x430>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a27      	ldr	r2, [pc, #156]	; (800200c <HAL_DMA_Start_IT+0x4a0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d013      	beq.n	8001f9c <HAL_DMA_Start_IT+0x430>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a25      	ldr	r2, [pc, #148]	; (8002010 <HAL_DMA_Start_IT+0x4a4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00e      	beq.n	8001f9c <HAL_DMA_Start_IT+0x430>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a24      	ldr	r2, [pc, #144]	; (8002014 <HAL_DMA_Start_IT+0x4a8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d009      	beq.n	8001f9c <HAL_DMA_Start_IT+0x430>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a22      	ldr	r2, [pc, #136]	; (8002018 <HAL_DMA_Start_IT+0x4ac>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d004      	beq.n	8001f9c <HAL_DMA_Start_IT+0x430>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a21      	ldr	r2, [pc, #132]	; (800201c <HAL_DMA_Start_IT+0x4b0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d108      	bne.n	8001fae <HAL_DMA_Start_IT+0x442>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e012      	b.n	8001fd4 <HAL_DMA_Start_IT+0x468>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0201 	orr.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	e009      	b.n	8001fd4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40020010 	.word	0x40020010
 8001fe4:	40020028 	.word	0x40020028
 8001fe8:	40020040 	.word	0x40020040
 8001fec:	40020058 	.word	0x40020058
 8001ff0:	40020070 	.word	0x40020070
 8001ff4:	40020088 	.word	0x40020088
 8001ff8:	400200a0 	.word	0x400200a0
 8001ffc:	400200b8 	.word	0x400200b8
 8002000:	40020410 	.word	0x40020410
 8002004:	40020428 	.word	0x40020428
 8002008:	40020440 	.word	0x40020440
 800200c:	40020458 	.word	0x40020458
 8002010:	40020470 	.word	0x40020470
 8002014:	40020488 	.word	0x40020488
 8002018:	400204a0 	.word	0x400204a0
 800201c:	400204b8 	.word	0x400204b8
 8002020:	58025408 	.word	0x58025408
 8002024:	5802541c 	.word	0x5802541c
 8002028:	58025430 	.word	0x58025430
 800202c:	58025444 	.word	0x58025444
 8002030:	58025458 	.word	0x58025458
 8002034:	5802546c 	.word	0x5802546c
 8002038:	58025480 	.word	0x58025480
 800203c:	58025494 	.word	0x58025494

08002040 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff f890 	bl	800116c <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e2dc      	b.n	8002612 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d008      	beq.n	8002076 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2280      	movs	r2, #128	; 0x80
 8002068:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e2cd      	b.n	8002612 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a76      	ldr	r2, [pc, #472]	; (8002254 <HAL_DMA_Abort+0x214>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d04a      	beq.n	8002116 <HAL_DMA_Abort+0xd6>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a74      	ldr	r2, [pc, #464]	; (8002258 <HAL_DMA_Abort+0x218>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d045      	beq.n	8002116 <HAL_DMA_Abort+0xd6>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a73      	ldr	r2, [pc, #460]	; (800225c <HAL_DMA_Abort+0x21c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d040      	beq.n	8002116 <HAL_DMA_Abort+0xd6>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a71      	ldr	r2, [pc, #452]	; (8002260 <HAL_DMA_Abort+0x220>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d03b      	beq.n	8002116 <HAL_DMA_Abort+0xd6>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a70      	ldr	r2, [pc, #448]	; (8002264 <HAL_DMA_Abort+0x224>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d036      	beq.n	8002116 <HAL_DMA_Abort+0xd6>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a6e      	ldr	r2, [pc, #440]	; (8002268 <HAL_DMA_Abort+0x228>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d031      	beq.n	8002116 <HAL_DMA_Abort+0xd6>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a6d      	ldr	r2, [pc, #436]	; (800226c <HAL_DMA_Abort+0x22c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d02c      	beq.n	8002116 <HAL_DMA_Abort+0xd6>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a6b      	ldr	r2, [pc, #428]	; (8002270 <HAL_DMA_Abort+0x230>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d027      	beq.n	8002116 <HAL_DMA_Abort+0xd6>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a6a      	ldr	r2, [pc, #424]	; (8002274 <HAL_DMA_Abort+0x234>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d022      	beq.n	8002116 <HAL_DMA_Abort+0xd6>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a68      	ldr	r2, [pc, #416]	; (8002278 <HAL_DMA_Abort+0x238>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d01d      	beq.n	8002116 <HAL_DMA_Abort+0xd6>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a67      	ldr	r2, [pc, #412]	; (800227c <HAL_DMA_Abort+0x23c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d018      	beq.n	8002116 <HAL_DMA_Abort+0xd6>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a65      	ldr	r2, [pc, #404]	; (8002280 <HAL_DMA_Abort+0x240>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_DMA_Abort+0xd6>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a64      	ldr	r2, [pc, #400]	; (8002284 <HAL_DMA_Abort+0x244>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00e      	beq.n	8002116 <HAL_DMA_Abort+0xd6>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a62      	ldr	r2, [pc, #392]	; (8002288 <HAL_DMA_Abort+0x248>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d009      	beq.n	8002116 <HAL_DMA_Abort+0xd6>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a61      	ldr	r2, [pc, #388]	; (800228c <HAL_DMA_Abort+0x24c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d004      	beq.n	8002116 <HAL_DMA_Abort+0xd6>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a5f      	ldr	r2, [pc, #380]	; (8002290 <HAL_DMA_Abort+0x250>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d101      	bne.n	800211a <HAL_DMA_Abort+0xda>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_DMA_Abort+0xdc>
 800211a:	2300      	movs	r3, #0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d013      	beq.n	8002148 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 021e 	bic.w	r2, r2, #30
 800212e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800213e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	e00a      	b.n	800215e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 020e 	bic.w	r2, r2, #14
 8002156:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a3c      	ldr	r2, [pc, #240]	; (8002254 <HAL_DMA_Abort+0x214>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d072      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a3a      	ldr	r2, [pc, #232]	; (8002258 <HAL_DMA_Abort+0x218>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d06d      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a39      	ldr	r2, [pc, #228]	; (800225c <HAL_DMA_Abort+0x21c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d068      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a37      	ldr	r2, [pc, #220]	; (8002260 <HAL_DMA_Abort+0x220>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d063      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a36      	ldr	r2, [pc, #216]	; (8002264 <HAL_DMA_Abort+0x224>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d05e      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a34      	ldr	r2, [pc, #208]	; (8002268 <HAL_DMA_Abort+0x228>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d059      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a33      	ldr	r2, [pc, #204]	; (800226c <HAL_DMA_Abort+0x22c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d054      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a31      	ldr	r2, [pc, #196]	; (8002270 <HAL_DMA_Abort+0x230>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d04f      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a30      	ldr	r2, [pc, #192]	; (8002274 <HAL_DMA_Abort+0x234>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d04a      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a2e      	ldr	r2, [pc, #184]	; (8002278 <HAL_DMA_Abort+0x238>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d045      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a2d      	ldr	r2, [pc, #180]	; (800227c <HAL_DMA_Abort+0x23c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d040      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a2b      	ldr	r2, [pc, #172]	; (8002280 <HAL_DMA_Abort+0x240>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d03b      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a2a      	ldr	r2, [pc, #168]	; (8002284 <HAL_DMA_Abort+0x244>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d036      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a28      	ldr	r2, [pc, #160]	; (8002288 <HAL_DMA_Abort+0x248>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d031      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a27      	ldr	r2, [pc, #156]	; (800228c <HAL_DMA_Abort+0x24c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d02c      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a25      	ldr	r2, [pc, #148]	; (8002290 <HAL_DMA_Abort+0x250>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d027      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a24      	ldr	r2, [pc, #144]	; (8002294 <HAL_DMA_Abort+0x254>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d022      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a22      	ldr	r2, [pc, #136]	; (8002298 <HAL_DMA_Abort+0x258>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d01d      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a21      	ldr	r2, [pc, #132]	; (800229c <HAL_DMA_Abort+0x25c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d018      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <HAL_DMA_Abort+0x260>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d013      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a1e      	ldr	r2, [pc, #120]	; (80022a4 <HAL_DMA_Abort+0x264>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00e      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <HAL_DMA_Abort+0x268>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d009      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <HAL_DMA_Abort+0x26c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <HAL_DMA_Abort+0x20e>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a19      	ldr	r2, [pc, #100]	; (80022b0 <HAL_DMA_Abort+0x270>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d132      	bne.n	80022b4 <HAL_DMA_Abort+0x274>
 800224e:	2301      	movs	r3, #1
 8002250:	e031      	b.n	80022b6 <HAL_DMA_Abort+0x276>
 8002252:	bf00      	nop
 8002254:	40020010 	.word	0x40020010
 8002258:	40020028 	.word	0x40020028
 800225c:	40020040 	.word	0x40020040
 8002260:	40020058 	.word	0x40020058
 8002264:	40020070 	.word	0x40020070
 8002268:	40020088 	.word	0x40020088
 800226c:	400200a0 	.word	0x400200a0
 8002270:	400200b8 	.word	0x400200b8
 8002274:	40020410 	.word	0x40020410
 8002278:	40020428 	.word	0x40020428
 800227c:	40020440 	.word	0x40020440
 8002280:	40020458 	.word	0x40020458
 8002284:	40020470 	.word	0x40020470
 8002288:	40020488 	.word	0x40020488
 800228c:	400204a0 	.word	0x400204a0
 8002290:	400204b8 	.word	0x400204b8
 8002294:	58025408 	.word	0x58025408
 8002298:	5802541c 	.word	0x5802541c
 800229c:	58025430 	.word	0x58025430
 80022a0:	58025444 	.word	0x58025444
 80022a4:	58025458 	.word	0x58025458
 80022a8:	5802546c 	.word	0x5802546c
 80022ac:	58025480 	.word	0x58025480
 80022b0:	58025494 	.word	0x58025494
 80022b4:	2300      	movs	r3, #0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d007      	beq.n	80022ca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a6d      	ldr	r2, [pc, #436]	; (8002484 <HAL_DMA_Abort+0x444>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d04a      	beq.n	800236a <HAL_DMA_Abort+0x32a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a6b      	ldr	r2, [pc, #428]	; (8002488 <HAL_DMA_Abort+0x448>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d045      	beq.n	800236a <HAL_DMA_Abort+0x32a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a6a      	ldr	r2, [pc, #424]	; (800248c <HAL_DMA_Abort+0x44c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d040      	beq.n	800236a <HAL_DMA_Abort+0x32a>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a68      	ldr	r2, [pc, #416]	; (8002490 <HAL_DMA_Abort+0x450>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d03b      	beq.n	800236a <HAL_DMA_Abort+0x32a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a67      	ldr	r2, [pc, #412]	; (8002494 <HAL_DMA_Abort+0x454>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d036      	beq.n	800236a <HAL_DMA_Abort+0x32a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a65      	ldr	r2, [pc, #404]	; (8002498 <HAL_DMA_Abort+0x458>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d031      	beq.n	800236a <HAL_DMA_Abort+0x32a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a64      	ldr	r2, [pc, #400]	; (800249c <HAL_DMA_Abort+0x45c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d02c      	beq.n	800236a <HAL_DMA_Abort+0x32a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a62      	ldr	r2, [pc, #392]	; (80024a0 <HAL_DMA_Abort+0x460>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d027      	beq.n	800236a <HAL_DMA_Abort+0x32a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a61      	ldr	r2, [pc, #388]	; (80024a4 <HAL_DMA_Abort+0x464>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d022      	beq.n	800236a <HAL_DMA_Abort+0x32a>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a5f      	ldr	r2, [pc, #380]	; (80024a8 <HAL_DMA_Abort+0x468>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d01d      	beq.n	800236a <HAL_DMA_Abort+0x32a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a5e      	ldr	r2, [pc, #376]	; (80024ac <HAL_DMA_Abort+0x46c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d018      	beq.n	800236a <HAL_DMA_Abort+0x32a>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a5c      	ldr	r2, [pc, #368]	; (80024b0 <HAL_DMA_Abort+0x470>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <HAL_DMA_Abort+0x32a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a5b      	ldr	r2, [pc, #364]	; (80024b4 <HAL_DMA_Abort+0x474>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d00e      	beq.n	800236a <HAL_DMA_Abort+0x32a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a59      	ldr	r2, [pc, #356]	; (80024b8 <HAL_DMA_Abort+0x478>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d009      	beq.n	800236a <HAL_DMA_Abort+0x32a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a58      	ldr	r2, [pc, #352]	; (80024bc <HAL_DMA_Abort+0x47c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d004      	beq.n	800236a <HAL_DMA_Abort+0x32a>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a56      	ldr	r2, [pc, #344]	; (80024c0 <HAL_DMA_Abort+0x480>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d108      	bne.n	800237c <HAL_DMA_Abort+0x33c>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e007      	b.n	800238c <HAL_DMA_Abort+0x34c>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0201 	bic.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800238c:	e013      	b.n	80023b6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800238e:	f7fe feed 	bl	800116c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b05      	cmp	r3, #5
 800239a:	d90c      	bls.n	80023b6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2220      	movs	r2, #32
 80023a0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2203      	movs	r2, #3
 80023a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e12d      	b.n	8002612 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1e5      	bne.n	800238e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a2f      	ldr	r2, [pc, #188]	; (8002484 <HAL_DMA_Abort+0x444>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d04a      	beq.n	8002462 <HAL_DMA_Abort+0x422>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a2d      	ldr	r2, [pc, #180]	; (8002488 <HAL_DMA_Abort+0x448>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d045      	beq.n	8002462 <HAL_DMA_Abort+0x422>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a2c      	ldr	r2, [pc, #176]	; (800248c <HAL_DMA_Abort+0x44c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d040      	beq.n	8002462 <HAL_DMA_Abort+0x422>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a2a      	ldr	r2, [pc, #168]	; (8002490 <HAL_DMA_Abort+0x450>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d03b      	beq.n	8002462 <HAL_DMA_Abort+0x422>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a29      	ldr	r2, [pc, #164]	; (8002494 <HAL_DMA_Abort+0x454>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d036      	beq.n	8002462 <HAL_DMA_Abort+0x422>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a27      	ldr	r2, [pc, #156]	; (8002498 <HAL_DMA_Abort+0x458>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d031      	beq.n	8002462 <HAL_DMA_Abort+0x422>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a26      	ldr	r2, [pc, #152]	; (800249c <HAL_DMA_Abort+0x45c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d02c      	beq.n	8002462 <HAL_DMA_Abort+0x422>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a24      	ldr	r2, [pc, #144]	; (80024a0 <HAL_DMA_Abort+0x460>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d027      	beq.n	8002462 <HAL_DMA_Abort+0x422>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <HAL_DMA_Abort+0x464>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d022      	beq.n	8002462 <HAL_DMA_Abort+0x422>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a21      	ldr	r2, [pc, #132]	; (80024a8 <HAL_DMA_Abort+0x468>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d01d      	beq.n	8002462 <HAL_DMA_Abort+0x422>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a20      	ldr	r2, [pc, #128]	; (80024ac <HAL_DMA_Abort+0x46c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d018      	beq.n	8002462 <HAL_DMA_Abort+0x422>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a1e      	ldr	r2, [pc, #120]	; (80024b0 <HAL_DMA_Abort+0x470>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d013      	beq.n	8002462 <HAL_DMA_Abort+0x422>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1d      	ldr	r2, [pc, #116]	; (80024b4 <HAL_DMA_Abort+0x474>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d00e      	beq.n	8002462 <HAL_DMA_Abort+0x422>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1b      	ldr	r2, [pc, #108]	; (80024b8 <HAL_DMA_Abort+0x478>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d009      	beq.n	8002462 <HAL_DMA_Abort+0x422>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a1a      	ldr	r2, [pc, #104]	; (80024bc <HAL_DMA_Abort+0x47c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d004      	beq.n	8002462 <HAL_DMA_Abort+0x422>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a18      	ldr	r2, [pc, #96]	; (80024c0 <HAL_DMA_Abort+0x480>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <HAL_DMA_Abort+0x426>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_DMA_Abort+0x428>
 8002466:	2300      	movs	r3, #0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d02b      	beq.n	80024c4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002470:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	223f      	movs	r2, #63	; 0x3f
 800247c:	409a      	lsls	r2, r3
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	e02a      	b.n	80024da <HAL_DMA_Abort+0x49a>
 8002484:	40020010 	.word	0x40020010
 8002488:	40020028 	.word	0x40020028
 800248c:	40020040 	.word	0x40020040
 8002490:	40020058 	.word	0x40020058
 8002494:	40020070 	.word	0x40020070
 8002498:	40020088 	.word	0x40020088
 800249c:	400200a0 	.word	0x400200a0
 80024a0:	400200b8 	.word	0x400200b8
 80024a4:	40020410 	.word	0x40020410
 80024a8:	40020428 	.word	0x40020428
 80024ac:	40020440 	.word	0x40020440
 80024b0:	40020458 	.word	0x40020458
 80024b4:	40020470 	.word	0x40020470
 80024b8:	40020488 	.word	0x40020488
 80024bc:	400204a0 	.word	0x400204a0
 80024c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	2201      	movs	r2, #1
 80024d4:	409a      	lsls	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a4f      	ldr	r2, [pc, #316]	; (800261c <HAL_DMA_Abort+0x5dc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d072      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a4d      	ldr	r2, [pc, #308]	; (8002620 <HAL_DMA_Abort+0x5e0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d06d      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a4c      	ldr	r2, [pc, #304]	; (8002624 <HAL_DMA_Abort+0x5e4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d068      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a4a      	ldr	r2, [pc, #296]	; (8002628 <HAL_DMA_Abort+0x5e8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d063      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a49      	ldr	r2, [pc, #292]	; (800262c <HAL_DMA_Abort+0x5ec>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d05e      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a47      	ldr	r2, [pc, #284]	; (8002630 <HAL_DMA_Abort+0x5f0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d059      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a46      	ldr	r2, [pc, #280]	; (8002634 <HAL_DMA_Abort+0x5f4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d054      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a44      	ldr	r2, [pc, #272]	; (8002638 <HAL_DMA_Abort+0x5f8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d04f      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a43      	ldr	r2, [pc, #268]	; (800263c <HAL_DMA_Abort+0x5fc>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d04a      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a41      	ldr	r2, [pc, #260]	; (8002640 <HAL_DMA_Abort+0x600>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d045      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a40      	ldr	r2, [pc, #256]	; (8002644 <HAL_DMA_Abort+0x604>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d040      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a3e      	ldr	r2, [pc, #248]	; (8002648 <HAL_DMA_Abort+0x608>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d03b      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a3d      	ldr	r2, [pc, #244]	; (800264c <HAL_DMA_Abort+0x60c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d036      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a3b      	ldr	r2, [pc, #236]	; (8002650 <HAL_DMA_Abort+0x610>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d031      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a3a      	ldr	r2, [pc, #232]	; (8002654 <HAL_DMA_Abort+0x614>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d02c      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a38      	ldr	r2, [pc, #224]	; (8002658 <HAL_DMA_Abort+0x618>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d027      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a37      	ldr	r2, [pc, #220]	; (800265c <HAL_DMA_Abort+0x61c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d022      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a35      	ldr	r2, [pc, #212]	; (8002660 <HAL_DMA_Abort+0x620>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d01d      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a34      	ldr	r2, [pc, #208]	; (8002664 <HAL_DMA_Abort+0x624>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d018      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a32      	ldr	r2, [pc, #200]	; (8002668 <HAL_DMA_Abort+0x628>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d013      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a31      	ldr	r2, [pc, #196]	; (800266c <HAL_DMA_Abort+0x62c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d00e      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a2f      	ldr	r2, [pc, #188]	; (8002670 <HAL_DMA_Abort+0x630>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d009      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a2e      	ldr	r2, [pc, #184]	; (8002674 <HAL_DMA_Abort+0x634>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d004      	beq.n	80025ca <HAL_DMA_Abort+0x58a>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a2c      	ldr	r2, [pc, #176]	; (8002678 <HAL_DMA_Abort+0x638>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d101      	bne.n	80025ce <HAL_DMA_Abort+0x58e>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <HAL_DMA_Abort+0x590>
 80025ce:	2300      	movs	r3, #0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d015      	beq.n	8002600 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80025dc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00c      	beq.n	8002600 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025f4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025fe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40020010 	.word	0x40020010
 8002620:	40020028 	.word	0x40020028
 8002624:	40020040 	.word	0x40020040
 8002628:	40020058 	.word	0x40020058
 800262c:	40020070 	.word	0x40020070
 8002630:	40020088 	.word	0x40020088
 8002634:	400200a0 	.word	0x400200a0
 8002638:	400200b8 	.word	0x400200b8
 800263c:	40020410 	.word	0x40020410
 8002640:	40020428 	.word	0x40020428
 8002644:	40020440 	.word	0x40020440
 8002648:	40020458 	.word	0x40020458
 800264c:	40020470 	.word	0x40020470
 8002650:	40020488 	.word	0x40020488
 8002654:	400204a0 	.word	0x400204a0
 8002658:	400204b8 	.word	0x400204b8
 800265c:	58025408 	.word	0x58025408
 8002660:	5802541c 	.word	0x5802541c
 8002664:	58025430 	.word	0x58025430
 8002668:	58025444 	.word	0x58025444
 800266c:	58025458 	.word	0x58025458
 8002670:	5802546c 	.word	0x5802546c
 8002674:	58025480 	.word	0x58025480
 8002678:	58025494 	.word	0x58025494

0800267c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e237      	b.n	8002afe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d004      	beq.n	80026a4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e22c      	b.n	8002afe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a5c      	ldr	r2, [pc, #368]	; (800281c <HAL_DMA_Abort_IT+0x1a0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d04a      	beq.n	8002744 <HAL_DMA_Abort_IT+0xc8>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a5b      	ldr	r2, [pc, #364]	; (8002820 <HAL_DMA_Abort_IT+0x1a4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d045      	beq.n	8002744 <HAL_DMA_Abort_IT+0xc8>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a59      	ldr	r2, [pc, #356]	; (8002824 <HAL_DMA_Abort_IT+0x1a8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d040      	beq.n	8002744 <HAL_DMA_Abort_IT+0xc8>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a58      	ldr	r2, [pc, #352]	; (8002828 <HAL_DMA_Abort_IT+0x1ac>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d03b      	beq.n	8002744 <HAL_DMA_Abort_IT+0xc8>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a56      	ldr	r2, [pc, #344]	; (800282c <HAL_DMA_Abort_IT+0x1b0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d036      	beq.n	8002744 <HAL_DMA_Abort_IT+0xc8>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a55      	ldr	r2, [pc, #340]	; (8002830 <HAL_DMA_Abort_IT+0x1b4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d031      	beq.n	8002744 <HAL_DMA_Abort_IT+0xc8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a53      	ldr	r2, [pc, #332]	; (8002834 <HAL_DMA_Abort_IT+0x1b8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d02c      	beq.n	8002744 <HAL_DMA_Abort_IT+0xc8>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a52      	ldr	r2, [pc, #328]	; (8002838 <HAL_DMA_Abort_IT+0x1bc>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d027      	beq.n	8002744 <HAL_DMA_Abort_IT+0xc8>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a50      	ldr	r2, [pc, #320]	; (800283c <HAL_DMA_Abort_IT+0x1c0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d022      	beq.n	8002744 <HAL_DMA_Abort_IT+0xc8>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a4f      	ldr	r2, [pc, #316]	; (8002840 <HAL_DMA_Abort_IT+0x1c4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d01d      	beq.n	8002744 <HAL_DMA_Abort_IT+0xc8>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a4d      	ldr	r2, [pc, #308]	; (8002844 <HAL_DMA_Abort_IT+0x1c8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d018      	beq.n	8002744 <HAL_DMA_Abort_IT+0xc8>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a4c      	ldr	r2, [pc, #304]	; (8002848 <HAL_DMA_Abort_IT+0x1cc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d013      	beq.n	8002744 <HAL_DMA_Abort_IT+0xc8>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a4a      	ldr	r2, [pc, #296]	; (800284c <HAL_DMA_Abort_IT+0x1d0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00e      	beq.n	8002744 <HAL_DMA_Abort_IT+0xc8>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a49      	ldr	r2, [pc, #292]	; (8002850 <HAL_DMA_Abort_IT+0x1d4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d009      	beq.n	8002744 <HAL_DMA_Abort_IT+0xc8>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a47      	ldr	r2, [pc, #284]	; (8002854 <HAL_DMA_Abort_IT+0x1d8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d004      	beq.n	8002744 <HAL_DMA_Abort_IT+0xc8>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a46      	ldr	r2, [pc, #280]	; (8002858 <HAL_DMA_Abort_IT+0x1dc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d101      	bne.n	8002748 <HAL_DMA_Abort_IT+0xcc>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <HAL_DMA_Abort_IT+0xce>
 8002748:	2300      	movs	r3, #0
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 8086 	beq.w	800285c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2204      	movs	r2, #4
 8002754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a2f      	ldr	r2, [pc, #188]	; (800281c <HAL_DMA_Abort_IT+0x1a0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d04a      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x17c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a2e      	ldr	r2, [pc, #184]	; (8002820 <HAL_DMA_Abort_IT+0x1a4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d045      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x17c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2c      	ldr	r2, [pc, #176]	; (8002824 <HAL_DMA_Abort_IT+0x1a8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d040      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x17c>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a2b      	ldr	r2, [pc, #172]	; (8002828 <HAL_DMA_Abort_IT+0x1ac>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d03b      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x17c>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a29      	ldr	r2, [pc, #164]	; (800282c <HAL_DMA_Abort_IT+0x1b0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d036      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x17c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a28      	ldr	r2, [pc, #160]	; (8002830 <HAL_DMA_Abort_IT+0x1b4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d031      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x17c>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a26      	ldr	r2, [pc, #152]	; (8002834 <HAL_DMA_Abort_IT+0x1b8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d02c      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x17c>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a25      	ldr	r2, [pc, #148]	; (8002838 <HAL_DMA_Abort_IT+0x1bc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d027      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x17c>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a23      	ldr	r2, [pc, #140]	; (800283c <HAL_DMA_Abort_IT+0x1c0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d022      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x17c>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a22      	ldr	r2, [pc, #136]	; (8002840 <HAL_DMA_Abort_IT+0x1c4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d01d      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x17c>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a20      	ldr	r2, [pc, #128]	; (8002844 <HAL_DMA_Abort_IT+0x1c8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d018      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x17c>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a1f      	ldr	r2, [pc, #124]	; (8002848 <HAL_DMA_Abort_IT+0x1cc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d013      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x17c>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1d      	ldr	r2, [pc, #116]	; (800284c <HAL_DMA_Abort_IT+0x1d0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00e      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x17c>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1c      	ldr	r2, [pc, #112]	; (8002850 <HAL_DMA_Abort_IT+0x1d4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d009      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x17c>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1a      	ldr	r2, [pc, #104]	; (8002854 <HAL_DMA_Abort_IT+0x1d8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d004      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x17c>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a19      	ldr	r2, [pc, #100]	; (8002858 <HAL_DMA_Abort_IT+0x1dc>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d108      	bne.n	800280a <HAL_DMA_Abort_IT+0x18e>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e178      	b.n	8002afc <HAL_DMA_Abort_IT+0x480>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0201 	bic.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	e16f      	b.n	8002afc <HAL_DMA_Abort_IT+0x480>
 800281c:	40020010 	.word	0x40020010
 8002820:	40020028 	.word	0x40020028
 8002824:	40020040 	.word	0x40020040
 8002828:	40020058 	.word	0x40020058
 800282c:	40020070 	.word	0x40020070
 8002830:	40020088 	.word	0x40020088
 8002834:	400200a0 	.word	0x400200a0
 8002838:	400200b8 	.word	0x400200b8
 800283c:	40020410 	.word	0x40020410
 8002840:	40020428 	.word	0x40020428
 8002844:	40020440 	.word	0x40020440
 8002848:	40020458 	.word	0x40020458
 800284c:	40020470 	.word	0x40020470
 8002850:	40020488 	.word	0x40020488
 8002854:	400204a0 	.word	0x400204a0
 8002858:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 020e 	bic.w	r2, r2, #14
 800286a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a6c      	ldr	r2, [pc, #432]	; (8002a24 <HAL_DMA_Abort_IT+0x3a8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d04a      	beq.n	800290c <HAL_DMA_Abort_IT+0x290>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6b      	ldr	r2, [pc, #428]	; (8002a28 <HAL_DMA_Abort_IT+0x3ac>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d045      	beq.n	800290c <HAL_DMA_Abort_IT+0x290>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a69      	ldr	r2, [pc, #420]	; (8002a2c <HAL_DMA_Abort_IT+0x3b0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d040      	beq.n	800290c <HAL_DMA_Abort_IT+0x290>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a68      	ldr	r2, [pc, #416]	; (8002a30 <HAL_DMA_Abort_IT+0x3b4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d03b      	beq.n	800290c <HAL_DMA_Abort_IT+0x290>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a66      	ldr	r2, [pc, #408]	; (8002a34 <HAL_DMA_Abort_IT+0x3b8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d036      	beq.n	800290c <HAL_DMA_Abort_IT+0x290>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a65      	ldr	r2, [pc, #404]	; (8002a38 <HAL_DMA_Abort_IT+0x3bc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d031      	beq.n	800290c <HAL_DMA_Abort_IT+0x290>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a63      	ldr	r2, [pc, #396]	; (8002a3c <HAL_DMA_Abort_IT+0x3c0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d02c      	beq.n	800290c <HAL_DMA_Abort_IT+0x290>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a62      	ldr	r2, [pc, #392]	; (8002a40 <HAL_DMA_Abort_IT+0x3c4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d027      	beq.n	800290c <HAL_DMA_Abort_IT+0x290>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a60      	ldr	r2, [pc, #384]	; (8002a44 <HAL_DMA_Abort_IT+0x3c8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d022      	beq.n	800290c <HAL_DMA_Abort_IT+0x290>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a5f      	ldr	r2, [pc, #380]	; (8002a48 <HAL_DMA_Abort_IT+0x3cc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d01d      	beq.n	800290c <HAL_DMA_Abort_IT+0x290>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a5d      	ldr	r2, [pc, #372]	; (8002a4c <HAL_DMA_Abort_IT+0x3d0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d018      	beq.n	800290c <HAL_DMA_Abort_IT+0x290>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a5c      	ldr	r2, [pc, #368]	; (8002a50 <HAL_DMA_Abort_IT+0x3d4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d013      	beq.n	800290c <HAL_DMA_Abort_IT+0x290>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a5a      	ldr	r2, [pc, #360]	; (8002a54 <HAL_DMA_Abort_IT+0x3d8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00e      	beq.n	800290c <HAL_DMA_Abort_IT+0x290>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a59      	ldr	r2, [pc, #356]	; (8002a58 <HAL_DMA_Abort_IT+0x3dc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d009      	beq.n	800290c <HAL_DMA_Abort_IT+0x290>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a57      	ldr	r2, [pc, #348]	; (8002a5c <HAL_DMA_Abort_IT+0x3e0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d004      	beq.n	800290c <HAL_DMA_Abort_IT+0x290>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a56      	ldr	r2, [pc, #344]	; (8002a60 <HAL_DMA_Abort_IT+0x3e4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d108      	bne.n	800291e <HAL_DMA_Abort_IT+0x2a2>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0201 	bic.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e007      	b.n	800292e <HAL_DMA_Abort_IT+0x2b2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0201 	bic.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a3c      	ldr	r2, [pc, #240]	; (8002a24 <HAL_DMA_Abort_IT+0x3a8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d072      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a3a      	ldr	r2, [pc, #232]	; (8002a28 <HAL_DMA_Abort_IT+0x3ac>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d06d      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a39      	ldr	r2, [pc, #228]	; (8002a2c <HAL_DMA_Abort_IT+0x3b0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d068      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a37      	ldr	r2, [pc, #220]	; (8002a30 <HAL_DMA_Abort_IT+0x3b4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d063      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a36      	ldr	r2, [pc, #216]	; (8002a34 <HAL_DMA_Abort_IT+0x3b8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d05e      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a34      	ldr	r2, [pc, #208]	; (8002a38 <HAL_DMA_Abort_IT+0x3bc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d059      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a33      	ldr	r2, [pc, #204]	; (8002a3c <HAL_DMA_Abort_IT+0x3c0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d054      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a31      	ldr	r2, [pc, #196]	; (8002a40 <HAL_DMA_Abort_IT+0x3c4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d04f      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a30      	ldr	r2, [pc, #192]	; (8002a44 <HAL_DMA_Abort_IT+0x3c8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d04a      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a2e      	ldr	r2, [pc, #184]	; (8002a48 <HAL_DMA_Abort_IT+0x3cc>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d045      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a2d      	ldr	r2, [pc, #180]	; (8002a4c <HAL_DMA_Abort_IT+0x3d0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d040      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a2b      	ldr	r2, [pc, #172]	; (8002a50 <HAL_DMA_Abort_IT+0x3d4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d03b      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a2a      	ldr	r2, [pc, #168]	; (8002a54 <HAL_DMA_Abort_IT+0x3d8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d036      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a28      	ldr	r2, [pc, #160]	; (8002a58 <HAL_DMA_Abort_IT+0x3dc>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d031      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a27      	ldr	r2, [pc, #156]	; (8002a5c <HAL_DMA_Abort_IT+0x3e0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d02c      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a25      	ldr	r2, [pc, #148]	; (8002a60 <HAL_DMA_Abort_IT+0x3e4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d027      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a24      	ldr	r2, [pc, #144]	; (8002a64 <HAL_DMA_Abort_IT+0x3e8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d022      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a22      	ldr	r2, [pc, #136]	; (8002a68 <HAL_DMA_Abort_IT+0x3ec>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d01d      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a21      	ldr	r2, [pc, #132]	; (8002a6c <HAL_DMA_Abort_IT+0x3f0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d018      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1f      	ldr	r2, [pc, #124]	; (8002a70 <HAL_DMA_Abort_IT+0x3f4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d013      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <HAL_DMA_Abort_IT+0x3f8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00e      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1c      	ldr	r2, [pc, #112]	; (8002a78 <HAL_DMA_Abort_IT+0x3fc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d009      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1b      	ldr	r2, [pc, #108]	; (8002a7c <HAL_DMA_Abort_IT+0x400>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d004      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x3a2>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <HAL_DMA_Abort_IT+0x404>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d132      	bne.n	8002a84 <HAL_DMA_Abort_IT+0x408>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e031      	b.n	8002a86 <HAL_DMA_Abort_IT+0x40a>
 8002a22:	bf00      	nop
 8002a24:	40020010 	.word	0x40020010
 8002a28:	40020028 	.word	0x40020028
 8002a2c:	40020040 	.word	0x40020040
 8002a30:	40020058 	.word	0x40020058
 8002a34:	40020070 	.word	0x40020070
 8002a38:	40020088 	.word	0x40020088
 8002a3c:	400200a0 	.word	0x400200a0
 8002a40:	400200b8 	.word	0x400200b8
 8002a44:	40020410 	.word	0x40020410
 8002a48:	40020428 	.word	0x40020428
 8002a4c:	40020440 	.word	0x40020440
 8002a50:	40020458 	.word	0x40020458
 8002a54:	40020470 	.word	0x40020470
 8002a58:	40020488 	.word	0x40020488
 8002a5c:	400204a0 	.word	0x400204a0
 8002a60:	400204b8 	.word	0x400204b8
 8002a64:	58025408 	.word	0x58025408
 8002a68:	5802541c 	.word	0x5802541c
 8002a6c:	58025430 	.word	0x58025430
 8002a70:	58025444 	.word	0x58025444
 8002a74:	58025458 	.word	0x58025458
 8002a78:	5802546c 	.word	0x5802546c
 8002a7c:	58025480 	.word	0x58025480
 8002a80:	58025494 	.word	0x58025494
 8002a84:	2300      	movs	r3, #0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d028      	beq.n	8002adc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a98:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ab8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00c      	beq.n	8002adc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002acc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ad0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ada:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop

08002b08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b14:	4b67      	ldr	r3, [pc, #412]	; (8002cb4 <HAL_DMA_IRQHandler+0x1ac>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a67      	ldr	r2, [pc, #412]	; (8002cb8 <HAL_DMA_IRQHandler+0x1b0>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	0a9b      	lsrs	r3, r3, #10
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b26:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a5f      	ldr	r2, [pc, #380]	; (8002cbc <HAL_DMA_IRQHandler+0x1b4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d04a      	beq.n	8002bda <HAL_DMA_IRQHandler+0xd2>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a5d      	ldr	r2, [pc, #372]	; (8002cc0 <HAL_DMA_IRQHandler+0x1b8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d045      	beq.n	8002bda <HAL_DMA_IRQHandler+0xd2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a5c      	ldr	r2, [pc, #368]	; (8002cc4 <HAL_DMA_IRQHandler+0x1bc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d040      	beq.n	8002bda <HAL_DMA_IRQHandler+0xd2>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a5a      	ldr	r2, [pc, #360]	; (8002cc8 <HAL_DMA_IRQHandler+0x1c0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d03b      	beq.n	8002bda <HAL_DMA_IRQHandler+0xd2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a59      	ldr	r2, [pc, #356]	; (8002ccc <HAL_DMA_IRQHandler+0x1c4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d036      	beq.n	8002bda <HAL_DMA_IRQHandler+0xd2>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a57      	ldr	r2, [pc, #348]	; (8002cd0 <HAL_DMA_IRQHandler+0x1c8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d031      	beq.n	8002bda <HAL_DMA_IRQHandler+0xd2>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a56      	ldr	r2, [pc, #344]	; (8002cd4 <HAL_DMA_IRQHandler+0x1cc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d02c      	beq.n	8002bda <HAL_DMA_IRQHandler+0xd2>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a54      	ldr	r2, [pc, #336]	; (8002cd8 <HAL_DMA_IRQHandler+0x1d0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d027      	beq.n	8002bda <HAL_DMA_IRQHandler+0xd2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a53      	ldr	r2, [pc, #332]	; (8002cdc <HAL_DMA_IRQHandler+0x1d4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d022      	beq.n	8002bda <HAL_DMA_IRQHandler+0xd2>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a51      	ldr	r2, [pc, #324]	; (8002ce0 <HAL_DMA_IRQHandler+0x1d8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01d      	beq.n	8002bda <HAL_DMA_IRQHandler+0xd2>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a50      	ldr	r2, [pc, #320]	; (8002ce4 <HAL_DMA_IRQHandler+0x1dc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d018      	beq.n	8002bda <HAL_DMA_IRQHandler+0xd2>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a4e      	ldr	r2, [pc, #312]	; (8002ce8 <HAL_DMA_IRQHandler+0x1e0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d013      	beq.n	8002bda <HAL_DMA_IRQHandler+0xd2>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a4d      	ldr	r2, [pc, #308]	; (8002cec <HAL_DMA_IRQHandler+0x1e4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00e      	beq.n	8002bda <HAL_DMA_IRQHandler+0xd2>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a4b      	ldr	r2, [pc, #300]	; (8002cf0 <HAL_DMA_IRQHandler+0x1e8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d009      	beq.n	8002bda <HAL_DMA_IRQHandler+0xd2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a4a      	ldr	r2, [pc, #296]	; (8002cf4 <HAL_DMA_IRQHandler+0x1ec>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d004      	beq.n	8002bda <HAL_DMA_IRQHandler+0xd2>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a48      	ldr	r2, [pc, #288]	; (8002cf8 <HAL_DMA_IRQHandler+0x1f0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d101      	bne.n	8002bde <HAL_DMA_IRQHandler+0xd6>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <HAL_DMA_IRQHandler+0xd8>
 8002bde:	2300      	movs	r3, #0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 842b 	beq.w	800343c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	2208      	movs	r2, #8
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80a2 	beq.w	8002d40 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a2e      	ldr	r2, [pc, #184]	; (8002cbc <HAL_DMA_IRQHandler+0x1b4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d04a      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x194>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2d      	ldr	r2, [pc, #180]	; (8002cc0 <HAL_DMA_IRQHandler+0x1b8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d045      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x194>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a2b      	ldr	r2, [pc, #172]	; (8002cc4 <HAL_DMA_IRQHandler+0x1bc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d040      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x194>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a2a      	ldr	r2, [pc, #168]	; (8002cc8 <HAL_DMA_IRQHandler+0x1c0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d03b      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x194>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <HAL_DMA_IRQHandler+0x1c4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d036      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x194>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <HAL_DMA_IRQHandler+0x1c8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d031      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x194>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <HAL_DMA_IRQHandler+0x1cc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d02c      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x194>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a24      	ldr	r2, [pc, #144]	; (8002cd8 <HAL_DMA_IRQHandler+0x1d0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d027      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x194>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a22      	ldr	r2, [pc, #136]	; (8002cdc <HAL_DMA_IRQHandler+0x1d4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d022      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x194>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <HAL_DMA_IRQHandler+0x1d8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d01d      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x194>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <HAL_DMA_IRQHandler+0x1dc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d018      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x194>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ce8 <HAL_DMA_IRQHandler+0x1e0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d013      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x194>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <HAL_DMA_IRQHandler+0x1e4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00e      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x194>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <HAL_DMA_IRQHandler+0x1e8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d009      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x194>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a19      	ldr	r2, [pc, #100]	; (8002cf4 <HAL_DMA_IRQHandler+0x1ec>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d004      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x194>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_DMA_IRQHandler+0x1f0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d12f      	bne.n	8002cfc <HAL_DMA_IRQHandler+0x1f4>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	bf14      	ite	ne
 8002caa:	2301      	movne	r3, #1
 8002cac:	2300      	moveq	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	e02e      	b.n	8002d10 <HAL_DMA_IRQHandler+0x208>
 8002cb2:	bf00      	nop
 8002cb4:	24000000 	.word	0x24000000
 8002cb8:	1b4e81b5 	.word	0x1b4e81b5
 8002cbc:	40020010 	.word	0x40020010
 8002cc0:	40020028 	.word	0x40020028
 8002cc4:	40020040 	.word	0x40020040
 8002cc8:	40020058 	.word	0x40020058
 8002ccc:	40020070 	.word	0x40020070
 8002cd0:	40020088 	.word	0x40020088
 8002cd4:	400200a0 	.word	0x400200a0
 8002cd8:	400200b8 	.word	0x400200b8
 8002cdc:	40020410 	.word	0x40020410
 8002ce0:	40020428 	.word	0x40020428
 8002ce4:	40020440 	.word	0x40020440
 8002ce8:	40020458 	.word	0x40020458
 8002cec:	40020470 	.word	0x40020470
 8002cf0:	40020488 	.word	0x40020488
 8002cf4:	400204a0 	.word	0x400204a0
 8002cf8:	400204b8 	.word	0x400204b8
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d015      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0204 	bic.w	r2, r2, #4
 8002d22:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d06e      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a69      	ldr	r2, [pc, #420]	; (8002f00 <HAL_DMA_IRQHandler+0x3f8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d04a      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2ee>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a67      	ldr	r2, [pc, #412]	; (8002f04 <HAL_DMA_IRQHandler+0x3fc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d045      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2ee>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a66      	ldr	r2, [pc, #408]	; (8002f08 <HAL_DMA_IRQHandler+0x400>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d040      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2ee>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a64      	ldr	r2, [pc, #400]	; (8002f0c <HAL_DMA_IRQHandler+0x404>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d03b      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2ee>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a63      	ldr	r2, [pc, #396]	; (8002f10 <HAL_DMA_IRQHandler+0x408>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d036      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2ee>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a61      	ldr	r2, [pc, #388]	; (8002f14 <HAL_DMA_IRQHandler+0x40c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d031      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2ee>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a60      	ldr	r2, [pc, #384]	; (8002f18 <HAL_DMA_IRQHandler+0x410>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d02c      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2ee>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a5e      	ldr	r2, [pc, #376]	; (8002f1c <HAL_DMA_IRQHandler+0x414>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d027      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2ee>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a5d      	ldr	r2, [pc, #372]	; (8002f20 <HAL_DMA_IRQHandler+0x418>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d022      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2ee>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a5b      	ldr	r2, [pc, #364]	; (8002f24 <HAL_DMA_IRQHandler+0x41c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d01d      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2ee>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a5a      	ldr	r2, [pc, #360]	; (8002f28 <HAL_DMA_IRQHandler+0x420>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d018      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2ee>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a58      	ldr	r2, [pc, #352]	; (8002f2c <HAL_DMA_IRQHandler+0x424>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d013      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2ee>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a57      	ldr	r2, [pc, #348]	; (8002f30 <HAL_DMA_IRQHandler+0x428>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d00e      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2ee>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a55      	ldr	r2, [pc, #340]	; (8002f34 <HAL_DMA_IRQHandler+0x42c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d009      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2ee>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a54      	ldr	r2, [pc, #336]	; (8002f38 <HAL_DMA_IRQHandler+0x430>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d004      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2ee>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a52      	ldr	r2, [pc, #328]	; (8002f3c <HAL_DMA_IRQHandler+0x434>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d10a      	bne.n	8002e0c <HAL_DMA_IRQHandler+0x304>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e003      	b.n	8002e14 <HAL_DMA_IRQHandler+0x30c>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2300      	movs	r3, #0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00d      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	2201      	movs	r2, #1
 8002e22:	409a      	lsls	r2, r3
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2c:	f043 0202 	orr.w	r2, r3, #2
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 808f 	beq.w	8002f68 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a2c      	ldr	r2, [pc, #176]	; (8002f00 <HAL_DMA_IRQHandler+0x3f8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d04a      	beq.n	8002eea <HAL_DMA_IRQHandler+0x3e2>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a2a      	ldr	r2, [pc, #168]	; (8002f04 <HAL_DMA_IRQHandler+0x3fc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d045      	beq.n	8002eea <HAL_DMA_IRQHandler+0x3e2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a29      	ldr	r2, [pc, #164]	; (8002f08 <HAL_DMA_IRQHandler+0x400>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d040      	beq.n	8002eea <HAL_DMA_IRQHandler+0x3e2>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a27      	ldr	r2, [pc, #156]	; (8002f0c <HAL_DMA_IRQHandler+0x404>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d03b      	beq.n	8002eea <HAL_DMA_IRQHandler+0x3e2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a26      	ldr	r2, [pc, #152]	; (8002f10 <HAL_DMA_IRQHandler+0x408>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d036      	beq.n	8002eea <HAL_DMA_IRQHandler+0x3e2>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a24      	ldr	r2, [pc, #144]	; (8002f14 <HAL_DMA_IRQHandler+0x40c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d031      	beq.n	8002eea <HAL_DMA_IRQHandler+0x3e2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a23      	ldr	r2, [pc, #140]	; (8002f18 <HAL_DMA_IRQHandler+0x410>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d02c      	beq.n	8002eea <HAL_DMA_IRQHandler+0x3e2>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a21      	ldr	r2, [pc, #132]	; (8002f1c <HAL_DMA_IRQHandler+0x414>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d027      	beq.n	8002eea <HAL_DMA_IRQHandler+0x3e2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a20      	ldr	r2, [pc, #128]	; (8002f20 <HAL_DMA_IRQHandler+0x418>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d022      	beq.n	8002eea <HAL_DMA_IRQHandler+0x3e2>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a1e      	ldr	r2, [pc, #120]	; (8002f24 <HAL_DMA_IRQHandler+0x41c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01d      	beq.n	8002eea <HAL_DMA_IRQHandler+0x3e2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_DMA_IRQHandler+0x420>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d018      	beq.n	8002eea <HAL_DMA_IRQHandler+0x3e2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1b      	ldr	r2, [pc, #108]	; (8002f2c <HAL_DMA_IRQHandler+0x424>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d013      	beq.n	8002eea <HAL_DMA_IRQHandler+0x3e2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1a      	ldr	r2, [pc, #104]	; (8002f30 <HAL_DMA_IRQHandler+0x428>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00e      	beq.n	8002eea <HAL_DMA_IRQHandler+0x3e2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a18      	ldr	r2, [pc, #96]	; (8002f34 <HAL_DMA_IRQHandler+0x42c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d009      	beq.n	8002eea <HAL_DMA_IRQHandler+0x3e2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <HAL_DMA_IRQHandler+0x430>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_DMA_IRQHandler+0x3e2>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <HAL_DMA_IRQHandler+0x434>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d12a      	bne.n	8002f40 <HAL_DMA_IRQHandler+0x438>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf14      	ite	ne
 8002ef8:	2301      	movne	r3, #1
 8002efa:	2300      	moveq	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	e023      	b.n	8002f48 <HAL_DMA_IRQHandler+0x440>
 8002f00:	40020010 	.word	0x40020010
 8002f04:	40020028 	.word	0x40020028
 8002f08:	40020040 	.word	0x40020040
 8002f0c:	40020058 	.word	0x40020058
 8002f10:	40020070 	.word	0x40020070
 8002f14:	40020088 	.word	0x40020088
 8002f18:	400200a0 	.word	0x400200a0
 8002f1c:	400200b8 	.word	0x400200b8
 8002f20:	40020410 	.word	0x40020410
 8002f24:	40020428 	.word	0x40020428
 8002f28:	40020440 	.word	0x40020440
 8002f2c:	40020458 	.word	0x40020458
 8002f30:	40020470 	.word	0x40020470
 8002f34:	40020488 	.word	0x40020488
 8002f38:	400204a0 	.word	0x400204a0
 8002f3c:	400204b8 	.word	0x400204b8
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2300      	movs	r3, #0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00d      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	2204      	movs	r2, #4
 8002f56:	409a      	lsls	r2, r3
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f60:	f043 0204 	orr.w	r2, r3, #4
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	2210      	movs	r2, #16
 8002f72:	409a      	lsls	r2, r3
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a6 	beq.w	80030ca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a85      	ldr	r2, [pc, #532]	; (8003198 <HAL_DMA_IRQHandler+0x690>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d04a      	beq.n	800301e <HAL_DMA_IRQHandler+0x516>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a83      	ldr	r2, [pc, #524]	; (800319c <HAL_DMA_IRQHandler+0x694>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d045      	beq.n	800301e <HAL_DMA_IRQHandler+0x516>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a82      	ldr	r2, [pc, #520]	; (80031a0 <HAL_DMA_IRQHandler+0x698>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d040      	beq.n	800301e <HAL_DMA_IRQHandler+0x516>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a80      	ldr	r2, [pc, #512]	; (80031a4 <HAL_DMA_IRQHandler+0x69c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d03b      	beq.n	800301e <HAL_DMA_IRQHandler+0x516>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a7f      	ldr	r2, [pc, #508]	; (80031a8 <HAL_DMA_IRQHandler+0x6a0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d036      	beq.n	800301e <HAL_DMA_IRQHandler+0x516>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a7d      	ldr	r2, [pc, #500]	; (80031ac <HAL_DMA_IRQHandler+0x6a4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d031      	beq.n	800301e <HAL_DMA_IRQHandler+0x516>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a7c      	ldr	r2, [pc, #496]	; (80031b0 <HAL_DMA_IRQHandler+0x6a8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d02c      	beq.n	800301e <HAL_DMA_IRQHandler+0x516>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a7a      	ldr	r2, [pc, #488]	; (80031b4 <HAL_DMA_IRQHandler+0x6ac>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d027      	beq.n	800301e <HAL_DMA_IRQHandler+0x516>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a79      	ldr	r2, [pc, #484]	; (80031b8 <HAL_DMA_IRQHandler+0x6b0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d022      	beq.n	800301e <HAL_DMA_IRQHandler+0x516>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a77      	ldr	r2, [pc, #476]	; (80031bc <HAL_DMA_IRQHandler+0x6b4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d01d      	beq.n	800301e <HAL_DMA_IRQHandler+0x516>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a76      	ldr	r2, [pc, #472]	; (80031c0 <HAL_DMA_IRQHandler+0x6b8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d018      	beq.n	800301e <HAL_DMA_IRQHandler+0x516>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a74      	ldr	r2, [pc, #464]	; (80031c4 <HAL_DMA_IRQHandler+0x6bc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_DMA_IRQHandler+0x516>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a73      	ldr	r2, [pc, #460]	; (80031c8 <HAL_DMA_IRQHandler+0x6c0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00e      	beq.n	800301e <HAL_DMA_IRQHandler+0x516>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a71      	ldr	r2, [pc, #452]	; (80031cc <HAL_DMA_IRQHandler+0x6c4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d009      	beq.n	800301e <HAL_DMA_IRQHandler+0x516>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a70      	ldr	r2, [pc, #448]	; (80031d0 <HAL_DMA_IRQHandler+0x6c8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d004      	beq.n	800301e <HAL_DMA_IRQHandler+0x516>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a6e      	ldr	r2, [pc, #440]	; (80031d4 <HAL_DMA_IRQHandler+0x6cc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d10a      	bne.n	8003034 <HAL_DMA_IRQHandler+0x52c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e009      	b.n	8003048 <HAL_DMA_IRQHandler+0x540>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b00      	cmp	r3, #0
 8003040:	bf14      	ite	ne
 8003042:	2301      	movne	r3, #1
 8003044:	2300      	moveq	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d03e      	beq.n	80030ca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	2210      	movs	r2, #16
 8003056:	409a      	lsls	r2, r3
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d018      	beq.n	800309c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d108      	bne.n	800308a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d024      	beq.n	80030ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	4798      	blx	r3
 8003088:	e01f      	b.n	80030ca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308e:	2b00      	cmp	r3, #0
 8003090:	d01b      	beq.n	80030ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	4798      	blx	r3
 800309a:	e016      	b.n	80030ca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d107      	bne.n	80030ba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0208 	bic.w	r2, r2, #8
 80030b8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	2220      	movs	r2, #32
 80030d4:	409a      	lsls	r2, r3
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 8110 	beq.w	8003300 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a2c      	ldr	r2, [pc, #176]	; (8003198 <HAL_DMA_IRQHandler+0x690>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d04a      	beq.n	8003180 <HAL_DMA_IRQHandler+0x678>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a2b      	ldr	r2, [pc, #172]	; (800319c <HAL_DMA_IRQHandler+0x694>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d045      	beq.n	8003180 <HAL_DMA_IRQHandler+0x678>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a29      	ldr	r2, [pc, #164]	; (80031a0 <HAL_DMA_IRQHandler+0x698>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d040      	beq.n	8003180 <HAL_DMA_IRQHandler+0x678>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a28      	ldr	r2, [pc, #160]	; (80031a4 <HAL_DMA_IRQHandler+0x69c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d03b      	beq.n	8003180 <HAL_DMA_IRQHandler+0x678>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <HAL_DMA_IRQHandler+0x6a0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d036      	beq.n	8003180 <HAL_DMA_IRQHandler+0x678>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a25      	ldr	r2, [pc, #148]	; (80031ac <HAL_DMA_IRQHandler+0x6a4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d031      	beq.n	8003180 <HAL_DMA_IRQHandler+0x678>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a23      	ldr	r2, [pc, #140]	; (80031b0 <HAL_DMA_IRQHandler+0x6a8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d02c      	beq.n	8003180 <HAL_DMA_IRQHandler+0x678>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <HAL_DMA_IRQHandler+0x6ac>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d027      	beq.n	8003180 <HAL_DMA_IRQHandler+0x678>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a20      	ldr	r2, [pc, #128]	; (80031b8 <HAL_DMA_IRQHandler+0x6b0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d022      	beq.n	8003180 <HAL_DMA_IRQHandler+0x678>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1f      	ldr	r2, [pc, #124]	; (80031bc <HAL_DMA_IRQHandler+0x6b4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d01d      	beq.n	8003180 <HAL_DMA_IRQHandler+0x678>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <HAL_DMA_IRQHandler+0x6b8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d018      	beq.n	8003180 <HAL_DMA_IRQHandler+0x678>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1c      	ldr	r2, [pc, #112]	; (80031c4 <HAL_DMA_IRQHandler+0x6bc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d013      	beq.n	8003180 <HAL_DMA_IRQHandler+0x678>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1a      	ldr	r2, [pc, #104]	; (80031c8 <HAL_DMA_IRQHandler+0x6c0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00e      	beq.n	8003180 <HAL_DMA_IRQHandler+0x678>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a19      	ldr	r2, [pc, #100]	; (80031cc <HAL_DMA_IRQHandler+0x6c4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d009      	beq.n	8003180 <HAL_DMA_IRQHandler+0x678>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a17      	ldr	r2, [pc, #92]	; (80031d0 <HAL_DMA_IRQHandler+0x6c8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d004      	beq.n	8003180 <HAL_DMA_IRQHandler+0x678>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a16      	ldr	r2, [pc, #88]	; (80031d4 <HAL_DMA_IRQHandler+0x6cc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d12b      	bne.n	80031d8 <HAL_DMA_IRQHandler+0x6d0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b00      	cmp	r3, #0
 800318c:	bf14      	ite	ne
 800318e:	2301      	movne	r3, #1
 8003190:	2300      	moveq	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	e02a      	b.n	80031ec <HAL_DMA_IRQHandler+0x6e4>
 8003196:	bf00      	nop
 8003198:	40020010 	.word	0x40020010
 800319c:	40020028 	.word	0x40020028
 80031a0:	40020040 	.word	0x40020040
 80031a4:	40020058 	.word	0x40020058
 80031a8:	40020070 	.word	0x40020070
 80031ac:	40020088 	.word	0x40020088
 80031b0:	400200a0 	.word	0x400200a0
 80031b4:	400200b8 	.word	0x400200b8
 80031b8:	40020410 	.word	0x40020410
 80031bc:	40020428 	.word	0x40020428
 80031c0:	40020440 	.word	0x40020440
 80031c4:	40020458 	.word	0x40020458
 80031c8:	40020470 	.word	0x40020470
 80031cc:	40020488 	.word	0x40020488
 80031d0:	400204a0 	.word	0x400204a0
 80031d4:	400204b8 	.word	0x400204b8
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 8087 	beq.w	8003300 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	2220      	movs	r2, #32
 80031fc:	409a      	lsls	r2, r3
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b04      	cmp	r3, #4
 800320c:	d139      	bne.n	8003282 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0216 	bic.w	r2, r2, #22
 800321c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800322c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d103      	bne.n	800323e <HAL_DMA_IRQHandler+0x736>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0208 	bic.w	r2, r2, #8
 800324c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	223f      	movs	r2, #63	; 0x3f
 8003258:	409a      	lsls	r2, r3
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 834a 	beq.w	800390c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
          }
          return;
 8003280:	e344      	b.n	800390c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d018      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d108      	bne.n	80032b0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d02c      	beq.n	8003300 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
 80032ae:	e027      	b.n	8003300 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d023      	beq.n	8003300 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
 80032c0:	e01e      	b.n	8003300 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10f      	bne.n	80032f0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0210 	bic.w	r2, r2, #16
 80032de:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8306 	beq.w	8003916 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 8088 	beq.w	8003428 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2204      	movs	r2, #4
 800331c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a7a      	ldr	r2, [pc, #488]	; (8003510 <HAL_DMA_IRQHandler+0xa08>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d04a      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x8b8>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a79      	ldr	r2, [pc, #484]	; (8003514 <HAL_DMA_IRQHandler+0xa0c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d045      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x8b8>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a77      	ldr	r2, [pc, #476]	; (8003518 <HAL_DMA_IRQHandler+0xa10>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d040      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x8b8>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a76      	ldr	r2, [pc, #472]	; (800351c <HAL_DMA_IRQHandler+0xa14>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d03b      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x8b8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a74      	ldr	r2, [pc, #464]	; (8003520 <HAL_DMA_IRQHandler+0xa18>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d036      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x8b8>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a73      	ldr	r2, [pc, #460]	; (8003524 <HAL_DMA_IRQHandler+0xa1c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d031      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x8b8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a71      	ldr	r2, [pc, #452]	; (8003528 <HAL_DMA_IRQHandler+0xa20>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d02c      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x8b8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a70      	ldr	r2, [pc, #448]	; (800352c <HAL_DMA_IRQHandler+0xa24>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d027      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x8b8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a6e      	ldr	r2, [pc, #440]	; (8003530 <HAL_DMA_IRQHandler+0xa28>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d022      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x8b8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a6d      	ldr	r2, [pc, #436]	; (8003534 <HAL_DMA_IRQHandler+0xa2c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d01d      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x8b8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a6b      	ldr	r2, [pc, #428]	; (8003538 <HAL_DMA_IRQHandler+0xa30>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d018      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x8b8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a6a      	ldr	r2, [pc, #424]	; (800353c <HAL_DMA_IRQHandler+0xa34>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d013      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x8b8>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a68      	ldr	r2, [pc, #416]	; (8003540 <HAL_DMA_IRQHandler+0xa38>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00e      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x8b8>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a67      	ldr	r2, [pc, #412]	; (8003544 <HAL_DMA_IRQHandler+0xa3c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d009      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x8b8>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a65      	ldr	r2, [pc, #404]	; (8003548 <HAL_DMA_IRQHandler+0xa40>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d004      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x8b8>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a64      	ldr	r2, [pc, #400]	; (800354c <HAL_DMA_IRQHandler+0xa44>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d108      	bne.n	80033d2 <HAL_DMA_IRQHandler+0x8ca>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0201 	bic.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	e007      	b.n	80033e2 <HAL_DMA_IRQHandler+0x8da>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3301      	adds	r3, #1
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d307      	bcc.n	80033fe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f2      	bne.n	80033e2 <HAL_DMA_IRQHandler+0x8da>
 80033fc:	e000      	b.n	8003400 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80033fe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d004      	beq.n	8003418 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2203      	movs	r2, #3
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003416:	e003      	b.n	8003420 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 8272 	beq.w	8003916 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
 800343a:	e26c      	b.n	8003916 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a43      	ldr	r2, [pc, #268]	; (8003550 <HAL_DMA_IRQHandler+0xa48>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d022      	beq.n	800348c <HAL_DMA_IRQHandler+0x984>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a42      	ldr	r2, [pc, #264]	; (8003554 <HAL_DMA_IRQHandler+0xa4c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d01d      	beq.n	800348c <HAL_DMA_IRQHandler+0x984>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a40      	ldr	r2, [pc, #256]	; (8003558 <HAL_DMA_IRQHandler+0xa50>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d018      	beq.n	800348c <HAL_DMA_IRQHandler+0x984>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a3f      	ldr	r2, [pc, #252]	; (800355c <HAL_DMA_IRQHandler+0xa54>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d013      	beq.n	800348c <HAL_DMA_IRQHandler+0x984>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a3d      	ldr	r2, [pc, #244]	; (8003560 <HAL_DMA_IRQHandler+0xa58>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00e      	beq.n	800348c <HAL_DMA_IRQHandler+0x984>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a3c      	ldr	r2, [pc, #240]	; (8003564 <HAL_DMA_IRQHandler+0xa5c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d009      	beq.n	800348c <HAL_DMA_IRQHandler+0x984>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a3a      	ldr	r2, [pc, #232]	; (8003568 <HAL_DMA_IRQHandler+0xa60>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_DMA_IRQHandler+0x984>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a39      	ldr	r2, [pc, #228]	; (800356c <HAL_DMA_IRQHandler+0xa64>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d101      	bne.n	8003490 <HAL_DMA_IRQHandler+0x988>
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <HAL_DMA_IRQHandler+0x98a>
 8003490:	2300      	movs	r3, #0
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 823f 	beq.w	8003916 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	2204      	movs	r2, #4
 80034aa:	409a      	lsls	r2, r3
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80cd 	beq.w	8003650 <HAL_DMA_IRQHandler+0xb48>
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80c7 	beq.w	8003650 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c6:	f003 031f 	and.w	r3, r3, #31
 80034ca:	2204      	movs	r2, #4
 80034cc:	409a      	lsls	r2, r3
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d049      	beq.n	8003570 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 8210 	beq.w	8003910 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034f8:	e20a      	b.n	8003910 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 8206 	beq.w	8003910 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800350c:	e200      	b.n	8003910 <HAL_DMA_IRQHandler+0xe08>
 800350e:	bf00      	nop
 8003510:	40020010 	.word	0x40020010
 8003514:	40020028 	.word	0x40020028
 8003518:	40020040 	.word	0x40020040
 800351c:	40020058 	.word	0x40020058
 8003520:	40020070 	.word	0x40020070
 8003524:	40020088 	.word	0x40020088
 8003528:	400200a0 	.word	0x400200a0
 800352c:	400200b8 	.word	0x400200b8
 8003530:	40020410 	.word	0x40020410
 8003534:	40020428 	.word	0x40020428
 8003538:	40020440 	.word	0x40020440
 800353c:	40020458 	.word	0x40020458
 8003540:	40020470 	.word	0x40020470
 8003544:	40020488 	.word	0x40020488
 8003548:	400204a0 	.word	0x400204a0
 800354c:	400204b8 	.word	0x400204b8
 8003550:	58025408 	.word	0x58025408
 8003554:	5802541c 	.word	0x5802541c
 8003558:	58025430 	.word	0x58025430
 800355c:	58025444 	.word	0x58025444
 8003560:	58025458 	.word	0x58025458
 8003564:	5802546c 	.word	0x5802546c
 8003568:	58025480 	.word	0x58025480
 800356c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d160      	bne.n	800363c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a7f      	ldr	r2, [pc, #508]	; (800377c <HAL_DMA_IRQHandler+0xc74>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d04a      	beq.n	800361a <HAL_DMA_IRQHandler+0xb12>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a7d      	ldr	r2, [pc, #500]	; (8003780 <HAL_DMA_IRQHandler+0xc78>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d045      	beq.n	800361a <HAL_DMA_IRQHandler+0xb12>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a7c      	ldr	r2, [pc, #496]	; (8003784 <HAL_DMA_IRQHandler+0xc7c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d040      	beq.n	800361a <HAL_DMA_IRQHandler+0xb12>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a7a      	ldr	r2, [pc, #488]	; (8003788 <HAL_DMA_IRQHandler+0xc80>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d03b      	beq.n	800361a <HAL_DMA_IRQHandler+0xb12>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a79      	ldr	r2, [pc, #484]	; (800378c <HAL_DMA_IRQHandler+0xc84>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d036      	beq.n	800361a <HAL_DMA_IRQHandler+0xb12>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a77      	ldr	r2, [pc, #476]	; (8003790 <HAL_DMA_IRQHandler+0xc88>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d031      	beq.n	800361a <HAL_DMA_IRQHandler+0xb12>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a76      	ldr	r2, [pc, #472]	; (8003794 <HAL_DMA_IRQHandler+0xc8c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d02c      	beq.n	800361a <HAL_DMA_IRQHandler+0xb12>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a74      	ldr	r2, [pc, #464]	; (8003798 <HAL_DMA_IRQHandler+0xc90>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d027      	beq.n	800361a <HAL_DMA_IRQHandler+0xb12>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a73      	ldr	r2, [pc, #460]	; (800379c <HAL_DMA_IRQHandler+0xc94>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d022      	beq.n	800361a <HAL_DMA_IRQHandler+0xb12>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a71      	ldr	r2, [pc, #452]	; (80037a0 <HAL_DMA_IRQHandler+0xc98>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01d      	beq.n	800361a <HAL_DMA_IRQHandler+0xb12>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a70      	ldr	r2, [pc, #448]	; (80037a4 <HAL_DMA_IRQHandler+0xc9c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d018      	beq.n	800361a <HAL_DMA_IRQHandler+0xb12>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a6e      	ldr	r2, [pc, #440]	; (80037a8 <HAL_DMA_IRQHandler+0xca0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <HAL_DMA_IRQHandler+0xb12>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a6d      	ldr	r2, [pc, #436]	; (80037ac <HAL_DMA_IRQHandler+0xca4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00e      	beq.n	800361a <HAL_DMA_IRQHandler+0xb12>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a6b      	ldr	r2, [pc, #428]	; (80037b0 <HAL_DMA_IRQHandler+0xca8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d009      	beq.n	800361a <HAL_DMA_IRQHandler+0xb12>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a6a      	ldr	r2, [pc, #424]	; (80037b4 <HAL_DMA_IRQHandler+0xcac>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d004      	beq.n	800361a <HAL_DMA_IRQHandler+0xb12>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a68      	ldr	r2, [pc, #416]	; (80037b8 <HAL_DMA_IRQHandler+0xcb0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d108      	bne.n	800362c <HAL_DMA_IRQHandler+0xb24>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0208 	bic.w	r2, r2, #8
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e007      	b.n	800363c <HAL_DMA_IRQHandler+0xb34>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0204 	bic.w	r2, r2, #4
 800363a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8165 	beq.w	8003910 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800364e:	e15f      	b.n	8003910 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	2202      	movs	r2, #2
 800365a:	409a      	lsls	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	4013      	ands	r3, r2
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80c5 	beq.w	80037f0 <HAL_DMA_IRQHandler+0xce8>
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80bf 	beq.w	80037f0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003676:	f003 031f 	and.w	r3, r3, #31
 800367a:	2202      	movs	r2, #2
 800367c:	409a      	lsls	r2, r3
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d018      	beq.n	80036be <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d109      	bne.n	80036aa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 813a 	beq.w	8003914 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036a8:	e134      	b.n	8003914 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 8130 	beq.w	8003914 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036bc:	e12a      	b.n	8003914 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f040 8089 	bne.w	80037dc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a2b      	ldr	r2, [pc, #172]	; (800377c <HAL_DMA_IRQHandler+0xc74>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d04a      	beq.n	800376a <HAL_DMA_IRQHandler+0xc62>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a29      	ldr	r2, [pc, #164]	; (8003780 <HAL_DMA_IRQHandler+0xc78>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d045      	beq.n	800376a <HAL_DMA_IRQHandler+0xc62>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a28      	ldr	r2, [pc, #160]	; (8003784 <HAL_DMA_IRQHandler+0xc7c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d040      	beq.n	800376a <HAL_DMA_IRQHandler+0xc62>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a26      	ldr	r2, [pc, #152]	; (8003788 <HAL_DMA_IRQHandler+0xc80>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d03b      	beq.n	800376a <HAL_DMA_IRQHandler+0xc62>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a25      	ldr	r2, [pc, #148]	; (800378c <HAL_DMA_IRQHandler+0xc84>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d036      	beq.n	800376a <HAL_DMA_IRQHandler+0xc62>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a23      	ldr	r2, [pc, #140]	; (8003790 <HAL_DMA_IRQHandler+0xc88>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d031      	beq.n	800376a <HAL_DMA_IRQHandler+0xc62>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a22      	ldr	r2, [pc, #136]	; (8003794 <HAL_DMA_IRQHandler+0xc8c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d02c      	beq.n	800376a <HAL_DMA_IRQHandler+0xc62>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a20      	ldr	r2, [pc, #128]	; (8003798 <HAL_DMA_IRQHandler+0xc90>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d027      	beq.n	800376a <HAL_DMA_IRQHandler+0xc62>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1f      	ldr	r2, [pc, #124]	; (800379c <HAL_DMA_IRQHandler+0xc94>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d022      	beq.n	800376a <HAL_DMA_IRQHandler+0xc62>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <HAL_DMA_IRQHandler+0xc98>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d01d      	beq.n	800376a <HAL_DMA_IRQHandler+0xc62>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1c      	ldr	r2, [pc, #112]	; (80037a4 <HAL_DMA_IRQHandler+0xc9c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d018      	beq.n	800376a <HAL_DMA_IRQHandler+0xc62>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1a      	ldr	r2, [pc, #104]	; (80037a8 <HAL_DMA_IRQHandler+0xca0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d013      	beq.n	800376a <HAL_DMA_IRQHandler+0xc62>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a19      	ldr	r2, [pc, #100]	; (80037ac <HAL_DMA_IRQHandler+0xca4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00e      	beq.n	800376a <HAL_DMA_IRQHandler+0xc62>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a17      	ldr	r2, [pc, #92]	; (80037b0 <HAL_DMA_IRQHandler+0xca8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d009      	beq.n	800376a <HAL_DMA_IRQHandler+0xc62>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a16      	ldr	r2, [pc, #88]	; (80037b4 <HAL_DMA_IRQHandler+0xcac>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d004      	beq.n	800376a <HAL_DMA_IRQHandler+0xc62>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <HAL_DMA_IRQHandler+0xcb0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d128      	bne.n	80037bc <HAL_DMA_IRQHandler+0xcb4>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0214 	bic.w	r2, r2, #20
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e027      	b.n	80037cc <HAL_DMA_IRQHandler+0xcc4>
 800377c:	40020010 	.word	0x40020010
 8003780:	40020028 	.word	0x40020028
 8003784:	40020040 	.word	0x40020040
 8003788:	40020058 	.word	0x40020058
 800378c:	40020070 	.word	0x40020070
 8003790:	40020088 	.word	0x40020088
 8003794:	400200a0 	.word	0x400200a0
 8003798:	400200b8 	.word	0x400200b8
 800379c:	40020410 	.word	0x40020410
 80037a0:	40020428 	.word	0x40020428
 80037a4:	40020440 	.word	0x40020440
 80037a8:	40020458 	.word	0x40020458
 80037ac:	40020470 	.word	0x40020470
 80037b0:	40020488 	.word	0x40020488
 80037b4:	400204a0 	.word	0x400204a0
 80037b8:	400204b8 	.word	0x400204b8
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 020a 	bic.w	r2, r2, #10
 80037ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8097 	beq.w	8003914 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037ee:	e091      	b.n	8003914 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	2208      	movs	r2, #8
 80037fa:	409a      	lsls	r2, r3
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8088 	beq.w	8003916 <HAL_DMA_IRQHandler+0xe0e>
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8082 	beq.w	8003916 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a41      	ldr	r2, [pc, #260]	; (800391c <HAL_DMA_IRQHandler+0xe14>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d04a      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xdaa>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a3f      	ldr	r2, [pc, #252]	; (8003920 <HAL_DMA_IRQHandler+0xe18>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d045      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xdaa>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a3e      	ldr	r2, [pc, #248]	; (8003924 <HAL_DMA_IRQHandler+0xe1c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d040      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xdaa>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a3c      	ldr	r2, [pc, #240]	; (8003928 <HAL_DMA_IRQHandler+0xe20>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d03b      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xdaa>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a3b      	ldr	r2, [pc, #236]	; (800392c <HAL_DMA_IRQHandler+0xe24>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d036      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xdaa>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a39      	ldr	r2, [pc, #228]	; (8003930 <HAL_DMA_IRQHandler+0xe28>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d031      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xdaa>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a38      	ldr	r2, [pc, #224]	; (8003934 <HAL_DMA_IRQHandler+0xe2c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d02c      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xdaa>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a36      	ldr	r2, [pc, #216]	; (8003938 <HAL_DMA_IRQHandler+0xe30>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d027      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xdaa>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a35      	ldr	r2, [pc, #212]	; (800393c <HAL_DMA_IRQHandler+0xe34>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d022      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xdaa>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a33      	ldr	r2, [pc, #204]	; (8003940 <HAL_DMA_IRQHandler+0xe38>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d01d      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xdaa>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a32      	ldr	r2, [pc, #200]	; (8003944 <HAL_DMA_IRQHandler+0xe3c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d018      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xdaa>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a30      	ldr	r2, [pc, #192]	; (8003948 <HAL_DMA_IRQHandler+0xe40>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xdaa>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a2f      	ldr	r2, [pc, #188]	; (800394c <HAL_DMA_IRQHandler+0xe44>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00e      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xdaa>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2d      	ldr	r2, [pc, #180]	; (8003950 <HAL_DMA_IRQHandler+0xe48>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xdaa>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2c      	ldr	r2, [pc, #176]	; (8003954 <HAL_DMA_IRQHandler+0xe4c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xdaa>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a2a      	ldr	r2, [pc, #168]	; (8003958 <HAL_DMA_IRQHandler+0xe50>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d108      	bne.n	80038c4 <HAL_DMA_IRQHandler+0xdbc>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 021c 	bic.w	r2, r2, #28
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	e007      	b.n	80038d4 <HAL_DMA_IRQHandler+0xdcc>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 020e 	bic.w	r2, r2, #14
 80038d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	2201      	movs	r2, #1
 80038de:	409a      	lsls	r2, r3
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
 800390a:	e004      	b.n	8003916 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800390c:	bf00      	nop
 800390e:	e002      	b.n	8003916 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003910:	bf00      	nop
 8003912:	e000      	b.n	8003916 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003914:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003916:	3728      	adds	r7, #40	; 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40020010 	.word	0x40020010
 8003920:	40020028 	.word	0x40020028
 8003924:	40020040 	.word	0x40020040
 8003928:	40020058 	.word	0x40020058
 800392c:	40020070 	.word	0x40020070
 8003930:	40020088 	.word	0x40020088
 8003934:	400200a0 	.word	0x400200a0
 8003938:	400200b8 	.word	0x400200b8
 800393c:	40020410 	.word	0x40020410
 8003940:	40020428 	.word	0x40020428
 8003944:	40020440 	.word	0x40020440
 8003948:	40020458 	.word	0x40020458
 800394c:	40020470 	.word	0x40020470
 8003950:	40020488 	.word	0x40020488
 8003954:	400204a0 	.word	0x400204a0
 8003958:	400204b8 	.word	0x400204b8

0800395c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003974:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a7f      	ldr	r2, [pc, #508]	; (8003b78 <DMA_SetConfig+0x21c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d072      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a7d      	ldr	r2, [pc, #500]	; (8003b7c <DMA_SetConfig+0x220>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d06d      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a7c      	ldr	r2, [pc, #496]	; (8003b80 <DMA_SetConfig+0x224>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d068      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a7a      	ldr	r2, [pc, #488]	; (8003b84 <DMA_SetConfig+0x228>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d063      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a79      	ldr	r2, [pc, #484]	; (8003b88 <DMA_SetConfig+0x22c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d05e      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a77      	ldr	r2, [pc, #476]	; (8003b8c <DMA_SetConfig+0x230>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d059      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a76      	ldr	r2, [pc, #472]	; (8003b90 <DMA_SetConfig+0x234>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d054      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a74      	ldr	r2, [pc, #464]	; (8003b94 <DMA_SetConfig+0x238>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d04f      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a73      	ldr	r2, [pc, #460]	; (8003b98 <DMA_SetConfig+0x23c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d04a      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a71      	ldr	r2, [pc, #452]	; (8003b9c <DMA_SetConfig+0x240>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d045      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a70      	ldr	r2, [pc, #448]	; (8003ba0 <DMA_SetConfig+0x244>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d040      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a6e      	ldr	r2, [pc, #440]	; (8003ba4 <DMA_SetConfig+0x248>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d03b      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a6d      	ldr	r2, [pc, #436]	; (8003ba8 <DMA_SetConfig+0x24c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d036      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a6b      	ldr	r2, [pc, #428]	; (8003bac <DMA_SetConfig+0x250>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d031      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a6a      	ldr	r2, [pc, #424]	; (8003bb0 <DMA_SetConfig+0x254>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d02c      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a68      	ldr	r2, [pc, #416]	; (8003bb4 <DMA_SetConfig+0x258>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d027      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a67      	ldr	r2, [pc, #412]	; (8003bb8 <DMA_SetConfig+0x25c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d022      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a65      	ldr	r2, [pc, #404]	; (8003bbc <DMA_SetConfig+0x260>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d01d      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a64      	ldr	r2, [pc, #400]	; (8003bc0 <DMA_SetConfig+0x264>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d018      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a62      	ldr	r2, [pc, #392]	; (8003bc4 <DMA_SetConfig+0x268>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a61      	ldr	r2, [pc, #388]	; (8003bc8 <DMA_SetConfig+0x26c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00e      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a5f      	ldr	r2, [pc, #380]	; (8003bcc <DMA_SetConfig+0x270>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d009      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a5e      	ldr	r2, [pc, #376]	; (8003bd0 <DMA_SetConfig+0x274>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <DMA_SetConfig+0x10a>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a5c      	ldr	r2, [pc, #368]	; (8003bd4 <DMA_SetConfig+0x278>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d101      	bne.n	8003a6a <DMA_SetConfig+0x10e>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <DMA_SetConfig+0x110>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00d      	beq.n	8003a8c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a78:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a8a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a39      	ldr	r2, [pc, #228]	; (8003b78 <DMA_SetConfig+0x21c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d04a      	beq.n	8003b2c <DMA_SetConfig+0x1d0>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a38      	ldr	r2, [pc, #224]	; (8003b7c <DMA_SetConfig+0x220>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d045      	beq.n	8003b2c <DMA_SetConfig+0x1d0>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a36      	ldr	r2, [pc, #216]	; (8003b80 <DMA_SetConfig+0x224>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d040      	beq.n	8003b2c <DMA_SetConfig+0x1d0>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a35      	ldr	r2, [pc, #212]	; (8003b84 <DMA_SetConfig+0x228>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d03b      	beq.n	8003b2c <DMA_SetConfig+0x1d0>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a33      	ldr	r2, [pc, #204]	; (8003b88 <DMA_SetConfig+0x22c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d036      	beq.n	8003b2c <DMA_SetConfig+0x1d0>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a32      	ldr	r2, [pc, #200]	; (8003b8c <DMA_SetConfig+0x230>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d031      	beq.n	8003b2c <DMA_SetConfig+0x1d0>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a30      	ldr	r2, [pc, #192]	; (8003b90 <DMA_SetConfig+0x234>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d02c      	beq.n	8003b2c <DMA_SetConfig+0x1d0>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2f      	ldr	r2, [pc, #188]	; (8003b94 <DMA_SetConfig+0x238>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d027      	beq.n	8003b2c <DMA_SetConfig+0x1d0>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a2d      	ldr	r2, [pc, #180]	; (8003b98 <DMA_SetConfig+0x23c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d022      	beq.n	8003b2c <DMA_SetConfig+0x1d0>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a2c      	ldr	r2, [pc, #176]	; (8003b9c <DMA_SetConfig+0x240>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d01d      	beq.n	8003b2c <DMA_SetConfig+0x1d0>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a2a      	ldr	r2, [pc, #168]	; (8003ba0 <DMA_SetConfig+0x244>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d018      	beq.n	8003b2c <DMA_SetConfig+0x1d0>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a29      	ldr	r2, [pc, #164]	; (8003ba4 <DMA_SetConfig+0x248>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d013      	beq.n	8003b2c <DMA_SetConfig+0x1d0>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a27      	ldr	r2, [pc, #156]	; (8003ba8 <DMA_SetConfig+0x24c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00e      	beq.n	8003b2c <DMA_SetConfig+0x1d0>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a26      	ldr	r2, [pc, #152]	; (8003bac <DMA_SetConfig+0x250>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d009      	beq.n	8003b2c <DMA_SetConfig+0x1d0>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a24      	ldr	r2, [pc, #144]	; (8003bb0 <DMA_SetConfig+0x254>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d004      	beq.n	8003b2c <DMA_SetConfig+0x1d0>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a23      	ldr	r2, [pc, #140]	; (8003bb4 <DMA_SetConfig+0x258>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d101      	bne.n	8003b30 <DMA_SetConfig+0x1d4>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <DMA_SetConfig+0x1d6>
 8003b30:	2300      	movs	r3, #0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d059      	beq.n	8003bea <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3a:	f003 031f 	and.w	r3, r3, #31
 8003b3e:	223f      	movs	r2, #63	; 0x3f
 8003b40:	409a      	lsls	r2, r3
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b54:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b40      	cmp	r3, #64	; 0x40
 8003b64:	d138      	bne.n	8003bd8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b76:	e086      	b.n	8003c86 <DMA_SetConfig+0x32a>
 8003b78:	40020010 	.word	0x40020010
 8003b7c:	40020028 	.word	0x40020028
 8003b80:	40020040 	.word	0x40020040
 8003b84:	40020058 	.word	0x40020058
 8003b88:	40020070 	.word	0x40020070
 8003b8c:	40020088 	.word	0x40020088
 8003b90:	400200a0 	.word	0x400200a0
 8003b94:	400200b8 	.word	0x400200b8
 8003b98:	40020410 	.word	0x40020410
 8003b9c:	40020428 	.word	0x40020428
 8003ba0:	40020440 	.word	0x40020440
 8003ba4:	40020458 	.word	0x40020458
 8003ba8:	40020470 	.word	0x40020470
 8003bac:	40020488 	.word	0x40020488
 8003bb0:	400204a0 	.word	0x400204a0
 8003bb4:	400204b8 	.word	0x400204b8
 8003bb8:	58025408 	.word	0x58025408
 8003bbc:	5802541c 	.word	0x5802541c
 8003bc0:	58025430 	.word	0x58025430
 8003bc4:	58025444 	.word	0x58025444
 8003bc8:	58025458 	.word	0x58025458
 8003bcc:	5802546c 	.word	0x5802546c
 8003bd0:	58025480 	.word	0x58025480
 8003bd4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	60da      	str	r2, [r3, #12]
}
 8003be8:	e04d      	b.n	8003c86 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a29      	ldr	r2, [pc, #164]	; (8003c94 <DMA_SetConfig+0x338>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d022      	beq.n	8003c3a <DMA_SetConfig+0x2de>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a27      	ldr	r2, [pc, #156]	; (8003c98 <DMA_SetConfig+0x33c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01d      	beq.n	8003c3a <DMA_SetConfig+0x2de>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a26      	ldr	r2, [pc, #152]	; (8003c9c <DMA_SetConfig+0x340>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d018      	beq.n	8003c3a <DMA_SetConfig+0x2de>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a24      	ldr	r2, [pc, #144]	; (8003ca0 <DMA_SetConfig+0x344>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <DMA_SetConfig+0x2de>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a23      	ldr	r2, [pc, #140]	; (8003ca4 <DMA_SetConfig+0x348>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00e      	beq.n	8003c3a <DMA_SetConfig+0x2de>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <DMA_SetConfig+0x34c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d009      	beq.n	8003c3a <DMA_SetConfig+0x2de>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a20      	ldr	r2, [pc, #128]	; (8003cac <DMA_SetConfig+0x350>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d004      	beq.n	8003c3a <DMA_SetConfig+0x2de>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <DMA_SetConfig+0x354>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d101      	bne.n	8003c3e <DMA_SetConfig+0x2e2>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <DMA_SetConfig+0x2e4>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d020      	beq.n	8003c86 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	409a      	lsls	r2, r3
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d108      	bne.n	8003c76 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	60da      	str	r2, [r3, #12]
}
 8003c74:	e007      	b.n	8003c86 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	60da      	str	r2, [r3, #12]
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	58025408 	.word	0x58025408
 8003c98:	5802541c 	.word	0x5802541c
 8003c9c:	58025430 	.word	0x58025430
 8003ca0:	58025444 	.word	0x58025444
 8003ca4:	58025458 	.word	0x58025458
 8003ca8:	5802546c 	.word	0x5802546c
 8003cac:	58025480 	.word	0x58025480
 8003cb0:	58025494 	.word	0x58025494

08003cb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a42      	ldr	r2, [pc, #264]	; (8003dcc <DMA_CalcBaseAndBitshift+0x118>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d04a      	beq.n	8003d5c <DMA_CalcBaseAndBitshift+0xa8>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a41      	ldr	r2, [pc, #260]	; (8003dd0 <DMA_CalcBaseAndBitshift+0x11c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d045      	beq.n	8003d5c <DMA_CalcBaseAndBitshift+0xa8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a3f      	ldr	r2, [pc, #252]	; (8003dd4 <DMA_CalcBaseAndBitshift+0x120>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d040      	beq.n	8003d5c <DMA_CalcBaseAndBitshift+0xa8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a3e      	ldr	r2, [pc, #248]	; (8003dd8 <DMA_CalcBaseAndBitshift+0x124>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d03b      	beq.n	8003d5c <DMA_CalcBaseAndBitshift+0xa8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a3c      	ldr	r2, [pc, #240]	; (8003ddc <DMA_CalcBaseAndBitshift+0x128>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d036      	beq.n	8003d5c <DMA_CalcBaseAndBitshift+0xa8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a3b      	ldr	r2, [pc, #236]	; (8003de0 <DMA_CalcBaseAndBitshift+0x12c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d031      	beq.n	8003d5c <DMA_CalcBaseAndBitshift+0xa8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a39      	ldr	r2, [pc, #228]	; (8003de4 <DMA_CalcBaseAndBitshift+0x130>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d02c      	beq.n	8003d5c <DMA_CalcBaseAndBitshift+0xa8>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a38      	ldr	r2, [pc, #224]	; (8003de8 <DMA_CalcBaseAndBitshift+0x134>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d027      	beq.n	8003d5c <DMA_CalcBaseAndBitshift+0xa8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a36      	ldr	r2, [pc, #216]	; (8003dec <DMA_CalcBaseAndBitshift+0x138>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d022      	beq.n	8003d5c <DMA_CalcBaseAndBitshift+0xa8>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a35      	ldr	r2, [pc, #212]	; (8003df0 <DMA_CalcBaseAndBitshift+0x13c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d01d      	beq.n	8003d5c <DMA_CalcBaseAndBitshift+0xa8>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a33      	ldr	r2, [pc, #204]	; (8003df4 <DMA_CalcBaseAndBitshift+0x140>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d018      	beq.n	8003d5c <DMA_CalcBaseAndBitshift+0xa8>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a32      	ldr	r2, [pc, #200]	; (8003df8 <DMA_CalcBaseAndBitshift+0x144>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d013      	beq.n	8003d5c <DMA_CalcBaseAndBitshift+0xa8>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a30      	ldr	r2, [pc, #192]	; (8003dfc <DMA_CalcBaseAndBitshift+0x148>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00e      	beq.n	8003d5c <DMA_CalcBaseAndBitshift+0xa8>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a2f      	ldr	r2, [pc, #188]	; (8003e00 <DMA_CalcBaseAndBitshift+0x14c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d009      	beq.n	8003d5c <DMA_CalcBaseAndBitshift+0xa8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a2d      	ldr	r2, [pc, #180]	; (8003e04 <DMA_CalcBaseAndBitshift+0x150>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d004      	beq.n	8003d5c <DMA_CalcBaseAndBitshift+0xa8>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2c      	ldr	r2, [pc, #176]	; (8003e08 <DMA_CalcBaseAndBitshift+0x154>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d101      	bne.n	8003d60 <DMA_CalcBaseAndBitshift+0xac>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e000      	b.n	8003d62 <DMA_CalcBaseAndBitshift+0xae>
 8003d60:	2300      	movs	r3, #0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d024      	beq.n	8003db0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	3b10      	subs	r3, #16
 8003d6e:	4a27      	ldr	r2, [pc, #156]	; (8003e0c <DMA_CalcBaseAndBitshift+0x158>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	4a24      	ldr	r2, [pc, #144]	; (8003e10 <DMA_CalcBaseAndBitshift+0x15c>)
 8003d80:	5cd3      	ldrb	r3, [r2, r3]
 8003d82:	461a      	mov	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d908      	bls.n	8003da0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	4b1f      	ldr	r3, [pc, #124]	; (8003e14 <DMA_CalcBaseAndBitshift+0x160>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	1d1a      	adds	r2, r3, #4
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	659a      	str	r2, [r3, #88]	; 0x58
 8003d9e:	e00d      	b.n	8003dbc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <DMA_CalcBaseAndBitshift+0x160>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6593      	str	r3, [r2, #88]	; 0x58
 8003dae:	e005      	b.n	8003dbc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	40020010 	.word	0x40020010
 8003dd0:	40020028 	.word	0x40020028
 8003dd4:	40020040 	.word	0x40020040
 8003dd8:	40020058 	.word	0x40020058
 8003ddc:	40020070 	.word	0x40020070
 8003de0:	40020088 	.word	0x40020088
 8003de4:	400200a0 	.word	0x400200a0
 8003de8:	400200b8 	.word	0x400200b8
 8003dec:	40020410 	.word	0x40020410
 8003df0:	40020428 	.word	0x40020428
 8003df4:	40020440 	.word	0x40020440
 8003df8:	40020458 	.word	0x40020458
 8003dfc:	40020470 	.word	0x40020470
 8003e00:	40020488 	.word	0x40020488
 8003e04:	400204a0 	.word	0x400204a0
 8003e08:	400204b8 	.word	0x400204b8
 8003e0c:	aaaaaaab 	.word	0xaaaaaaab
 8003e10:	08009250 	.word	0x08009250
 8003e14:	fffffc00 	.word	0xfffffc00

08003e18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e20:	2300      	movs	r3, #0
 8003e22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d120      	bne.n	8003e6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d858      	bhi.n	8003ee6 <DMA_CheckFifoParam+0xce>
 8003e34:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <DMA_CheckFifoParam+0x24>)
 8003e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3a:	bf00      	nop
 8003e3c:	08003e4d 	.word	0x08003e4d
 8003e40:	08003e5f 	.word	0x08003e5f
 8003e44:	08003e4d 	.word	0x08003e4d
 8003e48:	08003ee7 	.word	0x08003ee7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d048      	beq.n	8003eea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e5c:	e045      	b.n	8003eea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e66:	d142      	bne.n	8003eee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e6c:	e03f      	b.n	8003eee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e76:	d123      	bne.n	8003ec0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d838      	bhi.n	8003ef2 <DMA_CheckFifoParam+0xda>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <DMA_CheckFifoParam+0x70>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003e99 	.word	0x08003e99
 8003e8c:	08003e9f 	.word	0x08003e9f
 8003e90:	08003e99 	.word	0x08003e99
 8003e94:	08003eb1 	.word	0x08003eb1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
        break;
 8003e9c:	e030      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d025      	beq.n	8003ef6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003eae:	e022      	b.n	8003ef6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003eb8:	d11f      	bne.n	8003efa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ebe:	e01c      	b.n	8003efa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d902      	bls.n	8003ece <DMA_CheckFifoParam+0xb6>
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d003      	beq.n	8003ed4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003ecc:	e018      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ed2:	e015      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00e      	beq.n	8003efe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
    break;
 8003ee4:	e00b      	b.n	8003efe <DMA_CheckFifoParam+0xe6>
        break;
 8003ee6:	bf00      	nop
 8003ee8:	e00a      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
        break;
 8003eea:	bf00      	nop
 8003eec:	e008      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
        break;
 8003eee:	bf00      	nop
 8003ef0:	e006      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
        break;
 8003ef2:	bf00      	nop
 8003ef4:	e004      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
        break;
 8003ef6:	bf00      	nop
 8003ef8:	e002      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
        break;
 8003efa:	bf00      	nop
 8003efc:	e000      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
    break;
 8003efe:	bf00      	nop
    }
  }

  return status;
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop

08003f10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a38      	ldr	r2, [pc, #224]	; (8004004 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d022      	beq.n	8003f6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a36      	ldr	r2, [pc, #216]	; (8004008 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d01d      	beq.n	8003f6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a35      	ldr	r2, [pc, #212]	; (800400c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d018      	beq.n	8003f6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a33      	ldr	r2, [pc, #204]	; (8004010 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d013      	beq.n	8003f6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a32      	ldr	r2, [pc, #200]	; (8004014 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00e      	beq.n	8003f6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a30      	ldr	r2, [pc, #192]	; (8004018 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d009      	beq.n	8003f6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a2f      	ldr	r2, [pc, #188]	; (800401c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d004      	beq.n	8003f6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a2d      	ldr	r2, [pc, #180]	; (8004020 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d101      	bne.n	8003f72 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003f72:	2300      	movs	r3, #0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01a      	beq.n	8003fae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	3b08      	subs	r3, #8
 8003f80:	4a28      	ldr	r2, [pc, #160]	; (8004024 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	091b      	lsrs	r3, r3, #4
 8003f88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4b26      	ldr	r3, [pc, #152]	; (8004028 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	461a      	mov	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a24      	ldr	r2, [pc, #144]	; (800402c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003f9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 031f 	and.w	r3, r3, #31
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	409a      	lsls	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003fac:	e024      	b.n	8003ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	3b10      	subs	r3, #16
 8003fb6:	4a1e      	ldr	r2, [pc, #120]	; (8004030 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4a1c      	ldr	r2, [pc, #112]	; (8004034 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d806      	bhi.n	8003fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4a1b      	ldr	r2, [pc, #108]	; (8004038 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d902      	bls.n	8003fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3308      	adds	r3, #8
 8003fd4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4b18      	ldr	r3, [pc, #96]	; (800403c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	461a      	mov	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a16      	ldr	r2, [pc, #88]	; (8004040 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003fe8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	58025408 	.word	0x58025408
 8004008:	5802541c 	.word	0x5802541c
 800400c:	58025430 	.word	0x58025430
 8004010:	58025444 	.word	0x58025444
 8004014:	58025458 	.word	0x58025458
 8004018:	5802546c 	.word	0x5802546c
 800401c:	58025480 	.word	0x58025480
 8004020:	58025494 	.word	0x58025494
 8004024:	cccccccd 	.word	0xcccccccd
 8004028:	16009600 	.word	0x16009600
 800402c:	58025880 	.word	0x58025880
 8004030:	aaaaaaab 	.word	0xaaaaaaab
 8004034:	400204b8 	.word	0x400204b8
 8004038:	4002040f 	.word	0x4002040f
 800403c:	10008200 	.word	0x10008200
 8004040:	40020880 	.word	0x40020880

08004044 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d04a      	beq.n	80040f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b08      	cmp	r3, #8
 800405e:	d847      	bhi.n	80040f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a25      	ldr	r2, [pc, #148]	; (80040fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d022      	beq.n	80040b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a24      	ldr	r2, [pc, #144]	; (8004100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d01d      	beq.n	80040b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a22      	ldr	r2, [pc, #136]	; (8004104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d018      	beq.n	80040b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a21      	ldr	r2, [pc, #132]	; (8004108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d013      	beq.n	80040b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1f      	ldr	r2, [pc, #124]	; (800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00e      	beq.n	80040b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1e      	ldr	r2, [pc, #120]	; (8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d009      	beq.n	80040b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1c      	ldr	r2, [pc, #112]	; (8004114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d004      	beq.n	80040b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1b      	ldr	r2, [pc, #108]	; (8004118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d101      	bne.n	80040b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80040b4:	2300      	movs	r3, #0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4b17      	ldr	r3, [pc, #92]	; (800411c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80040be:	4413      	add	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	461a      	mov	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a15      	ldr	r2, [pc, #84]	; (8004120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80040cc:	671a      	str	r2, [r3, #112]	; 0x70
 80040ce:	e009      	b.n	80040e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4b14      	ldr	r3, [pc, #80]	; (8004124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	461a      	mov	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a11      	ldr	r2, [pc, #68]	; (8004128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80040e2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	2201      	movs	r2, #1
 80040ea:	409a      	lsls	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80040f0:	bf00      	nop
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	58025408 	.word	0x58025408
 8004100:	5802541c 	.word	0x5802541c
 8004104:	58025430 	.word	0x58025430
 8004108:	58025444 	.word	0x58025444
 800410c:	58025458 	.word	0x58025458
 8004110:	5802546c 	.word	0x5802546c
 8004114:	58025480 	.word	0x58025480
 8004118:	58025494 	.word	0x58025494
 800411c:	1600963f 	.word	0x1600963f
 8004120:	58025940 	.word	0x58025940
 8004124:	1000823f 	.word	0x1000823f
 8004128:	40020940 	.word	0x40020940

0800412c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800412c:	b480      	push	{r7}
 800412e:	b089      	sub	sp, #36	; 0x24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800413a:	4b89      	ldr	r3, [pc, #548]	; (8004360 <HAL_GPIO_Init+0x234>)
 800413c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800413e:	e194      	b.n	800446a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	2101      	movs	r1, #1
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	fa01 f303 	lsl.w	r3, r1, r3
 800414c:	4013      	ands	r3, r2
 800414e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 8186 	beq.w	8004464 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b01      	cmp	r3, #1
 8004162:	d005      	beq.n	8004170 <HAL_GPIO_Init+0x44>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d130      	bne.n	80041d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	2203      	movs	r2, #3
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4013      	ands	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4313      	orrs	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041a6:	2201      	movs	r2, #1
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	43db      	mvns	r3, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4013      	ands	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	f003 0201 	and.w	r2, r3, #1
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d017      	beq.n	800420e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	2203      	movs	r2, #3
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43db      	mvns	r3, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4013      	ands	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4313      	orrs	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d123      	bne.n	8004262 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	08da      	lsrs	r2, r3, #3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3208      	adds	r2, #8
 8004222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	220f      	movs	r2, #15
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43db      	mvns	r3, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4013      	ands	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4313      	orrs	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	08da      	lsrs	r2, r3, #3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3208      	adds	r2, #8
 800425c:	69b9      	ldr	r1, [r7, #24]
 800425e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	2203      	movs	r2, #3
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	43db      	mvns	r3, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4013      	ands	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f003 0203 	and.w	r2, r3, #3
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 80e0 	beq.w	8004464 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042a4:	4b2f      	ldr	r3, [pc, #188]	; (8004364 <HAL_GPIO_Init+0x238>)
 80042a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042aa:	4a2e      	ldr	r2, [pc, #184]	; (8004364 <HAL_GPIO_Init+0x238>)
 80042ac:	f043 0302 	orr.w	r3, r3, #2
 80042b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80042b4:	4b2b      	ldr	r3, [pc, #172]	; (8004364 <HAL_GPIO_Init+0x238>)
 80042b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042c2:	4a29      	ldr	r2, [pc, #164]	; (8004368 <HAL_GPIO_Init+0x23c>)
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	089b      	lsrs	r3, r3, #2
 80042c8:	3302      	adds	r3, #2
 80042ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	220f      	movs	r2, #15
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4013      	ands	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a20      	ldr	r2, [pc, #128]	; (800436c <HAL_GPIO_Init+0x240>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d052      	beq.n	8004394 <HAL_GPIO_Init+0x268>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a1f      	ldr	r2, [pc, #124]	; (8004370 <HAL_GPIO_Init+0x244>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d031      	beq.n	800435a <HAL_GPIO_Init+0x22e>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a1e      	ldr	r2, [pc, #120]	; (8004374 <HAL_GPIO_Init+0x248>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d02b      	beq.n	8004356 <HAL_GPIO_Init+0x22a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a1d      	ldr	r2, [pc, #116]	; (8004378 <HAL_GPIO_Init+0x24c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d025      	beq.n	8004352 <HAL_GPIO_Init+0x226>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a1c      	ldr	r2, [pc, #112]	; (800437c <HAL_GPIO_Init+0x250>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d01f      	beq.n	800434e <HAL_GPIO_Init+0x222>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <HAL_GPIO_Init+0x254>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d019      	beq.n	800434a <HAL_GPIO_Init+0x21e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a1a      	ldr	r2, [pc, #104]	; (8004384 <HAL_GPIO_Init+0x258>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d013      	beq.n	8004346 <HAL_GPIO_Init+0x21a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a19      	ldr	r2, [pc, #100]	; (8004388 <HAL_GPIO_Init+0x25c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00d      	beq.n	8004342 <HAL_GPIO_Init+0x216>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a18      	ldr	r2, [pc, #96]	; (800438c <HAL_GPIO_Init+0x260>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d007      	beq.n	800433e <HAL_GPIO_Init+0x212>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a17      	ldr	r2, [pc, #92]	; (8004390 <HAL_GPIO_Init+0x264>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d101      	bne.n	800433a <HAL_GPIO_Init+0x20e>
 8004336:	2309      	movs	r3, #9
 8004338:	e02d      	b.n	8004396 <HAL_GPIO_Init+0x26a>
 800433a:	230a      	movs	r3, #10
 800433c:	e02b      	b.n	8004396 <HAL_GPIO_Init+0x26a>
 800433e:	2308      	movs	r3, #8
 8004340:	e029      	b.n	8004396 <HAL_GPIO_Init+0x26a>
 8004342:	2307      	movs	r3, #7
 8004344:	e027      	b.n	8004396 <HAL_GPIO_Init+0x26a>
 8004346:	2306      	movs	r3, #6
 8004348:	e025      	b.n	8004396 <HAL_GPIO_Init+0x26a>
 800434a:	2305      	movs	r3, #5
 800434c:	e023      	b.n	8004396 <HAL_GPIO_Init+0x26a>
 800434e:	2304      	movs	r3, #4
 8004350:	e021      	b.n	8004396 <HAL_GPIO_Init+0x26a>
 8004352:	2303      	movs	r3, #3
 8004354:	e01f      	b.n	8004396 <HAL_GPIO_Init+0x26a>
 8004356:	2302      	movs	r3, #2
 8004358:	e01d      	b.n	8004396 <HAL_GPIO_Init+0x26a>
 800435a:	2301      	movs	r3, #1
 800435c:	e01b      	b.n	8004396 <HAL_GPIO_Init+0x26a>
 800435e:	bf00      	nop
 8004360:	58000080 	.word	0x58000080
 8004364:	58024400 	.word	0x58024400
 8004368:	58000400 	.word	0x58000400
 800436c:	58020000 	.word	0x58020000
 8004370:	58020400 	.word	0x58020400
 8004374:	58020800 	.word	0x58020800
 8004378:	58020c00 	.word	0x58020c00
 800437c:	58021000 	.word	0x58021000
 8004380:	58021400 	.word	0x58021400
 8004384:	58021800 	.word	0x58021800
 8004388:	58021c00 	.word	0x58021c00
 800438c:	58022000 	.word	0x58022000
 8004390:	58022400 	.word	0x58022400
 8004394:	2300      	movs	r3, #0
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	f002 0203 	and.w	r2, r2, #3
 800439c:	0092      	lsls	r2, r2, #2
 800439e:	4093      	lsls	r3, r2
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043a6:	4938      	ldr	r1, [pc, #224]	; (8004488 <HAL_GPIO_Init+0x35c>)
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	089b      	lsrs	r3, r3, #2
 80043ac:	3302      	adds	r3, #2
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	43db      	mvns	r3, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4013      	ands	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80043da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80043e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	43db      	mvns	r3, r3
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4013      	ands	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004408:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	43db      	mvns	r3, r3
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4013      	ands	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	3301      	adds	r3, #1
 8004468:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	f47f ae63 	bne.w	8004140 <HAL_GPIO_Init+0x14>
  }
}
 800447a:	bf00      	nop
 800447c:	bf00      	nop
 800447e:	3724      	adds	r7, #36	; 0x24
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	58000400 	.word	0x58000400

0800448c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004494:	4a08      	ldr	r2, [pc, #32]	; (80044b8 <HAL_HSEM_FastTake+0x2c>)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3320      	adds	r3, #32
 800449a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800449e:	4a07      	ldr	r2, [pc, #28]	; (80044bc <HAL_HSEM_FastTake+0x30>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d101      	bne.n	80044a8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	e000      	b.n	80044aa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	58026400 	.word	0x58026400
 80044bc:	80000300 	.word	0x80000300

080044c0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80044ca:	4906      	ldr	r1, [pc, #24]	; (80044e4 <HAL_HSEM_Release+0x24>)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	58026400 	.word	0x58026400

080044e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80044f0:	4b29      	ldr	r3, [pc, #164]	; (8004598 <HAL_PWREx_ConfigSupply+0xb0>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	2b06      	cmp	r3, #6
 80044fa:	d00a      	beq.n	8004512 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80044fc:	4b26      	ldr	r3, [pc, #152]	; (8004598 <HAL_PWREx_ConfigSupply+0xb0>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	429a      	cmp	r2, r3
 8004508:	d001      	beq.n	800450e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e040      	b.n	8004590 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	e03e      	b.n	8004590 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004512:	4b21      	ldr	r3, [pc, #132]	; (8004598 <HAL_PWREx_ConfigSupply+0xb0>)
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800451a:	491f      	ldr	r1, [pc, #124]	; (8004598 <HAL_PWREx_ConfigSupply+0xb0>)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4313      	orrs	r3, r2
 8004520:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004522:	f7fc fe23 	bl	800116c <HAL_GetTick>
 8004526:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004528:	e009      	b.n	800453e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800452a:	f7fc fe1f 	bl	800116c <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004538:	d901      	bls.n	800453e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e028      	b.n	8004590 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800453e:	4b16      	ldr	r3, [pc, #88]	; (8004598 <HAL_PWREx_ConfigSupply+0xb0>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800454a:	d1ee      	bne.n	800452a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b1e      	cmp	r3, #30
 8004550:	d008      	beq.n	8004564 <HAL_PWREx_ConfigSupply+0x7c>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b2e      	cmp	r3, #46	; 0x2e
 8004556:	d005      	beq.n	8004564 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b1d      	cmp	r3, #29
 800455c:	d002      	beq.n	8004564 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b2d      	cmp	r3, #45	; 0x2d
 8004562:	d114      	bne.n	800458e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004564:	f7fc fe02 	bl	800116c <HAL_GetTick>
 8004568:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800456a:	e009      	b.n	8004580 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800456c:	f7fc fdfe 	bl	800116c <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800457a:	d901      	bls.n	8004580 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e007      	b.n	8004590 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004580:	4b05      	ldr	r3, [pc, #20]	; (8004598 <HAL_PWREx_ConfigSupply+0xb0>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458c:	d1ee      	bne.n	800456c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	58024800 	.word	0x58024800

0800459c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08c      	sub	sp, #48	; 0x30
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d102      	bne.n	80045b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f000 bc48 	b.w	8004e40 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8088 	beq.w	80046ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045be:	4b99      	ldr	r3, [pc, #612]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045c8:	4b96      	ldr	r3, [pc, #600]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d0:	2b10      	cmp	r3, #16
 80045d2:	d007      	beq.n	80045e4 <HAL_RCC_OscConfig+0x48>
 80045d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d6:	2b18      	cmp	r3, #24
 80045d8:	d111      	bne.n	80045fe <HAL_RCC_OscConfig+0x62>
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d10c      	bne.n	80045fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e4:	4b8f      	ldr	r3, [pc, #572]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d06d      	beq.n	80046cc <HAL_RCC_OscConfig+0x130>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d169      	bne.n	80046cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	f000 bc21 	b.w	8004e40 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004606:	d106      	bne.n	8004616 <HAL_RCC_OscConfig+0x7a>
 8004608:	4b86      	ldr	r3, [pc, #536]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a85      	ldr	r2, [pc, #532]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 800460e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	e02e      	b.n	8004674 <HAL_RCC_OscConfig+0xd8>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10c      	bne.n	8004638 <HAL_RCC_OscConfig+0x9c>
 800461e:	4b81      	ldr	r3, [pc, #516]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a80      	ldr	r2, [pc, #512]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 8004624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	4b7e      	ldr	r3, [pc, #504]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a7d      	ldr	r2, [pc, #500]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 8004630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	e01d      	b.n	8004674 <HAL_RCC_OscConfig+0xd8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004640:	d10c      	bne.n	800465c <HAL_RCC_OscConfig+0xc0>
 8004642:	4b78      	ldr	r3, [pc, #480]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a77      	ldr	r2, [pc, #476]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 8004648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	4b75      	ldr	r3, [pc, #468]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a74      	ldr	r2, [pc, #464]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 8004654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	e00b      	b.n	8004674 <HAL_RCC_OscConfig+0xd8>
 800465c:	4b71      	ldr	r3, [pc, #452]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a70      	ldr	r2, [pc, #448]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 8004662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	4b6e      	ldr	r3, [pc, #440]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a6d      	ldr	r2, [pc, #436]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 800466e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d013      	beq.n	80046a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467c:	f7fc fd76 	bl	800116c <HAL_GetTick>
 8004680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004684:	f7fc fd72 	bl	800116c <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b64      	cmp	r3, #100	; 0x64
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e3d4      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004696:	4b63      	ldr	r3, [pc, #396]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0xe8>
 80046a2:	e014      	b.n	80046ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fc fd62 	bl	800116c <HAL_GetTick>
 80046a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ac:	f7fc fd5e 	bl	800116c <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b64      	cmp	r3, #100	; 0x64
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e3c0      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046be:	4b59      	ldr	r3, [pc, #356]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x110>
 80046ca:	e000      	b.n	80046ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80ca 	beq.w	8004870 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046dc:	4b51      	ldr	r3, [pc, #324]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046e6:	4b4f      	ldr	r3, [pc, #316]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <HAL_RCC_OscConfig+0x166>
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	2b18      	cmp	r3, #24
 80046f6:	d156      	bne.n	80047a6 <HAL_RCC_OscConfig+0x20a>
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d151      	bne.n	80047a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004702:	4b48      	ldr	r3, [pc, #288]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <HAL_RCC_OscConfig+0x17e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e392      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800471a:	4b42      	ldr	r3, [pc, #264]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f023 0219 	bic.w	r2, r3, #25
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	493f      	ldr	r1, [pc, #252]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 8004728:	4313      	orrs	r3, r2
 800472a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fc fd1e 	bl	800116c <HAL_GetTick>
 8004730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004734:	f7fc fd1a 	bl	800116c <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e37c      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004746:	4b37      	ldr	r3, [pc, #220]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0f0      	beq.n	8004734 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004752:	f7fc fd17 	bl	8001184 <HAL_GetREVID>
 8004756:	4603      	mov	r3, r0
 8004758:	f241 0203 	movw	r2, #4099	; 0x1003
 800475c:	4293      	cmp	r3, r2
 800475e:	d817      	bhi.n	8004790 <HAL_RCC_OscConfig+0x1f4>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	2b40      	cmp	r3, #64	; 0x40
 8004766:	d108      	bne.n	800477a <HAL_RCC_OscConfig+0x1de>
 8004768:	4b2e      	ldr	r3, [pc, #184]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004770:	4a2c      	ldr	r2, [pc, #176]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 8004772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004776:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004778:	e07a      	b.n	8004870 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477a:	4b2a      	ldr	r3, [pc, #168]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	031b      	lsls	r3, r3, #12
 8004788:	4926      	ldr	r1, [pc, #152]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 800478a:	4313      	orrs	r3, r2
 800478c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800478e:	e06f      	b.n	8004870 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004790:	4b24      	ldr	r3, [pc, #144]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	061b      	lsls	r3, r3, #24
 800479e:	4921      	ldr	r1, [pc, #132]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047a4:	e064      	b.n	8004870 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d047      	beq.n	800483e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f023 0219 	bic.w	r2, r3, #25
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	491a      	ldr	r1, [pc, #104]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fc fcd4 	bl	800116c <HAL_GetTick>
 80047c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047c8:	f7fc fcd0 	bl	800116c <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e332      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047da:	4b12      	ldr	r3, [pc, #72]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e6:	f7fc fccd 	bl	8001184 <HAL_GetREVID>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d819      	bhi.n	8004828 <HAL_RCC_OscConfig+0x28c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d108      	bne.n	800480e <HAL_RCC_OscConfig+0x272>
 80047fc:	4b09      	ldr	r3, [pc, #36]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004804:	4a07      	ldr	r2, [pc, #28]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 8004806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800480a:	6053      	str	r3, [r2, #4]
 800480c:	e030      	b.n	8004870 <HAL_RCC_OscConfig+0x2d4>
 800480e:	4b05      	ldr	r3, [pc, #20]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	031b      	lsls	r3, r3, #12
 800481c:	4901      	ldr	r1, [pc, #4]	; (8004824 <HAL_RCC_OscConfig+0x288>)
 800481e:	4313      	orrs	r3, r2
 8004820:	604b      	str	r3, [r1, #4]
 8004822:	e025      	b.n	8004870 <HAL_RCC_OscConfig+0x2d4>
 8004824:	58024400 	.word	0x58024400
 8004828:	4b9a      	ldr	r3, [pc, #616]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	061b      	lsls	r3, r3, #24
 8004836:	4997      	ldr	r1, [pc, #604]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004838:	4313      	orrs	r3, r2
 800483a:	604b      	str	r3, [r1, #4]
 800483c:	e018      	b.n	8004870 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800483e:	4b95      	ldr	r3, [pc, #596]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a94      	ldr	r2, [pc, #592]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484a:	f7fc fc8f 	bl	800116c <HAL_GetTick>
 800484e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004852:	f7fc fc8b 	bl	800116c <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e2ed      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004864:	4b8b      	ldr	r3, [pc, #556]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1f0      	bne.n	8004852 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80a9 	beq.w	80049d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800487e:	4b85      	ldr	r3, [pc, #532]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004886:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004888:	4b82      	ldr	r3, [pc, #520]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d007      	beq.n	80048a4 <HAL_RCC_OscConfig+0x308>
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	2b18      	cmp	r3, #24
 8004898:	d13a      	bne.n	8004910 <HAL_RCC_OscConfig+0x374>
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d135      	bne.n	8004910 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048a4:	4b7b      	ldr	r3, [pc, #492]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_OscConfig+0x320>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	2b80      	cmp	r3, #128	; 0x80
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e2c1      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048bc:	f7fc fc62 	bl	8001184 <HAL_GetREVID>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d817      	bhi.n	80048fa <HAL_RCC_OscConfig+0x35e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d108      	bne.n	80048e4 <HAL_RCC_OscConfig+0x348>
 80048d2:	4b70      	ldr	r3, [pc, #448]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80048da:	4a6e      	ldr	r2, [pc, #440]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80048dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048e2:	e075      	b.n	80049d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048e4:	4b6b      	ldr	r3, [pc, #428]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	069b      	lsls	r3, r3, #26
 80048f2:	4968      	ldr	r1, [pc, #416]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048f8:	e06a      	b.n	80049d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048fa:	4b66      	ldr	r3, [pc, #408]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	061b      	lsls	r3, r3, #24
 8004908:	4962      	ldr	r1, [pc, #392]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 800490a:	4313      	orrs	r3, r2
 800490c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800490e:	e05f      	b.n	80049d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d042      	beq.n	800499e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004918:	4b5e      	ldr	r3, [pc, #376]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a5d      	ldr	r2, [pc, #372]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 800491e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004924:	f7fc fc22 	bl	800116c <HAL_GetTick>
 8004928:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800492c:	f7fc fc1e 	bl	800116c <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e280      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800493e:	4b55      	ldr	r3, [pc, #340]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800494a:	f7fc fc1b 	bl	8001184 <HAL_GetREVID>
 800494e:	4603      	mov	r3, r0
 8004950:	f241 0203 	movw	r2, #4099	; 0x1003
 8004954:	4293      	cmp	r3, r2
 8004956:	d817      	bhi.n	8004988 <HAL_RCC_OscConfig+0x3ec>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	2b20      	cmp	r3, #32
 800495e:	d108      	bne.n	8004972 <HAL_RCC_OscConfig+0x3d6>
 8004960:	4b4c      	ldr	r3, [pc, #304]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004968:	4a4a      	ldr	r2, [pc, #296]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 800496a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800496e:	6053      	str	r3, [r2, #4]
 8004970:	e02e      	b.n	80049d0 <HAL_RCC_OscConfig+0x434>
 8004972:	4b48      	ldr	r3, [pc, #288]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	069b      	lsls	r3, r3, #26
 8004980:	4944      	ldr	r1, [pc, #272]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004982:	4313      	orrs	r3, r2
 8004984:	604b      	str	r3, [r1, #4]
 8004986:	e023      	b.n	80049d0 <HAL_RCC_OscConfig+0x434>
 8004988:	4b42      	ldr	r3, [pc, #264]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	061b      	lsls	r3, r3, #24
 8004996:	493f      	ldr	r1, [pc, #252]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004998:	4313      	orrs	r3, r2
 800499a:	60cb      	str	r3, [r1, #12]
 800499c:	e018      	b.n	80049d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800499e:	4b3d      	ldr	r3, [pc, #244]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a3c      	ldr	r2, [pc, #240]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80049a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049aa:	f7fc fbdf 	bl	800116c <HAL_GetTick>
 80049ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049b2:	f7fc fbdb 	bl	800116c <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e23d      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049c4:	4b33      	ldr	r3, [pc, #204]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f0      	bne.n	80049b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d036      	beq.n	8004a4a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d019      	beq.n	8004a18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049e4:	4b2b      	ldr	r3, [pc, #172]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80049e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e8:	4a2a      	ldr	r2, [pc, #168]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f0:	f7fc fbbc 	bl	800116c <HAL_GetTick>
 80049f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f8:	f7fc fbb8 	bl	800116c <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e21a      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a0a:	4b22      	ldr	r3, [pc, #136]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0f0      	beq.n	80049f8 <HAL_RCC_OscConfig+0x45c>
 8004a16:	e018      	b.n	8004a4a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a18:	4b1e      	ldr	r3, [pc, #120]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1c:	4a1d      	ldr	r2, [pc, #116]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004a1e:	f023 0301 	bic.w	r3, r3, #1
 8004a22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a24:	f7fc fba2 	bl	800116c <HAL_GetTick>
 8004a28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a2c:	f7fc fb9e 	bl	800116c <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e200      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a3e:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d039      	beq.n	8004aca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01c      	beq.n	8004a98 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a0c      	ldr	r2, [pc, #48]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004a64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a6a:	f7fc fb7f 	bl	800116c <HAL_GetTick>
 8004a6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a72:	f7fc fb7b 	bl	800116c <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e1dd      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a84:	4b03      	ldr	r3, [pc, #12]	; (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f0      	beq.n	8004a72 <HAL_RCC_OscConfig+0x4d6>
 8004a90:	e01b      	b.n	8004aca <HAL_RCC_OscConfig+0x52e>
 8004a92:	bf00      	nop
 8004a94:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a98:	4b9b      	ldr	r3, [pc, #620]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a9a      	ldr	r2, [pc, #616]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aa2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004aa4:	f7fc fb62 	bl	800116c <HAL_GetTick>
 8004aa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aac:	f7fc fb5e 	bl	800116c <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e1c0      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004abe:	4b92      	ldr	r3, [pc, #584]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8081 	beq.w	8004bda <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ad8:	4b8c      	ldr	r3, [pc, #560]	; (8004d0c <HAL_RCC_OscConfig+0x770>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a8b      	ldr	r2, [pc, #556]	; (8004d0c <HAL_RCC_OscConfig+0x770>)
 8004ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ae4:	f7fc fb42 	bl	800116c <HAL_GetTick>
 8004ae8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aec:	f7fc fb3e 	bl	800116c <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b64      	cmp	r3, #100	; 0x64
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e1a0      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004afe:	4b83      	ldr	r3, [pc, #524]	; (8004d0c <HAL_RCC_OscConfig+0x770>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d106      	bne.n	8004b20 <HAL_RCC_OscConfig+0x584>
 8004b12:	4b7d      	ldr	r3, [pc, #500]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	4a7c      	ldr	r2, [pc, #496]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b1e:	e02d      	b.n	8004b7c <HAL_RCC_OscConfig+0x5e0>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10c      	bne.n	8004b42 <HAL_RCC_OscConfig+0x5a6>
 8004b28:	4b77      	ldr	r3, [pc, #476]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	4a76      	ldr	r2, [pc, #472]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b2e:	f023 0301 	bic.w	r3, r3, #1
 8004b32:	6713      	str	r3, [r2, #112]	; 0x70
 8004b34:	4b74      	ldr	r3, [pc, #464]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b38:	4a73      	ldr	r2, [pc, #460]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b3a:	f023 0304 	bic.w	r3, r3, #4
 8004b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b40:	e01c      	b.n	8004b7c <HAL_RCC_OscConfig+0x5e0>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	2b05      	cmp	r3, #5
 8004b48:	d10c      	bne.n	8004b64 <HAL_RCC_OscConfig+0x5c8>
 8004b4a:	4b6f      	ldr	r3, [pc, #444]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	4a6e      	ldr	r2, [pc, #440]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b50:	f043 0304 	orr.w	r3, r3, #4
 8004b54:	6713      	str	r3, [r2, #112]	; 0x70
 8004b56:	4b6c      	ldr	r3, [pc, #432]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	4a6b      	ldr	r2, [pc, #428]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b5c:	f043 0301 	orr.w	r3, r3, #1
 8004b60:	6713      	str	r3, [r2, #112]	; 0x70
 8004b62:	e00b      	b.n	8004b7c <HAL_RCC_OscConfig+0x5e0>
 8004b64:	4b68      	ldr	r3, [pc, #416]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b68:	4a67      	ldr	r2, [pc, #412]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b70:	4b65      	ldr	r3, [pc, #404]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b74:	4a64      	ldr	r2, [pc, #400]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b76:	f023 0304 	bic.w	r3, r3, #4
 8004b7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d015      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b84:	f7fc faf2 	bl	800116c <HAL_GetTick>
 8004b88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b8a:	e00a      	b.n	8004ba2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b8c:	f7fc faee 	bl	800116c <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e14e      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ba2:	4b59      	ldr	r3, [pc, #356]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0ee      	beq.n	8004b8c <HAL_RCC_OscConfig+0x5f0>
 8004bae:	e014      	b.n	8004bda <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb0:	f7fc fadc 	bl	800116c <HAL_GetTick>
 8004bb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bb6:	e00a      	b.n	8004bce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb8:	f7fc fad8 	bl	800116c <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e138      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bce:	4b4e      	ldr	r3, [pc, #312]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1ee      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 812d 	beq.w	8004e3e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004be4:	4b48      	ldr	r3, [pc, #288]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bec:	2b18      	cmp	r3, #24
 8004bee:	f000 80bd 	beq.w	8004d6c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	f040 809e 	bne.w	8004d38 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bfc:	4b42      	ldr	r3, [pc, #264]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a41      	ldr	r2, [pc, #260]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7fc fab0 	bl	800116c <HAL_GetTick>
 8004c0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c10:	f7fc faac 	bl	800116c <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e10e      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c22:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c2e:	4b36      	ldr	r3, [pc, #216]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c32:	4b37      	ldr	r3, [pc, #220]	; (8004d10 <HAL_RCC_OscConfig+0x774>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c3e:	0112      	lsls	r2, r2, #4
 8004c40:	430a      	orrs	r2, r1
 8004c42:	4931      	ldr	r1, [pc, #196]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	628b      	str	r3, [r1, #40]	; 0x28
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c56:	3b01      	subs	r3, #1
 8004c58:	025b      	lsls	r3, r3, #9
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	3b01      	subs	r3, #1
 8004c64:	041b      	lsls	r3, r3, #16
 8004c66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c70:	3b01      	subs	r3, #1
 8004c72:	061b      	lsls	r3, r3, #24
 8004c74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c78:	4923      	ldr	r1, [pc, #140]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004c7e:	4b22      	ldr	r3, [pc, #136]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	4a21      	ldr	r2, [pc, #132]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c8a:	4b1f      	ldr	r3, [pc, #124]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c8e:	4b21      	ldr	r3, [pc, #132]	; (8004d14 <HAL_RCC_OscConfig+0x778>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c96:	00d2      	lsls	r2, r2, #3
 8004c98:	491b      	ldr	r1, [pc, #108]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c9e:	4b1a      	ldr	r3, [pc, #104]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	f023 020c 	bic.w	r2, r3, #12
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	4917      	ldr	r1, [pc, #92]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004cb0:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	f023 0202 	bic.w	r2, r3, #2
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbc:	4912      	ldr	r1, [pc, #72]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004cc2:	4b11      	ldr	r3, [pc, #68]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	4a10      	ldr	r2, [pc, #64]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cce:	4b0e      	ldr	r3, [pc, #56]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd2:	4a0d      	ldr	r2, [pc, #52]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004cda:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cea:	4a07      	ldr	r2, [pc, #28]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cf2:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a04      	ldr	r2, [pc, #16]	; (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfe:	f7fc fa35 	bl	800116c <HAL_GetTick>
 8004d02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d04:	e011      	b.n	8004d2a <HAL_RCC_OscConfig+0x78e>
 8004d06:	bf00      	nop
 8004d08:	58024400 	.word	0x58024400
 8004d0c:	58024800 	.word	0x58024800
 8004d10:	fffffc0c 	.word	0xfffffc0c
 8004d14:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d18:	f7fc fa28 	bl	800116c <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e08a      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d2a:	4b47      	ldr	r3, [pc, #284]	; (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0x77c>
 8004d36:	e082      	b.n	8004e3e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d38:	4b43      	ldr	r3, [pc, #268]	; (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a42      	ldr	r2, [pc, #264]	; (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d44:	f7fc fa12 	bl	800116c <HAL_GetTick>
 8004d48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4c:	f7fc fa0e 	bl	800116c <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e070      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d5e:	4b3a      	ldr	r3, [pc, #232]	; (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0x7b0>
 8004d6a:	e068      	b.n	8004e3e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d6c:	4b36      	ldr	r3, [pc, #216]	; (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d72:	4b35      	ldr	r3, [pc, #212]	; (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d031      	beq.n	8004de4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f003 0203 	and.w	r2, r3, #3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d12a      	bne.n	8004de4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	091b      	lsrs	r3, r3, #4
 8004d92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d122      	bne.n	8004de4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d11a      	bne.n	8004de4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	0a5b      	lsrs	r3, r3, #9
 8004db2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d111      	bne.n	8004de4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	0c1b      	lsrs	r3, r3, #16
 8004dc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d108      	bne.n	8004de4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	0e1b      	lsrs	r3, r3, #24
 8004dd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dde:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d001      	beq.n	8004de8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e02b      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004de8:	4b17      	ldr	r3, [pc, #92]	; (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	08db      	lsrs	r3, r3, #3
 8004dee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004df2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d01f      	beq.n	8004e3e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004dfe:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	4a11      	ldr	r2, [pc, #68]	; (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004e04:	f023 0301 	bic.w	r3, r3, #1
 8004e08:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e0a:	f7fc f9af 	bl	800116c <HAL_GetTick>
 8004e0e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004e10:	bf00      	nop
 8004e12:	f7fc f9ab 	bl	800116c <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d0f9      	beq.n	8004e12 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e1e:	4b0a      	ldr	r3, [pc, #40]	; (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e22:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <HAL_RCC_OscConfig+0x8b0>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e2a:	00d2      	lsls	r2, r2, #3
 8004e2c:	4906      	ldr	r1, [pc, #24]	; (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004e32:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	4a04      	ldr	r2, [pc, #16]	; (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004e38:	f043 0301 	orr.w	r3, r3, #1
 8004e3c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3730      	adds	r7, #48	; 0x30
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	58024400 	.word	0x58024400
 8004e4c:	ffff0007 	.word	0xffff0007

08004e50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e19c      	b.n	800519e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e64:	4b8a      	ldr	r3, [pc, #552]	; (8005090 <HAL_RCC_ClockConfig+0x240>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d910      	bls.n	8004e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e72:	4b87      	ldr	r3, [pc, #540]	; (8005090 <HAL_RCC_ClockConfig+0x240>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f023 020f 	bic.w	r2, r3, #15
 8004e7a:	4985      	ldr	r1, [pc, #532]	; (8005090 <HAL_RCC_ClockConfig+0x240>)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e82:	4b83      	ldr	r3, [pc, #524]	; (8005090 <HAL_RCC_ClockConfig+0x240>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d001      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e184      	b.n	800519e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d010      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	4b7b      	ldr	r3, [pc, #492]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d908      	bls.n	8004ec2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004eb0:	4b78      	ldr	r3, [pc, #480]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	4975      	ldr	r1, [pc, #468]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d010      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695a      	ldr	r2, [r3, #20]
 8004ed2:	4b70      	ldr	r3, [pc, #448]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d908      	bls.n	8004ef0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ede:	4b6d      	ldr	r3, [pc, #436]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	496a      	ldr	r1, [pc, #424]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0310 	and.w	r3, r3, #16
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d010      	beq.n	8004f1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699a      	ldr	r2, [r3, #24]
 8004f00:	4b64      	ldr	r3, [pc, #400]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d908      	bls.n	8004f1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f0c:	4b61      	ldr	r3, [pc, #388]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	495e      	ldr	r1, [pc, #376]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0320 	and.w	r3, r3, #32
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d010      	beq.n	8004f4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69da      	ldr	r2, [r3, #28]
 8004f2e:	4b59      	ldr	r3, [pc, #356]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d908      	bls.n	8004f4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f3a:	4b56      	ldr	r3, [pc, #344]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	4953      	ldr	r1, [pc, #332]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d010      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	4b4d      	ldr	r3, [pc, #308]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d908      	bls.n	8004f7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f68:	4b4a      	ldr	r3, [pc, #296]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	f023 020f 	bic.w	r2, r3, #15
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	4947      	ldr	r1, [pc, #284]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d055      	beq.n	8005032 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f86:	4b43      	ldr	r3, [pc, #268]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	4940      	ldr	r1, [pc, #256]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d107      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fa0:	4b3c      	ldr	r3, [pc, #240]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d121      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0f6      	b.n	800519e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d107      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fb8:	4b36      	ldr	r3, [pc, #216]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d115      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0ea      	b.n	800519e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d107      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fd0:	4b30      	ldr	r3, [pc, #192]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d109      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0de      	b.n	800519e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fe0:	4b2c      	ldr	r3, [pc, #176]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0d6      	b.n	800519e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ff0:	4b28      	ldr	r3, [pc, #160]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	f023 0207 	bic.w	r2, r3, #7
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	4925      	ldr	r1, [pc, #148]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005002:	f7fc f8b3 	bl	800116c <HAL_GetTick>
 8005006:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005008:	e00a      	b.n	8005020 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800500a:	f7fc f8af 	bl	800116c <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	f241 3288 	movw	r2, #5000	; 0x1388
 8005018:	4293      	cmp	r3, r2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e0be      	b.n	800519e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005020:	4b1c      	ldr	r3, [pc, #112]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	429a      	cmp	r2, r3
 8005030:	d1eb      	bne.n	800500a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d010      	beq.n	8005060 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	4b14      	ldr	r3, [pc, #80]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	429a      	cmp	r2, r3
 800504c:	d208      	bcs.n	8005060 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800504e:	4b11      	ldr	r3, [pc, #68]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f023 020f 	bic.w	r2, r3, #15
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	490e      	ldr	r1, [pc, #56]	; (8005094 <HAL_RCC_ClockConfig+0x244>)
 800505c:	4313      	orrs	r3, r2
 800505e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <HAL_RCC_ClockConfig+0x240>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d214      	bcs.n	8005098 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506e:	4b08      	ldr	r3, [pc, #32]	; (8005090 <HAL_RCC_ClockConfig+0x240>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f023 020f 	bic.w	r2, r3, #15
 8005076:	4906      	ldr	r1, [pc, #24]	; (8005090 <HAL_RCC_ClockConfig+0x240>)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	4313      	orrs	r3, r2
 800507c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800507e:	4b04      	ldr	r3, [pc, #16]	; (8005090 <HAL_RCC_ClockConfig+0x240>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d005      	beq.n	8005098 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e086      	b.n	800519e <HAL_RCC_ClockConfig+0x34e>
 8005090:	52002000 	.word	0x52002000
 8005094:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d010      	beq.n	80050c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	4b3f      	ldr	r3, [pc, #252]	; (80051a8 <HAL_RCC_ClockConfig+0x358>)
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d208      	bcs.n	80050c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050b4:	4b3c      	ldr	r3, [pc, #240]	; (80051a8 <HAL_RCC_ClockConfig+0x358>)
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	4939      	ldr	r1, [pc, #228]	; (80051a8 <HAL_RCC_ClockConfig+0x358>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d010      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695a      	ldr	r2, [r3, #20]
 80050d6:	4b34      	ldr	r3, [pc, #208]	; (80051a8 <HAL_RCC_ClockConfig+0x358>)
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050de:	429a      	cmp	r2, r3
 80050e0:	d208      	bcs.n	80050f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80050e2:	4b31      	ldr	r3, [pc, #196]	; (80051a8 <HAL_RCC_ClockConfig+0x358>)
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	492e      	ldr	r1, [pc, #184]	; (80051a8 <HAL_RCC_ClockConfig+0x358>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d010      	beq.n	8005122 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	699a      	ldr	r2, [r3, #24]
 8005104:	4b28      	ldr	r3, [pc, #160]	; (80051a8 <HAL_RCC_ClockConfig+0x358>)
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800510c:	429a      	cmp	r2, r3
 800510e:	d208      	bcs.n	8005122 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005110:	4b25      	ldr	r3, [pc, #148]	; (80051a8 <HAL_RCC_ClockConfig+0x358>)
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	4922      	ldr	r1, [pc, #136]	; (80051a8 <HAL_RCC_ClockConfig+0x358>)
 800511e:	4313      	orrs	r3, r2
 8005120:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d010      	beq.n	8005150 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69da      	ldr	r2, [r3, #28]
 8005132:	4b1d      	ldr	r3, [pc, #116]	; (80051a8 <HAL_RCC_ClockConfig+0x358>)
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800513a:	429a      	cmp	r2, r3
 800513c:	d208      	bcs.n	8005150 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800513e:	4b1a      	ldr	r3, [pc, #104]	; (80051a8 <HAL_RCC_ClockConfig+0x358>)
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	4917      	ldr	r1, [pc, #92]	; (80051a8 <HAL_RCC_ClockConfig+0x358>)
 800514c:	4313      	orrs	r3, r2
 800514e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005150:	f000 f834 	bl	80051bc <HAL_RCC_GetSysClockFreq>
 8005154:	4602      	mov	r2, r0
 8005156:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <HAL_RCC_ClockConfig+0x358>)
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	0a1b      	lsrs	r3, r3, #8
 800515c:	f003 030f 	and.w	r3, r3, #15
 8005160:	4912      	ldr	r1, [pc, #72]	; (80051ac <HAL_RCC_ClockConfig+0x35c>)
 8005162:	5ccb      	ldrb	r3, [r1, r3]
 8005164:	f003 031f 	and.w	r3, r3, #31
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
 800516c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800516e:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <HAL_RCC_ClockConfig+0x358>)
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	4a0d      	ldr	r2, [pc, #52]	; (80051ac <HAL_RCC_ClockConfig+0x35c>)
 8005178:	5cd3      	ldrb	r3, [r2, r3]
 800517a:	f003 031f 	and.w	r3, r3, #31
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	fa22 f303 	lsr.w	r3, r2, r3
 8005184:	4a0a      	ldr	r2, [pc, #40]	; (80051b0 <HAL_RCC_ClockConfig+0x360>)
 8005186:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005188:	4a0a      	ldr	r2, [pc, #40]	; (80051b4 <HAL_RCC_ClockConfig+0x364>)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800518e:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <HAL_RCC_ClockConfig+0x368>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f7fb ffa0 	bl	80010d8 <HAL_InitTick>
 8005198:	4603      	mov	r3, r0
 800519a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800519c:	7bfb      	ldrb	r3, [r7, #15]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	58024400 	.word	0x58024400
 80051ac:	08009240 	.word	0x08009240
 80051b0:	24000004 	.word	0x24000004
 80051b4:	24000000 	.word	0x24000000
 80051b8:	24000008 	.word	0x24000008

080051bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	b089      	sub	sp, #36	; 0x24
 80051c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051c2:	4bb3      	ldr	r3, [pc, #716]	; (8005490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051ca:	2b18      	cmp	r3, #24
 80051cc:	f200 8155 	bhi.w	800547a <HAL_RCC_GetSysClockFreq+0x2be>
 80051d0:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	0800523d 	.word	0x0800523d
 80051dc:	0800547b 	.word	0x0800547b
 80051e0:	0800547b 	.word	0x0800547b
 80051e4:	0800547b 	.word	0x0800547b
 80051e8:	0800547b 	.word	0x0800547b
 80051ec:	0800547b 	.word	0x0800547b
 80051f0:	0800547b 	.word	0x0800547b
 80051f4:	0800547b 	.word	0x0800547b
 80051f8:	08005263 	.word	0x08005263
 80051fc:	0800547b 	.word	0x0800547b
 8005200:	0800547b 	.word	0x0800547b
 8005204:	0800547b 	.word	0x0800547b
 8005208:	0800547b 	.word	0x0800547b
 800520c:	0800547b 	.word	0x0800547b
 8005210:	0800547b 	.word	0x0800547b
 8005214:	0800547b 	.word	0x0800547b
 8005218:	08005269 	.word	0x08005269
 800521c:	0800547b 	.word	0x0800547b
 8005220:	0800547b 	.word	0x0800547b
 8005224:	0800547b 	.word	0x0800547b
 8005228:	0800547b 	.word	0x0800547b
 800522c:	0800547b 	.word	0x0800547b
 8005230:	0800547b 	.word	0x0800547b
 8005234:	0800547b 	.word	0x0800547b
 8005238:	0800526f 	.word	0x0800526f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800523c:	4b94      	ldr	r3, [pc, #592]	; (8005490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	2b00      	cmp	r3, #0
 8005246:	d009      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005248:	4b91      	ldr	r3, [pc, #580]	; (8005490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	08db      	lsrs	r3, r3, #3
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	4a90      	ldr	r2, [pc, #576]	; (8005494 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005254:	fa22 f303 	lsr.w	r3, r2, r3
 8005258:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800525a:	e111      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800525c:	4b8d      	ldr	r3, [pc, #564]	; (8005494 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800525e:	61bb      	str	r3, [r7, #24]
      break;
 8005260:	e10e      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005262:	4b8d      	ldr	r3, [pc, #564]	; (8005498 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005264:	61bb      	str	r3, [r7, #24]
      break;
 8005266:	e10b      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005268:	4b8c      	ldr	r3, [pc, #560]	; (800549c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800526a:	61bb      	str	r3, [r7, #24]
      break;
 800526c:	e108      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800526e:	4b88      	ldr	r3, [pc, #544]	; (8005490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005278:	4b85      	ldr	r3, [pc, #532]	; (8005490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800527a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527c:	091b      	lsrs	r3, r3, #4
 800527e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005282:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005284:	4b82      	ldr	r3, [pc, #520]	; (8005490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800528e:	4b80      	ldr	r3, [pc, #512]	; (8005490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005292:	08db      	lsrs	r3, r3, #3
 8005294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	fb02 f303 	mul.w	r3, r2, r3
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 80e1 	beq.w	8005474 <HAL_RCC_GetSysClockFreq+0x2b8>
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	f000 8083 	beq.w	80053c0 <HAL_RCC_GetSysClockFreq+0x204>
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	f200 80a1 	bhi.w	8005404 <HAL_RCC_GetSysClockFreq+0x248>
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <HAL_RCC_GetSysClockFreq+0x114>
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d056      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0x1c0>
 80052ce:	e099      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052d0:	4b6f      	ldr	r3, [pc, #444]	; (8005490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0320 	and.w	r3, r3, #32
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d02d      	beq.n	8005338 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052dc:	4b6c      	ldr	r3, [pc, #432]	; (8005490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	08db      	lsrs	r3, r3, #3
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	4a6b      	ldr	r2, [pc, #428]	; (8005494 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052e8:	fa22 f303 	lsr.w	r3, r2, r3
 80052ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	ee07 3a90 	vmov	s15, r3
 80052f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005306:	4b62      	ldr	r3, [pc, #392]	; (8005490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005316:	ed97 6a02 	vldr	s12, [r7, #8]
 800531a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80054a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800531e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800532a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800532e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005332:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005336:	e087      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005342:	eddf 6a58 	vldr	s13, [pc, #352]	; 80054a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534a:	4b51      	ldr	r3, [pc, #324]	; (8005490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535a:	ed97 6a02 	vldr	s12, [r7, #8]
 800535e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80054a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800536a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800536e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005376:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800537a:	e065      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005386:	eddf 6a48 	vldr	s13, [pc, #288]	; 80054a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800538a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800538e:	4b40      	ldr	r3, [pc, #256]	; (8005490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800539e:	ed97 6a02 	vldr	s12, [r7, #8]
 80053a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80054a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053be:	e043      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80054ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80053ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d2:	4b2f      	ldr	r3, [pc, #188]	; (8005490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80053e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80054a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005402:	e021      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80054a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005416:	4b1e      	ldr	r3, [pc, #120]	; (8005490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005426:	ed97 6a02 	vldr	s12, [r7, #8]
 800542a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80054a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800542e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800543a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800543e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005442:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005446:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005448:	4b11      	ldr	r3, [pc, #68]	; (8005490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800544a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544c:	0a5b      	lsrs	r3, r3, #9
 800544e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005452:	3301      	adds	r3, #1
 8005454:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	ee07 3a90 	vmov	s15, r3
 800545c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005460:	edd7 6a07 	vldr	s13, [r7, #28]
 8005464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800546c:	ee17 3a90 	vmov	r3, s15
 8005470:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005472:	e005      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	61bb      	str	r3, [r7, #24]
      break;
 8005478:	e002      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800547a:	4b07      	ldr	r3, [pc, #28]	; (8005498 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800547c:	61bb      	str	r3, [r7, #24]
      break;
 800547e:	bf00      	nop
  }

  return sysclockfreq;
 8005480:	69bb      	ldr	r3, [r7, #24]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3724      	adds	r7, #36	; 0x24
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	58024400 	.word	0x58024400
 8005494:	03d09000 	.word	0x03d09000
 8005498:	003d0900 	.word	0x003d0900
 800549c:	017d7840 	.word	0x017d7840
 80054a0:	46000000 	.word	0x46000000
 80054a4:	4c742400 	.word	0x4c742400
 80054a8:	4a742400 	.word	0x4a742400
 80054ac:	4bbebc20 	.word	0x4bbebc20

080054b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80054b6:	f7ff fe81 	bl	80051bc <HAL_RCC_GetSysClockFreq>
 80054ba:	4602      	mov	r2, r0
 80054bc:	4b10      	ldr	r3, [pc, #64]	; (8005500 <HAL_RCC_GetHCLKFreq+0x50>)
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	0a1b      	lsrs	r3, r3, #8
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	490f      	ldr	r1, [pc, #60]	; (8005504 <HAL_RCC_GetHCLKFreq+0x54>)
 80054c8:	5ccb      	ldrb	r3, [r1, r3]
 80054ca:	f003 031f 	and.w	r3, r3, #31
 80054ce:	fa22 f303 	lsr.w	r3, r2, r3
 80054d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80054d4:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <HAL_RCC_GetHCLKFreq+0x50>)
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	f003 030f 	and.w	r3, r3, #15
 80054dc:	4a09      	ldr	r2, [pc, #36]	; (8005504 <HAL_RCC_GetHCLKFreq+0x54>)
 80054de:	5cd3      	ldrb	r3, [r2, r3]
 80054e0:	f003 031f 	and.w	r3, r3, #31
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ea:	4a07      	ldr	r2, [pc, #28]	; (8005508 <HAL_RCC_GetHCLKFreq+0x58>)
 80054ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054ee:	4a07      	ldr	r2, [pc, #28]	; (800550c <HAL_RCC_GetHCLKFreq+0x5c>)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80054f4:	4b04      	ldr	r3, [pc, #16]	; (8005508 <HAL_RCC_GetHCLKFreq+0x58>)
 80054f6:	681b      	ldr	r3, [r3, #0]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	58024400 	.word	0x58024400
 8005504:	08009240 	.word	0x08009240
 8005508:	24000004 	.word	0x24000004
 800550c:	24000000 	.word	0x24000000

08005510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005514:	f7ff ffcc 	bl	80054b0 <HAL_RCC_GetHCLKFreq>
 8005518:	4602      	mov	r2, r0
 800551a:	4b06      	ldr	r3, [pc, #24]	; (8005534 <HAL_RCC_GetPCLK1Freq+0x24>)
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	091b      	lsrs	r3, r3, #4
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	4904      	ldr	r1, [pc, #16]	; (8005538 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005526:	5ccb      	ldrb	r3, [r1, r3]
 8005528:	f003 031f 	and.w	r3, r3, #31
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005530:	4618      	mov	r0, r3
 8005532:	bd80      	pop	{r7, pc}
 8005534:	58024400 	.word	0x58024400
 8005538:	08009240 	.word	0x08009240

0800553c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005540:	f7ff ffb6 	bl	80054b0 <HAL_RCC_GetHCLKFreq>
 8005544:	4602      	mov	r2, r0
 8005546:	4b06      	ldr	r3, [pc, #24]	; (8005560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	0a1b      	lsrs	r3, r3, #8
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	4904      	ldr	r1, [pc, #16]	; (8005564 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005552:	5ccb      	ldrb	r3, [r1, r3]
 8005554:	f003 031f 	and.w	r3, r3, #31
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800555c:	4618      	mov	r0, r3
 800555e:	bd80      	pop	{r7, pc}
 8005560:	58024400 	.word	0x58024400
 8005564:	08009240 	.word	0x08009240

08005568 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800556c:	b0ca      	sub	sp, #296	; 0x128
 800556e:	af00      	add	r7, sp, #0
 8005570:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005574:	2300      	movs	r3, #0
 8005576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800557a:	2300      	movs	r3, #0
 800557c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800558c:	2500      	movs	r5, #0
 800558e:	ea54 0305 	orrs.w	r3, r4, r5
 8005592:	d049      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800559a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800559e:	d02f      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80055a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055a4:	d828      	bhi.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055aa:	d01a      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80055ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055b0:	d822      	bhi.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80055b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ba:	d007      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055bc:	e01c      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055be:	4bb8      	ldr	r3, [pc, #736]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	4ab7      	ldr	r2, [pc, #732]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055ca:	e01a      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d0:	3308      	adds	r3, #8
 80055d2:	2102      	movs	r1, #2
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 fc8f 	bl	8006ef8 <RCCEx_PLL2_Config>
 80055da:	4603      	mov	r3, r0
 80055dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055e0:	e00f      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e6:	3328      	adds	r3, #40	; 0x28
 80055e8:	2102      	movs	r1, #2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 fd36 	bl	800705c <RCCEx_PLL3_Config>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055f6:	e004      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055fe:	e000      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005602:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10a      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800560a:	4ba5      	ldr	r3, [pc, #660]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800560c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005618:	4aa1      	ldr	r2, [pc, #644]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800561a:	430b      	orrs	r3, r1
 800561c:	6513      	str	r3, [r2, #80]	; 0x50
 800561e:	e003      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005620:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005624:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800562c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005630:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005634:	f04f 0900 	mov.w	r9, #0
 8005638:	ea58 0309 	orrs.w	r3, r8, r9
 800563c:	d047      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800563e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005644:	2b04      	cmp	r3, #4
 8005646:	d82a      	bhi.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005648:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800564a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564e:	bf00      	nop
 8005650:	08005665 	.word	0x08005665
 8005654:	08005673 	.word	0x08005673
 8005658:	08005689 	.word	0x08005689
 800565c:	080056a7 	.word	0x080056a7
 8005660:	080056a7 	.word	0x080056a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005664:	4b8e      	ldr	r3, [pc, #568]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	4a8d      	ldr	r2, [pc, #564]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800566a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800566e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005670:	e01a      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005676:	3308      	adds	r3, #8
 8005678:	2100      	movs	r1, #0
 800567a:	4618      	mov	r0, r3
 800567c:	f001 fc3c 	bl	8006ef8 <RCCEx_PLL2_Config>
 8005680:	4603      	mov	r3, r0
 8005682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005686:	e00f      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800568c:	3328      	adds	r3, #40	; 0x28
 800568e:	2100      	movs	r1, #0
 8005690:	4618      	mov	r0, r3
 8005692:	f001 fce3 	bl	800705c <RCCEx_PLL3_Config>
 8005696:	4603      	mov	r3, r0
 8005698:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800569c:	e004      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056a4:	e000      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80056a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10a      	bne.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056b0:	4b7b      	ldr	r3, [pc, #492]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b4:	f023 0107 	bic.w	r1, r3, #7
 80056b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056be:	4a78      	ldr	r2, [pc, #480]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056c0:	430b      	orrs	r3, r1
 80056c2:	6513      	str	r3, [r2, #80]	; 0x50
 80056c4:	e003      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80056ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80056da:	f04f 0b00 	mov.w	fp, #0
 80056de:	ea5a 030b 	orrs.w	r3, sl, fp
 80056e2:	d04c      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80056e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ee:	d030      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80056f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056f4:	d829      	bhi.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80056f6:	2bc0      	cmp	r3, #192	; 0xc0
 80056f8:	d02d      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80056fa:	2bc0      	cmp	r3, #192	; 0xc0
 80056fc:	d825      	bhi.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80056fe:	2b80      	cmp	r3, #128	; 0x80
 8005700:	d018      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005702:	2b80      	cmp	r3, #128	; 0x80
 8005704:	d821      	bhi.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800570a:	2b40      	cmp	r3, #64	; 0x40
 800570c:	d007      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800570e:	e01c      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005710:	4b63      	ldr	r3, [pc, #396]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	4a62      	ldr	r2, [pc, #392]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800571a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800571c:	e01c      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800571e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005722:	3308      	adds	r3, #8
 8005724:	2100      	movs	r1, #0
 8005726:	4618      	mov	r0, r3
 8005728:	f001 fbe6 	bl	8006ef8 <RCCEx_PLL2_Config>
 800572c:	4603      	mov	r3, r0
 800572e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005732:	e011      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005738:	3328      	adds	r3, #40	; 0x28
 800573a:	2100      	movs	r1, #0
 800573c:	4618      	mov	r0, r3
 800573e:	f001 fc8d 	bl	800705c <RCCEx_PLL3_Config>
 8005742:	4603      	mov	r3, r0
 8005744:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005748:	e006      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005750:	e002      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005752:	bf00      	nop
 8005754:	e000      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10a      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005760:	4b4f      	ldr	r3, [pc, #316]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005764:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800576c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576e:	4a4c      	ldr	r2, [pc, #304]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005770:	430b      	orrs	r3, r1
 8005772:	6513      	str	r3, [r2, #80]	; 0x50
 8005774:	e003      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005776:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800577a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800577e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800578a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800578e:	2300      	movs	r3, #0
 8005790:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005794:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005798:	460b      	mov	r3, r1
 800579a:	4313      	orrs	r3, r2
 800579c:	d053      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800579e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80057a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057aa:	d035      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80057ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057b0:	d82e      	bhi.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80057b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057b6:	d031      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80057b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057bc:	d828      	bhi.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80057be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057c2:	d01a      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 80057c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057c8:	d822      	bhi.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80057ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057d2:	d007      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80057d4:	e01c      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d6:	4b32      	ldr	r3, [pc, #200]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057da:	4a31      	ldr	r2, [pc, #196]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057e2:	e01c      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e8:	3308      	adds	r3, #8
 80057ea:	2100      	movs	r1, #0
 80057ec:	4618      	mov	r0, r3
 80057ee:	f001 fb83 	bl	8006ef8 <RCCEx_PLL2_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80057f8:	e011      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057fe:	3328      	adds	r3, #40	; 0x28
 8005800:	2100      	movs	r1, #0
 8005802:	4618      	mov	r0, r3
 8005804:	f001 fc2a 	bl	800705c <RCCEx_PLL3_Config>
 8005808:	4603      	mov	r3, r0
 800580a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800580e:	e006      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005816:	e002      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005818:	bf00      	nop
 800581a:	e000      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800581c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800581e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10b      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005826:	4b1e      	ldr	r3, [pc, #120]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800582e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005832:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005836:	4a1a      	ldr	r2, [pc, #104]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005838:	430b      	orrs	r3, r1
 800583a:	6593      	str	r3, [r2, #88]	; 0x58
 800583c:	e003      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005842:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005852:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005856:	2300      	movs	r3, #0
 8005858:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800585c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005860:	460b      	mov	r3, r1
 8005862:	4313      	orrs	r3, r2
 8005864:	d056      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800586a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800586e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005872:	d038      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005874:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005878:	d831      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800587a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800587e:	d034      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005880:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005884:	d82b      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800588a:	d01d      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800588c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005890:	d825      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005892:	2b00      	cmp	r3, #0
 8005894:	d006      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005896:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800589a:	d00a      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800589c:	e01f      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800589e:	bf00      	nop
 80058a0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a4:	4ba2      	ldr	r3, [pc, #648]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a8:	4aa1      	ldr	r2, [pc, #644]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058b0:	e01c      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b6:	3308      	adds	r3, #8
 80058b8:	2100      	movs	r1, #0
 80058ba:	4618      	mov	r0, r3
 80058bc:	f001 fb1c 	bl	8006ef8 <RCCEx_PLL2_Config>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80058c6:	e011      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058cc:	3328      	adds	r3, #40	; 0x28
 80058ce:	2100      	movs	r1, #0
 80058d0:	4618      	mov	r0, r3
 80058d2:	f001 fbc3 	bl	800705c <RCCEx_PLL3_Config>
 80058d6:	4603      	mov	r3, r0
 80058d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058dc:	e006      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058e4:	e002      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80058e6:	bf00      	nop
 80058e8:	e000      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80058ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10b      	bne.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80058f4:	4b8e      	ldr	r3, [pc, #568]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80058fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005900:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005904:	4a8a      	ldr	r2, [pc, #552]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005906:	430b      	orrs	r3, r1
 8005908:	6593      	str	r3, [r2, #88]	; 0x58
 800590a:	e003      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005910:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005920:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005924:	2300      	movs	r3, #0
 8005926:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800592a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800592e:	460b      	mov	r3, r1
 8005930:	4313      	orrs	r3, r2
 8005932:	d03a      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800593a:	2b30      	cmp	r3, #48	; 0x30
 800593c:	d01f      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800593e:	2b30      	cmp	r3, #48	; 0x30
 8005940:	d819      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005942:	2b20      	cmp	r3, #32
 8005944:	d00c      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005946:	2b20      	cmp	r3, #32
 8005948:	d815      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800594a:	2b00      	cmp	r3, #0
 800594c:	d019      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800594e:	2b10      	cmp	r3, #16
 8005950:	d111      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005952:	4b77      	ldr	r3, [pc, #476]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005956:	4a76      	ldr	r2, [pc, #472]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800595c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800595e:	e011      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005964:	3308      	adds	r3, #8
 8005966:	2102      	movs	r1, #2
 8005968:	4618      	mov	r0, r3
 800596a:	f001 fac5 	bl	8006ef8 <RCCEx_PLL2_Config>
 800596e:	4603      	mov	r3, r0
 8005970:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005974:	e006      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800597c:	e002      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800597e:	bf00      	nop
 8005980:	e000      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005984:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10a      	bne.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800598c:	4b68      	ldr	r3, [pc, #416]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800598e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005990:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800599a:	4a65      	ldr	r2, [pc, #404]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800599c:	430b      	orrs	r3, r1
 800599e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059a0:	e003      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80059aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80059b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80059ba:	2300      	movs	r3, #0
 80059bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4313      	orrs	r3, r2
 80059c8:	d051      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80059ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059d4:	d035      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80059d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059da:	d82e      	bhi.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80059dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059e0:	d031      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80059e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059e6:	d828      	bhi.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80059e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ec:	d01a      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80059ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f2:	d822      	bhi.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80059f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059fc:	d007      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80059fe:	e01c      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a00:	4b4b      	ldr	r3, [pc, #300]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a04:	4a4a      	ldr	r2, [pc, #296]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a0c:	e01c      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a12:	3308      	adds	r3, #8
 8005a14:	2100      	movs	r1, #0
 8005a16:	4618      	mov	r0, r3
 8005a18:	f001 fa6e 	bl	8006ef8 <RCCEx_PLL2_Config>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a22:	e011      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a28:	3328      	adds	r3, #40	; 0x28
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f001 fb15 	bl	800705c <RCCEx_PLL3_Config>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a38:	e006      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a40:	e002      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005a42:	bf00      	nop
 8005a44:	e000      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005a50:	4b37      	ldr	r3, [pc, #220]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a54:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a5e:	4a34      	ldr	r2, [pc, #208]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a60:	430b      	orrs	r3, r1
 8005a62:	6513      	str	r3, [r2, #80]	; 0x50
 8005a64:	e003      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a76:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005a7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	d056      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a98:	d033      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005a9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a9e:	d82c      	bhi.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005aa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005aa4:	d02f      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005aa6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005aaa:	d826      	bhi.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005aac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ab0:	d02b      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005ab2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ab6:	d820      	bhi.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005abc:	d012      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005abe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ac2:	d81a      	bhi.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d022      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005acc:	d115      	bne.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f001 fa0e 	bl	8006ef8 <RCCEx_PLL2_Config>
 8005adc:	4603      	mov	r3, r0
 8005ade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005ae2:	e015      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae8:	3328      	adds	r3, #40	; 0x28
 8005aea:	2101      	movs	r1, #1
 8005aec:	4618      	mov	r0, r3
 8005aee:	f001 fab5 	bl	800705c <RCCEx_PLL3_Config>
 8005af2:	4603      	mov	r3, r0
 8005af4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005af8:	e00a      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b00:	e006      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b02:	bf00      	nop
 8005b04:	e004      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b06:	bf00      	nop
 8005b08:	e002      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b0a:	bf00      	nop
 8005b0c:	e000      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10d      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005b18:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b26:	4a02      	ldr	r2, [pc, #8]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b28:	430b      	orrs	r3, r1
 8005b2a:	6513      	str	r3, [r2, #80]	; 0x50
 8005b2c:	e006      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005b2e:	bf00      	nop
 8005b30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b52:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	d055      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b68:	d033      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b6e:	d82c      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b74:	d02f      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7a:	d826      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b80:	d02b      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005b82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b86:	d820      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b8c:	d012      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b92:	d81a      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d022      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005b98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b9c:	d115      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f001 f9a6 	bl	8006ef8 <RCCEx_PLL2_Config>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005bb2:	e015      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb8:	3328      	adds	r3, #40	; 0x28
 8005bba:	2101      	movs	r1, #1
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 fa4d 	bl	800705c <RCCEx_PLL3_Config>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005bc8:	e00a      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bd0:	e006      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005bd2:	bf00      	nop
 8005bd4:	e004      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005bd6:	bf00      	nop
 8005bd8:	e002      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005bda:	bf00      	nop
 8005bdc:	e000      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005be0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10b      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005be8:	4ba3      	ldr	r3, [pc, #652]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bec:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bf8:	4a9f      	ldr	r2, [pc, #636]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8005bfe:	e003      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005c14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c22:	460b      	mov	r3, r1
 8005c24:	4313      	orrs	r3, r2
 8005c26:	d037      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c32:	d00e      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c38:	d816      	bhi.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d018      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005c3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c42:	d111      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c44:	4b8c      	ldr	r3, [pc, #560]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	4a8b      	ldr	r2, [pc, #556]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c50:	e00f      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c56:	3308      	adds	r3, #8
 8005c58:	2101      	movs	r1, #1
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f001 f94c 	bl	8006ef8 <RCCEx_PLL2_Config>
 8005c60:	4603      	mov	r3, r0
 8005c62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c66:	e004      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c6e:	e000      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c7a:	4b7f      	ldr	r3, [pc, #508]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c88:	4a7b      	ldr	r2, [pc, #492]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c8a:	430b      	orrs	r3, r1
 8005c8c:	6513      	str	r3, [r2, #80]	; 0x50
 8005c8e:	e003      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005cae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	d039      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d81c      	bhi.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005cc2:	a201      	add	r2, pc, #4	; (adr r2, 8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc8:	08005d05 	.word	0x08005d05
 8005ccc:	08005cd9 	.word	0x08005cd9
 8005cd0:	08005ce7 	.word	0x08005ce7
 8005cd4:	08005d05 	.word	0x08005d05
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd8:	4b67      	ldr	r3, [pc, #412]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	4a66      	ldr	r2, [pc, #408]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ce4:	e00f      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cea:	3308      	adds	r3, #8
 8005cec:	2102      	movs	r1, #2
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 f902 	bl	8006ef8 <RCCEx_PLL2_Config>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005cfa:	e004      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d02:	e000      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d0e:	4b5a      	ldr	r3, [pc, #360]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d12:	f023 0103 	bic.w	r1, r3, #3
 8005d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d1c:	4a56      	ldr	r2, [pc, #344]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d22:	e003      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d34:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005d38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005d46:	460b      	mov	r3, r1
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f000 809f 	beq.w	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d4e:	4b4b      	ldr	r3, [pc, #300]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a4a      	ldr	r2, [pc, #296]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d5a:	f7fb fa07 	bl	800116c <HAL_GetTick>
 8005d5e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d62:	e00b      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d64:	f7fb fa02 	bl	800116c <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b64      	cmp	r3, #100	; 0x64
 8005d72:	d903      	bls.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d7a:	e005      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d7c:	4b3f      	ldr	r3, [pc, #252]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0ed      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005d88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d179      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d90:	4b39      	ldr	r3, [pc, #228]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d9c:	4053      	eors	r3, r2
 8005d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d015      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005da6:	4b34      	ldr	r3, [pc, #208]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005db2:	4b31      	ldr	r3, [pc, #196]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db6:	4a30      	ldr	r2, [pc, #192]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dbc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dbe:	4b2e      	ldr	r3, [pc, #184]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc2:	4a2d      	ldr	r2, [pc, #180]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dc8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005dca:	4a2b      	ldr	r2, [pc, #172]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dd0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dde:	d118      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de0:	f7fb f9c4 	bl	800116c <HAL_GetTick>
 8005de4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005de8:	e00d      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dea:	f7fb f9bf 	bl	800116c <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005df4:	1ad2      	subs	r2, r2, r3
 8005df6:	f241 3388 	movw	r3, #5000	; 0x1388
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d903      	bls.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005e04:	e005      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e06:	4b1c      	ldr	r3, [pc, #112]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0eb      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005e12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d129      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e2a:	d10e      	bne.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005e2c:	4b12      	ldr	r3, [pc, #72]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e3c:	091a      	lsrs	r2, r3, #4
 8005e3e:	4b10      	ldr	r3, [pc, #64]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	4a0d      	ldr	r2, [pc, #52]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e44:	430b      	orrs	r3, r1
 8005e46:	6113      	str	r3, [r2, #16]
 8005e48:	e005      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005e4a:	4b0b      	ldr	r3, [pc, #44]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	4a0a      	ldr	r2, [pc, #40]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e54:	6113      	str	r3, [r2, #16]
 8005e56:	4b08      	ldr	r3, [pc, #32]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e58:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e66:	4a04      	ldr	r2, [pc, #16]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e6c:	e00e      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005e76:	e009      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005e78:	58024400 	.word	0x58024400
 8005e7c:	58024800 	.word	0x58024800
 8005e80:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f002 0301 	and.w	r3, r2, #1
 8005e98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ea2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	f000 8089 	beq.w	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eb4:	2b28      	cmp	r3, #40	; 0x28
 8005eb6:	d86b      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005eb8:	a201      	add	r2, pc, #4	; (adr r2, 8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebe:	bf00      	nop
 8005ec0:	08005f99 	.word	0x08005f99
 8005ec4:	08005f91 	.word	0x08005f91
 8005ec8:	08005f91 	.word	0x08005f91
 8005ecc:	08005f91 	.word	0x08005f91
 8005ed0:	08005f91 	.word	0x08005f91
 8005ed4:	08005f91 	.word	0x08005f91
 8005ed8:	08005f91 	.word	0x08005f91
 8005edc:	08005f91 	.word	0x08005f91
 8005ee0:	08005f65 	.word	0x08005f65
 8005ee4:	08005f91 	.word	0x08005f91
 8005ee8:	08005f91 	.word	0x08005f91
 8005eec:	08005f91 	.word	0x08005f91
 8005ef0:	08005f91 	.word	0x08005f91
 8005ef4:	08005f91 	.word	0x08005f91
 8005ef8:	08005f91 	.word	0x08005f91
 8005efc:	08005f91 	.word	0x08005f91
 8005f00:	08005f7b 	.word	0x08005f7b
 8005f04:	08005f91 	.word	0x08005f91
 8005f08:	08005f91 	.word	0x08005f91
 8005f0c:	08005f91 	.word	0x08005f91
 8005f10:	08005f91 	.word	0x08005f91
 8005f14:	08005f91 	.word	0x08005f91
 8005f18:	08005f91 	.word	0x08005f91
 8005f1c:	08005f91 	.word	0x08005f91
 8005f20:	08005f99 	.word	0x08005f99
 8005f24:	08005f91 	.word	0x08005f91
 8005f28:	08005f91 	.word	0x08005f91
 8005f2c:	08005f91 	.word	0x08005f91
 8005f30:	08005f91 	.word	0x08005f91
 8005f34:	08005f91 	.word	0x08005f91
 8005f38:	08005f91 	.word	0x08005f91
 8005f3c:	08005f91 	.word	0x08005f91
 8005f40:	08005f99 	.word	0x08005f99
 8005f44:	08005f91 	.word	0x08005f91
 8005f48:	08005f91 	.word	0x08005f91
 8005f4c:	08005f91 	.word	0x08005f91
 8005f50:	08005f91 	.word	0x08005f91
 8005f54:	08005f91 	.word	0x08005f91
 8005f58:	08005f91 	.word	0x08005f91
 8005f5c:	08005f91 	.word	0x08005f91
 8005f60:	08005f99 	.word	0x08005f99
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f68:	3308      	adds	r3, #8
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 ffc3 	bl	8006ef8 <RCCEx_PLL2_Config>
 8005f72:	4603      	mov	r3, r0
 8005f74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f78:	e00f      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f7e:	3328      	adds	r3, #40	; 0x28
 8005f80:	2101      	movs	r1, #1
 8005f82:	4618      	mov	r0, r3
 8005f84:	f001 f86a 	bl	800705c <RCCEx_PLL3_Config>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f8e:	e004      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f96:	e000      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10a      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005fa2:	4bbf      	ldr	r3, [pc, #764]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fb0:	4abb      	ldr	r2, [pc, #748]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fb2:	430b      	orrs	r3, r1
 8005fb4:	6553      	str	r3, [r2, #84]	; 0x54
 8005fb6:	e003      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f002 0302 	and.w	r3, r2, #2
 8005fcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005fd6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	d041      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fe6:	2b05      	cmp	r3, #5
 8005fe8:	d824      	bhi.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005fea:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff0:	0800603d 	.word	0x0800603d
 8005ff4:	08006009 	.word	0x08006009
 8005ff8:	0800601f 	.word	0x0800601f
 8005ffc:	0800603d 	.word	0x0800603d
 8006000:	0800603d 	.word	0x0800603d
 8006004:	0800603d 	.word	0x0800603d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800600c:	3308      	adds	r3, #8
 800600e:	2101      	movs	r1, #1
 8006010:	4618      	mov	r0, r3
 8006012:	f000 ff71 	bl	8006ef8 <RCCEx_PLL2_Config>
 8006016:	4603      	mov	r3, r0
 8006018:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800601c:	e00f      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800601e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006022:	3328      	adds	r3, #40	; 0x28
 8006024:	2101      	movs	r1, #1
 8006026:	4618      	mov	r0, r3
 8006028:	f001 f818 	bl	800705c <RCCEx_PLL3_Config>
 800602c:	4603      	mov	r3, r0
 800602e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006032:	e004      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800603a:	e000      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800603c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800603e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10a      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006046:	4b96      	ldr	r3, [pc, #600]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604a:	f023 0107 	bic.w	r1, r3, #7
 800604e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006052:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006054:	4a92      	ldr	r2, [pc, #584]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006056:	430b      	orrs	r3, r1
 8006058:	6553      	str	r3, [r2, #84]	; 0x54
 800605a:	e003      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006060:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f002 0304 	and.w	r3, r2, #4
 8006070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006074:	2300      	movs	r3, #0
 8006076:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800607a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800607e:	460b      	mov	r3, r1
 8006080:	4313      	orrs	r3, r2
 8006082:	d044      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800608c:	2b05      	cmp	r3, #5
 800608e:	d825      	bhi.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006090:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	080060e5 	.word	0x080060e5
 800609c:	080060b1 	.word	0x080060b1
 80060a0:	080060c7 	.word	0x080060c7
 80060a4:	080060e5 	.word	0x080060e5
 80060a8:	080060e5 	.word	0x080060e5
 80060ac:	080060e5 	.word	0x080060e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060b4:	3308      	adds	r3, #8
 80060b6:	2101      	movs	r1, #1
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 ff1d 	bl	8006ef8 <RCCEx_PLL2_Config>
 80060be:	4603      	mov	r3, r0
 80060c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80060c4:	e00f      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ca:	3328      	adds	r3, #40	; 0x28
 80060cc:	2101      	movs	r1, #1
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 ffc4 	bl	800705c <RCCEx_PLL3_Config>
 80060d4:	4603      	mov	r3, r0
 80060d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80060da:	e004      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060e2:	e000      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80060e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10b      	bne.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060ee:	4b6c      	ldr	r3, [pc, #432]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f2:	f023 0107 	bic.w	r1, r3, #7
 80060f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060fe:	4a68      	ldr	r2, [pc, #416]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006100:	430b      	orrs	r3, r1
 8006102:	6593      	str	r3, [r2, #88]	; 0x58
 8006104:	e003      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006106:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800610a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800610e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006116:	f002 0320 	and.w	r3, r2, #32
 800611a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800611e:	2300      	movs	r3, #0
 8006120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006124:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006128:	460b      	mov	r3, r1
 800612a:	4313      	orrs	r3, r2
 800612c:	d055      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800612e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006136:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800613a:	d033      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800613c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006140:	d82c      	bhi.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006146:	d02f      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614c:	d826      	bhi.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800614e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006152:	d02b      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006154:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006158:	d820      	bhi.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800615a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800615e:	d012      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006164:	d81a      	bhi.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006166:	2b00      	cmp	r3, #0
 8006168:	d022      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800616a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800616e:	d115      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006174:	3308      	adds	r3, #8
 8006176:	2100      	movs	r1, #0
 8006178:	4618      	mov	r0, r3
 800617a:	f000 febd 	bl	8006ef8 <RCCEx_PLL2_Config>
 800617e:	4603      	mov	r3, r0
 8006180:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006184:	e015      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800618a:	3328      	adds	r3, #40	; 0x28
 800618c:	2102      	movs	r1, #2
 800618e:	4618      	mov	r0, r3
 8006190:	f000 ff64 	bl	800705c <RCCEx_PLL3_Config>
 8006194:	4603      	mov	r3, r0
 8006196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800619a:	e00a      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061a2:	e006      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80061a4:	bf00      	nop
 80061a6:	e004      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80061a8:	bf00      	nop
 80061aa:	e002      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80061ac:	bf00      	nop
 80061ae:	e000      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80061b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10b      	bne.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061ba:	4b39      	ldr	r3, [pc, #228]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061be:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80061c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ca:	4a35      	ldr	r2, [pc, #212]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061cc:	430b      	orrs	r3, r1
 80061ce:	6553      	str	r3, [r2, #84]	; 0x54
 80061d0:	e003      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80061da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80061e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061ea:	2300      	movs	r3, #0
 80061ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80061f4:	460b      	mov	r3, r1
 80061f6:	4313      	orrs	r3, r2
 80061f8:	d058      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80061fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006202:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006206:	d033      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006208:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800620c:	d82c      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800620e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006212:	d02f      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006218:	d826      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800621a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800621e:	d02b      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006220:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006224:	d820      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800622a:	d012      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800622c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006230:	d81a      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d022      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623a:	d115      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800623c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006240:	3308      	adds	r3, #8
 8006242:	2100      	movs	r1, #0
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fe57 	bl	8006ef8 <RCCEx_PLL2_Config>
 800624a:	4603      	mov	r3, r0
 800624c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006250:	e015      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006256:	3328      	adds	r3, #40	; 0x28
 8006258:	2102      	movs	r1, #2
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fefe 	bl	800705c <RCCEx_PLL3_Config>
 8006260:	4603      	mov	r3, r0
 8006262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006266:	e00a      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800626e:	e006      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006270:	bf00      	nop
 8006272:	e004      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006274:	bf00      	nop
 8006276:	e002      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006278:	bf00      	nop
 800627a:	e000      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800627c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800627e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10e      	bne.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006286:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800628e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006292:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006296:	4a02      	ldr	r2, [pc, #8]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006298:	430b      	orrs	r3, r1
 800629a:	6593      	str	r3, [r2, #88]	; 0x58
 800629c:	e006      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800629e:	bf00      	nop
 80062a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80062ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80062b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062bc:	2300      	movs	r3, #0
 80062be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80062c6:	460b      	mov	r3, r1
 80062c8:	4313      	orrs	r3, r2
 80062ca:	d055      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80062d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80062d8:	d033      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80062da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80062de:	d82c      	bhi.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80062e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062e4:	d02f      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80062e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ea:	d826      	bhi.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80062ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80062f0:	d02b      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80062f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80062f6:	d820      	bhi.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80062f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062fc:	d012      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80062fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006302:	d81a      	bhi.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d022      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800630c:	d115      	bne.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800630e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006312:	3308      	adds	r3, #8
 8006314:	2100      	movs	r1, #0
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fdee 	bl	8006ef8 <RCCEx_PLL2_Config>
 800631c:	4603      	mov	r3, r0
 800631e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006322:	e015      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006328:	3328      	adds	r3, #40	; 0x28
 800632a:	2102      	movs	r1, #2
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fe95 	bl	800705c <RCCEx_PLL3_Config>
 8006332:	4603      	mov	r3, r0
 8006334:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006338:	e00a      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006340:	e006      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006342:	bf00      	nop
 8006344:	e004      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006346:	bf00      	nop
 8006348:	e002      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800634a:	bf00      	nop
 800634c:	e000      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800634e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006350:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10b      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006358:	4ba1      	ldr	r3, [pc, #644]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800635a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006364:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006368:	4a9d      	ldr	r2, [pc, #628]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800636a:	430b      	orrs	r3, r1
 800636c:	6593      	str	r3, [r2, #88]	; 0x58
 800636e:	e003      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006370:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006374:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	f002 0308 	and.w	r3, r2, #8
 8006384:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006388:	2300      	movs	r3, #0
 800638a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800638e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006392:	460b      	mov	r3, r1
 8006394:	4313      	orrs	r3, r2
 8006396:	d01e      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a4:	d10c      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063aa:	3328      	adds	r3, #40	; 0x28
 80063ac:	2102      	movs	r1, #2
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 fe54 	bl	800705c <RCCEx_PLL3_Config>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d002      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80063c0:	4b87      	ldr	r3, [pc, #540]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063d0:	4a83      	ldr	r2, [pc, #524]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063d2:	430b      	orrs	r3, r1
 80063d4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063de:	f002 0310 	and.w	r3, r2, #16
 80063e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063e6:	2300      	movs	r3, #0
 80063e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80063ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80063f0:	460b      	mov	r3, r1
 80063f2:	4313      	orrs	r3, r2
 80063f4:	d01e      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80063f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006402:	d10c      	bne.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006408:	3328      	adds	r3, #40	; 0x28
 800640a:	2102      	movs	r1, #2
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fe25 	bl	800705c <RCCEx_PLL3_Config>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800641e:	4b70      	ldr	r3, [pc, #448]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006422:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800642a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800642e:	4a6c      	ldr	r2, [pc, #432]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006430:	430b      	orrs	r3, r1
 8006432:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006440:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006444:	2300      	movs	r3, #0
 8006446:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800644a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800644e:	460b      	mov	r3, r1
 8006450:	4313      	orrs	r3, r2
 8006452:	d03e      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006458:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800645c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006460:	d022      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006462:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006466:	d81b      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800646c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006470:	d00b      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006472:	e015      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006478:	3308      	adds	r3, #8
 800647a:	2100      	movs	r1, #0
 800647c:	4618      	mov	r0, r3
 800647e:	f000 fd3b 	bl	8006ef8 <RCCEx_PLL2_Config>
 8006482:	4603      	mov	r3, r0
 8006484:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006488:	e00f      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800648e:	3328      	adds	r3, #40	; 0x28
 8006490:	2102      	movs	r1, #2
 8006492:	4618      	mov	r0, r3
 8006494:	f000 fde2 	bl	800705c <RCCEx_PLL3_Config>
 8006498:	4603      	mov	r3, r0
 800649a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800649e:	e004      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064a6:	e000      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80064a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10b      	bne.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064b2:	4b4b      	ldr	r3, [pc, #300]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80064ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064c2:	4a47      	ldr	r2, [pc, #284]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064c4:	430b      	orrs	r3, r1
 80064c6:	6593      	str	r3, [r2, #88]	; 0x58
 80064c8:	e003      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80064d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064da:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80064de:	67bb      	str	r3, [r7, #120]	; 0x78
 80064e0:	2300      	movs	r3, #0
 80064e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80064e4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80064e8:	460b      	mov	r3, r1
 80064ea:	4313      	orrs	r3, r2
 80064ec:	d03b      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80064ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064fa:	d01f      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80064fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006500:	d818      	bhi.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006506:	d003      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006508:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800650c:	d007      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800650e:	e011      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006510:	4b33      	ldr	r3, [pc, #204]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	4a32      	ldr	r2, [pc, #200]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800651a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800651c:	e00f      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800651e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006522:	3328      	adds	r3, #40	; 0x28
 8006524:	2101      	movs	r1, #1
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fd98 	bl	800705c <RCCEx_PLL3_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006532:	e004      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800653a:	e000      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800653c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800653e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10b      	bne.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006546:	4b26      	ldr	r3, [pc, #152]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800654e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006556:	4a22      	ldr	r2, [pc, #136]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006558:	430b      	orrs	r3, r1
 800655a:	6553      	str	r3, [r2, #84]	; 0x54
 800655c:	e003      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006562:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006572:	673b      	str	r3, [r7, #112]	; 0x70
 8006574:	2300      	movs	r3, #0
 8006576:	677b      	str	r3, [r7, #116]	; 0x74
 8006578:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800657c:	460b      	mov	r3, r1
 800657e:	4313      	orrs	r3, r2
 8006580:	d034      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800658c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006590:	d007      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006592:	e011      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006594:	4b12      	ldr	r3, [pc, #72]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	4a11      	ldr	r2, [pc, #68]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800659a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800659e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80065a0:	e00e      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065a6:	3308      	adds	r3, #8
 80065a8:	2102      	movs	r1, #2
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fca4 	bl	8006ef8 <RCCEx_PLL2_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80065b6:	e003      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80065be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10d      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80065c8:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d6:	4a02      	ldr	r2, [pc, #8]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065d8:	430b      	orrs	r3, r1
 80065da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065dc:	e006      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80065de:	bf00      	nop
 80065e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80065f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80065fa:	2300      	movs	r3, #0
 80065fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006602:	460b      	mov	r3, r1
 8006604:	4313      	orrs	r3, r2
 8006606:	d00c      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800660c:	3328      	adds	r3, #40	; 0x28
 800660e:	2102      	movs	r1, #2
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fd23 	bl	800705c <RCCEx_PLL3_Config>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800662e:	663b      	str	r3, [r7, #96]	; 0x60
 8006630:	2300      	movs	r3, #0
 8006632:	667b      	str	r3, [r7, #100]	; 0x64
 8006634:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006638:	460b      	mov	r3, r1
 800663a:	4313      	orrs	r3, r2
 800663c:	d038      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800663e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800664a:	d018      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800664c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006650:	d811      	bhi.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006656:	d014      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800665c:	d80b      	bhi.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d011      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006666:	d106      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006668:	4bc3      	ldr	r3, [pc, #780]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	4ac2      	ldr	r2, [pc, #776]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800666e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006672:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006674:	e008      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800667c:	e004      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800667e:	bf00      	nop
 8006680:	e002      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006682:	bf00      	nop
 8006684:	e000      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006688:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10b      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006690:	4bb9      	ldr	r3, [pc, #740]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006694:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800669c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a0:	4ab5      	ldr	r2, [pc, #724]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066a2:	430b      	orrs	r3, r1
 80066a4:	6553      	str	r3, [r2, #84]	; 0x54
 80066a6:	e003      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80066b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80066bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80066be:	2300      	movs	r3, #0
 80066c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80066c6:	460b      	mov	r3, r1
 80066c8:	4313      	orrs	r3, r2
 80066ca:	d009      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80066cc:	4baa      	ldr	r3, [pc, #680]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80066d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066da:	4aa7      	ldr	r2, [pc, #668]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066dc:	430b      	orrs	r3, r1
 80066de:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80066e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80066ec:	653b      	str	r3, [r7, #80]	; 0x50
 80066ee:	2300      	movs	r3, #0
 80066f0:	657b      	str	r3, [r7, #84]	; 0x54
 80066f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80066f6:	460b      	mov	r3, r1
 80066f8:	4313      	orrs	r3, r2
 80066fa:	d00a      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80066fc:	4b9e      	ldr	r3, [pc, #632]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006708:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800670c:	4a9a      	ldr	r2, [pc, #616]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800670e:	430b      	orrs	r3, r1
 8006710:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800671e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006720:	2300      	movs	r3, #0
 8006722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006724:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006728:	460b      	mov	r3, r1
 800672a:	4313      	orrs	r3, r2
 800672c:	d009      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800672e:	4b92      	ldr	r3, [pc, #584]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006732:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800673a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800673c:	4a8e      	ldr	r2, [pc, #568]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800673e:	430b      	orrs	r3, r1
 8006740:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800674e:	643b      	str	r3, [r7, #64]	; 0x40
 8006750:	2300      	movs	r3, #0
 8006752:	647b      	str	r3, [r7, #68]	; 0x44
 8006754:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006758:	460b      	mov	r3, r1
 800675a:	4313      	orrs	r3, r2
 800675c:	d00e      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800675e:	4b86      	ldr	r3, [pc, #536]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	4a85      	ldr	r2, [pc, #532]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006764:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006768:	6113      	str	r3, [r2, #16]
 800676a:	4b83      	ldr	r3, [pc, #524]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800676c:	6919      	ldr	r1, [r3, #16]
 800676e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006772:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006776:	4a80      	ldr	r2, [pc, #512]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006778:	430b      	orrs	r3, r1
 800677a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800677c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006788:	63bb      	str	r3, [r7, #56]	; 0x38
 800678a:	2300      	movs	r3, #0
 800678c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800678e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006792:	460b      	mov	r3, r1
 8006794:	4313      	orrs	r3, r2
 8006796:	d009      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006798:	4b77      	ldr	r3, [pc, #476]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800679a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80067a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a6:	4a74      	ldr	r2, [pc, #464]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067a8:	430b      	orrs	r3, r1
 80067aa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80067ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80067b8:	633b      	str	r3, [r7, #48]	; 0x30
 80067ba:	2300      	movs	r3, #0
 80067bc:	637b      	str	r3, [r7, #52]	; 0x34
 80067be:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80067c2:	460b      	mov	r3, r1
 80067c4:	4313      	orrs	r3, r2
 80067c6:	d00a      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067c8:	4b6b      	ldr	r3, [pc, #428]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067cc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80067d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067d8:	4a67      	ldr	r2, [pc, #412]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067da:	430b      	orrs	r3, r1
 80067dc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80067de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	2100      	movs	r1, #0
 80067e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80067f4:	460b      	mov	r3, r1
 80067f6:	4313      	orrs	r3, r2
 80067f8:	d011      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067fe:	3308      	adds	r3, #8
 8006800:	2100      	movs	r1, #0
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fb78 	bl	8006ef8 <RCCEx_PLL2_Config>
 8006808:	4603      	mov	r3, r0
 800680a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800680e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006816:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800681a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800681e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006826:	2100      	movs	r1, #0
 8006828:	6239      	str	r1, [r7, #32]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	627b      	str	r3, [r7, #36]	; 0x24
 8006830:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006834:	460b      	mov	r3, r1
 8006836:	4313      	orrs	r3, r2
 8006838:	d011      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800683a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800683e:	3308      	adds	r3, #8
 8006840:	2101      	movs	r1, #1
 8006842:	4618      	mov	r0, r3
 8006844:	f000 fb58 	bl	8006ef8 <RCCEx_PLL2_Config>
 8006848:	4603      	mov	r3, r0
 800684a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800684e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006856:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800685a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800685e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	2100      	movs	r1, #0
 8006868:	61b9      	str	r1, [r7, #24]
 800686a:	f003 0304 	and.w	r3, r3, #4
 800686e:	61fb      	str	r3, [r7, #28]
 8006870:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006874:	460b      	mov	r3, r1
 8006876:	4313      	orrs	r3, r2
 8006878:	d011      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800687a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800687e:	3308      	adds	r3, #8
 8006880:	2102      	movs	r1, #2
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fb38 	bl	8006ef8 <RCCEx_PLL2_Config>
 8006888:	4603      	mov	r3, r0
 800688a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800688e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006896:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800689a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800689e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a6:	2100      	movs	r1, #0
 80068a8:	6139      	str	r1, [r7, #16]
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80068b4:	460b      	mov	r3, r1
 80068b6:	4313      	orrs	r3, r2
 80068b8:	d011      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068be:	3328      	adds	r3, #40	; 0x28
 80068c0:	2100      	movs	r1, #0
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 fbca 	bl	800705c <RCCEx_PLL3_Config>
 80068c8:	4603      	mov	r3, r0
 80068ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80068ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80068de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	2100      	movs	r1, #0
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	f003 0310 	and.w	r3, r3, #16
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80068f4:	460b      	mov	r3, r1
 80068f6:	4313      	orrs	r3, r2
 80068f8:	d011      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068fe:	3328      	adds	r3, #40	; 0x28
 8006900:	2101      	movs	r1, #1
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fbaa 	bl	800705c <RCCEx_PLL3_Config>
 8006908:	4603      	mov	r3, r0
 800690a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800690e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006916:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800691a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800691e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	2100      	movs	r1, #0
 8006928:	6039      	str	r1, [r7, #0]
 800692a:	f003 0320 	and.w	r3, r3, #32
 800692e:	607b      	str	r3, [r7, #4]
 8006930:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006934:	460b      	mov	r3, r1
 8006936:	4313      	orrs	r3, r2
 8006938:	d011      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800693a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800693e:	3328      	adds	r3, #40	; 0x28
 8006940:	2102      	movs	r1, #2
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fb8a 	bl	800705c <RCCEx_PLL3_Config>
 8006948:	4603      	mov	r3, r0
 800694a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800694e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800695a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800695e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	e000      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
}
 800696c:	4618      	mov	r0, r3
 800696e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006972:	46bd      	mov	sp, r7
 8006974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006978:	58024400 	.word	0x58024400

0800697c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006980:	f7fe fd96 	bl	80054b0 <HAL_RCC_GetHCLKFreq>
 8006984:	4602      	mov	r2, r0
 8006986:	4b06      	ldr	r3, [pc, #24]	; (80069a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	091b      	lsrs	r3, r3, #4
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	4904      	ldr	r1, [pc, #16]	; (80069a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006992:	5ccb      	ldrb	r3, [r1, r3]
 8006994:	f003 031f 	and.w	r3, r3, #31
 8006998:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800699c:	4618      	mov	r0, r3
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	58024400 	.word	0x58024400
 80069a4:	08009240 	.word	0x08009240

080069a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b089      	sub	sp, #36	; 0x24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069b0:	4ba1      	ldr	r3, [pc, #644]	; (8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b4:	f003 0303 	and.w	r3, r3, #3
 80069b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80069ba:	4b9f      	ldr	r3, [pc, #636]	; (8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069be:	0b1b      	lsrs	r3, r3, #12
 80069c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80069c6:	4b9c      	ldr	r3, [pc, #624]	; (8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ca:	091b      	lsrs	r3, r3, #4
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80069d2:	4b99      	ldr	r3, [pc, #612]	; (8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d6:	08db      	lsrs	r3, r3, #3
 80069d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	fb02 f303 	mul.w	r3, r2, r3
 80069e2:	ee07 3a90 	vmov	s15, r3
 80069e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 8111 	beq.w	8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	f000 8083 	beq.w	8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	f200 80a1 	bhi.w	8006b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d056      	beq.n	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a12:	e099      	b.n	8006b48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a14:	4b88      	ldr	r3, [pc, #544]	; (8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0320 	and.w	r3, r3, #32
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d02d      	beq.n	8006a7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a20:	4b85      	ldr	r3, [pc, #532]	; (8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	08db      	lsrs	r3, r3, #3
 8006a26:	f003 0303 	and.w	r3, r3, #3
 8006a2a:	4a84      	ldr	r2, [pc, #528]	; (8006c3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a30:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	ee07 3a90 	vmov	s15, r3
 8006a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a4a:	4b7b      	ldr	r3, [pc, #492]	; (8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a52:	ee07 3a90 	vmov	s15, r3
 8006a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006a7a:	e087      	b.n	8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a8e:	4b6a      	ldr	r3, [pc, #424]	; (8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aa2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006abe:	e065      	b.n	8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	ee07 3a90 	vmov	s15, r3
 8006ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ad2:	4b59      	ldr	r3, [pc, #356]	; (8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ae6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b02:	e043      	b.n	8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	ee07 3a90 	vmov	s15, r3
 8006b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b16:	4b48      	ldr	r3, [pc, #288]	; (8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b46:	e021      	b.n	8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	ee07 3a90 	vmov	s15, r3
 8006b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b5a:	4b37      	ldr	r3, [pc, #220]	; (8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006b8c:	4b2a      	ldr	r3, [pc, #168]	; (8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b90:	0a5b      	lsrs	r3, r3, #9
 8006b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ba2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ba6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bb2:	ee17 2a90 	vmov	r2, s15
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006bba:	4b1f      	ldr	r3, [pc, #124]	; (8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbe:	0c1b      	lsrs	r3, r3, #16
 8006bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc4:	ee07 3a90 	vmov	s15, r3
 8006bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006be0:	ee17 2a90 	vmov	r2, s15
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006be8:	4b13      	ldr	r3, [pc, #76]	; (8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bec:	0e1b      	lsrs	r3, r3, #24
 8006bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c02:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c0e:	ee17 2a90 	vmov	r2, s15
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c16:	e008      	b.n	8006c2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	609a      	str	r2, [r3, #8]
}
 8006c2a:	bf00      	nop
 8006c2c:	3724      	adds	r7, #36	; 0x24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	58024400 	.word	0x58024400
 8006c3c:	03d09000 	.word	0x03d09000
 8006c40:	46000000 	.word	0x46000000
 8006c44:	4c742400 	.word	0x4c742400
 8006c48:	4a742400 	.word	0x4a742400
 8006c4c:	4bbebc20 	.word	0x4bbebc20

08006c50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b089      	sub	sp, #36	; 0x24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c58:	4ba1      	ldr	r3, [pc, #644]	; (8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5c:	f003 0303 	and.w	r3, r3, #3
 8006c60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006c62:	4b9f      	ldr	r3, [pc, #636]	; (8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c66:	0d1b      	lsrs	r3, r3, #20
 8006c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006c6e:	4b9c      	ldr	r3, [pc, #624]	; (8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c72:	0a1b      	lsrs	r3, r3, #8
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006c7a:	4b99      	ldr	r3, [pc, #612]	; (8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7e:	08db      	lsrs	r3, r3, #3
 8006c80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	fb02 f303 	mul.w	r3, r2, r3
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 8111 	beq.w	8006ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	f000 8083 	beq.w	8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	f200 80a1 	bhi.w	8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d056      	beq.n	8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006cba:	e099      	b.n	8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cbc:	4b88      	ldr	r3, [pc, #544]	; (8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d02d      	beq.n	8006d24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cc8:	4b85      	ldr	r3, [pc, #532]	; (8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	08db      	lsrs	r3, r3, #3
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	4a84      	ldr	r2, [pc, #528]	; (8006ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	ee07 3a90 	vmov	s15, r3
 8006ce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	ee07 3a90 	vmov	s15, r3
 8006cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cf2:	4b7b      	ldr	r3, [pc, #492]	; (8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d06:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d22:	e087      	b.n	8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	ee07 3a90 	vmov	s15, r3
 8006d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d36:	4b6a      	ldr	r3, [pc, #424]	; (8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d66:	e065      	b.n	8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	ee07 3a90 	vmov	s15, r3
 8006d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d7a:	4b59      	ldr	r3, [pc, #356]	; (8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d82:	ee07 3a90 	vmov	s15, r3
 8006d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006daa:	e043      	b.n	8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	ee07 3a90 	vmov	s15, r3
 8006db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dbe:	4b48      	ldr	r3, [pc, #288]	; (8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dee:	e021      	b.n	8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e02:	4b37      	ldr	r3, [pc, #220]	; (8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e0a:	ee07 3a90 	vmov	s15, r3
 8006e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006e34:	4b2a      	ldr	r3, [pc, #168]	; (8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e38:	0a5b      	lsrs	r3, r3, #9
 8006e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e3e:	ee07 3a90 	vmov	s15, r3
 8006e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e5a:	ee17 2a90 	vmov	r2, s15
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006e62:	4b1f      	ldr	r3, [pc, #124]	; (8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	0c1b      	lsrs	r3, r3, #16
 8006e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e6c:	ee07 3a90 	vmov	s15, r3
 8006e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e88:	ee17 2a90 	vmov	r2, s15
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006e90:	4b13      	ldr	r3, [pc, #76]	; (8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e94:	0e1b      	lsrs	r3, r3, #24
 8006e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ea6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eb6:	ee17 2a90 	vmov	r2, s15
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	609a      	str	r2, [r3, #8]
}
 8006ed2:	bf00      	nop
 8006ed4:	3724      	adds	r7, #36	; 0x24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	58024400 	.word	0x58024400
 8006ee4:	03d09000 	.word	0x03d09000
 8006ee8:	46000000 	.word	0x46000000
 8006eec:	4c742400 	.word	0x4c742400
 8006ef0:	4a742400 	.word	0x4a742400
 8006ef4:	4bbebc20 	.word	0x4bbebc20

08006ef8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f06:	4b53      	ldr	r3, [pc, #332]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0a:	f003 0303 	and.w	r3, r3, #3
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d101      	bne.n	8006f16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e099      	b.n	800704a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f16:	4b4f      	ldr	r3, [pc, #316]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a4e      	ldr	r2, [pc, #312]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006f1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f22:	f7fa f923 	bl	800116c <HAL_GetTick>
 8006f26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f28:	e008      	b.n	8006f3c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f2a:	f7fa f91f 	bl	800116c <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d901      	bls.n	8006f3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e086      	b.n	800704a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f3c:	4b45      	ldr	r3, [pc, #276]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1f0      	bne.n	8006f2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006f48:	4b42      	ldr	r3, [pc, #264]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	031b      	lsls	r3, r3, #12
 8006f56:	493f      	ldr	r1, [pc, #252]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	628b      	str	r3, [r1, #40]	; 0x28
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	025b      	lsls	r3, r3, #9
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	431a      	orrs	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	041b      	lsls	r3, r3, #16
 8006f7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	061b      	lsls	r3, r3, #24
 8006f88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f8c:	4931      	ldr	r1, [pc, #196]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006f92:	4b30      	ldr	r3, [pc, #192]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	492d      	ldr	r1, [pc, #180]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006fa4:	4b2b      	ldr	r3, [pc, #172]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	f023 0220 	bic.w	r2, r3, #32
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	4928      	ldr	r1, [pc, #160]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006fb6:	4b27      	ldr	r3, [pc, #156]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fba:	4a26      	ldr	r2, [pc, #152]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006fbc:	f023 0310 	bic.w	r3, r3, #16
 8006fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006fc2:	4b24      	ldr	r3, [pc, #144]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006fc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fc6:	4b24      	ldr	r3, [pc, #144]	; (8007058 <RCCEx_PLL2_Config+0x160>)
 8006fc8:	4013      	ands	r3, r2
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	69d2      	ldr	r2, [r2, #28]
 8006fce:	00d2      	lsls	r2, r2, #3
 8006fd0:	4920      	ldr	r1, [pc, #128]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006fd6:	4b1f      	ldr	r3, [pc, #124]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fda:	4a1e      	ldr	r2, [pc, #120]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006fdc:	f043 0310 	orr.w	r3, r3, #16
 8006fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d106      	bne.n	8006ff6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006fe8:	4b1a      	ldr	r3, [pc, #104]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	4a19      	ldr	r2, [pc, #100]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006fee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ff2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ff4:	e00f      	b.n	8007016 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d106      	bne.n	800700a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006ffc:	4b15      	ldr	r3, [pc, #84]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	4a14      	ldr	r2, [pc, #80]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8007002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007006:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007008:	e005      	b.n	8007016 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800700a:	4b12      	ldr	r3, [pc, #72]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	4a11      	ldr	r2, [pc, #68]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8007010:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007014:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007016:	4b0f      	ldr	r3, [pc, #60]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a0e      	ldr	r2, [pc, #56]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 800701c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007022:	f7fa f8a3 	bl	800116c <HAL_GetTick>
 8007026:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007028:	e008      	b.n	800703c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800702a:	f7fa f89f 	bl	800116c <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	2b02      	cmp	r3, #2
 8007036:	d901      	bls.n	800703c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e006      	b.n	800704a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800703c:	4b05      	ldr	r3, [pc, #20]	; (8007054 <RCCEx_PLL2_Config+0x15c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d0f0      	beq.n	800702a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007048:	7bfb      	ldrb	r3, [r7, #15]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	58024400 	.word	0x58024400
 8007058:	ffff0007 	.word	0xffff0007

0800705c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800706a:	4b53      	ldr	r3, [pc, #332]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 800706c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	2b03      	cmp	r3, #3
 8007074:	d101      	bne.n	800707a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e099      	b.n	80071ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800707a:	4b4f      	ldr	r3, [pc, #316]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a4e      	ldr	r2, [pc, #312]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 8007080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007084:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007086:	f7fa f871 	bl	800116c <HAL_GetTick>
 800708a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800708c:	e008      	b.n	80070a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800708e:	f7fa f86d 	bl	800116c <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d901      	bls.n	80070a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e086      	b.n	80071ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070a0:	4b45      	ldr	r3, [pc, #276]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1f0      	bne.n	800708e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80070ac:	4b42      	ldr	r3, [pc, #264]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 80070ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	051b      	lsls	r3, r3, #20
 80070ba:	493f      	ldr	r1, [pc, #252]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	628b      	str	r3, [r1, #40]	; 0x28
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	3b01      	subs	r3, #1
 80070c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	025b      	lsls	r3, r3, #9
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	431a      	orrs	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	3b01      	subs	r3, #1
 80070dc:	041b      	lsls	r3, r3, #16
 80070de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070e2:	431a      	orrs	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	3b01      	subs	r3, #1
 80070ea:	061b      	lsls	r3, r3, #24
 80070ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80070f0:	4931      	ldr	r1, [pc, #196]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80070f6:	4b30      	ldr	r3, [pc, #192]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 80070f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	492d      	ldr	r1, [pc, #180]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 8007104:	4313      	orrs	r3, r2
 8007106:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007108:	4b2b      	ldr	r3, [pc, #172]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	4928      	ldr	r1, [pc, #160]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 8007116:	4313      	orrs	r3, r2
 8007118:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800711a:	4b27      	ldr	r3, [pc, #156]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 800711c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711e:	4a26      	ldr	r2, [pc, #152]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 8007120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007124:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007126:	4b24      	ldr	r3, [pc, #144]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 8007128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800712a:	4b24      	ldr	r3, [pc, #144]	; (80071bc <RCCEx_PLL3_Config+0x160>)
 800712c:	4013      	ands	r3, r2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	69d2      	ldr	r2, [r2, #28]
 8007132:	00d2      	lsls	r2, r2, #3
 8007134:	4920      	ldr	r1, [pc, #128]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 8007136:	4313      	orrs	r3, r2
 8007138:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800713a:	4b1f      	ldr	r3, [pc, #124]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 800713c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713e:	4a1e      	ldr	r2, [pc, #120]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 8007140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007144:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d106      	bne.n	800715a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800714c:	4b1a      	ldr	r3, [pc, #104]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 800714e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007150:	4a19      	ldr	r2, [pc, #100]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 8007152:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007156:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007158:	e00f      	b.n	800717a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d106      	bne.n	800716e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007160:	4b15      	ldr	r3, [pc, #84]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 8007162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007164:	4a14      	ldr	r2, [pc, #80]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 8007166:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800716a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800716c:	e005      	b.n	800717a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800716e:	4b12      	ldr	r3, [pc, #72]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 8007170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007172:	4a11      	ldr	r2, [pc, #68]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 8007174:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007178:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800717a:	4b0f      	ldr	r3, [pc, #60]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a0e      	ldr	r2, [pc, #56]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 8007180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007186:	f7f9 fff1 	bl	800116c <HAL_GetTick>
 800718a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800718c:	e008      	b.n	80071a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800718e:	f7f9 ffed 	bl	800116c <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d901      	bls.n	80071a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e006      	b.n	80071ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <RCCEx_PLL3_Config+0x15c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d0f0      	beq.n	800718e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	58024400 	.word	0x58024400
 80071bc:	ffff0007 	.word	0xffff0007

080071c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e042      	b.n	8007258 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d106      	bne.n	80071ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7f9 fd13 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2224      	movs	r2, #36	; 0x24
 80071ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 0201 	bic.w	r2, r2, #1
 8007200:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fd24 	bl	8007c50 <UART_SetConfig>
 8007208:	4603      	mov	r3, r0
 800720a:	2b01      	cmp	r3, #1
 800720c:	d101      	bne.n	8007212 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e022      	b.n	8007258 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f001 fa80 	bl	8008720 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800722e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689a      	ldr	r2, [r3, #8]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800723e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0201 	orr.w	r2, r2, #1
 800724e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 fb07 	bl	8008864 <UART_CheckIdleState>
 8007256:	4603      	mov	r3, r0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b08a      	sub	sp, #40	; 0x28
 8007264:	af02      	add	r7, sp, #8
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	603b      	str	r3, [r7, #0]
 800726c:	4613      	mov	r3, r2
 800726e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007276:	2b20      	cmp	r3, #32
 8007278:	f040 80b5 	bne.w	80073e6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <HAL_UART_Receive+0x28>
 8007282:	88fb      	ldrh	r3, [r7, #6]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e0ad      	b.n	80073e8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2222      	movs	r2, #34	; 0x22
 8007298:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072a2:	f7f9 ff63 	bl	800116c <HAL_GetTick>
 80072a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	88fa      	ldrh	r2, [r7, #6]
 80072ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	88fa      	ldrh	r2, [r7, #6]
 80072b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c0:	d10e      	bne.n	80072e0 <HAL_UART_Receive+0x80>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d105      	bne.n	80072d6 <HAL_UART_Receive+0x76>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80072d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072d4:	e02d      	b.n	8007332 <HAL_UART_Receive+0xd2>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	22ff      	movs	r2, #255	; 0xff
 80072da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072de:	e028      	b.n	8007332 <HAL_UART_Receive+0xd2>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10d      	bne.n	8007304 <HAL_UART_Receive+0xa4>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d104      	bne.n	80072fa <HAL_UART_Receive+0x9a>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	22ff      	movs	r2, #255	; 0xff
 80072f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80072f8:	e01b      	b.n	8007332 <HAL_UART_Receive+0xd2>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	227f      	movs	r2, #127	; 0x7f
 80072fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007302:	e016      	b.n	8007332 <HAL_UART_Receive+0xd2>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800730c:	d10d      	bne.n	800732a <HAL_UART_Receive+0xca>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d104      	bne.n	8007320 <HAL_UART_Receive+0xc0>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	227f      	movs	r2, #127	; 0x7f
 800731a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800731e:	e008      	b.n	8007332 <HAL_UART_Receive+0xd2>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	223f      	movs	r2, #63	; 0x3f
 8007324:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007328:	e003      	b.n	8007332 <HAL_UART_Receive+0xd2>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007338:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007342:	d108      	bne.n	8007356 <HAL_UART_Receive+0xf6>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d104      	bne.n	8007356 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800734c:	2300      	movs	r3, #0
 800734e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	61bb      	str	r3, [r7, #24]
 8007354:	e003      	b.n	800735e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800735a:	2300      	movs	r3, #0
 800735c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800735e:	e036      	b.n	80073ce <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	2200      	movs	r2, #0
 8007368:	2120      	movs	r1, #32
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f001 fb24 	bl	80089b8 <UART_WaitOnFlagUntilTimeout>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d005      	beq.n	8007382 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2220      	movs	r2, #32
 800737a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e032      	b.n	80073e8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10c      	bne.n	80073a2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	b29a      	uxth	r2, r3
 8007390:	8a7b      	ldrh	r3, [r7, #18]
 8007392:	4013      	ands	r3, r2
 8007394:	b29a      	uxth	r2, r3
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	3302      	adds	r3, #2
 800739e:	61bb      	str	r3, [r7, #24]
 80073a0:	e00c      	b.n	80073bc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	8a7b      	ldrh	r3, [r7, #18]
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	4013      	ands	r3, r2
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	3301      	adds	r3, #1
 80073ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	3b01      	subs	r3, #1
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1c2      	bne.n	8007360 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2220      	movs	r2, #32
 80073de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	e000      	b.n	80073e8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80073e6:	2302      	movs	r3, #2
  }
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3720      	adds	r7, #32
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08a      	sub	sp, #40	; 0x28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	4613      	mov	r3, r2
 80073fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007404:	2b20      	cmp	r3, #32
 8007406:	d137      	bne.n	8007478 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <HAL_UART_Receive_DMA+0x24>
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e030      	b.n	800747a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a18      	ldr	r2, [pc, #96]	; (8007484 <HAL_UART_Receive_DMA+0x94>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d01f      	beq.n	8007468 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d018      	beq.n	8007468 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	613b      	str	r3, [r7, #16]
   return(result);
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800744a:	627b      	str	r3, [r7, #36]	; 0x24
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007454:	623b      	str	r3, [r7, #32]
 8007456:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007458:	69f9      	ldr	r1, [r7, #28]
 800745a:	6a3a      	ldr	r2, [r7, #32]
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	61bb      	str	r3, [r7, #24]
   return(result);
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e6      	bne.n	8007436 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007468:	88fb      	ldrh	r3, [r7, #6]
 800746a:	461a      	mov	r2, r3
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f001 fb0a 	bl	8008a88 <UART_Start_Receive_DMA>
 8007474:	4603      	mov	r3, r0
 8007476:	e000      	b.n	800747a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007478:	2302      	movs	r3, #2
  }
}
 800747a:	4618      	mov	r0, r3
 800747c:	3728      	adds	r7, #40	; 0x28
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	58000c00 	.word	0x58000c00

08007488 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b0ba      	sub	sp, #232	; 0xe8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80074b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80074b6:	4013      	ands	r3, r2
 80074b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80074bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d11b      	bne.n	80074fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c8:	f003 0320 	and.w	r3, r3, #32
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d015      	beq.n	80074fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d4:	f003 0320 	and.w	r3, r3, #32
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d105      	bne.n	80074e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d009      	beq.n	80074fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 8377 	beq.w	8007be0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	4798      	blx	r3
      }
      return;
 80074fa:	e371      	b.n	8007be0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80074fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 8123 	beq.w	800774c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007506:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800750a:	4b8d      	ldr	r3, [pc, #564]	; (8007740 <HAL_UART_IRQHandler+0x2b8>)
 800750c:	4013      	ands	r3, r2
 800750e:	2b00      	cmp	r3, #0
 8007510:	d106      	bne.n	8007520 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007512:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007516:	4b8b      	ldr	r3, [pc, #556]	; (8007744 <HAL_UART_IRQHandler+0x2bc>)
 8007518:	4013      	ands	r3, r2
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 8116 	beq.w	800774c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d011      	beq.n	8007550 <HAL_UART_IRQHandler+0xc8>
 800752c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00b      	beq.n	8007550 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2201      	movs	r2, #1
 800753e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007546:	f043 0201 	orr.w	r2, r3, #1
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007554:	f003 0302 	and.w	r3, r3, #2
 8007558:	2b00      	cmp	r3, #0
 800755a:	d011      	beq.n	8007580 <HAL_UART_IRQHandler+0xf8>
 800755c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00b      	beq.n	8007580 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2202      	movs	r2, #2
 800756e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007576:	f043 0204 	orr.w	r2, r3, #4
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007584:	f003 0304 	and.w	r3, r3, #4
 8007588:	2b00      	cmp	r3, #0
 800758a:	d011      	beq.n	80075b0 <HAL_UART_IRQHandler+0x128>
 800758c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2204      	movs	r2, #4
 800759e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a6:	f043 0202 	orr.w	r2, r3, #2
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b4:	f003 0308 	and.w	r3, r3, #8
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d017      	beq.n	80075ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c0:	f003 0320 	and.w	r3, r3, #32
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d105      	bne.n	80075d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80075c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80075cc:	4b5c      	ldr	r3, [pc, #368]	; (8007740 <HAL_UART_IRQHandler+0x2b8>)
 80075ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00b      	beq.n	80075ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2208      	movs	r2, #8
 80075da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e2:	f043 0208 	orr.w	r2, r3, #8
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d012      	beq.n	800761e <HAL_UART_IRQHandler+0x196>
 80075f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00c      	beq.n	800761e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800760c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007614:	f043 0220 	orr.w	r2, r3, #32
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 82dd 	beq.w	8007be4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800762a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d013      	beq.n	800765e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800763a:	f003 0320 	and.w	r3, r3, #32
 800763e:	2b00      	cmp	r3, #0
 8007640:	d105      	bne.n	800764e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d007      	beq.n	800765e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007652:	2b00      	cmp	r3, #0
 8007654:	d003      	beq.n	800765e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007664:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007672:	2b40      	cmp	r3, #64	; 0x40
 8007674:	d005      	beq.n	8007682 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800767a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800767e:	2b00      	cmp	r3, #0
 8007680:	d054      	beq.n	800772c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 fae8 	bl	8008c58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007692:	2b40      	cmp	r3, #64	; 0x40
 8007694:	d146      	bne.n	8007724 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3308      	adds	r3, #8
 800769c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076a4:	e853 3f00 	ldrex	r3, [r3]
 80076a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3308      	adds	r3, #8
 80076be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076d2:	e841 2300 	strex	r3, r2, [r1]
 80076d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1d9      	bne.n	8007696 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d017      	beq.n	800771c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076f2:	4a15      	ldr	r2, [pc, #84]	; (8007748 <HAL_UART_IRQHandler+0x2c0>)
 80076f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fa ffbd 	bl	800267c <HAL_DMA_Abort_IT>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d019      	beq.n	800773c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800770e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007716:	4610      	mov	r0, r2
 8007718:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800771a:	e00f      	b.n	800773c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fa81 	bl	8007c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007722:	e00b      	b.n	800773c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fa7d 	bl	8007c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800772a:	e007      	b.n	800773c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fa79 	bl	8007c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800773a:	e253      	b.n	8007be4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800773c:	bf00      	nop
    return;
 800773e:	e251      	b.n	8007be4 <HAL_UART_IRQHandler+0x75c>
 8007740:	10000001 	.word	0x10000001
 8007744:	04000120 	.word	0x04000120
 8007748:	08008f0b 	.word	0x08008f0b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007750:	2b01      	cmp	r3, #1
 8007752:	f040 81e7 	bne.w	8007b24 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775a:	f003 0310 	and.w	r3, r3, #16
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 81e0 	beq.w	8007b24 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007768:	f003 0310 	and.w	r3, r3, #16
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 81d9 	beq.w	8007b24 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2210      	movs	r2, #16
 8007778:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007784:	2b40      	cmp	r3, #64	; 0x40
 8007786:	f040 8151 	bne.w	8007a2c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a96      	ldr	r2, [pc, #600]	; (80079ec <HAL_UART_IRQHandler+0x564>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d068      	beq.n	800786a <HAL_UART_IRQHandler+0x3e2>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a93      	ldr	r2, [pc, #588]	; (80079f0 <HAL_UART_IRQHandler+0x568>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d061      	beq.n	800786a <HAL_UART_IRQHandler+0x3e2>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a91      	ldr	r2, [pc, #580]	; (80079f4 <HAL_UART_IRQHandler+0x56c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d05a      	beq.n	800786a <HAL_UART_IRQHandler+0x3e2>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a8e      	ldr	r2, [pc, #568]	; (80079f8 <HAL_UART_IRQHandler+0x570>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d053      	beq.n	800786a <HAL_UART_IRQHandler+0x3e2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a8c      	ldr	r2, [pc, #560]	; (80079fc <HAL_UART_IRQHandler+0x574>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d04c      	beq.n	800786a <HAL_UART_IRQHandler+0x3e2>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a89      	ldr	r2, [pc, #548]	; (8007a00 <HAL_UART_IRQHandler+0x578>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d045      	beq.n	800786a <HAL_UART_IRQHandler+0x3e2>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a87      	ldr	r2, [pc, #540]	; (8007a04 <HAL_UART_IRQHandler+0x57c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d03e      	beq.n	800786a <HAL_UART_IRQHandler+0x3e2>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a84      	ldr	r2, [pc, #528]	; (8007a08 <HAL_UART_IRQHandler+0x580>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d037      	beq.n	800786a <HAL_UART_IRQHandler+0x3e2>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a82      	ldr	r2, [pc, #520]	; (8007a0c <HAL_UART_IRQHandler+0x584>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d030      	beq.n	800786a <HAL_UART_IRQHandler+0x3e2>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a7f      	ldr	r2, [pc, #508]	; (8007a10 <HAL_UART_IRQHandler+0x588>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d029      	beq.n	800786a <HAL_UART_IRQHandler+0x3e2>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a7d      	ldr	r2, [pc, #500]	; (8007a14 <HAL_UART_IRQHandler+0x58c>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d022      	beq.n	800786a <HAL_UART_IRQHandler+0x3e2>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a7a      	ldr	r2, [pc, #488]	; (8007a18 <HAL_UART_IRQHandler+0x590>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d01b      	beq.n	800786a <HAL_UART_IRQHandler+0x3e2>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a78      	ldr	r2, [pc, #480]	; (8007a1c <HAL_UART_IRQHandler+0x594>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d014      	beq.n	800786a <HAL_UART_IRQHandler+0x3e2>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a75      	ldr	r2, [pc, #468]	; (8007a20 <HAL_UART_IRQHandler+0x598>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d00d      	beq.n	800786a <HAL_UART_IRQHandler+0x3e2>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a73      	ldr	r2, [pc, #460]	; (8007a24 <HAL_UART_IRQHandler+0x59c>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d006      	beq.n	800786a <HAL_UART_IRQHandler+0x3e2>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a70      	ldr	r2, [pc, #448]	; (8007a28 <HAL_UART_IRQHandler+0x5a0>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d106      	bne.n	8007878 <HAL_UART_IRQHandler+0x3f0>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	b29b      	uxth	r3, r3
 8007876:	e005      	b.n	8007884 <HAL_UART_IRQHandler+0x3fc>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	b29b      	uxth	r3, r3
 8007884:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007888:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 81ab 	beq.w	8007be8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007898:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800789c:	429a      	cmp	r2, r3
 800789e:	f080 81a3 	bcs.w	8007be8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078b8:	f000 8087 	beq.w	80079ca <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	461a      	mov	r2, r3
 80078e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078f6:	e841 2300 	strex	r3, r2, [r1]
 80078fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1da      	bne.n	80078bc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3308      	adds	r3, #8
 800790c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007910:	e853 3f00 	ldrex	r3, [r3]
 8007914:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007918:	f023 0301 	bic.w	r3, r3, #1
 800791c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3308      	adds	r3, #8
 8007926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800792a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800792e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007930:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007932:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007936:	e841 2300 	strex	r3, r2, [r1]
 800793a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800793c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1e1      	bne.n	8007906 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3308      	adds	r3, #8
 8007948:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3308      	adds	r3, #8
 8007962:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007966:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007968:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800796c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e3      	bne.n	8007942 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2220      	movs	r2, #32
 800797e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007998:	f023 0310 	bic.w	r3, r3, #16
 800799c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	461a      	mov	r2, r3
 80079a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80079ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079b2:	e841 2300 	strex	r3, r2, [r1]
 80079b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1e4      	bne.n	8007988 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fa fb3b 	bl	8002040 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2202      	movs	r2, #2
 80079ce:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079dc:	b29b      	uxth	r3, r3
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f927 	bl	8007c38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079ea:	e0fd      	b.n	8007be8 <HAL_UART_IRQHandler+0x760>
 80079ec:	40020010 	.word	0x40020010
 80079f0:	40020028 	.word	0x40020028
 80079f4:	40020040 	.word	0x40020040
 80079f8:	40020058 	.word	0x40020058
 80079fc:	40020070 	.word	0x40020070
 8007a00:	40020088 	.word	0x40020088
 8007a04:	400200a0 	.word	0x400200a0
 8007a08:	400200b8 	.word	0x400200b8
 8007a0c:	40020410 	.word	0x40020410
 8007a10:	40020428 	.word	0x40020428
 8007a14:	40020440 	.word	0x40020440
 8007a18:	40020458 	.word	0x40020458
 8007a1c:	40020470 	.word	0x40020470
 8007a20:	40020488 	.word	0x40020488
 8007a24:	400204a0 	.word	0x400204a0
 8007a28:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 80cf 	beq.w	8007bec <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007a4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 80ca 	beq.w	8007bec <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	461a      	mov	r2, r3
 8007a76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a7c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e4      	bne.n	8007a58 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3308      	adds	r3, #8
 8007a94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a98:	e853 3f00 	ldrex	r3, [r3]
 8007a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8007a9e:	6a3a      	ldr	r2, [r7, #32]
 8007aa0:	4b55      	ldr	r3, [pc, #340]	; (8007bf8 <HAL_UART_IRQHandler+0x770>)
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3308      	adds	r3, #8
 8007aae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ab2:	633a      	str	r2, [r7, #48]	; 0x30
 8007ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e3      	bne.n	8007a8e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	e853 3f00 	ldrex	r3, [r3]
 8007ae6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0310 	bic.w	r3, r3, #16
 8007aee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007afc:	61fb      	str	r3, [r7, #28]
 8007afe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b00:	69b9      	ldr	r1, [r7, #24]
 8007b02:	69fa      	ldr	r2, [r7, #28]
 8007b04:	e841 2300 	strex	r3, r2, [r1]
 8007b08:	617b      	str	r3, [r7, #20]
   return(result);
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1e4      	bne.n	8007ada <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f88b 	bl	8007c38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b22:	e063      	b.n	8007bec <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00e      	beq.n	8007b4e <HAL_UART_IRQHandler+0x6c6>
 8007b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d008      	beq.n	8007b4e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f001 fa20 	bl	8008f8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b4c:	e051      	b.n	8007bf2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d014      	beq.n	8007b84 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d105      	bne.n	8007b72 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d008      	beq.n	8007b84 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d03a      	beq.n	8007bf0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	4798      	blx	r3
    }
    return;
 8007b82:	e035      	b.n	8007bf0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d009      	beq.n	8007ba4 <HAL_UART_IRQHandler+0x71c>
 8007b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f001 f9ca 	bl	8008f36 <UART_EndTransmit_IT>
    return;
 8007ba2:	e026      	b.n	8007bf2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d009      	beq.n	8007bc4 <HAL_UART_IRQHandler+0x73c>
 8007bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 f9f9 	bl	8008fb4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bc2:	e016      	b.n	8007bf2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d010      	beq.n	8007bf2 <HAL_UART_IRQHandler+0x76a>
 8007bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	da0c      	bge.n	8007bf2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f001 f9e1 	bl	8008fa0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bde:	e008      	b.n	8007bf2 <HAL_UART_IRQHandler+0x76a>
      return;
 8007be0:	bf00      	nop
 8007be2:	e006      	b.n	8007bf2 <HAL_UART_IRQHandler+0x76a>
    return;
 8007be4:	bf00      	nop
 8007be6:	e004      	b.n	8007bf2 <HAL_UART_IRQHandler+0x76a>
      return;
 8007be8:	bf00      	nop
 8007bea:	e002      	b.n	8007bf2 <HAL_UART_IRQHandler+0x76a>
      return;
 8007bec:	bf00      	nop
 8007bee:	e000      	b.n	8007bf2 <HAL_UART_IRQHandler+0x76a>
    return;
 8007bf0:	bf00      	nop
  }
}
 8007bf2:	37e8      	adds	r7, #232	; 0xe8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	effffffe 	.word	0xeffffffe

08007bfc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c54:	b092      	sub	sp, #72	; 0x48
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	431a      	orrs	r2, r3
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	69db      	ldr	r3, [r3, #28]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	4bbe      	ldr	r3, [pc, #760]	; (8007f78 <UART_SetConfig+0x328>)
 8007c80:	4013      	ands	r3, r2
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	6812      	ldr	r2, [r2, #0]
 8007c86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c88:	430b      	orrs	r3, r1
 8007c8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4ab3      	ldr	r2, [pc, #716]	; (8007f7c <UART_SetConfig+0x32c>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d004      	beq.n	8007cbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689a      	ldr	r2, [r3, #8]
 8007cc2:	4baf      	ldr	r3, [pc, #700]	; (8007f80 <UART_SetConfig+0x330>)
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	6812      	ldr	r2, [r2, #0]
 8007cca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ccc:	430b      	orrs	r3, r1
 8007cce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd6:	f023 010f 	bic.w	r1, r3, #15
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4aa6      	ldr	r2, [pc, #664]	; (8007f84 <UART_SetConfig+0x334>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d177      	bne.n	8007de0 <UART_SetConfig+0x190>
 8007cf0:	4ba5      	ldr	r3, [pc, #660]	; (8007f88 <UART_SetConfig+0x338>)
 8007cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cf8:	2b28      	cmp	r3, #40	; 0x28
 8007cfa:	d86d      	bhi.n	8007dd8 <UART_SetConfig+0x188>
 8007cfc:	a201      	add	r2, pc, #4	; (adr r2, 8007d04 <UART_SetConfig+0xb4>)
 8007cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d02:	bf00      	nop
 8007d04:	08007da9 	.word	0x08007da9
 8007d08:	08007dd9 	.word	0x08007dd9
 8007d0c:	08007dd9 	.word	0x08007dd9
 8007d10:	08007dd9 	.word	0x08007dd9
 8007d14:	08007dd9 	.word	0x08007dd9
 8007d18:	08007dd9 	.word	0x08007dd9
 8007d1c:	08007dd9 	.word	0x08007dd9
 8007d20:	08007dd9 	.word	0x08007dd9
 8007d24:	08007db1 	.word	0x08007db1
 8007d28:	08007dd9 	.word	0x08007dd9
 8007d2c:	08007dd9 	.word	0x08007dd9
 8007d30:	08007dd9 	.word	0x08007dd9
 8007d34:	08007dd9 	.word	0x08007dd9
 8007d38:	08007dd9 	.word	0x08007dd9
 8007d3c:	08007dd9 	.word	0x08007dd9
 8007d40:	08007dd9 	.word	0x08007dd9
 8007d44:	08007db9 	.word	0x08007db9
 8007d48:	08007dd9 	.word	0x08007dd9
 8007d4c:	08007dd9 	.word	0x08007dd9
 8007d50:	08007dd9 	.word	0x08007dd9
 8007d54:	08007dd9 	.word	0x08007dd9
 8007d58:	08007dd9 	.word	0x08007dd9
 8007d5c:	08007dd9 	.word	0x08007dd9
 8007d60:	08007dd9 	.word	0x08007dd9
 8007d64:	08007dc1 	.word	0x08007dc1
 8007d68:	08007dd9 	.word	0x08007dd9
 8007d6c:	08007dd9 	.word	0x08007dd9
 8007d70:	08007dd9 	.word	0x08007dd9
 8007d74:	08007dd9 	.word	0x08007dd9
 8007d78:	08007dd9 	.word	0x08007dd9
 8007d7c:	08007dd9 	.word	0x08007dd9
 8007d80:	08007dd9 	.word	0x08007dd9
 8007d84:	08007dc9 	.word	0x08007dc9
 8007d88:	08007dd9 	.word	0x08007dd9
 8007d8c:	08007dd9 	.word	0x08007dd9
 8007d90:	08007dd9 	.word	0x08007dd9
 8007d94:	08007dd9 	.word	0x08007dd9
 8007d98:	08007dd9 	.word	0x08007dd9
 8007d9c:	08007dd9 	.word	0x08007dd9
 8007da0:	08007dd9 	.word	0x08007dd9
 8007da4:	08007dd1 	.word	0x08007dd1
 8007da8:	2301      	movs	r3, #1
 8007daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dae:	e222      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007db0:	2304      	movs	r3, #4
 8007db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007db6:	e21e      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007db8:	2308      	movs	r3, #8
 8007dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dbe:	e21a      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007dc0:	2310      	movs	r3, #16
 8007dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dc6:	e216      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007dc8:	2320      	movs	r3, #32
 8007dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dce:	e212      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007dd0:	2340      	movs	r3, #64	; 0x40
 8007dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dd6:	e20e      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007dd8:	2380      	movs	r3, #128	; 0x80
 8007dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dde:	e20a      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a69      	ldr	r2, [pc, #420]	; (8007f8c <UART_SetConfig+0x33c>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d130      	bne.n	8007e4c <UART_SetConfig+0x1fc>
 8007dea:	4b67      	ldr	r3, [pc, #412]	; (8007f88 <UART_SetConfig+0x338>)
 8007dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dee:	f003 0307 	and.w	r3, r3, #7
 8007df2:	2b05      	cmp	r3, #5
 8007df4:	d826      	bhi.n	8007e44 <UART_SetConfig+0x1f4>
 8007df6:	a201      	add	r2, pc, #4	; (adr r2, 8007dfc <UART_SetConfig+0x1ac>)
 8007df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfc:	08007e15 	.word	0x08007e15
 8007e00:	08007e1d 	.word	0x08007e1d
 8007e04:	08007e25 	.word	0x08007e25
 8007e08:	08007e2d 	.word	0x08007e2d
 8007e0c:	08007e35 	.word	0x08007e35
 8007e10:	08007e3d 	.word	0x08007e3d
 8007e14:	2300      	movs	r3, #0
 8007e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e1a:	e1ec      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007e1c:	2304      	movs	r3, #4
 8007e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e22:	e1e8      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007e24:	2308      	movs	r3, #8
 8007e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e2a:	e1e4      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007e2c:	2310      	movs	r3, #16
 8007e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e32:	e1e0      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007e34:	2320      	movs	r3, #32
 8007e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e3a:	e1dc      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007e3c:	2340      	movs	r3, #64	; 0x40
 8007e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e42:	e1d8      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007e44:	2380      	movs	r3, #128	; 0x80
 8007e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e4a:	e1d4      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a4f      	ldr	r2, [pc, #316]	; (8007f90 <UART_SetConfig+0x340>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d130      	bne.n	8007eb8 <UART_SetConfig+0x268>
 8007e56:	4b4c      	ldr	r3, [pc, #304]	; (8007f88 <UART_SetConfig+0x338>)
 8007e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e5a:	f003 0307 	and.w	r3, r3, #7
 8007e5e:	2b05      	cmp	r3, #5
 8007e60:	d826      	bhi.n	8007eb0 <UART_SetConfig+0x260>
 8007e62:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <UART_SetConfig+0x218>)
 8007e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e68:	08007e81 	.word	0x08007e81
 8007e6c:	08007e89 	.word	0x08007e89
 8007e70:	08007e91 	.word	0x08007e91
 8007e74:	08007e99 	.word	0x08007e99
 8007e78:	08007ea1 	.word	0x08007ea1
 8007e7c:	08007ea9 	.word	0x08007ea9
 8007e80:	2300      	movs	r3, #0
 8007e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e86:	e1b6      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007e88:	2304      	movs	r3, #4
 8007e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e8e:	e1b2      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007e90:	2308      	movs	r3, #8
 8007e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e96:	e1ae      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007e98:	2310      	movs	r3, #16
 8007e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e9e:	e1aa      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007ea0:	2320      	movs	r3, #32
 8007ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ea6:	e1a6      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007ea8:	2340      	movs	r3, #64	; 0x40
 8007eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eae:	e1a2      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007eb0:	2380      	movs	r3, #128	; 0x80
 8007eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eb6:	e19e      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a35      	ldr	r2, [pc, #212]	; (8007f94 <UART_SetConfig+0x344>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d130      	bne.n	8007f24 <UART_SetConfig+0x2d4>
 8007ec2:	4b31      	ldr	r3, [pc, #196]	; (8007f88 <UART_SetConfig+0x338>)
 8007ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec6:	f003 0307 	and.w	r3, r3, #7
 8007eca:	2b05      	cmp	r3, #5
 8007ecc:	d826      	bhi.n	8007f1c <UART_SetConfig+0x2cc>
 8007ece:	a201      	add	r2, pc, #4	; (adr r2, 8007ed4 <UART_SetConfig+0x284>)
 8007ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed4:	08007eed 	.word	0x08007eed
 8007ed8:	08007ef5 	.word	0x08007ef5
 8007edc:	08007efd 	.word	0x08007efd
 8007ee0:	08007f05 	.word	0x08007f05
 8007ee4:	08007f0d 	.word	0x08007f0d
 8007ee8:	08007f15 	.word	0x08007f15
 8007eec:	2300      	movs	r3, #0
 8007eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ef2:	e180      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007ef4:	2304      	movs	r3, #4
 8007ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007efa:	e17c      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007efc:	2308      	movs	r3, #8
 8007efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f02:	e178      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007f04:	2310      	movs	r3, #16
 8007f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f0a:	e174      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007f0c:	2320      	movs	r3, #32
 8007f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f12:	e170      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007f14:	2340      	movs	r3, #64	; 0x40
 8007f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f1a:	e16c      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007f1c:	2380      	movs	r3, #128	; 0x80
 8007f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f22:	e168      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a1b      	ldr	r2, [pc, #108]	; (8007f98 <UART_SetConfig+0x348>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d142      	bne.n	8007fb4 <UART_SetConfig+0x364>
 8007f2e:	4b16      	ldr	r3, [pc, #88]	; (8007f88 <UART_SetConfig+0x338>)
 8007f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f32:	f003 0307 	and.w	r3, r3, #7
 8007f36:	2b05      	cmp	r3, #5
 8007f38:	d838      	bhi.n	8007fac <UART_SetConfig+0x35c>
 8007f3a:	a201      	add	r2, pc, #4	; (adr r2, 8007f40 <UART_SetConfig+0x2f0>)
 8007f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f40:	08007f59 	.word	0x08007f59
 8007f44:	08007f61 	.word	0x08007f61
 8007f48:	08007f69 	.word	0x08007f69
 8007f4c:	08007f71 	.word	0x08007f71
 8007f50:	08007f9d 	.word	0x08007f9d
 8007f54:	08007fa5 	.word	0x08007fa5
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f5e:	e14a      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007f60:	2304      	movs	r3, #4
 8007f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f66:	e146      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007f68:	2308      	movs	r3, #8
 8007f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f6e:	e142      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007f70:	2310      	movs	r3, #16
 8007f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f76:	e13e      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007f78:	cfff69f3 	.word	0xcfff69f3
 8007f7c:	58000c00 	.word	0x58000c00
 8007f80:	11fff4ff 	.word	0x11fff4ff
 8007f84:	40011000 	.word	0x40011000
 8007f88:	58024400 	.word	0x58024400
 8007f8c:	40004400 	.word	0x40004400
 8007f90:	40004800 	.word	0x40004800
 8007f94:	40004c00 	.word	0x40004c00
 8007f98:	40005000 	.word	0x40005000
 8007f9c:	2320      	movs	r3, #32
 8007f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fa2:	e128      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007fa4:	2340      	movs	r3, #64	; 0x40
 8007fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007faa:	e124      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007fac:	2380      	movs	r3, #128	; 0x80
 8007fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fb2:	e120      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4acb      	ldr	r2, [pc, #812]	; (80082e8 <UART_SetConfig+0x698>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d176      	bne.n	80080ac <UART_SetConfig+0x45c>
 8007fbe:	4bcb      	ldr	r3, [pc, #812]	; (80082ec <UART_SetConfig+0x69c>)
 8007fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fc6:	2b28      	cmp	r3, #40	; 0x28
 8007fc8:	d86c      	bhi.n	80080a4 <UART_SetConfig+0x454>
 8007fca:	a201      	add	r2, pc, #4	; (adr r2, 8007fd0 <UART_SetConfig+0x380>)
 8007fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd0:	08008075 	.word	0x08008075
 8007fd4:	080080a5 	.word	0x080080a5
 8007fd8:	080080a5 	.word	0x080080a5
 8007fdc:	080080a5 	.word	0x080080a5
 8007fe0:	080080a5 	.word	0x080080a5
 8007fe4:	080080a5 	.word	0x080080a5
 8007fe8:	080080a5 	.word	0x080080a5
 8007fec:	080080a5 	.word	0x080080a5
 8007ff0:	0800807d 	.word	0x0800807d
 8007ff4:	080080a5 	.word	0x080080a5
 8007ff8:	080080a5 	.word	0x080080a5
 8007ffc:	080080a5 	.word	0x080080a5
 8008000:	080080a5 	.word	0x080080a5
 8008004:	080080a5 	.word	0x080080a5
 8008008:	080080a5 	.word	0x080080a5
 800800c:	080080a5 	.word	0x080080a5
 8008010:	08008085 	.word	0x08008085
 8008014:	080080a5 	.word	0x080080a5
 8008018:	080080a5 	.word	0x080080a5
 800801c:	080080a5 	.word	0x080080a5
 8008020:	080080a5 	.word	0x080080a5
 8008024:	080080a5 	.word	0x080080a5
 8008028:	080080a5 	.word	0x080080a5
 800802c:	080080a5 	.word	0x080080a5
 8008030:	0800808d 	.word	0x0800808d
 8008034:	080080a5 	.word	0x080080a5
 8008038:	080080a5 	.word	0x080080a5
 800803c:	080080a5 	.word	0x080080a5
 8008040:	080080a5 	.word	0x080080a5
 8008044:	080080a5 	.word	0x080080a5
 8008048:	080080a5 	.word	0x080080a5
 800804c:	080080a5 	.word	0x080080a5
 8008050:	08008095 	.word	0x08008095
 8008054:	080080a5 	.word	0x080080a5
 8008058:	080080a5 	.word	0x080080a5
 800805c:	080080a5 	.word	0x080080a5
 8008060:	080080a5 	.word	0x080080a5
 8008064:	080080a5 	.word	0x080080a5
 8008068:	080080a5 	.word	0x080080a5
 800806c:	080080a5 	.word	0x080080a5
 8008070:	0800809d 	.word	0x0800809d
 8008074:	2301      	movs	r3, #1
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807a:	e0bc      	b.n	80081f6 <UART_SetConfig+0x5a6>
 800807c:	2304      	movs	r3, #4
 800807e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008082:	e0b8      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8008084:	2308      	movs	r3, #8
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808a:	e0b4      	b.n	80081f6 <UART_SetConfig+0x5a6>
 800808c:	2310      	movs	r3, #16
 800808e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008092:	e0b0      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8008094:	2320      	movs	r3, #32
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800809a:	e0ac      	b.n	80081f6 <UART_SetConfig+0x5a6>
 800809c:	2340      	movs	r3, #64	; 0x40
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080a2:	e0a8      	b.n	80081f6 <UART_SetConfig+0x5a6>
 80080a4:	2380      	movs	r3, #128	; 0x80
 80080a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080aa:	e0a4      	b.n	80081f6 <UART_SetConfig+0x5a6>
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a8f      	ldr	r2, [pc, #572]	; (80082f0 <UART_SetConfig+0x6a0>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d130      	bne.n	8008118 <UART_SetConfig+0x4c8>
 80080b6:	4b8d      	ldr	r3, [pc, #564]	; (80082ec <UART_SetConfig+0x69c>)
 80080b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ba:	f003 0307 	and.w	r3, r3, #7
 80080be:	2b05      	cmp	r3, #5
 80080c0:	d826      	bhi.n	8008110 <UART_SetConfig+0x4c0>
 80080c2:	a201      	add	r2, pc, #4	; (adr r2, 80080c8 <UART_SetConfig+0x478>)
 80080c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c8:	080080e1 	.word	0x080080e1
 80080cc:	080080e9 	.word	0x080080e9
 80080d0:	080080f1 	.word	0x080080f1
 80080d4:	080080f9 	.word	0x080080f9
 80080d8:	08008101 	.word	0x08008101
 80080dc:	08008109 	.word	0x08008109
 80080e0:	2300      	movs	r3, #0
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e6:	e086      	b.n	80081f6 <UART_SetConfig+0x5a6>
 80080e8:	2304      	movs	r3, #4
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ee:	e082      	b.n	80081f6 <UART_SetConfig+0x5a6>
 80080f0:	2308      	movs	r3, #8
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f6:	e07e      	b.n	80081f6 <UART_SetConfig+0x5a6>
 80080f8:	2310      	movs	r3, #16
 80080fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080fe:	e07a      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8008100:	2320      	movs	r3, #32
 8008102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008106:	e076      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8008108:	2340      	movs	r3, #64	; 0x40
 800810a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800810e:	e072      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8008110:	2380      	movs	r3, #128	; 0x80
 8008112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008116:	e06e      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a75      	ldr	r2, [pc, #468]	; (80082f4 <UART_SetConfig+0x6a4>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d130      	bne.n	8008184 <UART_SetConfig+0x534>
 8008122:	4b72      	ldr	r3, [pc, #456]	; (80082ec <UART_SetConfig+0x69c>)
 8008124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008126:	f003 0307 	and.w	r3, r3, #7
 800812a:	2b05      	cmp	r3, #5
 800812c:	d826      	bhi.n	800817c <UART_SetConfig+0x52c>
 800812e:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <UART_SetConfig+0x4e4>)
 8008130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008134:	0800814d 	.word	0x0800814d
 8008138:	08008155 	.word	0x08008155
 800813c:	0800815d 	.word	0x0800815d
 8008140:	08008165 	.word	0x08008165
 8008144:	0800816d 	.word	0x0800816d
 8008148:	08008175 	.word	0x08008175
 800814c:	2300      	movs	r3, #0
 800814e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008152:	e050      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8008154:	2304      	movs	r3, #4
 8008156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800815a:	e04c      	b.n	80081f6 <UART_SetConfig+0x5a6>
 800815c:	2308      	movs	r3, #8
 800815e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008162:	e048      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8008164:	2310      	movs	r3, #16
 8008166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800816a:	e044      	b.n	80081f6 <UART_SetConfig+0x5a6>
 800816c:	2320      	movs	r3, #32
 800816e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008172:	e040      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8008174:	2340      	movs	r3, #64	; 0x40
 8008176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800817a:	e03c      	b.n	80081f6 <UART_SetConfig+0x5a6>
 800817c:	2380      	movs	r3, #128	; 0x80
 800817e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008182:	e038      	b.n	80081f6 <UART_SetConfig+0x5a6>
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a5b      	ldr	r2, [pc, #364]	; (80082f8 <UART_SetConfig+0x6a8>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d130      	bne.n	80081f0 <UART_SetConfig+0x5a0>
 800818e:	4b57      	ldr	r3, [pc, #348]	; (80082ec <UART_SetConfig+0x69c>)
 8008190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008192:	f003 0307 	and.w	r3, r3, #7
 8008196:	2b05      	cmp	r3, #5
 8008198:	d826      	bhi.n	80081e8 <UART_SetConfig+0x598>
 800819a:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <UART_SetConfig+0x550>)
 800819c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a0:	080081b9 	.word	0x080081b9
 80081a4:	080081c1 	.word	0x080081c1
 80081a8:	080081c9 	.word	0x080081c9
 80081ac:	080081d1 	.word	0x080081d1
 80081b0:	080081d9 	.word	0x080081d9
 80081b4:	080081e1 	.word	0x080081e1
 80081b8:	2302      	movs	r3, #2
 80081ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081be:	e01a      	b.n	80081f6 <UART_SetConfig+0x5a6>
 80081c0:	2304      	movs	r3, #4
 80081c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081c6:	e016      	b.n	80081f6 <UART_SetConfig+0x5a6>
 80081c8:	2308      	movs	r3, #8
 80081ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ce:	e012      	b.n	80081f6 <UART_SetConfig+0x5a6>
 80081d0:	2310      	movs	r3, #16
 80081d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081d6:	e00e      	b.n	80081f6 <UART_SetConfig+0x5a6>
 80081d8:	2320      	movs	r3, #32
 80081da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081de:	e00a      	b.n	80081f6 <UART_SetConfig+0x5a6>
 80081e0:	2340      	movs	r3, #64	; 0x40
 80081e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081e6:	e006      	b.n	80081f6 <UART_SetConfig+0x5a6>
 80081e8:	2380      	movs	r3, #128	; 0x80
 80081ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ee:	e002      	b.n	80081f6 <UART_SetConfig+0x5a6>
 80081f0:	2380      	movs	r3, #128	; 0x80
 80081f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a3f      	ldr	r2, [pc, #252]	; (80082f8 <UART_SetConfig+0x6a8>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	f040 80f8 	bne.w	80083f2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008202:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008206:	2b20      	cmp	r3, #32
 8008208:	dc46      	bgt.n	8008298 <UART_SetConfig+0x648>
 800820a:	2b02      	cmp	r3, #2
 800820c:	f2c0 8082 	blt.w	8008314 <UART_SetConfig+0x6c4>
 8008210:	3b02      	subs	r3, #2
 8008212:	2b1e      	cmp	r3, #30
 8008214:	d87e      	bhi.n	8008314 <UART_SetConfig+0x6c4>
 8008216:	a201      	add	r2, pc, #4	; (adr r2, 800821c <UART_SetConfig+0x5cc>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	0800829f 	.word	0x0800829f
 8008220:	08008315 	.word	0x08008315
 8008224:	080082a7 	.word	0x080082a7
 8008228:	08008315 	.word	0x08008315
 800822c:	08008315 	.word	0x08008315
 8008230:	08008315 	.word	0x08008315
 8008234:	080082b7 	.word	0x080082b7
 8008238:	08008315 	.word	0x08008315
 800823c:	08008315 	.word	0x08008315
 8008240:	08008315 	.word	0x08008315
 8008244:	08008315 	.word	0x08008315
 8008248:	08008315 	.word	0x08008315
 800824c:	08008315 	.word	0x08008315
 8008250:	08008315 	.word	0x08008315
 8008254:	080082c7 	.word	0x080082c7
 8008258:	08008315 	.word	0x08008315
 800825c:	08008315 	.word	0x08008315
 8008260:	08008315 	.word	0x08008315
 8008264:	08008315 	.word	0x08008315
 8008268:	08008315 	.word	0x08008315
 800826c:	08008315 	.word	0x08008315
 8008270:	08008315 	.word	0x08008315
 8008274:	08008315 	.word	0x08008315
 8008278:	08008315 	.word	0x08008315
 800827c:	08008315 	.word	0x08008315
 8008280:	08008315 	.word	0x08008315
 8008284:	08008315 	.word	0x08008315
 8008288:	08008315 	.word	0x08008315
 800828c:	08008315 	.word	0x08008315
 8008290:	08008315 	.word	0x08008315
 8008294:	08008307 	.word	0x08008307
 8008298:	2b40      	cmp	r3, #64	; 0x40
 800829a:	d037      	beq.n	800830c <UART_SetConfig+0x6bc>
 800829c:	e03a      	b.n	8008314 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800829e:	f7fe fb6d 	bl	800697c <HAL_RCCEx_GetD3PCLK1Freq>
 80082a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80082a4:	e03c      	b.n	8008320 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fe fb7c 	bl	80069a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80082b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082b4:	e034      	b.n	8008320 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082b6:	f107 0318 	add.w	r3, r7, #24
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fe fcc8 	bl	8006c50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082c4:	e02c      	b.n	8008320 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082c6:	4b09      	ldr	r3, [pc, #36]	; (80082ec <UART_SetConfig+0x69c>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0320 	and.w	r3, r3, #32
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d016      	beq.n	8008300 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80082d2:	4b06      	ldr	r3, [pc, #24]	; (80082ec <UART_SetConfig+0x69c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	08db      	lsrs	r3, r3, #3
 80082d8:	f003 0303 	and.w	r3, r3, #3
 80082dc:	4a07      	ldr	r2, [pc, #28]	; (80082fc <UART_SetConfig+0x6ac>)
 80082de:	fa22 f303 	lsr.w	r3, r2, r3
 80082e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082e4:	e01c      	b.n	8008320 <UART_SetConfig+0x6d0>
 80082e6:	bf00      	nop
 80082e8:	40011400 	.word	0x40011400
 80082ec:	58024400 	.word	0x58024400
 80082f0:	40007800 	.word	0x40007800
 80082f4:	40007c00 	.word	0x40007c00
 80082f8:	58000c00 	.word	0x58000c00
 80082fc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008300:	4b9d      	ldr	r3, [pc, #628]	; (8008578 <UART_SetConfig+0x928>)
 8008302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008304:	e00c      	b.n	8008320 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008306:	4b9d      	ldr	r3, [pc, #628]	; (800857c <UART_SetConfig+0x92c>)
 8008308:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800830a:	e009      	b.n	8008320 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800830c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008310:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008312:	e005      	b.n	8008320 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800831e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008322:	2b00      	cmp	r3, #0
 8008324:	f000 81de 	beq.w	80086e4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832c:	4a94      	ldr	r2, [pc, #592]	; (8008580 <UART_SetConfig+0x930>)
 800832e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008332:	461a      	mov	r2, r3
 8008334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008336:	fbb3 f3f2 	udiv	r3, r3, r2
 800833a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	4613      	mov	r3, r2
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	4413      	add	r3, r2
 8008346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008348:	429a      	cmp	r2, r3
 800834a:	d305      	bcc.n	8008358 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008354:	429a      	cmp	r2, r3
 8008356:	d903      	bls.n	8008360 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800835e:	e1c1      	b.n	80086e4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008362:	2200      	movs	r2, #0
 8008364:	60bb      	str	r3, [r7, #8]
 8008366:	60fa      	str	r2, [r7, #12]
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	4a84      	ldr	r2, [pc, #528]	; (8008580 <UART_SetConfig+0x930>)
 800836e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008372:	b29b      	uxth	r3, r3
 8008374:	2200      	movs	r2, #0
 8008376:	603b      	str	r3, [r7, #0]
 8008378:	607a      	str	r2, [r7, #4]
 800837a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800837e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008382:	f7f7 ffa9 	bl	80002d8 <__aeabi_uldivmod>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4610      	mov	r0, r2
 800838c:	4619      	mov	r1, r3
 800838e:	f04f 0200 	mov.w	r2, #0
 8008392:	f04f 0300 	mov.w	r3, #0
 8008396:	020b      	lsls	r3, r1, #8
 8008398:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800839c:	0202      	lsls	r2, r0, #8
 800839e:	6979      	ldr	r1, [r7, #20]
 80083a0:	6849      	ldr	r1, [r1, #4]
 80083a2:	0849      	lsrs	r1, r1, #1
 80083a4:	2000      	movs	r0, #0
 80083a6:	460c      	mov	r4, r1
 80083a8:	4605      	mov	r5, r0
 80083aa:	eb12 0804 	adds.w	r8, r2, r4
 80083ae:	eb43 0905 	adc.w	r9, r3, r5
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	469a      	mov	sl, r3
 80083ba:	4693      	mov	fp, r2
 80083bc:	4652      	mov	r2, sl
 80083be:	465b      	mov	r3, fp
 80083c0:	4640      	mov	r0, r8
 80083c2:	4649      	mov	r1, r9
 80083c4:	f7f7 ff88 	bl	80002d8 <__aeabi_uldivmod>
 80083c8:	4602      	mov	r2, r0
 80083ca:	460b      	mov	r3, r1
 80083cc:	4613      	mov	r3, r2
 80083ce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083d6:	d308      	bcc.n	80083ea <UART_SetConfig+0x79a>
 80083d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083de:	d204      	bcs.n	80083ea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083e6:	60da      	str	r2, [r3, #12]
 80083e8:	e17c      	b.n	80086e4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80083f0:	e178      	b.n	80086e4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	69db      	ldr	r3, [r3, #28]
 80083f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083fa:	f040 80c5 	bne.w	8008588 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80083fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008402:	2b20      	cmp	r3, #32
 8008404:	dc48      	bgt.n	8008498 <UART_SetConfig+0x848>
 8008406:	2b00      	cmp	r3, #0
 8008408:	db7b      	blt.n	8008502 <UART_SetConfig+0x8b2>
 800840a:	2b20      	cmp	r3, #32
 800840c:	d879      	bhi.n	8008502 <UART_SetConfig+0x8b2>
 800840e:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <UART_SetConfig+0x7c4>)
 8008410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008414:	0800849f 	.word	0x0800849f
 8008418:	080084a7 	.word	0x080084a7
 800841c:	08008503 	.word	0x08008503
 8008420:	08008503 	.word	0x08008503
 8008424:	080084af 	.word	0x080084af
 8008428:	08008503 	.word	0x08008503
 800842c:	08008503 	.word	0x08008503
 8008430:	08008503 	.word	0x08008503
 8008434:	080084bf 	.word	0x080084bf
 8008438:	08008503 	.word	0x08008503
 800843c:	08008503 	.word	0x08008503
 8008440:	08008503 	.word	0x08008503
 8008444:	08008503 	.word	0x08008503
 8008448:	08008503 	.word	0x08008503
 800844c:	08008503 	.word	0x08008503
 8008450:	08008503 	.word	0x08008503
 8008454:	080084cf 	.word	0x080084cf
 8008458:	08008503 	.word	0x08008503
 800845c:	08008503 	.word	0x08008503
 8008460:	08008503 	.word	0x08008503
 8008464:	08008503 	.word	0x08008503
 8008468:	08008503 	.word	0x08008503
 800846c:	08008503 	.word	0x08008503
 8008470:	08008503 	.word	0x08008503
 8008474:	08008503 	.word	0x08008503
 8008478:	08008503 	.word	0x08008503
 800847c:	08008503 	.word	0x08008503
 8008480:	08008503 	.word	0x08008503
 8008484:	08008503 	.word	0x08008503
 8008488:	08008503 	.word	0x08008503
 800848c:	08008503 	.word	0x08008503
 8008490:	08008503 	.word	0x08008503
 8008494:	080084f5 	.word	0x080084f5
 8008498:	2b40      	cmp	r3, #64	; 0x40
 800849a:	d02e      	beq.n	80084fa <UART_SetConfig+0x8aa>
 800849c:	e031      	b.n	8008502 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800849e:	f7fd f837 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
 80084a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084a4:	e033      	b.n	800850e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084a6:	f7fd f849 	bl	800553c <HAL_RCC_GetPCLK2Freq>
 80084aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084ac:	e02f      	b.n	800850e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe fa78 	bl	80069a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80084b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084bc:	e027      	b.n	800850e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084be:	f107 0318 	add.w	r3, r7, #24
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fe fbc4 	bl	8006c50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084cc:	e01f      	b.n	800850e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084ce:	4b2d      	ldr	r3, [pc, #180]	; (8008584 <UART_SetConfig+0x934>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d009      	beq.n	80084ee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80084da:	4b2a      	ldr	r3, [pc, #168]	; (8008584 <UART_SetConfig+0x934>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	08db      	lsrs	r3, r3, #3
 80084e0:	f003 0303 	and.w	r3, r3, #3
 80084e4:	4a24      	ldr	r2, [pc, #144]	; (8008578 <UART_SetConfig+0x928>)
 80084e6:	fa22 f303 	lsr.w	r3, r2, r3
 80084ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80084ec:	e00f      	b.n	800850e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80084ee:	4b22      	ldr	r3, [pc, #136]	; (8008578 <UART_SetConfig+0x928>)
 80084f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084f2:	e00c      	b.n	800850e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80084f4:	4b21      	ldr	r3, [pc, #132]	; (800857c <UART_SetConfig+0x92c>)
 80084f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084f8:	e009      	b.n	800850e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008500:	e005      	b.n	800850e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008502:	2300      	movs	r3, #0
 8008504:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800850c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800850e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008510:	2b00      	cmp	r3, #0
 8008512:	f000 80e7 	beq.w	80086e4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	4a19      	ldr	r2, [pc, #100]	; (8008580 <UART_SetConfig+0x930>)
 800851c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008520:	461a      	mov	r2, r3
 8008522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008524:	fbb3 f3f2 	udiv	r3, r3, r2
 8008528:	005a      	lsls	r2, r3, #1
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	085b      	lsrs	r3, r3, #1
 8008530:	441a      	add	r2, r3
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	fbb2 f3f3 	udiv	r3, r2, r3
 800853a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800853c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853e:	2b0f      	cmp	r3, #15
 8008540:	d916      	bls.n	8008570 <UART_SetConfig+0x920>
 8008542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008548:	d212      	bcs.n	8008570 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800854a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854c:	b29b      	uxth	r3, r3
 800854e:	f023 030f 	bic.w	r3, r3, #15
 8008552:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008556:	085b      	lsrs	r3, r3, #1
 8008558:	b29b      	uxth	r3, r3
 800855a:	f003 0307 	and.w	r3, r3, #7
 800855e:	b29a      	uxth	r2, r3
 8008560:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008562:	4313      	orrs	r3, r2
 8008564:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800856c:	60da      	str	r2, [r3, #12]
 800856e:	e0b9      	b.n	80086e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008576:	e0b5      	b.n	80086e4 <UART_SetConfig+0xa94>
 8008578:	03d09000 	.word	0x03d09000
 800857c:	003d0900 	.word	0x003d0900
 8008580:	08009258 	.word	0x08009258
 8008584:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008588:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800858c:	2b20      	cmp	r3, #32
 800858e:	dc49      	bgt.n	8008624 <UART_SetConfig+0x9d4>
 8008590:	2b00      	cmp	r3, #0
 8008592:	db7c      	blt.n	800868e <UART_SetConfig+0xa3e>
 8008594:	2b20      	cmp	r3, #32
 8008596:	d87a      	bhi.n	800868e <UART_SetConfig+0xa3e>
 8008598:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <UART_SetConfig+0x950>)
 800859a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859e:	bf00      	nop
 80085a0:	0800862b 	.word	0x0800862b
 80085a4:	08008633 	.word	0x08008633
 80085a8:	0800868f 	.word	0x0800868f
 80085ac:	0800868f 	.word	0x0800868f
 80085b0:	0800863b 	.word	0x0800863b
 80085b4:	0800868f 	.word	0x0800868f
 80085b8:	0800868f 	.word	0x0800868f
 80085bc:	0800868f 	.word	0x0800868f
 80085c0:	0800864b 	.word	0x0800864b
 80085c4:	0800868f 	.word	0x0800868f
 80085c8:	0800868f 	.word	0x0800868f
 80085cc:	0800868f 	.word	0x0800868f
 80085d0:	0800868f 	.word	0x0800868f
 80085d4:	0800868f 	.word	0x0800868f
 80085d8:	0800868f 	.word	0x0800868f
 80085dc:	0800868f 	.word	0x0800868f
 80085e0:	0800865b 	.word	0x0800865b
 80085e4:	0800868f 	.word	0x0800868f
 80085e8:	0800868f 	.word	0x0800868f
 80085ec:	0800868f 	.word	0x0800868f
 80085f0:	0800868f 	.word	0x0800868f
 80085f4:	0800868f 	.word	0x0800868f
 80085f8:	0800868f 	.word	0x0800868f
 80085fc:	0800868f 	.word	0x0800868f
 8008600:	0800868f 	.word	0x0800868f
 8008604:	0800868f 	.word	0x0800868f
 8008608:	0800868f 	.word	0x0800868f
 800860c:	0800868f 	.word	0x0800868f
 8008610:	0800868f 	.word	0x0800868f
 8008614:	0800868f 	.word	0x0800868f
 8008618:	0800868f 	.word	0x0800868f
 800861c:	0800868f 	.word	0x0800868f
 8008620:	08008681 	.word	0x08008681
 8008624:	2b40      	cmp	r3, #64	; 0x40
 8008626:	d02e      	beq.n	8008686 <UART_SetConfig+0xa36>
 8008628:	e031      	b.n	800868e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800862a:	f7fc ff71 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
 800862e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008630:	e033      	b.n	800869a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008632:	f7fc ff83 	bl	800553c <HAL_RCC_GetPCLK2Freq>
 8008636:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008638:	e02f      	b.n	800869a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800863a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800863e:	4618      	mov	r0, r3
 8008640:	f7fe f9b2 	bl	80069a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008648:	e027      	b.n	800869a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800864a:	f107 0318 	add.w	r3, r7, #24
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe fafe 	bl	8006c50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008658:	e01f      	b.n	800869a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800865a:	4b2d      	ldr	r3, [pc, #180]	; (8008710 <UART_SetConfig+0xac0>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0320 	and.w	r3, r3, #32
 8008662:	2b00      	cmp	r3, #0
 8008664:	d009      	beq.n	800867a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008666:	4b2a      	ldr	r3, [pc, #168]	; (8008710 <UART_SetConfig+0xac0>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	08db      	lsrs	r3, r3, #3
 800866c:	f003 0303 	and.w	r3, r3, #3
 8008670:	4a28      	ldr	r2, [pc, #160]	; (8008714 <UART_SetConfig+0xac4>)
 8008672:	fa22 f303 	lsr.w	r3, r2, r3
 8008676:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008678:	e00f      	b.n	800869a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800867a:	4b26      	ldr	r3, [pc, #152]	; (8008714 <UART_SetConfig+0xac4>)
 800867c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800867e:	e00c      	b.n	800869a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008680:	4b25      	ldr	r3, [pc, #148]	; (8008718 <UART_SetConfig+0xac8>)
 8008682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008684:	e009      	b.n	800869a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800868a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800868c:	e005      	b.n	800869a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800868e:	2300      	movs	r3, #0
 8008690:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008698:	bf00      	nop
    }

    if (pclk != 0U)
 800869a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800869c:	2b00      	cmp	r3, #0
 800869e:	d021      	beq.n	80086e4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	4a1d      	ldr	r2, [pc, #116]	; (800871c <UART_SetConfig+0xacc>)
 80086a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086aa:	461a      	mov	r2, r3
 80086ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	085b      	lsrs	r3, r3, #1
 80086b8:	441a      	add	r2, r3
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c6:	2b0f      	cmp	r3, #15
 80086c8:	d909      	bls.n	80086de <UART_SetConfig+0xa8e>
 80086ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086d0:	d205      	bcs.n	80086de <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	60da      	str	r2, [r3, #12]
 80086dc:	e002      	b.n	80086e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2200      	movs	r2, #0
 80086f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2200      	movs	r2, #0
 80086fe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008700:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008704:	4618      	mov	r0, r3
 8008706:	3748      	adds	r7, #72	; 0x48
 8008708:	46bd      	mov	sp, r7
 800870a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800870e:	bf00      	nop
 8008710:	58024400 	.word	0x58024400
 8008714:	03d09000 	.word	0x03d09000
 8008718:	003d0900 	.word	0x003d0900
 800871c:	08009258 	.word	0x08009258

08008720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872c:	f003 0301 	and.w	r3, r3, #1
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00a      	beq.n	800874a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	430a      	orrs	r2, r1
 8008748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874e:	f003 0302 	and.w	r3, r3, #2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00a      	beq.n	800876c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	430a      	orrs	r2, r1
 800876a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008770:	f003 0304 	and.w	r3, r3, #4
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00a      	beq.n	800878e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	430a      	orrs	r2, r1
 800878c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008792:	f003 0308 	and.w	r3, r3, #8
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	430a      	orrs	r2, r1
 80087ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b4:	f003 0310 	and.w	r3, r3, #16
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00a      	beq.n	80087d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	430a      	orrs	r2, r1
 80087d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d6:	f003 0320 	and.w	r3, r3, #32
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00a      	beq.n	80087f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d01a      	beq.n	8008836 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	430a      	orrs	r2, r1
 8008814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800881a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800881e:	d10a      	bne.n	8008836 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	430a      	orrs	r2, r1
 8008834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00a      	beq.n	8008858 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	430a      	orrs	r2, r1
 8008856:	605a      	str	r2, [r3, #4]
  }
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b098      	sub	sp, #96	; 0x60
 8008868:	af02      	add	r7, sp, #8
 800886a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008874:	f7f8 fc7a 	bl	800116c <HAL_GetTick>
 8008878:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0308 	and.w	r3, r3, #8
 8008884:	2b08      	cmp	r3, #8
 8008886:	d12f      	bne.n	80088e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008890:	2200      	movs	r2, #0
 8008892:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f88e 	bl	80089b8 <UART_WaitOnFlagUntilTimeout>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d022      	beq.n	80088e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088aa:	e853 3f00 	ldrex	r3, [r3]
 80088ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088b6:	653b      	str	r3, [r7, #80]	; 0x50
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	461a      	mov	r2, r3
 80088be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088c0:	647b      	str	r3, [r7, #68]	; 0x44
 80088c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088c8:	e841 2300 	strex	r3, r2, [r1]
 80088cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1e6      	bne.n	80088a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2220      	movs	r2, #32
 80088d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e063      	b.n	80089b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0304 	and.w	r3, r3, #4
 80088f2:	2b04      	cmp	r3, #4
 80088f4:	d149      	bne.n	800898a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088fe:	2200      	movs	r2, #0
 8008900:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f857 	bl	80089b8 <UART_WaitOnFlagUntilTimeout>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d03c      	beq.n	800898a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	e853 3f00 	ldrex	r3, [r3]
 800891c:	623b      	str	r3, [r7, #32]
   return(result);
 800891e:	6a3b      	ldr	r3, [r7, #32]
 8008920:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008924:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800892e:	633b      	str	r3, [r7, #48]	; 0x30
 8008930:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008936:	e841 2300 	strex	r3, r2, [r1]
 800893a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800893c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1e6      	bne.n	8008910 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	3308      	adds	r3, #8
 8008948:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	e853 3f00 	ldrex	r3, [r3]
 8008950:	60fb      	str	r3, [r7, #12]
   return(result);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f023 0301 	bic.w	r3, r3, #1
 8008958:	64bb      	str	r3, [r7, #72]	; 0x48
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3308      	adds	r3, #8
 8008960:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008962:	61fa      	str	r2, [r7, #28]
 8008964:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008966:	69b9      	ldr	r1, [r7, #24]
 8008968:	69fa      	ldr	r2, [r7, #28]
 800896a:	e841 2300 	strex	r3, r2, [r1]
 800896e:	617b      	str	r3, [r7, #20]
   return(result);
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e5      	bne.n	8008942 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2220      	movs	r2, #32
 800897a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e012      	b.n	80089b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2220      	movs	r2, #32
 800898e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2220      	movs	r2, #32
 8008996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3758      	adds	r7, #88	; 0x58
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	603b      	str	r3, [r7, #0]
 80089c4:	4613      	mov	r3, r2
 80089c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089c8:	e049      	b.n	8008a5e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d0:	d045      	beq.n	8008a5e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089d2:	f7f8 fbcb 	bl	800116c <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d302      	bcc.n	80089e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d101      	bne.n	80089ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e048      	b.n	8008a7e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0304 	and.w	r3, r3, #4
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d031      	beq.n	8008a5e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	69db      	ldr	r3, [r3, #28]
 8008a00:	f003 0308 	and.w	r3, r3, #8
 8008a04:	2b08      	cmp	r3, #8
 8008a06:	d110      	bne.n	8008a2a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2208      	movs	r2, #8
 8008a0e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f000 f921 	bl	8008c58 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2208      	movs	r2, #8
 8008a1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e029      	b.n	8008a7e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	69db      	ldr	r3, [r3, #28]
 8008a30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a38:	d111      	bne.n	8008a5e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f000 f907 	bl	8008c58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e00f      	b.n	8008a7e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	69da      	ldr	r2, [r3, #28]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	4013      	ands	r3, r2
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	bf0c      	ite	eq
 8008a6e:	2301      	moveq	r3, #1
 8008a70:	2300      	movne	r3, #0
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	461a      	mov	r2, r3
 8008a76:	79fb      	ldrb	r3, [r7, #7]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d0a6      	beq.n	80089ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
	...

08008a88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b096      	sub	sp, #88	; 0x58
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	4613      	mov	r3, r2
 8008a94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	88fa      	ldrh	r2, [r7, #6]
 8008aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2222      	movs	r2, #34	; 0x22
 8008ab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d02d      	beq.n	8008b1a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ac4:	4a40      	ldr	r2, [pc, #256]	; (8008bc8 <UART_Start_Receive_DMA+0x140>)
 8008ac6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ace:	4a3f      	ldr	r2, [pc, #252]	; (8008bcc <UART_Start_Receive_DMA+0x144>)
 8008ad0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ad8:	4a3d      	ldr	r2, [pc, #244]	; (8008bd0 <UART_Start_Receive_DMA+0x148>)
 8008ada:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	3324      	adds	r3, #36	; 0x24
 8008af2:	4619      	mov	r1, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008af8:	461a      	mov	r2, r3
 8008afa:	88fb      	ldrh	r3, [r7, #6]
 8008afc:	f7f9 f836 	bl	8001b6c <HAL_DMA_Start_IT>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d009      	beq.n	8008b1a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2210      	movs	r2, #16
 8008b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2220      	movs	r2, #32
 8008b12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e051      	b.n	8008bbe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d018      	beq.n	8008b54 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b2a:	e853 3f00 	ldrex	r3, [r3]
 8008b2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b36:	657b      	str	r3, [r7, #84]	; 0x54
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b42:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b48:	e841 2300 	strex	r3, r2, [r1]
 8008b4c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1e6      	bne.n	8008b22 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3308      	adds	r3, #8
 8008b5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5e:	e853 3f00 	ldrex	r3, [r3]
 8008b62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b66:	f043 0301 	orr.w	r3, r3, #1
 8008b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	3308      	adds	r3, #8
 8008b72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b74:	637a      	str	r2, [r7, #52]	; 0x34
 8008b76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b7c:	e841 2300 	strex	r3, r2, [r1]
 8008b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1e5      	bne.n	8008b54 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	3308      	adds	r3, #8
 8008b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	e853 3f00 	ldrex	r3, [r3]
 8008b96:	613b      	str	r3, [r7, #16]
   return(result);
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	3308      	adds	r3, #8
 8008ba6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ba8:	623a      	str	r2, [r7, #32]
 8008baa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bac:	69f9      	ldr	r1, [r7, #28]
 8008bae:	6a3a      	ldr	r2, [r7, #32]
 8008bb0:	e841 2300 	strex	r3, r2, [r1]
 8008bb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1e5      	bne.n	8008b88 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3758      	adds	r7, #88	; 0x58
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	08008d25 	.word	0x08008d25
 8008bcc:	08008e4d 	.word	0x08008e4d
 8008bd0:	08008e8b 	.word	0x08008e8b

08008bd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b08f      	sub	sp, #60	; 0x3c
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	e853 3f00 	ldrex	r3, [r3]
 8008be8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bfc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c02:	e841 2300 	strex	r3, r2, [r1]
 8008c06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1e6      	bne.n	8008bdc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3308      	adds	r3, #8
 8008c14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	e853 3f00 	ldrex	r3, [r3]
 8008c1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008c24:	633b      	str	r3, [r7, #48]	; 0x30
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	3308      	adds	r3, #8
 8008c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c2e:	61ba      	str	r2, [r7, #24]
 8008c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c32:	6979      	ldr	r1, [r7, #20]
 8008c34:	69ba      	ldr	r2, [r7, #24]
 8008c36:	e841 2300 	strex	r3, r2, [r1]
 8008c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1e5      	bne.n	8008c0e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2220      	movs	r2, #32
 8008c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008c4a:	bf00      	nop
 8008c4c:	373c      	adds	r7, #60	; 0x3c
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
	...

08008c58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b095      	sub	sp, #84	; 0x54
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c68:	e853 3f00 	ldrex	r3, [r3]
 8008c6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8008c80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c86:	e841 2300 	strex	r3, r2, [r1]
 8008c8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1e6      	bne.n	8008c60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3308      	adds	r3, #8
 8008c98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ca2:	69fa      	ldr	r2, [r7, #28]
 8008ca4:	4b1e      	ldr	r3, [pc, #120]	; (8008d20 <UART_EndRxTransfer+0xc8>)
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3308      	adds	r3, #8
 8008cb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cba:	e841 2300 	strex	r3, r2, [r1]
 8008cbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1e5      	bne.n	8008c92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d118      	bne.n	8008d00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	e853 3f00 	ldrex	r3, [r3]
 8008cda:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	f023 0310 	bic.w	r3, r3, #16
 8008ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	461a      	mov	r2, r3
 8008cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cec:	61bb      	str	r3, [r7, #24]
 8008cee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf0:	6979      	ldr	r1, [r7, #20]
 8008cf2:	69ba      	ldr	r2, [r7, #24]
 8008cf4:	e841 2300 	strex	r3, r2, [r1]
 8008cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1e6      	bne.n	8008cce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2220      	movs	r2, #32
 8008d04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008d14:	bf00      	nop
 8008d16:	3754      	adds	r7, #84	; 0x54
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	effffffe 	.word	0xeffffffe

08008d24 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b09c      	sub	sp, #112	; 0x70
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d30:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	69db      	ldr	r3, [r3, #28]
 8008d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d3a:	d071      	beq.n	8008e20 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d58:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d62:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d64:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d6a:	e841 2300 	strex	r3, r2, [r1]
 8008d6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1e6      	bne.n	8008d44 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	3308      	adds	r3, #8
 8008d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d80:	e853 3f00 	ldrex	r3, [r3]
 8008d84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d88:	f023 0301 	bic.w	r3, r3, #1
 8008d8c:	667b      	str	r3, [r7, #100]	; 0x64
 8008d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3308      	adds	r3, #8
 8008d94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008d96:	647a      	str	r2, [r7, #68]	; 0x44
 8008d98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d9e:	e841 2300 	strex	r3, r2, [r1]
 8008da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1e5      	bne.n	8008d76 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3308      	adds	r3, #8
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	e853 3f00 	ldrex	r3, [r3]
 8008db8:	623b      	str	r3, [r7, #32]
   return(result);
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dc0:	663b      	str	r3, [r7, #96]	; 0x60
 8008dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3308      	adds	r3, #8
 8008dc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008dca:	633a      	str	r2, [r7, #48]	; 0x30
 8008dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dd2:	e841 2300 	strex	r3, r2, [r1]
 8008dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1e5      	bne.n	8008daa <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008de0:	2220      	movs	r2, #32
 8008de2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d118      	bne.n	8008e20 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	e853 3f00 	ldrex	r3, [r3]
 8008dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f023 0310 	bic.w	r3, r3, #16
 8008e02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e0c:	61fb      	str	r3, [r7, #28]
 8008e0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e10:	69b9      	ldr	r1, [r7, #24]
 8008e12:	69fa      	ldr	r2, [r7, #28]
 8008e14:	e841 2300 	strex	r3, r2, [r1]
 8008e18:	617b      	str	r3, [r7, #20]
   return(result);
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1e6      	bne.n	8008dee <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e22:	2200      	movs	r2, #0
 8008e24:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d107      	bne.n	8008e3e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e34:	4619      	mov	r1, r3
 8008e36:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008e38:	f7fe fefe 	bl	8007c38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e3c:	e002      	b.n	8008e44 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008e3e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008e40:	f7f7 fe90 	bl	8000b64 <HAL_UART_RxCpltCallback>
}
 8008e44:	bf00      	nop
 8008e46:	3770      	adds	r7, #112	; 0x70
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e58:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d109      	bne.n	8008e7c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e6e:	085b      	lsrs	r3, r3, #1
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	4619      	mov	r1, r3
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f7fe fedf 	bl	8007c38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e7a:	e002      	b.n	8008e82 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f7fe fec7 	bl	8007c10 <HAL_UART_RxHalfCpltCallback>
}
 8008e82:	bf00      	nop
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b086      	sub	sp, #24
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e96:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e9e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ea6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eb2:	2b80      	cmp	r3, #128	; 0x80
 8008eb4:	d109      	bne.n	8008eca <UART_DMAError+0x40>
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	2b21      	cmp	r3, #33	; 0x21
 8008eba:	d106      	bne.n	8008eca <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008ec4:	6978      	ldr	r0, [r7, #20]
 8008ec6:	f7ff fe85 	bl	8008bd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed4:	2b40      	cmp	r3, #64	; 0x40
 8008ed6:	d109      	bne.n	8008eec <UART_DMAError+0x62>
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2b22      	cmp	r3, #34	; 0x22
 8008edc:	d106      	bne.n	8008eec <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008ee6:	6978      	ldr	r0, [r7, #20]
 8008ee8:	f7ff feb6 	bl	8008c58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ef2:	f043 0210 	orr.w	r2, r3, #16
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008efc:	6978      	ldr	r0, [r7, #20]
 8008efe:	f7fe fe91 	bl	8007c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f02:	bf00      	nop
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b084      	sub	sp, #16
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f7fe fe7b 	bl	8007c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f2e:	bf00      	nop
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b088      	sub	sp, #32
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	e853 3f00 	ldrex	r3, [r3]
 8008f4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f52:	61fb      	str	r3, [r7, #28]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	61bb      	str	r3, [r7, #24]
 8008f5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f60:	6979      	ldr	r1, [r7, #20]
 8008f62:	69ba      	ldr	r2, [r7, #24]
 8008f64:	e841 2300 	strex	r3, r2, [r1]
 8008f68:	613b      	str	r3, [r7, #16]
   return(result);
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e6      	bne.n	8008f3e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2220      	movs	r2, #32
 8008f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7fe fe3c 	bl	8007bfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f84:	bf00      	nop
 8008f86:	3720      	adds	r7, #32
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f94:	bf00      	nop
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d101      	bne.n	8008fde <HAL_UARTEx_DisableFifoMode+0x16>
 8008fda:	2302      	movs	r3, #2
 8008fdc:	e027      	b.n	800902e <HAL_UARTEx_DisableFifoMode+0x66>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2224      	movs	r2, #36	; 0x24
 8008fea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f022 0201 	bic.w	r2, r2, #1
 8009004:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800900c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2220      	movs	r2, #32
 8009020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr

0800903a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800904a:	2b01      	cmp	r3, #1
 800904c:	d101      	bne.n	8009052 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800904e:	2302      	movs	r3, #2
 8009050:	e02d      	b.n	80090ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2224      	movs	r2, #36	; 0x24
 800905e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f022 0201 	bic.w	r2, r2, #1
 8009078:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	430a      	orrs	r2, r1
 800908c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f850 	bl	8009134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2220      	movs	r2, #32
 80090a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b084      	sub	sp, #16
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d101      	bne.n	80090ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090ca:	2302      	movs	r3, #2
 80090cc:	e02d      	b.n	800912a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2224      	movs	r2, #36	; 0x24
 80090da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f022 0201 	bic.w	r2, r2, #1
 80090f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	430a      	orrs	r2, r1
 8009108:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f812 	bl	8009134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2220      	movs	r2, #32
 800911c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
	...

08009134 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009140:	2b00      	cmp	r3, #0
 8009142:	d108      	bne.n	8009156 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009154:	e031      	b.n	80091ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009156:	2310      	movs	r3, #16
 8009158:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800915a:	2310      	movs	r3, #16
 800915c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	0e5b      	lsrs	r3, r3, #25
 8009166:	b2db      	uxtb	r3, r3
 8009168:	f003 0307 	and.w	r3, r3, #7
 800916c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	0f5b      	lsrs	r3, r3, #29
 8009176:	b2db      	uxtb	r3, r3
 8009178:	f003 0307 	and.w	r3, r3, #7
 800917c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800917e:	7bbb      	ldrb	r3, [r7, #14]
 8009180:	7b3a      	ldrb	r2, [r7, #12]
 8009182:	4911      	ldr	r1, [pc, #68]	; (80091c8 <UARTEx_SetNbDataToProcess+0x94>)
 8009184:	5c8a      	ldrb	r2, [r1, r2]
 8009186:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800918a:	7b3a      	ldrb	r2, [r7, #12]
 800918c:	490f      	ldr	r1, [pc, #60]	; (80091cc <UARTEx_SetNbDataToProcess+0x98>)
 800918e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009190:	fb93 f3f2 	sdiv	r3, r3, r2
 8009194:	b29a      	uxth	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800919c:	7bfb      	ldrb	r3, [r7, #15]
 800919e:	7b7a      	ldrb	r2, [r7, #13]
 80091a0:	4909      	ldr	r1, [pc, #36]	; (80091c8 <UARTEx_SetNbDataToProcess+0x94>)
 80091a2:	5c8a      	ldrb	r2, [r1, r2]
 80091a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80091a8:	7b7a      	ldrb	r2, [r7, #13]
 80091aa:	4908      	ldr	r1, [pc, #32]	; (80091cc <UARTEx_SetNbDataToProcess+0x98>)
 80091ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80091ba:	bf00      	nop
 80091bc:	3714      	adds	r7, #20
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	08009270 	.word	0x08009270
 80091cc:	08009278 	.word	0x08009278

080091d0 <memset>:
 80091d0:	4402      	add	r2, r0
 80091d2:	4603      	mov	r3, r0
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d100      	bne.n	80091da <memset+0xa>
 80091d8:	4770      	bx	lr
 80091da:	f803 1b01 	strb.w	r1, [r3], #1
 80091de:	e7f9      	b.n	80091d4 <memset+0x4>

080091e0 <__libc_init_array>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	4d0d      	ldr	r5, [pc, #52]	; (8009218 <__libc_init_array+0x38>)
 80091e4:	4c0d      	ldr	r4, [pc, #52]	; (800921c <__libc_init_array+0x3c>)
 80091e6:	1b64      	subs	r4, r4, r5
 80091e8:	10a4      	asrs	r4, r4, #2
 80091ea:	2600      	movs	r6, #0
 80091ec:	42a6      	cmp	r6, r4
 80091ee:	d109      	bne.n	8009204 <__libc_init_array+0x24>
 80091f0:	4d0b      	ldr	r5, [pc, #44]	; (8009220 <__libc_init_array+0x40>)
 80091f2:	4c0c      	ldr	r4, [pc, #48]	; (8009224 <__libc_init_array+0x44>)
 80091f4:	f000 f818 	bl	8009228 <_init>
 80091f8:	1b64      	subs	r4, r4, r5
 80091fa:	10a4      	asrs	r4, r4, #2
 80091fc:	2600      	movs	r6, #0
 80091fe:	42a6      	cmp	r6, r4
 8009200:	d105      	bne.n	800920e <__libc_init_array+0x2e>
 8009202:	bd70      	pop	{r4, r5, r6, pc}
 8009204:	f855 3b04 	ldr.w	r3, [r5], #4
 8009208:	4798      	blx	r3
 800920a:	3601      	adds	r6, #1
 800920c:	e7ee      	b.n	80091ec <__libc_init_array+0xc>
 800920e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009212:	4798      	blx	r3
 8009214:	3601      	adds	r6, #1
 8009216:	e7f2      	b.n	80091fe <__libc_init_array+0x1e>
 8009218:	08009288 	.word	0x08009288
 800921c:	08009288 	.word	0x08009288
 8009220:	08009288 	.word	0x08009288
 8009224:	0800928c 	.word	0x0800928c

08009228 <_init>:
 8009228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922a:	bf00      	nop
 800922c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800922e:	bc08      	pop	{r3}
 8009230:	469e      	mov	lr, r3
 8009232:	4770      	bx	lr

08009234 <_fini>:
 8009234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009236:	bf00      	nop
 8009238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800923a:	bc08      	pop	{r3}
 800923c:	469e      	mov	lr, r3
 800923e:	4770      	bx	lr
