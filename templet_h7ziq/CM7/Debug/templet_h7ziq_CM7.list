
templet_h7ziq_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006604  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800689c  0800689c  0001689c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068d4  080068d4  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080068d4  080068d4  000168d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068dc  080068dc  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068dc  080068dc  000168dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068e0  080068e0  000168e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  24000000  080068e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  24000024  08006908  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000d8  08006908  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ba4  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002437  00000000  00000000  00031c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  00034070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000090e  00000000  00000000  00034c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038ece  00000000  00000000  0003554e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012781  00000000  00000000  0006e41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001773e6  00000000  00000000  00080b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fc8  00000000  00000000  001f7f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001faf4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000024 	.word	0x24000024
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006884 	.word	0x08006884

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000028 	.word	0x24000028
 80002d4:	08006884 	.word	0x08006884

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <MX_GPIO_Init+0xa0>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071c:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <MX_GPIO_Init+0xa0>)
 800071e:	f043 0310 	orr.w	r3, r3, #16
 8000722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_GPIO_Init+0xa0>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072c:	f003 0310 	and.w	r3, r3, #16
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_GPIO_Init+0xa0>)
 8000736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <MX_GPIO_Init+0xa0>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_GPIO_Init+0xa0>)
 8000746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_GPIO_Init+0xa0>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <MX_GPIO_Init+0xa0>)
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_GPIO_Init+0xa0>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000768:	f003 0308 	and.w	r3, r3, #8
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ld1_Pin|ld2_Pin|ld3_Pin|ld4_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	213c      	movs	r1, #60	; 0x3c
 8000774:	480b      	ldr	r0, [pc, #44]	; (80007a4 <MX_GPIO_Init+0xa4>)
 8000776:	f001 fbef 	bl	8001f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ld1_Pin|ld2_Pin|ld3_Pin|ld4_Pin;
 800077a:	233c      	movs	r3, #60	; 0x3c
 800077c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4619      	mov	r1, r3
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_GPIO_Init+0xa4>)
 8000792:	f001 fa31 	bl	8001bf8 <HAL_GPIO_Init>

}
 8000796:	bf00      	nop
 8000798:	3720      	adds	r7, #32
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	58024400 	.word	0x58024400
 80007a4:	58021000 	.word	0x58021000

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007b4:	bf00      	nop
 80007b6:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <main+0xcc>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d004      	beq.n	80007cc <main+0x24>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	1e5a      	subs	r2, r3, #1
 80007c6:	607a      	str	r2, [r7, #4]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	dcf4      	bgt.n	80007b6 <main+0xe>
  if ( timeout < 0 )
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	da01      	bge.n	80007d6 <main+0x2e>
  {
  Error_Handler();
 80007d2:	f000 f8fd 	bl	80009d0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d6:	f000 fa5d 	bl	8000c94 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007da:	f000 f8cd 	bl	8000978 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f851 	bl	8000884 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e2:	4b24      	ldr	r3, [pc, #144]	; (8000874 <main+0xcc>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e8:	4a22      	ldr	r2, [pc, #136]	; (8000874 <main+0xcc>)
 80007ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <main+0xcc>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000800:	2000      	movs	r0, #0
 8000802:	f001 fbdd 	bl	8001fc0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000806:	2100      	movs	r1, #0
 8000808:	2000      	movs	r0, #0
 800080a:	f001 fbf3 	bl	8001ff4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800080e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000812:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000814:	bf00      	nop
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <main+0xcc>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d104      	bne.n	800082c <main+0x84>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	dcf4      	bgt.n	8000816 <main+0x6e>
if ( timeout < 0 )
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	da01      	bge.n	8000836 <main+0x8e>
{
Error_Handler();
 8000832:	f000 f8cd 	bl	80009d0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f7ff ff63 	bl	8000700 <MX_GPIO_Init>
  MX_UART5_Init();
 800083a:	f000 f91d 	bl	8000a78 <MX_UART5_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(ld1_GPIO_Port, ld1_Pin);
 800083e:	2104      	movs	r1, #4
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <main+0xd0>)
 8000842:	f001 fba2 	bl	8001f8a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(ld2_GPIO_Port, ld2_Pin);
 8000846:	2108      	movs	r1, #8
 8000848:	480b      	ldr	r0, [pc, #44]	; (8000878 <main+0xd0>)
 800084a:	f001 fb9e 	bl	8001f8a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(ld3_GPIO_Port, ld3_Pin);
 800084e:	2110      	movs	r1, #16
 8000850:	4809      	ldr	r0, [pc, #36]	; (8000878 <main+0xd0>)
 8000852:	f001 fb9a 	bl	8001f8a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(ld4_GPIO_Port, ld4_Pin);
 8000856:	2120      	movs	r1, #32
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <main+0xd0>)
 800085a:	f001 fb96 	bl	8001f8a <HAL_GPIO_TogglePin>

	  HAL_UART_Transmit(&huart5, (uint8_t *) buff , sizeof(buff), 100);
 800085e:	2364      	movs	r3, #100	; 0x64
 8000860:	2213      	movs	r2, #19
 8000862:	4906      	ldr	r1, [pc, #24]	; (800087c <main+0xd4>)
 8000864:	4806      	ldr	r0, [pc, #24]	; (8000880 <main+0xd8>)
 8000866:	f004 fa95 	bl	8004d94 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 800086a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086e:	f000 faa3 	bl	8000db8 <HAL_Delay>
	  HAL_GPIO_TogglePin(ld1_GPIO_Port, ld1_Pin);
 8000872:	e7e4      	b.n	800083e <main+0x96>
 8000874:	58024400 	.word	0x58024400
 8000878:	58021000 	.word	0x58021000
 800087c:	24000008 	.word	0x24000008
 8000880:	24000040 	.word	0x24000040

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b09c      	sub	sp, #112	; 0x70
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	224c      	movs	r2, #76	; 0x4c
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f005 ffca 	bl	800682c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2220      	movs	r2, #32
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f005 ffc4 	bl	800682c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008a4:	2004      	movs	r0, #4
 80008a6:	f001 fbb9 	bl	800201c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b30      	ldr	r3, [pc, #192]	; (8000970 <SystemClock_Config+0xec>)
 80008b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b2:	4a2f      	ldr	r2, [pc, #188]	; (8000970 <SystemClock_Config+0xec>)
 80008b4:	f023 0301 	bic.w	r3, r3, #1
 80008b8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008ba:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <SystemClock_Config+0xec>)
 80008bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <SystemClock_Config+0xf0>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a2a      	ldr	r2, [pc, #168]	; (8000974 <SystemClock_Config+0xf0>)
 80008ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <SystemClock_Config+0xf0>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008dc:	bf00      	nop
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <SystemClock_Config+0xf0>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ea:	d1f8      	bne.n	80008de <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ec:	2301      	movs	r3, #1
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f6:	2302      	movs	r3, #2
 80008f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fa:	2302      	movs	r3, #2
 80008fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008fe:	2302      	movs	r3, #2
 8000900:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 56;
 8000902:	2338      	movs	r3, #56	; 0x38
 8000904:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000906:	2302      	movs	r3, #2
 8000908:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800090a:	2302      	movs	r3, #2
 800090c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800090e:	2302      	movs	r3, #2
 8000910:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000912:	230c      	movs	r3, #12
 8000914:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000916:	2300      	movs	r3, #0
 8000918:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fbd4 	bl	80020d0 <HAL_RCC_OscConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800092e:	f000 f84f 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	233f      	movs	r3, #63	; 0x3f
 8000934:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	2303      	movs	r3, #3
 8000938:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800093e:	2308      	movs	r3, #8
 8000940:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000942:	2340      	movs	r3, #64	; 0x40
 8000944:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000946:	2340      	movs	r3, #64	; 0x40
 8000948:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800094a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000950:	2340      	movs	r3, #64	; 0x40
 8000952:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2102      	movs	r1, #2
 8000958:	4618      	mov	r0, r3
 800095a:	f002 f813 	bl	8002984 <HAL_RCC_ClockConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000964:	f000 f834 	bl	80009d0 <Error_Handler>
  }
}
 8000968:	bf00      	nop
 800096a:	3770      	adds	r7, #112	; 0x70
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	58000400 	.word	0x58000400
 8000974:	58024800 	.word	0x58024800

08000978 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800097e:	463b      	mov	r3, r7
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800098a:	f000 fb55 	bl	8001038 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800098e:	2301      	movs	r3, #1
 8000990:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000992:	2300      	movs	r3, #0
 8000994:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800099a:	231f      	movs	r3, #31
 800099c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800099e:	2387      	movs	r3, #135	; 0x87
 80009a0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80009a6:	2300      	movs	r3, #0
 80009a8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009aa:	2301      	movs	r3, #1
 80009ac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009ae:	2301      	movs	r3, #1
 80009b0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009ba:	463b      	mov	r3, r7
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 fb73 	bl	80010a8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009c2:	2004      	movs	r0, #4
 80009c4:	f000 fb50 	bl	8001068 <HAL_MPU_Enable>

}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>
	...

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <HAL_MspInit+0x30>)
 80009e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009e8:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x30>)
 80009ea:	f043 0302 	orr.w	r3, r3, #2
 80009ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x30>)
 80009f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	58024400 	.word	0x58024400

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <NMI_Handler+0x4>

08000a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <MemManage_Handler+0x4>

08000a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5c:	f000 f98c 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <UART5_IRQHandler+0x10>)
 8000a6a:	f004 fa21 	bl	8004eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	24000040 	.word	0x24000040

08000a78 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <MX_UART5_Init+0x90>)
 8000a7e:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <MX_UART5_Init+0x94>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <MX_UART5_Init+0x90>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <MX_UART5_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <MX_UART5_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <MX_UART5_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_UART5_Init+0x90>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <MX_UART5_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_UART5_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aae:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_UART5_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_UART5_Init+0x90>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_UART5_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000ac0:	4811      	ldr	r0, [pc, #68]	; (8000b08 <MX_UART5_Init+0x90>)
 8000ac2:	f004 f917 	bl	8004cf4 <HAL_UART_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000acc:	f7ff ff80 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	480d      	ldr	r0, [pc, #52]	; (8000b08 <MX_UART5_Init+0x90>)
 8000ad4:	f005 fde0 	bl	8006698 <HAL_UARTEx_SetTxFifoThreshold>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000ade:	f7ff ff77 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4808      	ldr	r0, [pc, #32]	; (8000b08 <MX_UART5_Init+0x90>)
 8000ae6:	f005 fe15 	bl	8006714 <HAL_UARTEx_SetRxFifoThreshold>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000af0:	f7ff ff6e 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_UART5_Init+0x90>)
 8000af6:	f005 fd96 	bl	8006626 <HAL_UARTEx_DisableFifoMode>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000b00:	f7ff ff66 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	24000040 	.word	0x24000040
 8000b0c:	40005000 	.word	0x40005000

08000b10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b0bc      	sub	sp, #240	; 0xf0
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b28:	f107 0318 	add.w	r3, r7, #24
 8000b2c:	22c0      	movs	r2, #192	; 0xc0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f005 fe7b 	bl	800682c <memset>
  if(uartHandle->Instance==UART5)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a3d      	ldr	r2, [pc, #244]	; (8000c30 <HAL_UART_MspInit+0x120>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d172      	bne.n	8000c26 <HAL_UART_MspInit+0x116>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000b40:	f04f 0202 	mov.w	r2, #2
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b52:	f107 0318 	add.w	r3, r7, #24
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 faa0 	bl	800309c <HAL_RCCEx_PeriphCLKConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b62:	f7ff ff35 	bl	80009d0 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000b66:	4b33      	ldr	r3, [pc, #204]	; (8000c34 <HAL_UART_MspInit+0x124>)
 8000b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b6c:	4a31      	ldr	r2, [pc, #196]	; (8000c34 <HAL_UART_MspInit+0x124>)
 8000b6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b76:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <HAL_UART_MspInit+0x124>)
 8000b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b84:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <HAL_UART_MspInit+0x124>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	4a2a      	ldr	r2, [pc, #168]	; (8000c34 <HAL_UART_MspInit+0x124>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b94:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <HAL_UART_MspInit+0x124>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba2:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <HAL_UART_MspInit+0x124>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	4a22      	ldr	r2, [pc, #136]	; (8000c34 <HAL_UART_MspInit+0x124>)
 8000baa:	f043 0308 	orr.w	r3, r3, #8
 8000bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <HAL_UART_MspInit+0x124>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb8:	f003 0308 	and.w	r3, r3, #8
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000bda:	2308      	movs	r3, #8
 8000bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000be4:	4619      	mov	r1, r3
 8000be6:	4814      	ldr	r0, [pc, #80]	; (8000c38 <HAL_UART_MspInit+0x128>)
 8000be8:	f001 f806 	bl	8001bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bec:	2304      	movs	r3, #4
 8000bee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c04:	2308      	movs	r3, #8
 8000c06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480a      	ldr	r0, [pc, #40]	; (8000c3c <HAL_UART_MspInit+0x12c>)
 8000c12:	f000 fff1 	bl	8001bf8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2035      	movs	r0, #53	; 0x35
 8000c1c:	f000 f9d7 	bl	8000fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000c20:	2035      	movs	r0, #53	; 0x35
 8000c22:	f000 f9ee 	bl	8001002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8000c26:	bf00      	nop
 8000c28:	37f0      	adds	r7, #240	; 0xf0
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40005000 	.word	0x40005000
 8000c34:	58024400 	.word	0x58024400
 8000c38:	58020800 	.word	0x58020800
 8000c3c:	58020c00 	.word	0x58020c00

08000c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c44:	f7ff fcc6 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4a:	490d      	ldr	r1, [pc, #52]	; (8000c80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c60:	4c0a      	ldr	r4, [pc, #40]	; (8000c8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f005 fde5 	bl	800683c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c72:	f7ff fd99 	bl	80007a8 <main>
  bx  lr
 8000c76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c78:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c80:	24000024 	.word	0x24000024
  ldr r2, =_sidata
 8000c84:	080068e4 	.word	0x080068e4
  ldr r2, =_sbss
 8000c88:	24000024 	.word	0x24000024
  ldr r4, =_ebss
 8000c8c:	240000d8 	.word	0x240000d8

08000c90 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC3_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9a:	2003      	movs	r0, #3
 8000c9c:	f000 f98c 	bl	8000fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ca0:	f002 f826 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_Init+0x68>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	0a1b      	lsrs	r3, r3, #8
 8000cac:	f003 030f 	and.w	r3, r3, #15
 8000cb0:	4913      	ldr	r1, [pc, #76]	; (8000d00 <HAL_Init+0x6c>)
 8000cb2:	5ccb      	ldrb	r3, [r1, r3]
 8000cb4:	f003 031f 	and.w	r3, r3, #31
 8000cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cbc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <HAL_Init+0x68>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_Init+0x6c>)
 8000cc8:	5cd3      	ldrb	r3, [r2, r3]
 8000cca:	f003 031f 	and.w	r3, r3, #31
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd4:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <HAL_Init+0x70>)
 8000cd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <HAL_Init+0x74>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cde:	200f      	movs	r0, #15
 8000ce0:	f000 f814 	bl	8000d0c <HAL_InitTick>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e002      	b.n	8000cf4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cee:	f7ff fe75 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	58024400 	.word	0x58024400
 8000d00:	0800689c 	.word	0x0800689c
 8000d04:	24000004 	.word	0x24000004
 8000d08:	24000000 	.word	0x24000000

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_InitTick+0x60>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e021      	b.n	8000d64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_InitTick+0x64>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_InitTick+0x60>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f971 	bl	800101e <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f000 f93b 	bl	8000fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_InitTick+0x68>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	24000020 	.word	0x24000020
 8000d70:	24000000 	.word	0x24000000
 8000d74:	2400001c 	.word	0x2400001c

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	24000020 	.word	0x24000020
 8000d9c:	240000d4 	.word	0x240000d4

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	240000d4 	.word	0x240000d4

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff ffee 	bl	8000da0 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d005      	beq.n	8000dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_Delay+0x44>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dde:	bf00      	nop
 8000de0:	f7ff ffde 	bl	8000da0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d8f7      	bhi.n	8000de0 <HAL_Delay+0x28>
  {
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	24000020 	.word	0x24000020

08000e00 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <HAL_GetREVID+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	0c1b      	lsrs	r3, r3, #16
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	5c001000 	.word	0x5c001000

08000e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <__NVIC_SetPriorityGrouping+0x40>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	4313      	orrs	r3, r2
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <__NVIC_SetPriorityGrouping+0x40>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00
 8000e5c:	05fa0000 	.word	0x05fa0000

08000e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <__NVIC_GetPriorityGrouping+0x18>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	f003 0307 	and.w	r3, r3, #7
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	db0b      	blt.n	8000ea6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	f003 021f 	and.w	r2, r3, #31
 8000e94:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <__NVIC_EnableIRQ+0x38>)
 8000e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e9a:	095b      	lsrs	r3, r3, #5
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f84:	d301      	bcc.n	8000f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00f      	b.n	8000faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <SysTick_Config+0x40>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f92:	210f      	movs	r1, #15
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f7ff ff8e 	bl	8000eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <SysTick_Config+0x40>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <SysTick_Config+0x40>)
 8000fa4:	2207      	movs	r2, #7
 8000fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	e000e010 	.word	0xe000e010

08000fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff29 	bl	8000e18 <__NVIC_SetPriorityGrouping>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fdc:	f7ff ff40 	bl	8000e60 <__NVIC_GetPriorityGrouping>
 8000fe0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff90 	bl	8000f0c <NVIC_EncodePriority>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff5f 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff33 	bl	8000e7c <__NVIC_EnableIRQ>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffa4 	bl	8000f74 <SysTick_Config>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800103c:	f3bf 8f5f 	dmb	sy
}
 8001040:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <HAL_MPU_Disable+0x28>)
 8001044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001046:	4a06      	ldr	r2, [pc, #24]	; (8001060 <HAL_MPU_Disable+0x28>)
 8001048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800104c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_MPU_Disable+0x2c>)
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00
 8001064:	e000ed90 	.word	0xe000ed90

08001068 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001070:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <HAL_MPU_Enable+0x38>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_MPU_Enable+0x3c>)
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	4a09      	ldr	r2, [pc, #36]	; (80010a4 <HAL_MPU_Enable+0x3c>)
 8001080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001084:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001086:	f3bf 8f4f 	dsb	sy
}
 800108a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800108c:	f3bf 8f6f 	isb	sy
}
 8001090:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed90 	.word	0xe000ed90
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	785a      	ldrb	r2, [r3, #1]
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <HAL_MPU_ConfigRegion+0x84>)
 80010b6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d029      	beq.n	8001114 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80010c0:	4a1a      	ldr	r2, [pc, #104]	; (800112c <HAL_MPU_ConfigRegion+0x84>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7b1b      	ldrb	r3, [r3, #12]
 80010cc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7adb      	ldrb	r3, [r3, #11]
 80010d2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7a9b      	ldrb	r3, [r3, #10]
 80010da:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7b5b      	ldrb	r3, [r3, #13]
 80010e2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7b9b      	ldrb	r3, [r3, #14]
 80010ea:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80010ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7bdb      	ldrb	r3, [r3, #15]
 80010f2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80010f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7a5b      	ldrb	r3, [r3, #9]
 80010fa:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80010fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7a1b      	ldrb	r3, [r3, #8]
 8001102:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001104:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	7812      	ldrb	r2, [r2, #0]
 800110a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800110c:	4a07      	ldr	r2, [pc, #28]	; (800112c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800110e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001110:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001112:	e005      	b.n	8001120 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_MPU_ConfigRegion+0x84>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <HAL_MPU_ConfigRegion+0x84>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed90 	.word	0xe000ed90

08001130 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff fe32 	bl	8000da0 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e2dc      	b.n	8001702 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d008      	beq.n	8001166 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e2cd      	b.n	8001702 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a76      	ldr	r2, [pc, #472]	; (8001344 <HAL_DMA_Abort+0x214>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d04a      	beq.n	8001206 <HAL_DMA_Abort+0xd6>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a74      	ldr	r2, [pc, #464]	; (8001348 <HAL_DMA_Abort+0x218>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d045      	beq.n	8001206 <HAL_DMA_Abort+0xd6>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a73      	ldr	r2, [pc, #460]	; (800134c <HAL_DMA_Abort+0x21c>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d040      	beq.n	8001206 <HAL_DMA_Abort+0xd6>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a71      	ldr	r2, [pc, #452]	; (8001350 <HAL_DMA_Abort+0x220>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d03b      	beq.n	8001206 <HAL_DMA_Abort+0xd6>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a70      	ldr	r2, [pc, #448]	; (8001354 <HAL_DMA_Abort+0x224>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d036      	beq.n	8001206 <HAL_DMA_Abort+0xd6>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a6e      	ldr	r2, [pc, #440]	; (8001358 <HAL_DMA_Abort+0x228>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d031      	beq.n	8001206 <HAL_DMA_Abort+0xd6>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a6d      	ldr	r2, [pc, #436]	; (800135c <HAL_DMA_Abort+0x22c>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d02c      	beq.n	8001206 <HAL_DMA_Abort+0xd6>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a6b      	ldr	r2, [pc, #428]	; (8001360 <HAL_DMA_Abort+0x230>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d027      	beq.n	8001206 <HAL_DMA_Abort+0xd6>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a6a      	ldr	r2, [pc, #424]	; (8001364 <HAL_DMA_Abort+0x234>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d022      	beq.n	8001206 <HAL_DMA_Abort+0xd6>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a68      	ldr	r2, [pc, #416]	; (8001368 <HAL_DMA_Abort+0x238>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d01d      	beq.n	8001206 <HAL_DMA_Abort+0xd6>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a67      	ldr	r2, [pc, #412]	; (800136c <HAL_DMA_Abort+0x23c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d018      	beq.n	8001206 <HAL_DMA_Abort+0xd6>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a65      	ldr	r2, [pc, #404]	; (8001370 <HAL_DMA_Abort+0x240>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d013      	beq.n	8001206 <HAL_DMA_Abort+0xd6>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a64      	ldr	r2, [pc, #400]	; (8001374 <HAL_DMA_Abort+0x244>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d00e      	beq.n	8001206 <HAL_DMA_Abort+0xd6>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a62      	ldr	r2, [pc, #392]	; (8001378 <HAL_DMA_Abort+0x248>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d009      	beq.n	8001206 <HAL_DMA_Abort+0xd6>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a61      	ldr	r2, [pc, #388]	; (800137c <HAL_DMA_Abort+0x24c>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d004      	beq.n	8001206 <HAL_DMA_Abort+0xd6>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a5f      	ldr	r2, [pc, #380]	; (8001380 <HAL_DMA_Abort+0x250>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <HAL_DMA_Abort+0xda>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <HAL_DMA_Abort+0xdc>
 800120a:	2300      	movs	r3, #0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d013      	beq.n	8001238 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 021e 	bic.w	r2, r2, #30
 800121e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	695a      	ldr	r2, [r3, #20]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800122e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	e00a      	b.n	800124e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 020e 	bic.w	r2, r2, #14
 8001246:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a3c      	ldr	r2, [pc, #240]	; (8001344 <HAL_DMA_Abort+0x214>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d072      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a3a      	ldr	r2, [pc, #232]	; (8001348 <HAL_DMA_Abort+0x218>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d06d      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a39      	ldr	r2, [pc, #228]	; (800134c <HAL_DMA_Abort+0x21c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d068      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a37      	ldr	r2, [pc, #220]	; (8001350 <HAL_DMA_Abort+0x220>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d063      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a36      	ldr	r2, [pc, #216]	; (8001354 <HAL_DMA_Abort+0x224>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d05e      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a34      	ldr	r2, [pc, #208]	; (8001358 <HAL_DMA_Abort+0x228>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d059      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a33      	ldr	r2, [pc, #204]	; (800135c <HAL_DMA_Abort+0x22c>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d054      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a31      	ldr	r2, [pc, #196]	; (8001360 <HAL_DMA_Abort+0x230>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d04f      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a30      	ldr	r2, [pc, #192]	; (8001364 <HAL_DMA_Abort+0x234>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d04a      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a2e      	ldr	r2, [pc, #184]	; (8001368 <HAL_DMA_Abort+0x238>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d045      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a2d      	ldr	r2, [pc, #180]	; (800136c <HAL_DMA_Abort+0x23c>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d040      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a2b      	ldr	r2, [pc, #172]	; (8001370 <HAL_DMA_Abort+0x240>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d03b      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a2a      	ldr	r2, [pc, #168]	; (8001374 <HAL_DMA_Abort+0x244>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d036      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a28      	ldr	r2, [pc, #160]	; (8001378 <HAL_DMA_Abort+0x248>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d031      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a27      	ldr	r2, [pc, #156]	; (800137c <HAL_DMA_Abort+0x24c>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d02c      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a25      	ldr	r2, [pc, #148]	; (8001380 <HAL_DMA_Abort+0x250>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d027      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a24      	ldr	r2, [pc, #144]	; (8001384 <HAL_DMA_Abort+0x254>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d022      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a22      	ldr	r2, [pc, #136]	; (8001388 <HAL_DMA_Abort+0x258>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d01d      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a21      	ldr	r2, [pc, #132]	; (800138c <HAL_DMA_Abort+0x25c>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d018      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a1f      	ldr	r2, [pc, #124]	; (8001390 <HAL_DMA_Abort+0x260>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <HAL_DMA_Abort+0x264>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d00e      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <HAL_DMA_Abort+0x268>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d009      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a1b      	ldr	r2, [pc, #108]	; (800139c <HAL_DMA_Abort+0x26c>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d004      	beq.n	800133e <HAL_DMA_Abort+0x20e>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a19      	ldr	r2, [pc, #100]	; (80013a0 <HAL_DMA_Abort+0x270>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d132      	bne.n	80013a4 <HAL_DMA_Abort+0x274>
 800133e:	2301      	movs	r3, #1
 8001340:	e031      	b.n	80013a6 <HAL_DMA_Abort+0x276>
 8001342:	bf00      	nop
 8001344:	40020010 	.word	0x40020010
 8001348:	40020028 	.word	0x40020028
 800134c:	40020040 	.word	0x40020040
 8001350:	40020058 	.word	0x40020058
 8001354:	40020070 	.word	0x40020070
 8001358:	40020088 	.word	0x40020088
 800135c:	400200a0 	.word	0x400200a0
 8001360:	400200b8 	.word	0x400200b8
 8001364:	40020410 	.word	0x40020410
 8001368:	40020428 	.word	0x40020428
 800136c:	40020440 	.word	0x40020440
 8001370:	40020458 	.word	0x40020458
 8001374:	40020470 	.word	0x40020470
 8001378:	40020488 	.word	0x40020488
 800137c:	400204a0 	.word	0x400204a0
 8001380:	400204b8 	.word	0x400204b8
 8001384:	58025408 	.word	0x58025408
 8001388:	5802541c 	.word	0x5802541c
 800138c:	58025430 	.word	0x58025430
 8001390:	58025444 	.word	0x58025444
 8001394:	58025458 	.word	0x58025458
 8001398:	5802546c 	.word	0x5802546c
 800139c:	58025480 	.word	0x58025480
 80013a0:	58025494 	.word	0x58025494
 80013a4:	2300      	movs	r3, #0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d007      	beq.n	80013ba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a6d      	ldr	r2, [pc, #436]	; (8001574 <HAL_DMA_Abort+0x444>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d04a      	beq.n	800145a <HAL_DMA_Abort+0x32a>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a6b      	ldr	r2, [pc, #428]	; (8001578 <HAL_DMA_Abort+0x448>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d045      	beq.n	800145a <HAL_DMA_Abort+0x32a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a6a      	ldr	r2, [pc, #424]	; (800157c <HAL_DMA_Abort+0x44c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d040      	beq.n	800145a <HAL_DMA_Abort+0x32a>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a68      	ldr	r2, [pc, #416]	; (8001580 <HAL_DMA_Abort+0x450>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d03b      	beq.n	800145a <HAL_DMA_Abort+0x32a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a67      	ldr	r2, [pc, #412]	; (8001584 <HAL_DMA_Abort+0x454>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d036      	beq.n	800145a <HAL_DMA_Abort+0x32a>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a65      	ldr	r2, [pc, #404]	; (8001588 <HAL_DMA_Abort+0x458>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d031      	beq.n	800145a <HAL_DMA_Abort+0x32a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a64      	ldr	r2, [pc, #400]	; (800158c <HAL_DMA_Abort+0x45c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d02c      	beq.n	800145a <HAL_DMA_Abort+0x32a>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a62      	ldr	r2, [pc, #392]	; (8001590 <HAL_DMA_Abort+0x460>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d027      	beq.n	800145a <HAL_DMA_Abort+0x32a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a61      	ldr	r2, [pc, #388]	; (8001594 <HAL_DMA_Abort+0x464>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d022      	beq.n	800145a <HAL_DMA_Abort+0x32a>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a5f      	ldr	r2, [pc, #380]	; (8001598 <HAL_DMA_Abort+0x468>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d01d      	beq.n	800145a <HAL_DMA_Abort+0x32a>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a5e      	ldr	r2, [pc, #376]	; (800159c <HAL_DMA_Abort+0x46c>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d018      	beq.n	800145a <HAL_DMA_Abort+0x32a>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a5c      	ldr	r2, [pc, #368]	; (80015a0 <HAL_DMA_Abort+0x470>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d013      	beq.n	800145a <HAL_DMA_Abort+0x32a>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a5b      	ldr	r2, [pc, #364]	; (80015a4 <HAL_DMA_Abort+0x474>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d00e      	beq.n	800145a <HAL_DMA_Abort+0x32a>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a59      	ldr	r2, [pc, #356]	; (80015a8 <HAL_DMA_Abort+0x478>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d009      	beq.n	800145a <HAL_DMA_Abort+0x32a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a58      	ldr	r2, [pc, #352]	; (80015ac <HAL_DMA_Abort+0x47c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d004      	beq.n	800145a <HAL_DMA_Abort+0x32a>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a56      	ldr	r2, [pc, #344]	; (80015b0 <HAL_DMA_Abort+0x480>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d108      	bne.n	800146c <HAL_DMA_Abort+0x33c>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0201 	bic.w	r2, r2, #1
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	e007      	b.n	800147c <HAL_DMA_Abort+0x34c>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800147c:	e013      	b.n	80014a6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800147e:	f7ff fc8f 	bl	8000da0 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b05      	cmp	r3, #5
 800148a:	d90c      	bls.n	80014a6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2220      	movs	r2, #32
 8001490:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2203      	movs	r2, #3
 8001496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e12d      	b.n	8001702 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1e5      	bne.n	800147e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a2f      	ldr	r2, [pc, #188]	; (8001574 <HAL_DMA_Abort+0x444>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d04a      	beq.n	8001552 <HAL_DMA_Abort+0x422>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a2d      	ldr	r2, [pc, #180]	; (8001578 <HAL_DMA_Abort+0x448>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d045      	beq.n	8001552 <HAL_DMA_Abort+0x422>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a2c      	ldr	r2, [pc, #176]	; (800157c <HAL_DMA_Abort+0x44c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d040      	beq.n	8001552 <HAL_DMA_Abort+0x422>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a2a      	ldr	r2, [pc, #168]	; (8001580 <HAL_DMA_Abort+0x450>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d03b      	beq.n	8001552 <HAL_DMA_Abort+0x422>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a29      	ldr	r2, [pc, #164]	; (8001584 <HAL_DMA_Abort+0x454>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d036      	beq.n	8001552 <HAL_DMA_Abort+0x422>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a27      	ldr	r2, [pc, #156]	; (8001588 <HAL_DMA_Abort+0x458>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d031      	beq.n	8001552 <HAL_DMA_Abort+0x422>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a26      	ldr	r2, [pc, #152]	; (800158c <HAL_DMA_Abort+0x45c>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d02c      	beq.n	8001552 <HAL_DMA_Abort+0x422>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a24      	ldr	r2, [pc, #144]	; (8001590 <HAL_DMA_Abort+0x460>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d027      	beq.n	8001552 <HAL_DMA_Abort+0x422>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a23      	ldr	r2, [pc, #140]	; (8001594 <HAL_DMA_Abort+0x464>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d022      	beq.n	8001552 <HAL_DMA_Abort+0x422>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a21      	ldr	r2, [pc, #132]	; (8001598 <HAL_DMA_Abort+0x468>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d01d      	beq.n	8001552 <HAL_DMA_Abort+0x422>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a20      	ldr	r2, [pc, #128]	; (800159c <HAL_DMA_Abort+0x46c>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d018      	beq.n	8001552 <HAL_DMA_Abort+0x422>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a1e      	ldr	r2, [pc, #120]	; (80015a0 <HAL_DMA_Abort+0x470>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d013      	beq.n	8001552 <HAL_DMA_Abort+0x422>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <HAL_DMA_Abort+0x474>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d00e      	beq.n	8001552 <HAL_DMA_Abort+0x422>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <HAL_DMA_Abort+0x478>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d009      	beq.n	8001552 <HAL_DMA_Abort+0x422>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a1a      	ldr	r2, [pc, #104]	; (80015ac <HAL_DMA_Abort+0x47c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d004      	beq.n	8001552 <HAL_DMA_Abort+0x422>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <HAL_DMA_Abort+0x480>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d101      	bne.n	8001556 <HAL_DMA_Abort+0x426>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_DMA_Abort+0x428>
 8001556:	2300      	movs	r3, #0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d02b      	beq.n	80015b4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001566:	f003 031f 	and.w	r3, r3, #31
 800156a:	223f      	movs	r2, #63	; 0x3f
 800156c:	409a      	lsls	r2, r3
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	e02a      	b.n	80015ca <HAL_DMA_Abort+0x49a>
 8001574:	40020010 	.word	0x40020010
 8001578:	40020028 	.word	0x40020028
 800157c:	40020040 	.word	0x40020040
 8001580:	40020058 	.word	0x40020058
 8001584:	40020070 	.word	0x40020070
 8001588:	40020088 	.word	0x40020088
 800158c:	400200a0 	.word	0x400200a0
 8001590:	400200b8 	.word	0x400200b8
 8001594:	40020410 	.word	0x40020410
 8001598:	40020428 	.word	0x40020428
 800159c:	40020440 	.word	0x40020440
 80015a0:	40020458 	.word	0x40020458
 80015a4:	40020470 	.word	0x40020470
 80015a8:	40020488 	.word	0x40020488
 80015ac:	400204a0 	.word	0x400204a0
 80015b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015be:	f003 031f 	and.w	r3, r3, #31
 80015c2:	2201      	movs	r2, #1
 80015c4:	409a      	lsls	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a4f      	ldr	r2, [pc, #316]	; (800170c <HAL_DMA_Abort+0x5dc>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d072      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a4d      	ldr	r2, [pc, #308]	; (8001710 <HAL_DMA_Abort+0x5e0>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d06d      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a4c      	ldr	r2, [pc, #304]	; (8001714 <HAL_DMA_Abort+0x5e4>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d068      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a4a      	ldr	r2, [pc, #296]	; (8001718 <HAL_DMA_Abort+0x5e8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d063      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a49      	ldr	r2, [pc, #292]	; (800171c <HAL_DMA_Abort+0x5ec>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d05e      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a47      	ldr	r2, [pc, #284]	; (8001720 <HAL_DMA_Abort+0x5f0>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d059      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a46      	ldr	r2, [pc, #280]	; (8001724 <HAL_DMA_Abort+0x5f4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d054      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a44      	ldr	r2, [pc, #272]	; (8001728 <HAL_DMA_Abort+0x5f8>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d04f      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a43      	ldr	r2, [pc, #268]	; (800172c <HAL_DMA_Abort+0x5fc>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d04a      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a41      	ldr	r2, [pc, #260]	; (8001730 <HAL_DMA_Abort+0x600>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d045      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a40      	ldr	r2, [pc, #256]	; (8001734 <HAL_DMA_Abort+0x604>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d040      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a3e      	ldr	r2, [pc, #248]	; (8001738 <HAL_DMA_Abort+0x608>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d03b      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a3d      	ldr	r2, [pc, #244]	; (800173c <HAL_DMA_Abort+0x60c>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d036      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a3b      	ldr	r2, [pc, #236]	; (8001740 <HAL_DMA_Abort+0x610>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d031      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a3a      	ldr	r2, [pc, #232]	; (8001744 <HAL_DMA_Abort+0x614>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d02c      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a38      	ldr	r2, [pc, #224]	; (8001748 <HAL_DMA_Abort+0x618>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d027      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a37      	ldr	r2, [pc, #220]	; (800174c <HAL_DMA_Abort+0x61c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a35      	ldr	r2, [pc, #212]	; (8001750 <HAL_DMA_Abort+0x620>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d01d      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a34      	ldr	r2, [pc, #208]	; (8001754 <HAL_DMA_Abort+0x624>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d018      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a32      	ldr	r2, [pc, #200]	; (8001758 <HAL_DMA_Abort+0x628>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a31      	ldr	r2, [pc, #196]	; (800175c <HAL_DMA_Abort+0x62c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d00e      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a2f      	ldr	r2, [pc, #188]	; (8001760 <HAL_DMA_Abort+0x630>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d009      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a2e      	ldr	r2, [pc, #184]	; (8001764 <HAL_DMA_Abort+0x634>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d004      	beq.n	80016ba <HAL_DMA_Abort+0x58a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a2c      	ldr	r2, [pc, #176]	; (8001768 <HAL_DMA_Abort+0x638>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d101      	bne.n	80016be <HAL_DMA_Abort+0x58e>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <HAL_DMA_Abort+0x590>
 80016be:	2300      	movs	r3, #0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d015      	beq.n	80016f0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80016cc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00c      	beq.n	80016f0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016e4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80016ee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40020010 	.word	0x40020010
 8001710:	40020028 	.word	0x40020028
 8001714:	40020040 	.word	0x40020040
 8001718:	40020058 	.word	0x40020058
 800171c:	40020070 	.word	0x40020070
 8001720:	40020088 	.word	0x40020088
 8001724:	400200a0 	.word	0x400200a0
 8001728:	400200b8 	.word	0x400200b8
 800172c:	40020410 	.word	0x40020410
 8001730:	40020428 	.word	0x40020428
 8001734:	40020440 	.word	0x40020440
 8001738:	40020458 	.word	0x40020458
 800173c:	40020470 	.word	0x40020470
 8001740:	40020488 	.word	0x40020488
 8001744:	400204a0 	.word	0x400204a0
 8001748:	400204b8 	.word	0x400204b8
 800174c:	58025408 	.word	0x58025408
 8001750:	5802541c 	.word	0x5802541c
 8001754:	58025430 	.word	0x58025430
 8001758:	58025444 	.word	0x58025444
 800175c:	58025458 	.word	0x58025458
 8001760:	5802546c 	.word	0x5802546c
 8001764:	58025480 	.word	0x58025480
 8001768:	58025494 	.word	0x58025494

0800176c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e237      	b.n	8001bee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d004      	beq.n	8001794 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2280      	movs	r2, #128	; 0x80
 800178e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e22c      	b.n	8001bee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a5c      	ldr	r2, [pc, #368]	; (800190c <HAL_DMA_Abort_IT+0x1a0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d04a      	beq.n	8001834 <HAL_DMA_Abort_IT+0xc8>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a5b      	ldr	r2, [pc, #364]	; (8001910 <HAL_DMA_Abort_IT+0x1a4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d045      	beq.n	8001834 <HAL_DMA_Abort_IT+0xc8>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a59      	ldr	r2, [pc, #356]	; (8001914 <HAL_DMA_Abort_IT+0x1a8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d040      	beq.n	8001834 <HAL_DMA_Abort_IT+0xc8>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a58      	ldr	r2, [pc, #352]	; (8001918 <HAL_DMA_Abort_IT+0x1ac>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d03b      	beq.n	8001834 <HAL_DMA_Abort_IT+0xc8>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a56      	ldr	r2, [pc, #344]	; (800191c <HAL_DMA_Abort_IT+0x1b0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d036      	beq.n	8001834 <HAL_DMA_Abort_IT+0xc8>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a55      	ldr	r2, [pc, #340]	; (8001920 <HAL_DMA_Abort_IT+0x1b4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d031      	beq.n	8001834 <HAL_DMA_Abort_IT+0xc8>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a53      	ldr	r2, [pc, #332]	; (8001924 <HAL_DMA_Abort_IT+0x1b8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d02c      	beq.n	8001834 <HAL_DMA_Abort_IT+0xc8>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a52      	ldr	r2, [pc, #328]	; (8001928 <HAL_DMA_Abort_IT+0x1bc>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d027      	beq.n	8001834 <HAL_DMA_Abort_IT+0xc8>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a50      	ldr	r2, [pc, #320]	; (800192c <HAL_DMA_Abort_IT+0x1c0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d022      	beq.n	8001834 <HAL_DMA_Abort_IT+0xc8>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a4f      	ldr	r2, [pc, #316]	; (8001930 <HAL_DMA_Abort_IT+0x1c4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d01d      	beq.n	8001834 <HAL_DMA_Abort_IT+0xc8>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a4d      	ldr	r2, [pc, #308]	; (8001934 <HAL_DMA_Abort_IT+0x1c8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d018      	beq.n	8001834 <HAL_DMA_Abort_IT+0xc8>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a4c      	ldr	r2, [pc, #304]	; (8001938 <HAL_DMA_Abort_IT+0x1cc>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d013      	beq.n	8001834 <HAL_DMA_Abort_IT+0xc8>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a4a      	ldr	r2, [pc, #296]	; (800193c <HAL_DMA_Abort_IT+0x1d0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d00e      	beq.n	8001834 <HAL_DMA_Abort_IT+0xc8>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a49      	ldr	r2, [pc, #292]	; (8001940 <HAL_DMA_Abort_IT+0x1d4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d009      	beq.n	8001834 <HAL_DMA_Abort_IT+0xc8>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a47      	ldr	r2, [pc, #284]	; (8001944 <HAL_DMA_Abort_IT+0x1d8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d004      	beq.n	8001834 <HAL_DMA_Abort_IT+0xc8>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a46      	ldr	r2, [pc, #280]	; (8001948 <HAL_DMA_Abort_IT+0x1dc>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d101      	bne.n	8001838 <HAL_DMA_Abort_IT+0xcc>
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <HAL_DMA_Abort_IT+0xce>
 8001838:	2300      	movs	r3, #0
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8086 	beq.w	800194c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2204      	movs	r2, #4
 8001844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a2f      	ldr	r2, [pc, #188]	; (800190c <HAL_DMA_Abort_IT+0x1a0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d04a      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x17c>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a2e      	ldr	r2, [pc, #184]	; (8001910 <HAL_DMA_Abort_IT+0x1a4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d045      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x17c>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a2c      	ldr	r2, [pc, #176]	; (8001914 <HAL_DMA_Abort_IT+0x1a8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d040      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x17c>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a2b      	ldr	r2, [pc, #172]	; (8001918 <HAL_DMA_Abort_IT+0x1ac>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d03b      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x17c>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a29      	ldr	r2, [pc, #164]	; (800191c <HAL_DMA_Abort_IT+0x1b0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d036      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x17c>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a28      	ldr	r2, [pc, #160]	; (8001920 <HAL_DMA_Abort_IT+0x1b4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d031      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x17c>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a26      	ldr	r2, [pc, #152]	; (8001924 <HAL_DMA_Abort_IT+0x1b8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d02c      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x17c>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a25      	ldr	r2, [pc, #148]	; (8001928 <HAL_DMA_Abort_IT+0x1bc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d027      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x17c>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a23      	ldr	r2, [pc, #140]	; (800192c <HAL_DMA_Abort_IT+0x1c0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d022      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x17c>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a22      	ldr	r2, [pc, #136]	; (8001930 <HAL_DMA_Abort_IT+0x1c4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d01d      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x17c>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a20      	ldr	r2, [pc, #128]	; (8001934 <HAL_DMA_Abort_IT+0x1c8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d018      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x17c>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a1f      	ldr	r2, [pc, #124]	; (8001938 <HAL_DMA_Abort_IT+0x1cc>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d013      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x17c>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_DMA_Abort_IT+0x1d0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d00e      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x17c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <HAL_DMA_Abort_IT+0x1d4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d009      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x17c>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1a      	ldr	r2, [pc, #104]	; (8001944 <HAL_DMA_Abort_IT+0x1d8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d004      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x17c>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a19      	ldr	r2, [pc, #100]	; (8001948 <HAL_DMA_Abort_IT+0x1dc>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d108      	bne.n	80018fa <HAL_DMA_Abort_IT+0x18e>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0201 	bic.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e178      	b.n	8001bec <HAL_DMA_Abort_IT+0x480>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0201 	bic.w	r2, r2, #1
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e16f      	b.n	8001bec <HAL_DMA_Abort_IT+0x480>
 800190c:	40020010 	.word	0x40020010
 8001910:	40020028 	.word	0x40020028
 8001914:	40020040 	.word	0x40020040
 8001918:	40020058 	.word	0x40020058
 800191c:	40020070 	.word	0x40020070
 8001920:	40020088 	.word	0x40020088
 8001924:	400200a0 	.word	0x400200a0
 8001928:	400200b8 	.word	0x400200b8
 800192c:	40020410 	.word	0x40020410
 8001930:	40020428 	.word	0x40020428
 8001934:	40020440 	.word	0x40020440
 8001938:	40020458 	.word	0x40020458
 800193c:	40020470 	.word	0x40020470
 8001940:	40020488 	.word	0x40020488
 8001944:	400204a0 	.word	0x400204a0
 8001948:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 020e 	bic.w	r2, r2, #14
 800195a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a6c      	ldr	r2, [pc, #432]	; (8001b14 <HAL_DMA_Abort_IT+0x3a8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d04a      	beq.n	80019fc <HAL_DMA_Abort_IT+0x290>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a6b      	ldr	r2, [pc, #428]	; (8001b18 <HAL_DMA_Abort_IT+0x3ac>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d045      	beq.n	80019fc <HAL_DMA_Abort_IT+0x290>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a69      	ldr	r2, [pc, #420]	; (8001b1c <HAL_DMA_Abort_IT+0x3b0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d040      	beq.n	80019fc <HAL_DMA_Abort_IT+0x290>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a68      	ldr	r2, [pc, #416]	; (8001b20 <HAL_DMA_Abort_IT+0x3b4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d03b      	beq.n	80019fc <HAL_DMA_Abort_IT+0x290>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a66      	ldr	r2, [pc, #408]	; (8001b24 <HAL_DMA_Abort_IT+0x3b8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d036      	beq.n	80019fc <HAL_DMA_Abort_IT+0x290>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a65      	ldr	r2, [pc, #404]	; (8001b28 <HAL_DMA_Abort_IT+0x3bc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d031      	beq.n	80019fc <HAL_DMA_Abort_IT+0x290>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a63      	ldr	r2, [pc, #396]	; (8001b2c <HAL_DMA_Abort_IT+0x3c0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d02c      	beq.n	80019fc <HAL_DMA_Abort_IT+0x290>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a62      	ldr	r2, [pc, #392]	; (8001b30 <HAL_DMA_Abort_IT+0x3c4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d027      	beq.n	80019fc <HAL_DMA_Abort_IT+0x290>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a60      	ldr	r2, [pc, #384]	; (8001b34 <HAL_DMA_Abort_IT+0x3c8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d022      	beq.n	80019fc <HAL_DMA_Abort_IT+0x290>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a5f      	ldr	r2, [pc, #380]	; (8001b38 <HAL_DMA_Abort_IT+0x3cc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d01d      	beq.n	80019fc <HAL_DMA_Abort_IT+0x290>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a5d      	ldr	r2, [pc, #372]	; (8001b3c <HAL_DMA_Abort_IT+0x3d0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d018      	beq.n	80019fc <HAL_DMA_Abort_IT+0x290>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a5c      	ldr	r2, [pc, #368]	; (8001b40 <HAL_DMA_Abort_IT+0x3d4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d013      	beq.n	80019fc <HAL_DMA_Abort_IT+0x290>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a5a      	ldr	r2, [pc, #360]	; (8001b44 <HAL_DMA_Abort_IT+0x3d8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00e      	beq.n	80019fc <HAL_DMA_Abort_IT+0x290>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a59      	ldr	r2, [pc, #356]	; (8001b48 <HAL_DMA_Abort_IT+0x3dc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d009      	beq.n	80019fc <HAL_DMA_Abort_IT+0x290>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a57      	ldr	r2, [pc, #348]	; (8001b4c <HAL_DMA_Abort_IT+0x3e0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d004      	beq.n	80019fc <HAL_DMA_Abort_IT+0x290>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a56      	ldr	r2, [pc, #344]	; (8001b50 <HAL_DMA_Abort_IT+0x3e4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d108      	bne.n	8001a0e <HAL_DMA_Abort_IT+0x2a2>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	e007      	b.n	8001a1e <HAL_DMA_Abort_IT+0x2b2>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0201 	bic.w	r2, r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a3c      	ldr	r2, [pc, #240]	; (8001b14 <HAL_DMA_Abort_IT+0x3a8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d072      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a3a      	ldr	r2, [pc, #232]	; (8001b18 <HAL_DMA_Abort_IT+0x3ac>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d06d      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a39      	ldr	r2, [pc, #228]	; (8001b1c <HAL_DMA_Abort_IT+0x3b0>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d068      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a37      	ldr	r2, [pc, #220]	; (8001b20 <HAL_DMA_Abort_IT+0x3b4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d063      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a36      	ldr	r2, [pc, #216]	; (8001b24 <HAL_DMA_Abort_IT+0x3b8>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d05e      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a34      	ldr	r2, [pc, #208]	; (8001b28 <HAL_DMA_Abort_IT+0x3bc>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d059      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a33      	ldr	r2, [pc, #204]	; (8001b2c <HAL_DMA_Abort_IT+0x3c0>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d054      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a31      	ldr	r2, [pc, #196]	; (8001b30 <HAL_DMA_Abort_IT+0x3c4>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d04f      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a30      	ldr	r2, [pc, #192]	; (8001b34 <HAL_DMA_Abort_IT+0x3c8>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d04a      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a2e      	ldr	r2, [pc, #184]	; (8001b38 <HAL_DMA_Abort_IT+0x3cc>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d045      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a2d      	ldr	r2, [pc, #180]	; (8001b3c <HAL_DMA_Abort_IT+0x3d0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d040      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a2b      	ldr	r2, [pc, #172]	; (8001b40 <HAL_DMA_Abort_IT+0x3d4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d03b      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a2a      	ldr	r2, [pc, #168]	; (8001b44 <HAL_DMA_Abort_IT+0x3d8>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d036      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a28      	ldr	r2, [pc, #160]	; (8001b48 <HAL_DMA_Abort_IT+0x3dc>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d031      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a27      	ldr	r2, [pc, #156]	; (8001b4c <HAL_DMA_Abort_IT+0x3e0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d02c      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a25      	ldr	r2, [pc, #148]	; (8001b50 <HAL_DMA_Abort_IT+0x3e4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d027      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a24      	ldr	r2, [pc, #144]	; (8001b54 <HAL_DMA_Abort_IT+0x3e8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d022      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <HAL_DMA_Abort_IT+0x3ec>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d01d      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a21      	ldr	r2, [pc, #132]	; (8001b5c <HAL_DMA_Abort_IT+0x3f0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d018      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <HAL_DMA_Abort_IT+0x3f4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d013      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <HAL_DMA_Abort_IT+0x3f8>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d00e      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <HAL_DMA_Abort_IT+0x3fc>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d009      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1b      	ldr	r2, [pc, #108]	; (8001b6c <HAL_DMA_Abort_IT+0x400>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d004      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x3a2>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a19      	ldr	r2, [pc, #100]	; (8001b70 <HAL_DMA_Abort_IT+0x404>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d132      	bne.n	8001b74 <HAL_DMA_Abort_IT+0x408>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e031      	b.n	8001b76 <HAL_DMA_Abort_IT+0x40a>
 8001b12:	bf00      	nop
 8001b14:	40020010 	.word	0x40020010
 8001b18:	40020028 	.word	0x40020028
 8001b1c:	40020040 	.word	0x40020040
 8001b20:	40020058 	.word	0x40020058
 8001b24:	40020070 	.word	0x40020070
 8001b28:	40020088 	.word	0x40020088
 8001b2c:	400200a0 	.word	0x400200a0
 8001b30:	400200b8 	.word	0x400200b8
 8001b34:	40020410 	.word	0x40020410
 8001b38:	40020428 	.word	0x40020428
 8001b3c:	40020440 	.word	0x40020440
 8001b40:	40020458 	.word	0x40020458
 8001b44:	40020470 	.word	0x40020470
 8001b48:	40020488 	.word	0x40020488
 8001b4c:	400204a0 	.word	0x400204a0
 8001b50:	400204b8 	.word	0x400204b8
 8001b54:	58025408 	.word	0x58025408
 8001b58:	5802541c 	.word	0x5802541c
 8001b5c:	58025430 	.word	0x58025430
 8001b60:	58025444 	.word	0x58025444
 8001b64:	58025458 	.word	0x58025458
 8001b68:	5802546c 	.word	0x5802546c
 8001b6c:	58025480 	.word	0x58025480
 8001b70:	58025494 	.word	0x58025494
 8001b74:	2300      	movs	r3, #0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d028      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b88:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	2201      	movs	r2, #1
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ba8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00c      	beq.n	8001bcc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bc0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001bca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop

08001bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c06:	4b89      	ldr	r3, [pc, #548]	; (8001e2c <HAL_GPIO_Init+0x234>)
 8001c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c0a:	e194      	b.n	8001f36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8186 	beq.w	8001f30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d005      	beq.n	8001c3c <HAL_GPIO_Init+0x44>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d130      	bne.n	8001c9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	2203      	movs	r2, #3
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c72:	2201      	movs	r2, #1
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 0201 	and.w	r2, r3, #1
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d017      	beq.n	8001cda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d123      	bne.n	8001d2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	08da      	lsrs	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3208      	adds	r2, #8
 8001cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	691a      	ldr	r2, [r3, #16]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	08da      	lsrs	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3208      	adds	r2, #8
 8001d28:	69b9      	ldr	r1, [r7, #24]
 8001d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	2203      	movs	r2, #3
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0203 	and.w	r2, r3, #3
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80e0 	beq.w	8001f30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d70:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <HAL_GPIO_Init+0x238>)
 8001d72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d76:	4a2e      	ldr	r2, [pc, #184]	; (8001e30 <HAL_GPIO_Init+0x238>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d80:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <HAL_GPIO_Init+0x238>)
 8001d82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d8e:	4a29      	ldr	r2, [pc, #164]	; (8001e34 <HAL_GPIO_Init+0x23c>)
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	089b      	lsrs	r3, r3, #2
 8001d94:	3302      	adds	r3, #2
 8001d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	220f      	movs	r2, #15
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a20      	ldr	r2, [pc, #128]	; (8001e38 <HAL_GPIO_Init+0x240>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d052      	beq.n	8001e60 <HAL_GPIO_Init+0x268>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a1f      	ldr	r2, [pc, #124]	; (8001e3c <HAL_GPIO_Init+0x244>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d031      	beq.n	8001e26 <HAL_GPIO_Init+0x22e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <HAL_GPIO_Init+0x248>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d02b      	beq.n	8001e22 <HAL_GPIO_Init+0x22a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <HAL_GPIO_Init+0x24c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d025      	beq.n	8001e1e <HAL_GPIO_Init+0x226>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <HAL_GPIO_Init+0x250>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d01f      	beq.n	8001e1a <HAL_GPIO_Init+0x222>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <HAL_GPIO_Init+0x254>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d019      	beq.n	8001e16 <HAL_GPIO_Init+0x21e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a1a      	ldr	r2, [pc, #104]	; (8001e50 <HAL_GPIO_Init+0x258>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_GPIO_Init+0x21a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a19      	ldr	r2, [pc, #100]	; (8001e54 <HAL_GPIO_Init+0x25c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00d      	beq.n	8001e0e <HAL_GPIO_Init+0x216>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a18      	ldr	r2, [pc, #96]	; (8001e58 <HAL_GPIO_Init+0x260>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d007      	beq.n	8001e0a <HAL_GPIO_Init+0x212>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <HAL_GPIO_Init+0x264>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d101      	bne.n	8001e06 <HAL_GPIO_Init+0x20e>
 8001e02:	2309      	movs	r3, #9
 8001e04:	e02d      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e06:	230a      	movs	r3, #10
 8001e08:	e02b      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e0a:	2308      	movs	r3, #8
 8001e0c:	e029      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e0e:	2307      	movs	r3, #7
 8001e10:	e027      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e12:	2306      	movs	r3, #6
 8001e14:	e025      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e16:	2305      	movs	r3, #5
 8001e18:	e023      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	e021      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e01f      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e01d      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e01b      	b.n	8001e62 <HAL_GPIO_Init+0x26a>
 8001e2a:	bf00      	nop
 8001e2c:	58000080 	.word	0x58000080
 8001e30:	58024400 	.word	0x58024400
 8001e34:	58000400 	.word	0x58000400
 8001e38:	58020000 	.word	0x58020000
 8001e3c:	58020400 	.word	0x58020400
 8001e40:	58020800 	.word	0x58020800
 8001e44:	58020c00 	.word	0x58020c00
 8001e48:	58021000 	.word	0x58021000
 8001e4c:	58021400 	.word	0x58021400
 8001e50:	58021800 	.word	0x58021800
 8001e54:	58021c00 	.word	0x58021c00
 8001e58:	58022000 	.word	0x58022000
 8001e5c:	58022400 	.word	0x58022400
 8001e60:	2300      	movs	r3, #0
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	f002 0203 	and.w	r2, r2, #3
 8001e68:	0092      	lsls	r2, r2, #2
 8001e6a:	4093      	lsls	r3, r2
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e72:	4938      	ldr	r1, [pc, #224]	; (8001f54 <HAL_GPIO_Init+0x35c>)
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	3302      	adds	r3, #2
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	3301      	adds	r3, #1
 8001f34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f47f ae63 	bne.w	8001c0c <HAL_GPIO_Init+0x14>
  }
}
 8001f46:	bf00      	nop
 8001f48:	bf00      	nop
 8001f4a:	3724      	adds	r7, #36	; 0x24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	58000400 	.word	0x58000400

08001f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]
 8001f64:	4613      	mov	r3, r2
 8001f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f68:	787b      	ldrb	r3, [r7, #1]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6e:	887a      	ldrh	r2, [r7, #2]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f74:	e003      	b.n	8001f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f76:	887b      	ldrh	r3, [r7, #2]
 8001f78:	041a      	lsls	r2, r3, #16
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	619a      	str	r2, [r3, #24]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b085      	sub	sp, #20
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f9c:	887a      	ldrh	r2, [r7, #2]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	041a      	lsls	r2, r3, #16
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	43d9      	mvns	r1, r3
 8001fa8:	887b      	ldrh	r3, [r7, #2]
 8001faa:	400b      	ands	r3, r1
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	619a      	str	r2, [r3, #24]
}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001fc8:	4a08      	ldr	r2, [pc, #32]	; (8001fec <HAL_HSEM_FastTake+0x2c>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3320      	adds	r3, #32
 8001fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd2:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <HAL_HSEM_FastTake+0x30>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d101      	bne.n	8001fdc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e000      	b.n	8001fde <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	58026400 	.word	0x58026400
 8001ff0:	80000300 	.word	0x80000300

08001ff4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001ffe:	4906      	ldr	r1, [pc, #24]	; (8002018 <HAL_HSEM_Release+0x24>)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	58026400 	.word	0x58026400

0800201c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002024:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	2b06      	cmp	r3, #6
 800202e:	d00a      	beq.n	8002046 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002030:	4b26      	ldr	r3, [pc, #152]	; (80020cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	429a      	cmp	r2, r3
 800203c:	d001      	beq.n	8002042 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e040      	b.n	80020c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e03e      	b.n	80020c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002046:	4b21      	ldr	r3, [pc, #132]	; (80020cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800204e:	491f      	ldr	r1, [pc, #124]	; (80020cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4313      	orrs	r3, r2
 8002054:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002056:	f7fe fea3 	bl	8000da0 <HAL_GetTick>
 800205a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800205c:	e009      	b.n	8002072 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800205e:	f7fe fe9f 	bl	8000da0 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800206c:	d901      	bls.n	8002072 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e028      	b.n	80020c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <HAL_PWREx_ConfigSupply+0xb0>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800207a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800207e:	d1ee      	bne.n	800205e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b1e      	cmp	r3, #30
 8002084:	d008      	beq.n	8002098 <HAL_PWREx_ConfigSupply+0x7c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b2e      	cmp	r3, #46	; 0x2e
 800208a:	d005      	beq.n	8002098 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b1d      	cmp	r3, #29
 8002090:	d002      	beq.n	8002098 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b2d      	cmp	r3, #45	; 0x2d
 8002096:	d114      	bne.n	80020c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002098:	f7fe fe82 	bl	8000da0 <HAL_GetTick>
 800209c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800209e:	e009      	b.n	80020b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020a0:	f7fe fe7e 	bl	8000da0 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020ae:	d901      	bls.n	80020b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e007      	b.n	80020c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_PWREx_ConfigSupply+0xb0>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c0:	d1ee      	bne.n	80020a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	58024800 	.word	0x58024800

080020d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08c      	sub	sp, #48	; 0x30
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	f000 bc48 	b.w	8002974 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 8088 	beq.w	8002202 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f2:	4b99      	ldr	r3, [pc, #612]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020fc:	4b96      	ldr	r3, [pc, #600]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002104:	2b10      	cmp	r3, #16
 8002106:	d007      	beq.n	8002118 <HAL_RCC_OscConfig+0x48>
 8002108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210a:	2b18      	cmp	r3, #24
 800210c:	d111      	bne.n	8002132 <HAL_RCC_OscConfig+0x62>
 800210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d10c      	bne.n	8002132 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002118:	4b8f      	ldr	r3, [pc, #572]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d06d      	beq.n	8002200 <HAL_RCC_OscConfig+0x130>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d169      	bne.n	8002200 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	f000 bc21 	b.w	8002974 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213a:	d106      	bne.n	800214a <HAL_RCC_OscConfig+0x7a>
 800213c:	4b86      	ldr	r3, [pc, #536]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a85      	ldr	r2, [pc, #532]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 8002142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	e02e      	b.n	80021a8 <HAL_RCC_OscConfig+0xd8>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0x9c>
 8002152:	4b81      	ldr	r3, [pc, #516]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a80      	ldr	r2, [pc, #512]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 8002158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b7e      	ldr	r3, [pc, #504]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a7d      	ldr	r2, [pc, #500]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 8002164:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e01d      	b.n	80021a8 <HAL_RCC_OscConfig+0xd8>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0xc0>
 8002176:	4b78      	ldr	r3, [pc, #480]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a77      	ldr	r2, [pc, #476]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 800217c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b75      	ldr	r3, [pc, #468]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a74      	ldr	r2, [pc, #464]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 8002188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e00b      	b.n	80021a8 <HAL_RCC_OscConfig+0xd8>
 8002190:	4b71      	ldr	r3, [pc, #452]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a70      	ldr	r2, [pc, #448]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 8002196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	4b6e      	ldr	r3, [pc, #440]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a6d      	ldr	r2, [pc, #436]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 80021a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d013      	beq.n	80021d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7fe fdf6 	bl	8000da0 <HAL_GetTick>
 80021b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b8:	f7fe fdf2 	bl	8000da0 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	; 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e3d4      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021ca:	4b63      	ldr	r3, [pc, #396]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0xe8>
 80021d6:	e014      	b.n	8002202 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe fde2 	bl	8000da0 <HAL_GetTick>
 80021dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e0:	f7fe fdde 	bl	8000da0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	; 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e3c0      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021f2:	4b59      	ldr	r3, [pc, #356]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x110>
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80ca 	beq.w	80023a4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002210:	4b51      	ldr	r3, [pc, #324]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002218:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800221a:	4b4f      	ldr	r3, [pc, #316]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d007      	beq.n	8002236 <HAL_RCC_OscConfig+0x166>
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	2b18      	cmp	r3, #24
 800222a:	d156      	bne.n	80022da <HAL_RCC_OscConfig+0x20a>
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d151      	bne.n	80022da <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002236:	4b48      	ldr	r3, [pc, #288]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_RCC_OscConfig+0x17e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e392      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800224e:	4b42      	ldr	r3, [pc, #264]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 0219 	bic.w	r2, r3, #25
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	493f      	ldr	r1, [pc, #252]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 800225c:	4313      	orrs	r3, r2
 800225e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	f7fe fd9e 	bl	8000da0 <HAL_GetTick>
 8002264:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002268:	f7fe fd9a 	bl	8000da0 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e37c      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800227a:	4b37      	ldr	r3, [pc, #220]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002286:	f7fe fdbb 	bl	8000e00 <HAL_GetREVID>
 800228a:	4603      	mov	r3, r0
 800228c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002290:	4293      	cmp	r3, r2
 8002292:	d817      	bhi.n	80022c4 <HAL_RCC_OscConfig+0x1f4>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	2b40      	cmp	r3, #64	; 0x40
 800229a:	d108      	bne.n	80022ae <HAL_RCC_OscConfig+0x1de>
 800229c:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80022a4:	4a2c      	ldr	r2, [pc, #176]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 80022a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022aa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ac:	e07a      	b.n	80023a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ae:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	031b      	lsls	r3, r3, #12
 80022bc:	4926      	ldr	r1, [pc, #152]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022c2:	e06f      	b.n	80023a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c4:	4b24      	ldr	r3, [pc, #144]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	061b      	lsls	r3, r3, #24
 80022d2:	4921      	ldr	r1, [pc, #132]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d8:	e064      	b.n	80023a4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d047      	beq.n	8002372 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 0219 	bic.w	r2, r3, #25
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	491a      	ldr	r1, [pc, #104]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe fd54 	bl	8000da0 <HAL_GetTick>
 80022f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fc:	f7fe fd50 	bl	8000da0 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e332      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231a:	f7fe fd71 	bl	8000e00 <HAL_GetREVID>
 800231e:	4603      	mov	r3, r0
 8002320:	f241 0203 	movw	r2, #4099	; 0x1003
 8002324:	4293      	cmp	r3, r2
 8002326:	d819      	bhi.n	800235c <HAL_RCC_OscConfig+0x28c>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b40      	cmp	r3, #64	; 0x40
 800232e:	d108      	bne.n	8002342 <HAL_RCC_OscConfig+0x272>
 8002330:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002338:	4a07      	ldr	r2, [pc, #28]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 800233a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800233e:	6053      	str	r3, [r2, #4]
 8002340:	e030      	b.n	80023a4 <HAL_RCC_OscConfig+0x2d4>
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	031b      	lsls	r3, r3, #12
 8002350:	4901      	ldr	r1, [pc, #4]	; (8002358 <HAL_RCC_OscConfig+0x288>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
 8002356:	e025      	b.n	80023a4 <HAL_RCC_OscConfig+0x2d4>
 8002358:	58024400 	.word	0x58024400
 800235c:	4b9a      	ldr	r3, [pc, #616]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	061b      	lsls	r3, r3, #24
 800236a:	4997      	ldr	r1, [pc, #604]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
 8002370:	e018      	b.n	80023a4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002372:	4b95      	ldr	r3, [pc, #596]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a94      	ldr	r2, [pc, #592]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7fe fd0f 	bl	8000da0 <HAL_GetTick>
 8002382:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002386:	f7fe fd0b 	bl	8000da0 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e2ed      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002398:	4b8b      	ldr	r3, [pc, #556]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1f0      	bne.n	8002386 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80a9 	beq.w	8002504 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b2:	4b85      	ldr	r3, [pc, #532]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023bc:	4b82      	ldr	r3, [pc, #520]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d007      	beq.n	80023d8 <HAL_RCC_OscConfig+0x308>
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	2b18      	cmp	r3, #24
 80023cc:	d13a      	bne.n	8002444 <HAL_RCC_OscConfig+0x374>
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d135      	bne.n	8002444 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023d8:	4b7b      	ldr	r3, [pc, #492]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_OscConfig+0x320>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	2b80      	cmp	r3, #128	; 0x80
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e2c1      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023f0:	f7fe fd06 	bl	8000e00 <HAL_GetREVID>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d817      	bhi.n	800242e <HAL_RCC_OscConfig+0x35e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	2b20      	cmp	r3, #32
 8002404:	d108      	bne.n	8002418 <HAL_RCC_OscConfig+0x348>
 8002406:	4b70      	ldr	r3, [pc, #448]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800240e:	4a6e      	ldr	r2, [pc, #440]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 8002410:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002414:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002416:	e075      	b.n	8002504 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002418:	4b6b      	ldr	r3, [pc, #428]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	069b      	lsls	r3, r3, #26
 8002426:	4968      	ldr	r1, [pc, #416]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800242c:	e06a      	b.n	8002504 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800242e:	4b66      	ldr	r3, [pc, #408]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	061b      	lsls	r3, r3, #24
 800243c:	4962      	ldr	r1, [pc, #392]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 800243e:	4313      	orrs	r3, r2
 8002440:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002442:	e05f      	b.n	8002504 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d042      	beq.n	80024d2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800244c:	4b5e      	ldr	r3, [pc, #376]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a5d      	ldr	r2, [pc, #372]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 8002452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7fe fca2 	bl	8000da0 <HAL_GetTick>
 800245c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002460:	f7fe fc9e 	bl	8000da0 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e280      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002472:	4b55      	ldr	r3, [pc, #340]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800247e:	f7fe fcbf 	bl	8000e00 <HAL_GetREVID>
 8002482:	4603      	mov	r3, r0
 8002484:	f241 0203 	movw	r2, #4099	; 0x1003
 8002488:	4293      	cmp	r3, r2
 800248a:	d817      	bhi.n	80024bc <HAL_RCC_OscConfig+0x3ec>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	2b20      	cmp	r3, #32
 8002492:	d108      	bne.n	80024a6 <HAL_RCC_OscConfig+0x3d6>
 8002494:	4b4c      	ldr	r3, [pc, #304]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800249c:	4a4a      	ldr	r2, [pc, #296]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 800249e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024a2:	6053      	str	r3, [r2, #4]
 80024a4:	e02e      	b.n	8002504 <HAL_RCC_OscConfig+0x434>
 80024a6:	4b48      	ldr	r3, [pc, #288]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	069b      	lsls	r3, r3, #26
 80024b4:	4944      	ldr	r1, [pc, #272]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
 80024ba:	e023      	b.n	8002504 <HAL_RCC_OscConfig+0x434>
 80024bc:	4b42      	ldr	r3, [pc, #264]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	061b      	lsls	r3, r3, #24
 80024ca:	493f      	ldr	r1, [pc, #252]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60cb      	str	r3, [r1, #12]
 80024d0:	e018      	b.n	8002504 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024d2:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a3c      	ldr	r2, [pc, #240]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 80024d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7fe fc5f 	bl	8000da0 <HAL_GetTick>
 80024e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024e6:	f7fe fc5b 	bl	8000da0 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e23d      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024f8:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f0      	bne.n	80024e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d036      	beq.n	800257e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d019      	beq.n	800254c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002518:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 800251a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800251c:	4a2a      	ldr	r2, [pc, #168]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002524:	f7fe fc3c 	bl	8000da0 <HAL_GetTick>
 8002528:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252c:	f7fe fc38 	bl	8000da0 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e21a      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800253e:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 8002540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0x45c>
 800254a:	e018      	b.n	800257e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254c:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 800254e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002550:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 8002552:	f023 0301 	bic.w	r3, r3, #1
 8002556:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002558:	f7fe fc22 	bl	8000da0 <HAL_GetTick>
 800255c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002560:	f7fe fc1e 	bl	8000da0 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e200      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 8002574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b00      	cmp	r3, #0
 8002588:	d039      	beq.n	80025fe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d01c      	beq.n	80025cc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002592:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a0c      	ldr	r2, [pc, #48]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 8002598:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800259c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800259e:	f7fe fbff 	bl	8000da0 <HAL_GetTick>
 80025a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025a6:	f7fe fbfb 	bl	8000da0 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e1dd      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x4d6>
 80025c4:	e01b      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
 80025c6:	bf00      	nop
 80025c8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025cc:	4b9b      	ldr	r3, [pc, #620]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a9a      	ldr	r2, [pc, #616]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 80025d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025d8:	f7fe fbe2 	bl	8000da0 <HAL_GetTick>
 80025dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025e0:	f7fe fbde 	bl	8000da0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e1c0      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025f2:	4b92      	ldr	r3, [pc, #584]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 8081 	beq.w	800270e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800260c:	4b8c      	ldr	r3, [pc, #560]	; (8002840 <HAL_RCC_OscConfig+0x770>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a8b      	ldr	r2, [pc, #556]	; (8002840 <HAL_RCC_OscConfig+0x770>)
 8002612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002616:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002618:	f7fe fbc2 	bl	8000da0 <HAL_GetTick>
 800261c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002620:	f7fe fbbe 	bl	8000da0 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	; 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e1a0      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002632:	4b83      	ldr	r3, [pc, #524]	; (8002840 <HAL_RCC_OscConfig+0x770>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d106      	bne.n	8002654 <HAL_RCC_OscConfig+0x584>
 8002646:	4b7d      	ldr	r3, [pc, #500]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	4a7c      	ldr	r2, [pc, #496]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6713      	str	r3, [r2, #112]	; 0x70
 8002652:	e02d      	b.n	80026b0 <HAL_RCC_OscConfig+0x5e0>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10c      	bne.n	8002676 <HAL_RCC_OscConfig+0x5a6>
 800265c:	4b77      	ldr	r3, [pc, #476]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002660:	4a76      	ldr	r2, [pc, #472]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 8002662:	f023 0301 	bic.w	r3, r3, #1
 8002666:	6713      	str	r3, [r2, #112]	; 0x70
 8002668:	4b74      	ldr	r3, [pc, #464]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266c:	4a73      	ldr	r2, [pc, #460]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 800266e:	f023 0304 	bic.w	r3, r3, #4
 8002672:	6713      	str	r3, [r2, #112]	; 0x70
 8002674:	e01c      	b.n	80026b0 <HAL_RCC_OscConfig+0x5e0>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b05      	cmp	r3, #5
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0x5c8>
 800267e:	4b6f      	ldr	r3, [pc, #444]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002682:	4a6e      	ldr	r2, [pc, #440]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	6713      	str	r3, [r2, #112]	; 0x70
 800268a:	4b6c      	ldr	r3, [pc, #432]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	4a6b      	ldr	r2, [pc, #428]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6713      	str	r3, [r2, #112]	; 0x70
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0x5e0>
 8002698:	4b68      	ldr	r3, [pc, #416]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	4a67      	ldr	r2, [pc, #412]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	6713      	str	r3, [r2, #112]	; 0x70
 80026a4:	4b65      	ldr	r3, [pc, #404]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	4a64      	ldr	r2, [pc, #400]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 80026aa:	f023 0304 	bic.w	r3, r3, #4
 80026ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d015      	beq.n	80026e4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b8:	f7fe fb72 	bl	8000da0 <HAL_GetTick>
 80026bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c0:	f7fe fb6e 	bl	8000da0 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e14e      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026d6:	4b59      	ldr	r3, [pc, #356]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0ee      	beq.n	80026c0 <HAL_RCC_OscConfig+0x5f0>
 80026e2:	e014      	b.n	800270e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7fe fb5c 	bl	8000da0 <HAL_GetTick>
 80026e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f7fe fb58 	bl	8000da0 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e138      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002702:	4b4e      	ldr	r3, [pc, #312]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ee      	bne.n	80026ec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 812d 	beq.w	8002972 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002718:	4b48      	ldr	r3, [pc, #288]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002720:	2b18      	cmp	r3, #24
 8002722:	f000 80bd 	beq.w	80028a0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	2b02      	cmp	r3, #2
 800272c:	f040 809e 	bne.w	800286c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002730:	4b42      	ldr	r3, [pc, #264]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a41      	ldr	r2, [pc, #260]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 8002736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800273a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273c:	f7fe fb30 	bl	8000da0 <HAL_GetTick>
 8002740:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002744:	f7fe fb2c 	bl	8000da0 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e10e      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002756:	4b39      	ldr	r3, [pc, #228]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002762:	4b36      	ldr	r3, [pc, #216]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 8002764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002766:	4b37      	ldr	r3, [pc, #220]	; (8002844 <HAL_RCC_OscConfig+0x774>)
 8002768:	4013      	ands	r3, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002772:	0112      	lsls	r2, r2, #4
 8002774:	430a      	orrs	r2, r1
 8002776:	4931      	ldr	r1, [pc, #196]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 8002778:	4313      	orrs	r3, r2
 800277a:	628b      	str	r3, [r1, #40]	; 0x28
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	3b01      	subs	r3, #1
 8002782:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278a:	3b01      	subs	r3, #1
 800278c:	025b      	lsls	r3, r3, #9
 800278e:	b29b      	uxth	r3, r3
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002796:	3b01      	subs	r3, #1
 8002798:	041b      	lsls	r3, r3, #16
 800279a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a4:	3b01      	subs	r3, #1
 80027a6:	061b      	lsls	r3, r3, #24
 80027a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80027ac:	4923      	ldr	r1, [pc, #140]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	4a21      	ldr	r2, [pc, #132]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027be:	4b1f      	ldr	r3, [pc, #124]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 80027c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCC_OscConfig+0x778>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027ca:	00d2      	lsls	r2, r2, #3
 80027cc:	491b      	ldr	r1, [pc, #108]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80027d2:	4b1a      	ldr	r3, [pc, #104]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d6:	f023 020c 	bic.w	r2, r3, #12
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4917      	ldr	r1, [pc, #92]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80027e4:	4b15      	ldr	r3, [pc, #84]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	f023 0202 	bic.w	r2, r3, #2
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	4912      	ldr	r1, [pc, #72]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	4a10      	ldr	r2, [pc, #64]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002800:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002802:	4b0e      	ldr	r3, [pc, #56]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	4a0d      	ldr	r2, [pc, #52]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 8002808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	4a0a      	ldr	r2, [pc, #40]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 8002814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002818:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	4a07      	ldr	r2, [pc, #28]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a04      	ldr	r2, [pc, #16]	; (800283c <HAL_RCC_OscConfig+0x76c>)
 800282c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7fe fab5 	bl	8000da0 <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002838:	e011      	b.n	800285e <HAL_RCC_OscConfig+0x78e>
 800283a:	bf00      	nop
 800283c:	58024400 	.word	0x58024400
 8002840:	58024800 	.word	0x58024800
 8002844:	fffffc0c 	.word	0xfffffc0c
 8002848:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284c:	f7fe faa8 	bl	8000da0 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e08a      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800285e:	4b47      	ldr	r3, [pc, #284]	; (800297c <HAL_RCC_OscConfig+0x8ac>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x77c>
 800286a:	e082      	b.n	8002972 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286c:	4b43      	ldr	r3, [pc, #268]	; (800297c <HAL_RCC_OscConfig+0x8ac>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a42      	ldr	r2, [pc, #264]	; (800297c <HAL_RCC_OscConfig+0x8ac>)
 8002872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe fa92 	bl	8000da0 <HAL_GetTick>
 800287c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe fa8e 	bl	8000da0 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e070      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002892:	4b3a      	ldr	r3, [pc, #232]	; (800297c <HAL_RCC_OscConfig+0x8ac>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x7b0>
 800289e:	e068      	b.n	8002972 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028a0:	4b36      	ldr	r3, [pc, #216]	; (800297c <HAL_RCC_OscConfig+0x8ac>)
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028a6:	4b35      	ldr	r3, [pc, #212]	; (800297c <HAL_RCC_OscConfig+0x8ac>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d031      	beq.n	8002918 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f003 0203 	and.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d12a      	bne.n	8002918 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d122      	bne.n	8002918 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d11a      	bne.n	8002918 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	0a5b      	lsrs	r3, r3, #9
 80028e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d111      	bne.n	8002918 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	0c1b      	lsrs	r3, r3, #16
 80028f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002902:	429a      	cmp	r2, r3
 8002904:	d108      	bne.n	8002918 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	0e1b      	lsrs	r3, r3, #24
 800290a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002912:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e02b      	b.n	8002974 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800291c:	4b17      	ldr	r3, [pc, #92]	; (800297c <HAL_RCC_OscConfig+0x8ac>)
 800291e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002920:	08db      	lsrs	r3, r3, #3
 8002922:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002926:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	429a      	cmp	r2, r3
 8002930:	d01f      	beq.n	8002972 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002932:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_RCC_OscConfig+0x8ac>)
 8002934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002936:	4a11      	ldr	r2, [pc, #68]	; (800297c <HAL_RCC_OscConfig+0x8ac>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800293e:	f7fe fa2f 	bl	8000da0 <HAL_GetTick>
 8002942:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002944:	bf00      	nop
 8002946:	f7fe fa2b 	bl	8000da0 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	4293      	cmp	r3, r2
 8002950:	d0f9      	beq.n	8002946 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_RCC_OscConfig+0x8ac>)
 8002954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <HAL_RCC_OscConfig+0x8b0>)
 8002958:	4013      	ands	r3, r2
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800295e:	00d2      	lsls	r2, r2, #3
 8002960:	4906      	ldr	r1, [pc, #24]	; (800297c <HAL_RCC_OscConfig+0x8ac>)
 8002962:	4313      	orrs	r3, r2
 8002964:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_RCC_OscConfig+0x8ac>)
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	4a04      	ldr	r2, [pc, #16]	; (800297c <HAL_RCC_OscConfig+0x8ac>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3730      	adds	r7, #48	; 0x30
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	58024400 	.word	0x58024400
 8002980:	ffff0007 	.word	0xffff0007

08002984 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e19c      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002998:	4b8a      	ldr	r3, [pc, #552]	; (8002bc4 <HAL_RCC_ClockConfig+0x240>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d910      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b87      	ldr	r3, [pc, #540]	; (8002bc4 <HAL_RCC_ClockConfig+0x240>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 020f 	bic.w	r2, r3, #15
 80029ae:	4985      	ldr	r1, [pc, #532]	; (8002bc4 <HAL_RCC_ClockConfig+0x240>)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b83      	ldr	r3, [pc, #524]	; (8002bc4 <HAL_RCC_ClockConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e184      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d010      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	4b7b      	ldr	r3, [pc, #492]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d908      	bls.n	80029f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029e4:	4b78      	ldr	r3, [pc, #480]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	4975      	ldr	r1, [pc, #468]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d010      	beq.n	8002a24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	4b70      	ldr	r3, [pc, #448]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d908      	bls.n	8002a24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a12:	4b6d      	ldr	r3, [pc, #436]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	496a      	ldr	r1, [pc, #424]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d010      	beq.n	8002a52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699a      	ldr	r2, [r3, #24]
 8002a34:	4b64      	ldr	r3, [pc, #400]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d908      	bls.n	8002a52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a40:	4b61      	ldr	r3, [pc, #388]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	495e      	ldr	r1, [pc, #376]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d010      	beq.n	8002a80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	4b59      	ldr	r3, [pc, #356]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d908      	bls.n	8002a80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a6e:	4b56      	ldr	r3, [pc, #344]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	4953      	ldr	r1, [pc, #332]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d010      	beq.n	8002aae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	4b4d      	ldr	r3, [pc, #308]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d908      	bls.n	8002aae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a9c:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f023 020f 	bic.w	r2, r3, #15
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4947      	ldr	r1, [pc, #284]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d055      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002aba:	4b43      	ldr	r3, [pc, #268]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	4940      	ldr	r1, [pc, #256]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d107      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ad4:	4b3c      	ldr	r3, [pc, #240]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d121      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0f6      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aec:	4b36      	ldr	r3, [pc, #216]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d115      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0ea      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d107      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b04:	4b30      	ldr	r3, [pc, #192]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d109      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0de      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b14:	4b2c      	ldr	r3, [pc, #176]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0d6      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b24:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f023 0207 	bic.w	r2, r3, #7
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4925      	ldr	r1, [pc, #148]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b36:	f7fe f933 	bl	8000da0 <HAL_GetTick>
 8002b3a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3e:	f7fe f92f 	bl	8000da0 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e0be      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b54:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d1eb      	bne.n	8002b3e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d010      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d208      	bcs.n	8002b94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b82:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f023 020f 	bic.w	r2, r3, #15
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	490e      	ldr	r1, [pc, #56]	; (8002bc8 <HAL_RCC_ClockConfig+0x244>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <HAL_RCC_ClockConfig+0x240>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d214      	bcs.n	8002bcc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <HAL_RCC_ClockConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 020f 	bic.w	r2, r3, #15
 8002baa:	4906      	ldr	r1, [pc, #24]	; (8002bc4 <HAL_RCC_ClockConfig+0x240>)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <HAL_RCC_ClockConfig+0x240>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e086      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x34e>
 8002bc4:	52002000 	.word	0x52002000
 8002bc8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d010      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	4b3f      	ldr	r3, [pc, #252]	; (8002cdc <HAL_RCC_ClockConfig+0x358>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d208      	bcs.n	8002bfa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002be8:	4b3c      	ldr	r3, [pc, #240]	; (8002cdc <HAL_RCC_ClockConfig+0x358>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	4939      	ldr	r1, [pc, #228]	; (8002cdc <HAL_RCC_ClockConfig+0x358>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d010      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	4b34      	ldr	r3, [pc, #208]	; (8002cdc <HAL_RCC_ClockConfig+0x358>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d208      	bcs.n	8002c28 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c16:	4b31      	ldr	r3, [pc, #196]	; (8002cdc <HAL_RCC_ClockConfig+0x358>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	492e      	ldr	r1, [pc, #184]	; (8002cdc <HAL_RCC_ClockConfig+0x358>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d010      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699a      	ldr	r2, [r3, #24]
 8002c38:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <HAL_RCC_ClockConfig+0x358>)
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d208      	bcs.n	8002c56 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c44:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <HAL_RCC_ClockConfig+0x358>)
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	4922      	ldr	r1, [pc, #136]	; (8002cdc <HAL_RCC_ClockConfig+0x358>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d010      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <HAL_RCC_ClockConfig+0x358>)
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d208      	bcs.n	8002c84 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_RCC_ClockConfig+0x358>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	4917      	ldr	r1, [pc, #92]	; (8002cdc <HAL_RCC_ClockConfig+0x358>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c84:	f000 f834 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <HAL_RCC_ClockConfig+0x358>)
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	0a1b      	lsrs	r3, r3, #8
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	4912      	ldr	r1, [pc, #72]	; (8002ce0 <HAL_RCC_ClockConfig+0x35c>)
 8002c96:	5ccb      	ldrb	r3, [r1, r3]
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <HAL_RCC_ClockConfig+0x358>)
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	4a0d      	ldr	r2, [pc, #52]	; (8002ce0 <HAL_RCC_ClockConfig+0x35c>)
 8002cac:	5cd3      	ldrb	r3, [r2, r3]
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <HAL_RCC_ClockConfig+0x360>)
 8002cba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cbc:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <HAL_RCC_ClockConfig+0x364>)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_RCC_ClockConfig+0x368>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe f820 	bl	8000d0c <HAL_InitTick>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	58024400 	.word	0x58024400
 8002ce0:	0800689c 	.word	0x0800689c
 8002ce4:	24000004 	.word	0x24000004
 8002ce8:	24000000 	.word	0x24000000
 8002cec:	2400001c 	.word	0x2400001c

08002cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b089      	sub	sp, #36	; 0x24
 8002cf4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cf6:	4bb3      	ldr	r3, [pc, #716]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cfe:	2b18      	cmp	r3, #24
 8002d00:	f200 8155 	bhi.w	8002fae <HAL_RCC_GetSysClockFreq+0x2be>
 8002d04:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0a:	bf00      	nop
 8002d0c:	08002d71 	.word	0x08002d71
 8002d10:	08002faf 	.word	0x08002faf
 8002d14:	08002faf 	.word	0x08002faf
 8002d18:	08002faf 	.word	0x08002faf
 8002d1c:	08002faf 	.word	0x08002faf
 8002d20:	08002faf 	.word	0x08002faf
 8002d24:	08002faf 	.word	0x08002faf
 8002d28:	08002faf 	.word	0x08002faf
 8002d2c:	08002d97 	.word	0x08002d97
 8002d30:	08002faf 	.word	0x08002faf
 8002d34:	08002faf 	.word	0x08002faf
 8002d38:	08002faf 	.word	0x08002faf
 8002d3c:	08002faf 	.word	0x08002faf
 8002d40:	08002faf 	.word	0x08002faf
 8002d44:	08002faf 	.word	0x08002faf
 8002d48:	08002faf 	.word	0x08002faf
 8002d4c:	08002d9d 	.word	0x08002d9d
 8002d50:	08002faf 	.word	0x08002faf
 8002d54:	08002faf 	.word	0x08002faf
 8002d58:	08002faf 	.word	0x08002faf
 8002d5c:	08002faf 	.word	0x08002faf
 8002d60:	08002faf 	.word	0x08002faf
 8002d64:	08002faf 	.word	0x08002faf
 8002d68:	08002faf 	.word	0x08002faf
 8002d6c:	08002da3 	.word	0x08002da3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d70:	4b94      	ldr	r3, [pc, #592]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d009      	beq.n	8002d90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d7c:	4b91      	ldr	r3, [pc, #580]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	08db      	lsrs	r3, r3, #3
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	4a90      	ldr	r2, [pc, #576]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002d8e:	e111      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d90:	4b8d      	ldr	r3, [pc, #564]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d92:	61bb      	str	r3, [r7, #24]
      break;
 8002d94:	e10e      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002d96:	4b8d      	ldr	r3, [pc, #564]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d98:	61bb      	str	r3, [r7, #24]
      break;
 8002d9a:	e10b      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002d9c:	4b8c      	ldr	r3, [pc, #560]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d9e:	61bb      	str	r3, [r7, #24]
      break;
 8002da0:	e108      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002da2:	4b88      	ldr	r3, [pc, #544]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002dac:	4b85      	ldr	r3, [pc, #532]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002db8:	4b82      	ldr	r3, [pc, #520]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002dc2:	4b80      	ldr	r3, [pc, #512]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc6:	08db      	lsrs	r3, r3, #3
 8002dc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	fb02 f303 	mul.w	r3, r2, r3
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dda:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80e1 	beq.w	8002fa8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	f000 8083 	beq.w	8002ef4 <HAL_RCC_GetSysClockFreq+0x204>
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	f200 80a1 	bhi.w	8002f38 <HAL_RCC_GetSysClockFreq+0x248>
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0x114>
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d056      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e02:	e099      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e04:	4b6f      	ldr	r3, [pc, #444]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d02d      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e10:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	08db      	lsrs	r3, r3, #3
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	4a6b      	ldr	r2, [pc, #428]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e20:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	ee07 3a90 	vmov	s15, r3
 8002e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	ee07 3a90 	vmov	s15, r3
 8002e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e3a:	4b62      	ldr	r3, [pc, #392]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e42:	ee07 3a90 	vmov	s15, r3
 8002e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e4e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e66:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002e6a:	e087      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	ee07 3a90 	vmov	s15, r3
 8002e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e76:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002fd8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e7e:	4b51      	ldr	r3, [pc, #324]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e86:	ee07 3a90 	vmov	s15, r3
 8002e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e92:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002eae:	e065      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eba:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002fdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ec2:	4b40      	ldr	r3, [pc, #256]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eca:	ee07 3a90 	vmov	s15, r3
 8002ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ed2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ed6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ef2:	e043      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002fe0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f06:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f0e:	ee07 3a90 	vmov	s15, r3
 8002f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f1a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f36:	e021      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	ee07 3a90 	vmov	s15, r3
 8002f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f42:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002fdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f52:	ee07 3a90 	vmov	s15, r3
 8002f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f5e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f7a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002f7c:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	0a5b      	lsrs	r3, r3, #9
 8002f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f86:	3301      	adds	r3, #1
 8002f88:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	ee07 3a90 	vmov	s15, r3
 8002f90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fa0:	ee17 3a90 	vmov	r3, s15
 8002fa4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002fa6:	e005      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61bb      	str	r3, [r7, #24]
      break;
 8002fac:	e002      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002fae:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fb0:	61bb      	str	r3, [r7, #24]
      break;
 8002fb2:	bf00      	nop
  }

  return sysclockfreq;
 8002fb4:	69bb      	ldr	r3, [r7, #24]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3724      	adds	r7, #36	; 0x24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	58024400 	.word	0x58024400
 8002fc8:	03d09000 	.word	0x03d09000
 8002fcc:	003d0900 	.word	0x003d0900
 8002fd0:	017d7840 	.word	0x017d7840
 8002fd4:	46000000 	.word	0x46000000
 8002fd8:	4c742400 	.word	0x4c742400
 8002fdc:	4a742400 	.word	0x4a742400
 8002fe0:	4bbebc20 	.word	0x4bbebc20

08002fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002fea:	f7ff fe81 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	4b10      	ldr	r3, [pc, #64]	; (8003034 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	0a1b      	lsrs	r3, r3, #8
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	490f      	ldr	r1, [pc, #60]	; (8003038 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ffc:	5ccb      	ldrb	r3, [r1, r3]
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	fa22 f303 	lsr.w	r3, r2, r3
 8003006:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <HAL_RCC_GetHCLKFreq+0x50>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	4a09      	ldr	r2, [pc, #36]	; (8003038 <HAL_RCC_GetHCLKFreq+0x54>)
 8003012:	5cd3      	ldrb	r3, [r2, r3]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	fa22 f303 	lsr.w	r3, r2, r3
 800301e:	4a07      	ldr	r2, [pc, #28]	; (800303c <HAL_RCC_GetHCLKFreq+0x58>)
 8003020:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003022:	4a07      	ldr	r2, [pc, #28]	; (8003040 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003028:	4b04      	ldr	r3, [pc, #16]	; (800303c <HAL_RCC_GetHCLKFreq+0x58>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	58024400 	.word	0x58024400
 8003038:	0800689c 	.word	0x0800689c
 800303c:	24000004 	.word	0x24000004
 8003040:	24000000 	.word	0x24000000

08003044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003048:	f7ff ffcc 	bl	8002fe4 <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4904      	ldr	r1, [pc, #16]	; (800306c <HAL_RCC_GetPCLK1Freq+0x28>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	58024400 	.word	0x58024400
 800306c:	0800689c 	.word	0x0800689c

08003070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003074:	f7ff ffb6 	bl	8002fe4 <HAL_RCC_GetHCLKFreq>
 8003078:	4602      	mov	r2, r0
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x24>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	4904      	ldr	r1, [pc, #16]	; (8003098 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	58024400 	.word	0x58024400
 8003098:	0800689c 	.word	0x0800689c

0800309c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800309c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a0:	b0ca      	sub	sp, #296	; 0x128
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030a8:	2300      	movs	r3, #0
 80030aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030ae:	2300      	movs	r3, #0
 80030b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80030c0:	2500      	movs	r5, #0
 80030c2:	ea54 0305 	orrs.w	r3, r4, r5
 80030c6:	d049      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80030c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030d2:	d02f      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80030d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030d8:	d828      	bhi.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80030da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030de:	d01a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030e4:	d822      	bhi.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80030ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ee:	d007      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030f0:	e01c      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030f2:	4bb8      	ldr	r3, [pc, #736]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	4ab7      	ldr	r2, [pc, #732]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030fe:	e01a      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003104:	3308      	adds	r3, #8
 8003106:	2102      	movs	r1, #2
 8003108:	4618      	mov	r0, r3
 800310a:	f001 fc8f 	bl	8004a2c <RCCEx_PLL2_Config>
 800310e:	4603      	mov	r3, r0
 8003110:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003114:	e00f      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800311a:	3328      	adds	r3, #40	; 0x28
 800311c:	2102      	movs	r1, #2
 800311e:	4618      	mov	r0, r3
 8003120:	f001 fd36 	bl	8004b90 <RCCEx_PLL3_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800312a:	e004      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003132:	e000      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800313e:	4ba5      	ldr	r3, [pc, #660]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003142:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800314a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800314c:	4aa1      	ldr	r2, [pc, #644]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800314e:	430b      	orrs	r3, r1
 8003150:	6513      	str	r3, [r2, #80]	; 0x50
 8003152:	e003      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003154:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003158:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800315c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003164:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003168:	f04f 0900 	mov.w	r9, #0
 800316c:	ea58 0309 	orrs.w	r3, r8, r9
 8003170:	d047      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	2b04      	cmp	r3, #4
 800317a:	d82a      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800317c:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800317e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003182:	bf00      	nop
 8003184:	08003199 	.word	0x08003199
 8003188:	080031a7 	.word	0x080031a7
 800318c:	080031bd 	.word	0x080031bd
 8003190:	080031db 	.word	0x080031db
 8003194:	080031db 	.word	0x080031db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003198:	4b8e      	ldr	r3, [pc, #568]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	4a8d      	ldr	r2, [pc, #564]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800319e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031a4:	e01a      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031aa:	3308      	adds	r3, #8
 80031ac:	2100      	movs	r1, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	f001 fc3c 	bl	8004a2c <RCCEx_PLL2_Config>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031ba:	e00f      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031c0:	3328      	adds	r3, #40	; 0x28
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f001 fce3 	bl	8004b90 <RCCEx_PLL3_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031d0:	e004      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031d8:	e000      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80031da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10a      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031e4:	4b7b      	ldr	r3, [pc, #492]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e8:	f023 0107 	bic.w	r1, r3, #7
 80031ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f2:	4a78      	ldr	r2, [pc, #480]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031f4:	430b      	orrs	r3, r1
 80031f6:	6513      	str	r3, [r2, #80]	; 0x50
 80031f8:	e003      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800320e:	f04f 0b00 	mov.w	fp, #0
 8003212:	ea5a 030b 	orrs.w	r3, sl, fp
 8003216:	d04c      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800321c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003222:	d030      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003228:	d829      	bhi.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800322a:	2bc0      	cmp	r3, #192	; 0xc0
 800322c:	d02d      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800322e:	2bc0      	cmp	r3, #192	; 0xc0
 8003230:	d825      	bhi.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003232:	2b80      	cmp	r3, #128	; 0x80
 8003234:	d018      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003236:	2b80      	cmp	r3, #128	; 0x80
 8003238:	d821      	bhi.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800323e:	2b40      	cmp	r3, #64	; 0x40
 8003240:	d007      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003242:	e01c      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003244:	4b63      	ldr	r3, [pc, #396]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	4a62      	ldr	r2, [pc, #392]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800324a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800324e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003250:	e01c      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003256:	3308      	adds	r3, #8
 8003258:	2100      	movs	r1, #0
 800325a:	4618      	mov	r0, r3
 800325c:	f001 fbe6 	bl	8004a2c <RCCEx_PLL2_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003266:	e011      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800326c:	3328      	adds	r3, #40	; 0x28
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f001 fc8d 	bl	8004b90 <RCCEx_PLL3_Config>
 8003276:	4603      	mov	r3, r0
 8003278:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800327c:	e006      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003284:	e002      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003286:	bf00      	nop
 8003288:	e000      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800328a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800328c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10a      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003294:	4b4f      	ldr	r3, [pc, #316]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003298:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800329c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	4a4c      	ldr	r2, [pc, #304]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032a4:	430b      	orrs	r3, r1
 80032a6:	6513      	str	r3, [r2, #80]	; 0x50
 80032a8:	e003      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80032b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ba:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80032be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80032c2:	2300      	movs	r3, #0
 80032c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80032c8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80032cc:	460b      	mov	r3, r1
 80032ce:	4313      	orrs	r3, r2
 80032d0:	d053      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80032d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032de:	d035      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80032e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032e4:	d82e      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80032e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032ea:	d031      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80032ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032f0:	d828      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80032f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f6:	d01a      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80032f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032fc:	d822      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003306:	d007      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003308:	e01c      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800330a:	4b32      	ldr	r3, [pc, #200]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	4a31      	ldr	r2, [pc, #196]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003314:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003316:	e01c      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800331c:	3308      	adds	r3, #8
 800331e:	2100      	movs	r1, #0
 8003320:	4618      	mov	r0, r3
 8003322:	f001 fb83 	bl	8004a2c <RCCEx_PLL2_Config>
 8003326:	4603      	mov	r3, r0
 8003328:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800332c:	e011      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800332e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003332:	3328      	adds	r3, #40	; 0x28
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f001 fc2a 	bl	8004b90 <RCCEx_PLL3_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003342:	e006      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800334a:	e002      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800334c:	bf00      	nop
 800334e:	e000      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10b      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800335a:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003366:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800336a:	4a1a      	ldr	r2, [pc, #104]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800336c:	430b      	orrs	r3, r1
 800336e:	6593      	str	r3, [r2, #88]	; 0x58
 8003370:	e003      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003376:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800337a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003382:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003386:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800338a:	2300      	movs	r3, #0
 800338c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003390:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003394:	460b      	mov	r3, r1
 8003396:	4313      	orrs	r3, r2
 8003398:	d056      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800339a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800339e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033a6:	d038      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80033a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033ac:	d831      	bhi.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033b2:	d034      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80033b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033b8:	d82b      	bhi.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033be:	d01d      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x360>
 80033c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033c4:	d825      	bhi.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d006      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80033ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80033d0:	e01f      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033d2:	bf00      	nop
 80033d4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033d8:	4ba2      	ldr	r3, [pc, #648]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	4aa1      	ldr	r2, [pc, #644]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033e4:	e01c      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ea:	3308      	adds	r3, #8
 80033ec:	2100      	movs	r1, #0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f001 fb1c 	bl	8004a2c <RCCEx_PLL2_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80033fa:	e011      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003400:	3328      	adds	r3, #40	; 0x28
 8003402:	2100      	movs	r1, #0
 8003404:	4618      	mov	r0, r3
 8003406:	f001 fbc3 	bl	8004b90 <RCCEx_PLL3_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003410:	e006      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003418:	e002      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800341a:	bf00      	nop
 800341c:	e000      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800341e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003420:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10b      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003428:	4b8e      	ldr	r3, [pc, #568]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003434:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003438:	4a8a      	ldr	r2, [pc, #552]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800343a:	430b      	orrs	r3, r1
 800343c:	6593      	str	r3, [r2, #88]	; 0x58
 800343e:	e003      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003444:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003450:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003454:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003458:	2300      	movs	r3, #0
 800345a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800345e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003462:	460b      	mov	r3, r1
 8003464:	4313      	orrs	r3, r2
 8003466:	d03a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800346c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346e:	2b30      	cmp	r3, #48	; 0x30
 8003470:	d01f      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003472:	2b30      	cmp	r3, #48	; 0x30
 8003474:	d819      	bhi.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003476:	2b20      	cmp	r3, #32
 8003478:	d00c      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800347a:	2b20      	cmp	r3, #32
 800347c:	d815      	bhi.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800347e:	2b00      	cmp	r3, #0
 8003480:	d019      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003482:	2b10      	cmp	r3, #16
 8003484:	d111      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003486:	4b77      	ldr	r3, [pc, #476]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	4a76      	ldr	r2, [pc, #472]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800348c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003490:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003492:	e011      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003498:	3308      	adds	r3, #8
 800349a:	2102      	movs	r1, #2
 800349c:	4618      	mov	r0, r3
 800349e:	f001 fac5 	bl	8004a2c <RCCEx_PLL2_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80034a8:	e006      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034b0:	e002      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80034b2:	bf00      	nop
 80034b4:	e000      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80034b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10a      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80034c0:	4b68      	ldr	r3, [pc, #416]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80034c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ce:	4a65      	ldr	r2, [pc, #404]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034d0:	430b      	orrs	r3, r1
 80034d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034d4:	e003      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80034de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80034ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80034ee:	2300      	movs	r3, #0
 80034f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80034f4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4313      	orrs	r3, r2
 80034fc:	d051      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80034fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003504:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003508:	d035      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800350a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800350e:	d82e      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003510:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003514:	d031      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003516:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800351a:	d828      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800351c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003520:	d01a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003526:	d822      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800352c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003530:	d007      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003532:	e01c      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003534:	4b4b      	ldr	r3, [pc, #300]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	4a4a      	ldr	r2, [pc, #296]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800353a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800353e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003540:	e01c      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003546:	3308      	adds	r3, #8
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f001 fa6e 	bl	8004a2c <RCCEx_PLL2_Config>
 8003550:	4603      	mov	r3, r0
 8003552:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003556:	e011      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800355c:	3328      	adds	r3, #40	; 0x28
 800355e:	2100      	movs	r1, #0
 8003560:	4618      	mov	r0, r3
 8003562:	f001 fb15 	bl	8004b90 <RCCEx_PLL3_Config>
 8003566:	4603      	mov	r3, r0
 8003568:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800356c:	e006      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003574:	e002      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003576:	bf00      	nop
 8003578:	e000      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800357a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800357c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003584:	4b37      	ldr	r3, [pc, #220]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003588:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800358c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003592:	4a34      	ldr	r2, [pc, #208]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003594:	430b      	orrs	r3, r1
 8003596:	6513      	str	r3, [r2, #80]	; 0x50
 8003598:	e003      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800359e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035aa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80035ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035b2:	2300      	movs	r3, #0
 80035b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80035b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80035bc:	460b      	mov	r3, r1
 80035be:	4313      	orrs	r3, r2
 80035c0:	d056      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80035c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035cc:	d033      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80035ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d2:	d82c      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80035d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035d8:	d02f      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80035da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035de:	d826      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80035e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035e4:	d02b      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80035e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035ea:	d820      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80035ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035f0:	d012      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80035f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035f6:	d81a      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d022      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80035fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003600:	d115      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003606:	3308      	adds	r3, #8
 8003608:	2101      	movs	r1, #1
 800360a:	4618      	mov	r0, r3
 800360c:	f001 fa0e 	bl	8004a2c <RCCEx_PLL2_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003616:	e015      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800361c:	3328      	adds	r3, #40	; 0x28
 800361e:	2101      	movs	r1, #1
 8003620:	4618      	mov	r0, r3
 8003622:	f001 fab5 	bl	8004b90 <RCCEx_PLL3_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800362c:	e00a      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003634:	e006      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003636:	bf00      	nop
 8003638:	e004      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800363a:	bf00      	nop
 800363c:	e002      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800363e:	bf00      	nop
 8003640:	e000      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003644:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10d      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800364e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003650:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800365a:	4a02      	ldr	r2, [pc, #8]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800365c:	430b      	orrs	r3, r1
 800365e:	6513      	str	r3, [r2, #80]	; 0x50
 8003660:	e006      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003662:	bf00      	nop
 8003664:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003668:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800366c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800367c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003680:	2300      	movs	r3, #0
 8003682:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003686:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800368a:	460b      	mov	r3, r1
 800368c:	4313      	orrs	r3, r2
 800368e:	d055      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003694:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800369c:	d033      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800369e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036a2:	d82c      	bhi.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a8:	d02f      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80036aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ae:	d826      	bhi.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036b4:	d02b      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80036b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036ba:	d820      	bhi.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036c0:	d012      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80036c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036c6:	d81a      	bhi.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d022      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80036cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036d0:	d115      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d6:	3308      	adds	r3, #8
 80036d8:	2101      	movs	r1, #1
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 f9a6 	bl	8004a2c <RCCEx_PLL2_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036e6:	e015      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ec:	3328      	adds	r3, #40	; 0x28
 80036ee:	2101      	movs	r1, #1
 80036f0:	4618      	mov	r0, r3
 80036f2:	f001 fa4d 	bl	8004b90 <RCCEx_PLL3_Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036fc:	e00a      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003704:	e006      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003706:	bf00      	nop
 8003708:	e004      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800370a:	bf00      	nop
 800370c:	e002      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800370e:	bf00      	nop
 8003710:	e000      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003714:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10b      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800371c:	4ba3      	ldr	r3, [pc, #652]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800371e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003720:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003728:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800372c:	4a9f      	ldr	r2, [pc, #636]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800372e:	430b      	orrs	r3, r1
 8003730:	6593      	str	r3, [r2, #88]	; 0x58
 8003732:	e003      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003738:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800373c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003748:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800374c:	2300      	movs	r3, #0
 800374e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003752:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003756:	460b      	mov	r3, r1
 8003758:	4313      	orrs	r3, r2
 800375a:	d037      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800375c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003766:	d00e      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800376c:	d816      	bhi.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d018      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003772:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003776:	d111      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003778:	4b8c      	ldr	r3, [pc, #560]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	4a8b      	ldr	r2, [pc, #556]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800377e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003782:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003784:	e00f      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800378a:	3308      	adds	r3, #8
 800378c:	2101      	movs	r1, #1
 800378e:	4618      	mov	r0, r3
 8003790:	f001 f94c 	bl	8004a2c <RCCEx_PLL2_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800379a:	e004      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037a2:	e000      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80037a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10a      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037ae:	4b7f      	ldr	r3, [pc, #508]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80037b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037bc:	4a7b      	ldr	r2, [pc, #492]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037be:	430b      	orrs	r3, r1
 80037c0:	6513      	str	r3, [r2, #80]	; 0x50
 80037c2:	e003      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80037cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80037d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037dc:	2300      	movs	r3, #0
 80037de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80037e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4313      	orrs	r3, r2
 80037ea:	d039      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80037ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d81c      	bhi.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80037f6:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80037f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fc:	08003839 	.word	0x08003839
 8003800:	0800380d 	.word	0x0800380d
 8003804:	0800381b 	.word	0x0800381b
 8003808:	08003839 	.word	0x08003839
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800380c:	4b67      	ldr	r3, [pc, #412]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	4a66      	ldr	r2, [pc, #408]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003816:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003818:	e00f      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800381a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800381e:	3308      	adds	r3, #8
 8003820:	2102      	movs	r1, #2
 8003822:	4618      	mov	r0, r3
 8003824:	f001 f902 	bl	8004a2c <RCCEx_PLL2_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800382e:	e004      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003836:	e000      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800383a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003842:	4b5a      	ldr	r3, [pc, #360]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003846:	f023 0103 	bic.w	r1, r3, #3
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003850:	4a56      	ldr	r2, [pc, #344]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003852:	430b      	orrs	r3, r1
 8003854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003856:	e003      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003858:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800385c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003868:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800386c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003870:	2300      	movs	r3, #0
 8003872:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003876:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800387a:	460b      	mov	r3, r1
 800387c:	4313      	orrs	r3, r2
 800387e:	f000 809f 	beq.w	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003882:	4b4b      	ldr	r3, [pc, #300]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a4a      	ldr	r2, [pc, #296]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800388e:	f7fd fa87 	bl	8000da0 <HAL_GetTick>
 8003892:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003896:	e00b      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003898:	f7fd fa82 	bl	8000da0 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b64      	cmp	r3, #100	; 0x64
 80038a6:	d903      	bls.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038ae:	e005      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038b0:	4b3f      	ldr	r3, [pc, #252]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ed      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80038bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d179      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80038c4:	4b39      	ldr	r3, [pc, #228]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038d0:	4053      	eors	r3, r2
 80038d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d015      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038da:	4b34      	ldr	r3, [pc, #208]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038e6:	4b31      	ldr	r3, [pc, #196]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	4a30      	ldr	r2, [pc, #192]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038f2:	4b2e      	ldr	r3, [pc, #184]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	4a2d      	ldr	r2, [pc, #180]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80038fe:	4a2b      	ldr	r2, [pc, #172]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003900:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003904:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800390a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800390e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003912:	d118      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fd fa44 	bl	8000da0 <HAL_GetTick>
 8003918:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800391c:	e00d      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800391e:	f7fd fa3f 	bl	8000da0 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003928:	1ad2      	subs	r2, r2, r3
 800392a:	f241 3388 	movw	r3, #5000	; 0x1388
 800392e:	429a      	cmp	r2, r3
 8003930:	d903      	bls.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003938:	e005      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800393a:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0eb      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800394a:	2b00      	cmp	r3, #0
 800394c:	d129      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003952:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800395e:	d10e      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003960:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003970:	091a      	lsrs	r2, r3, #4
 8003972:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003974:	4013      	ands	r3, r2
 8003976:	4a0d      	ldr	r2, [pc, #52]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003978:	430b      	orrs	r3, r1
 800397a:	6113      	str	r3, [r2, #16]
 800397c:	e005      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003984:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003988:	6113      	str	r3, [r2, #16]
 800398a:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800398c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800398e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003992:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399a:	4a04      	ldr	r2, [pc, #16]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800399c:	430b      	orrs	r3, r1
 800399e:	6713      	str	r3, [r2, #112]	; 0x70
 80039a0:	e00e      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80039aa:	e009      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80039ac:	58024400 	.word	0x58024400
 80039b0:	58024800 	.word	0x58024800
 80039b4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80039c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	f002 0301 	and.w	r3, r2, #1
 80039cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039da:	460b      	mov	r3, r1
 80039dc:	4313      	orrs	r3, r2
 80039de:	f000 8089 	beq.w	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80039e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039e8:	2b28      	cmp	r3, #40	; 0x28
 80039ea:	d86b      	bhi.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80039ec:	a201      	add	r2, pc, #4	; (adr r2, 80039f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f2:	bf00      	nop
 80039f4:	08003acd 	.word	0x08003acd
 80039f8:	08003ac5 	.word	0x08003ac5
 80039fc:	08003ac5 	.word	0x08003ac5
 8003a00:	08003ac5 	.word	0x08003ac5
 8003a04:	08003ac5 	.word	0x08003ac5
 8003a08:	08003ac5 	.word	0x08003ac5
 8003a0c:	08003ac5 	.word	0x08003ac5
 8003a10:	08003ac5 	.word	0x08003ac5
 8003a14:	08003a99 	.word	0x08003a99
 8003a18:	08003ac5 	.word	0x08003ac5
 8003a1c:	08003ac5 	.word	0x08003ac5
 8003a20:	08003ac5 	.word	0x08003ac5
 8003a24:	08003ac5 	.word	0x08003ac5
 8003a28:	08003ac5 	.word	0x08003ac5
 8003a2c:	08003ac5 	.word	0x08003ac5
 8003a30:	08003ac5 	.word	0x08003ac5
 8003a34:	08003aaf 	.word	0x08003aaf
 8003a38:	08003ac5 	.word	0x08003ac5
 8003a3c:	08003ac5 	.word	0x08003ac5
 8003a40:	08003ac5 	.word	0x08003ac5
 8003a44:	08003ac5 	.word	0x08003ac5
 8003a48:	08003ac5 	.word	0x08003ac5
 8003a4c:	08003ac5 	.word	0x08003ac5
 8003a50:	08003ac5 	.word	0x08003ac5
 8003a54:	08003acd 	.word	0x08003acd
 8003a58:	08003ac5 	.word	0x08003ac5
 8003a5c:	08003ac5 	.word	0x08003ac5
 8003a60:	08003ac5 	.word	0x08003ac5
 8003a64:	08003ac5 	.word	0x08003ac5
 8003a68:	08003ac5 	.word	0x08003ac5
 8003a6c:	08003ac5 	.word	0x08003ac5
 8003a70:	08003ac5 	.word	0x08003ac5
 8003a74:	08003acd 	.word	0x08003acd
 8003a78:	08003ac5 	.word	0x08003ac5
 8003a7c:	08003ac5 	.word	0x08003ac5
 8003a80:	08003ac5 	.word	0x08003ac5
 8003a84:	08003ac5 	.word	0x08003ac5
 8003a88:	08003ac5 	.word	0x08003ac5
 8003a8c:	08003ac5 	.word	0x08003ac5
 8003a90:	08003ac5 	.word	0x08003ac5
 8003a94:	08003acd 	.word	0x08003acd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 ffc3 	bl	8004a2c <RCCEx_PLL2_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003aac:	e00f      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab2:	3328      	adds	r3, #40	; 0x28
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 f86a 	bl	8004b90 <RCCEx_PLL3_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ac2:	e004      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003aca:	e000      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ad6:	4bbf      	ldr	r3, [pc, #764]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ada:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ae4:	4abb      	ldr	r2, [pc, #748]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	6553      	str	r3, [r2, #84]	; 0x54
 8003aea:	e003      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003af0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afc:	f002 0302 	and.w	r3, r2, #2
 8003b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b04:	2300      	movs	r3, #0
 8003b06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b0a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4313      	orrs	r3, r2
 8003b12:	d041      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b1a:	2b05      	cmp	r3, #5
 8003b1c:	d824      	bhi.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003b1e:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b24:	08003b71 	.word	0x08003b71
 8003b28:	08003b3d 	.word	0x08003b3d
 8003b2c:	08003b53 	.word	0x08003b53
 8003b30:	08003b71 	.word	0x08003b71
 8003b34:	08003b71 	.word	0x08003b71
 8003b38:	08003b71 	.word	0x08003b71
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b40:	3308      	adds	r3, #8
 8003b42:	2101      	movs	r1, #1
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 ff71 	bl	8004a2c <RCCEx_PLL2_Config>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b50:	e00f      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b56:	3328      	adds	r3, #40	; 0x28
 8003b58:	2101      	movs	r1, #1
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f001 f818 	bl	8004b90 <RCCEx_PLL3_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b66:	e004      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b6e:	e000      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10a      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b7a:	4b96      	ldr	r3, [pc, #600]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	f023 0107 	bic.w	r1, r3, #7
 8003b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b88:	4a92      	ldr	r2, [pc, #584]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b8a:	430b      	orrs	r3, r1
 8003b8c:	6553      	str	r3, [r2, #84]	; 0x54
 8003b8e:	e003      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba0:	f002 0304 	and.w	r3, r2, #4
 8003ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	d044      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc0:	2b05      	cmp	r3, #5
 8003bc2:	d825      	bhi.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003bc4:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003c19 	.word	0x08003c19
 8003bd0:	08003be5 	.word	0x08003be5
 8003bd4:	08003bfb 	.word	0x08003bfb
 8003bd8:	08003c19 	.word	0x08003c19
 8003bdc:	08003c19 	.word	0x08003c19
 8003be0:	08003c19 	.word	0x08003c19
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be8:	3308      	adds	r3, #8
 8003bea:	2101      	movs	r1, #1
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 ff1d 	bl	8004a2c <RCCEx_PLL2_Config>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003bf8:	e00f      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfe:	3328      	adds	r3, #40	; 0x28
 8003c00:	2101      	movs	r1, #1
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 ffc4 	bl	8004b90 <RCCEx_PLL3_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c0e:	e004      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c16:	e000      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c22:	4b6c      	ldr	r3, [pc, #432]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c26:	f023 0107 	bic.w	r1, r3, #7
 8003c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c32:	4a68      	ldr	r2, [pc, #416]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c34:	430b      	orrs	r3, r1
 8003c36:	6593      	str	r3, [r2, #88]	; 0x58
 8003c38:	e003      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4a:	f002 0320 	and.w	r3, r2, #32
 8003c4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c52:	2300      	movs	r3, #0
 8003c54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	d055      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c6e:	d033      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c74:	d82c      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7a:	d02f      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c80:	d826      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c86:	d02b      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003c88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c8c:	d820      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c92:	d012      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c98:	d81a      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d022      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003c9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ca2:	d115      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca8:	3308      	adds	r3, #8
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 febd 	bl	8004a2c <RCCEx_PLL2_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003cb8:	e015      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cbe:	3328      	adds	r3, #40	; 0x28
 8003cc0:	2102      	movs	r1, #2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 ff64 	bl	8004b90 <RCCEx_PLL3_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cd6:	e006      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003cd8:	bf00      	nop
 8003cda:	e004      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003cdc:	bf00      	nop
 8003cde:	e002      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ce0:	bf00      	nop
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10b      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cee:	4b39      	ldr	r3, [pc, #228]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	4a35      	ldr	r2, [pc, #212]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d00:	430b      	orrs	r3, r1
 8003d02:	6553      	str	r3, [r2, #84]	; 0x54
 8003d04:	e003      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d16:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003d24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	d058      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d3a:	d033      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003d3c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d40:	d82c      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d46:	d02f      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	d826      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d52:	d02b      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003d54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d58:	d820      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5e:	d012      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d64:	d81a      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d022      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6e:	d115      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d74:	3308      	adds	r3, #8
 8003d76:	2100      	movs	r1, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fe57 	bl	8004a2c <RCCEx_PLL2_Config>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d84:	e015      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d8a:	3328      	adds	r3, #40	; 0x28
 8003d8c:	2102      	movs	r1, #2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fefe 	bl	8004b90 <RCCEx_PLL3_Config>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003da2:	e006      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003da4:	bf00      	nop
 8003da6:	e004      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003da8:	bf00      	nop
 8003daa:	e002      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003dac:	bf00      	nop
 8003dae:	e000      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10e      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbe:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dca:	4a02      	ldr	r2, [pc, #8]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	6593      	str	r3, [r2, #88]	; 0x58
 8003dd0:	e006      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003dd2:	bf00      	nop
 8003dd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ddc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003df0:	2300      	movs	r3, #0
 8003df2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003df6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	d055      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e08:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e0c:	d033      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003e0e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e12:	d82c      	bhi.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e18:	d02f      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1e:	d826      	bhi.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e20:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e24:	d02b      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003e26:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e2a:	d820      	bhi.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e30:	d012      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003e32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e36:	d81a      	bhi.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d022      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e40:	d115      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e46:	3308      	adds	r3, #8
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fdee 	bl	8004a2c <RCCEx_PLL2_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e56:	e015      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e5c:	3328      	adds	r3, #40	; 0x28
 8003e5e:	2102      	movs	r1, #2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fe95 	bl	8004b90 <RCCEx_PLL3_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e6c:	e00a      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e74:	e006      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e76:	bf00      	nop
 8003e78:	e004      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e7a:	bf00      	nop
 8003e7c:	e002      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e7e:	bf00      	nop
 8003e80:	e000      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10b      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e8c:	4ba1      	ldr	r3, [pc, #644]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e9c:	4a9d      	ldr	r2, [pc, #628]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ea2:	e003      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ea8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f002 0308 	and.w	r3, r2, #8
 8003eb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ec2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	d01e      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ede:	3328      	adds	r3, #40	; 0x28
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fe54 	bl	8004b90 <RCCEx_PLL3_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003ef4:	4b87      	ldr	r3, [pc, #540]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f04:	4a83      	ldr	r2, [pc, #524]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f06:	430b      	orrs	r3, r1
 8003f08:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f12:	f002 0310 	and.w	r3, r2, #16
 8003f16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003f20:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003f24:	460b      	mov	r3, r1
 8003f26:	4313      	orrs	r3, r2
 8003f28:	d01e      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f36:	d10c      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f3c:	3328      	adds	r3, #40	; 0x28
 8003f3e:	2102      	movs	r1, #2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fe25 	bl	8004b90 <RCCEx_PLL3_Config>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f52:	4b70      	ldr	r3, [pc, #448]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f62:	4a6c      	ldr	r2, [pc, #432]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f70:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f7e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003f82:	460b      	mov	r3, r1
 8003f84:	4313      	orrs	r3, r2
 8003f86:	d03e      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f94:	d022      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003f96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f9a:	d81b      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa4:	d00b      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003fa6:	e015      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fac:	3308      	adds	r3, #8
 8003fae:	2100      	movs	r1, #0
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fd3b 	bl	8004a2c <RCCEx_PLL2_Config>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003fbc:	e00f      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc2:	3328      	adds	r3, #40	; 0x28
 8003fc4:	2102      	movs	r1, #2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fde2 	bl	8004b90 <RCCEx_PLL3_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003fd2:	e004      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fda:	e000      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10b      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fe6:	4b4b      	ldr	r3, [pc, #300]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fea:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ff6:	4a47      	ldr	r2, [pc, #284]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8003ffc:	e003      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004002:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004012:	67bb      	str	r3, [r7, #120]	; 0x78
 8004014:	2300      	movs	r3, #0
 8004016:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004018:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800401c:	460b      	mov	r3, r1
 800401e:	4313      	orrs	r3, r2
 8004020:	d03b      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800402e:	d01f      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004030:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004034:	d818      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800403a:	d003      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800403c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004040:	d007      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004042:	e011      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004044:	4b33      	ldr	r3, [pc, #204]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	4a32      	ldr	r2, [pc, #200]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800404a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800404e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004050:	e00f      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004056:	3328      	adds	r3, #40	; 0x28
 8004058:	2101      	movs	r1, #1
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fd98 	bl	8004b90 <RCCEx_PLL3_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004066:	e004      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800406e:	e000      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004072:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10b      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800407a:	4b26      	ldr	r3, [pc, #152]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800407c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408a:	4a22      	ldr	r2, [pc, #136]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800408c:	430b      	orrs	r3, r1
 800408e:	6553      	str	r3, [r2, #84]	; 0x54
 8004090:	e003      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004092:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004096:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800409a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80040a6:	673b      	str	r3, [r7, #112]	; 0x70
 80040a8:	2300      	movs	r3, #0
 80040aa:	677b      	str	r3, [r7, #116]	; 0x74
 80040ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80040b0:	460b      	mov	r3, r1
 80040b2:	4313      	orrs	r3, r2
 80040b4:	d034      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80040b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80040c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c4:	d007      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80040c6:	e011      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c8:	4b12      	ldr	r3, [pc, #72]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	4a11      	ldr	r2, [pc, #68]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80040d4:	e00e      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040da:	3308      	adds	r3, #8
 80040dc:	2102      	movs	r1, #2
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fca4 	bl	8004a2c <RCCEx_PLL2_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80040ea:	e003      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10d      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040fc:	4b05      	ldr	r3, [pc, #20]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004100:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410a:	4a02      	ldr	r2, [pc, #8]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800410c:	430b      	orrs	r3, r1
 800410e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004110:	e006      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004112:	bf00      	nop
 8004114:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004118:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800411c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800412c:	66bb      	str	r3, [r7, #104]	; 0x68
 800412e:	2300      	movs	r3, #0
 8004130:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004132:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004136:	460b      	mov	r3, r1
 8004138:	4313      	orrs	r3, r2
 800413a:	d00c      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800413c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004140:	3328      	adds	r3, #40	; 0x28
 8004142:	2102      	movs	r1, #2
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fd23 	bl	8004b90 <RCCEx_PLL3_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004162:	663b      	str	r3, [r7, #96]	; 0x60
 8004164:	2300      	movs	r3, #0
 8004166:	667b      	str	r3, [r7, #100]	; 0x64
 8004168:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800416c:	460b      	mov	r3, r1
 800416e:	4313      	orrs	r3, r2
 8004170:	d038      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800417e:	d018      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004180:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004184:	d811      	bhi.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800418a:	d014      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800418c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004190:	d80b      	bhi.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d011      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800419a:	d106      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800419c:	4bc3      	ldr	r3, [pc, #780]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	4ac2      	ldr	r2, [pc, #776]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80041a8:	e008      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041b0:	e004      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80041b2:	bf00      	nop
 80041b4:	e002      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80041b6:	bf00      	nop
 80041b8:	e000      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80041ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10b      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041c4:	4bb9      	ldr	r3, [pc, #740]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041d4:	4ab5      	ldr	r2, [pc, #724]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041d6:	430b      	orrs	r3, r1
 80041d8:	6553      	str	r3, [r2, #84]	; 0x54
 80041da:	e003      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80041f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80041f2:	2300      	movs	r3, #0
 80041f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80041fa:	460b      	mov	r3, r1
 80041fc:	4313      	orrs	r3, r2
 80041fe:	d009      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004200:	4baa      	ldr	r3, [pc, #680]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004204:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800420c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420e:	4aa7      	ldr	r2, [pc, #668]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004210:	430b      	orrs	r3, r1
 8004212:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004220:	653b      	str	r3, [r7, #80]	; 0x50
 8004222:	2300      	movs	r3, #0
 8004224:	657b      	str	r3, [r7, #84]	; 0x54
 8004226:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800422a:	460b      	mov	r3, r1
 800422c:	4313      	orrs	r3, r2
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004230:	4b9e      	ldr	r3, [pc, #632]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800423c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004240:	4a9a      	ldr	r2, [pc, #616]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004242:	430b      	orrs	r3, r1
 8004244:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004252:	64bb      	str	r3, [r7, #72]	; 0x48
 8004254:	2300      	movs	r3, #0
 8004256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004258:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800425c:	460b      	mov	r3, r1
 800425e:	4313      	orrs	r3, r2
 8004260:	d009      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004262:	4b92      	ldr	r3, [pc, #584]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004266:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800426a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800426e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004270:	4a8e      	ldr	r2, [pc, #568]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004272:	430b      	orrs	r3, r1
 8004274:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004282:	643b      	str	r3, [r7, #64]	; 0x40
 8004284:	2300      	movs	r3, #0
 8004286:	647b      	str	r3, [r7, #68]	; 0x44
 8004288:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800428c:	460b      	mov	r3, r1
 800428e:	4313      	orrs	r3, r2
 8004290:	d00e      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004292:	4b86      	ldr	r3, [pc, #536]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	4a85      	ldr	r2, [pc, #532]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004298:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800429c:	6113      	str	r3, [r2, #16]
 800429e:	4b83      	ldr	r3, [pc, #524]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042a0:	6919      	ldr	r1, [r3, #16]
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80042aa:	4a80      	ldr	r2, [pc, #512]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042ac:	430b      	orrs	r3, r1
 80042ae:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80042bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80042be:	2300      	movs	r3, #0
 80042c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80042c6:	460b      	mov	r3, r1
 80042c8:	4313      	orrs	r3, r2
 80042ca:	d009      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042cc:	4b77      	ldr	r3, [pc, #476]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80042d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042da:	4a74      	ldr	r2, [pc, #464]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042dc:	430b      	orrs	r3, r1
 80042de:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80042ec:	633b      	str	r3, [r7, #48]	; 0x30
 80042ee:	2300      	movs	r3, #0
 80042f0:	637b      	str	r3, [r7, #52]	; 0x34
 80042f2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80042f6:	460b      	mov	r3, r1
 80042f8:	4313      	orrs	r3, r2
 80042fa:	d00a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042fc:	4b6b      	ldr	r3, [pc, #428]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004300:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800430c:	4a67      	ldr	r2, [pc, #412]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800430e:	430b      	orrs	r3, r1
 8004310:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431a:	2100      	movs	r1, #0
 800431c:	62b9      	str	r1, [r7, #40]	; 0x28
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004324:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004328:	460b      	mov	r3, r1
 800432a:	4313      	orrs	r3, r2
 800432c:	d011      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004332:	3308      	adds	r3, #8
 8004334:	2100      	movs	r1, #0
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fb78 	bl	8004a2c <RCCEx_PLL2_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004342:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800434e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	2100      	movs	r1, #0
 800435c:	6239      	str	r1, [r7, #32]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
 8004364:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004368:	460b      	mov	r3, r1
 800436a:	4313      	orrs	r3, r2
 800436c:	d011      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004372:	3308      	adds	r3, #8
 8004374:	2101      	movs	r1, #1
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fb58 	bl	8004a2c <RCCEx_PLL2_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004382:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800438e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	2100      	movs	r1, #0
 800439c:	61b9      	str	r1, [r7, #24]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80043a8:	460b      	mov	r3, r1
 80043aa:	4313      	orrs	r3, r2
 80043ac:	d011      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b2:	3308      	adds	r3, #8
 80043b4:	2102      	movs	r1, #2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fb38 	bl	8004a2c <RCCEx_PLL2_Config>
 80043bc:	4603      	mov	r3, r0
 80043be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80043c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043da:	2100      	movs	r1, #0
 80043dc:	6139      	str	r1, [r7, #16]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80043e8:	460b      	mov	r3, r1
 80043ea:	4313      	orrs	r3, r2
 80043ec:	d011      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f2:	3328      	adds	r3, #40	; 0x28
 80043f4:	2100      	movs	r1, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fbca 	bl	8004b90 <RCCEx_PLL3_Config>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800440e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441a:	2100      	movs	r1, #0
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004428:	460b      	mov	r3, r1
 800442a:	4313      	orrs	r3, r2
 800442c:	d011      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800442e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004432:	3328      	adds	r3, #40	; 0x28
 8004434:	2101      	movs	r1, #1
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fbaa 	bl	8004b90 <RCCEx_PLL3_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004442:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800444a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800444e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445a:	2100      	movs	r1, #0
 800445c:	6039      	str	r1, [r7, #0]
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	607b      	str	r3, [r7, #4]
 8004464:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004468:	460b      	mov	r3, r1
 800446a:	4313      	orrs	r3, r2
 800446c:	d011      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800446e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004472:	3328      	adds	r3, #40	; 0x28
 8004474:	2102      	movs	r1, #2
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fb8a 	bl	8004b90 <RCCEx_PLL3_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004482:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800448e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004492:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	e000      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80044a6:	46bd      	mov	sp, r7
 80044a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ac:	58024400 	.word	0x58024400

080044b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80044b4:	f7fe fd96 	bl	8002fe4 <HAL_RCC_GetHCLKFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	091b      	lsrs	r3, r3, #4
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	4904      	ldr	r1, [pc, #16]	; (80044d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	58024400 	.word	0x58024400
 80044d8:	0800689c 	.word	0x0800689c

080044dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80044dc:	b480      	push	{r7}
 80044de:	b089      	sub	sp, #36	; 0x24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044e4:	4ba1      	ldr	r3, [pc, #644]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80044ee:	4b9f      	ldr	r3, [pc, #636]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	0b1b      	lsrs	r3, r3, #12
 80044f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80044fa:	4b9c      	ldr	r3, [pc, #624]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	091b      	lsrs	r3, r3, #4
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004506:	4b99      	ldr	r3, [pc, #612]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450a:	08db      	lsrs	r3, r3, #3
 800450c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	fb02 f303 	mul.w	r3, r2, r3
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8111 	beq.w	800474c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b02      	cmp	r3, #2
 800452e:	f000 8083 	beq.w	8004638 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b02      	cmp	r3, #2
 8004536:	f200 80a1 	bhi.w	800467c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d056      	beq.n	80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004546:	e099      	b.n	800467c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004548:	4b88      	ldr	r3, [pc, #544]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d02d      	beq.n	80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004554:	4b85      	ldr	r3, [pc, #532]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	08db      	lsrs	r3, r3, #3
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	4a84      	ldr	r2, [pc, #528]	; (8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
 8004564:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	ee07 3a90 	vmov	s15, r3
 800456c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457e:	4b7b      	ldr	r3, [pc, #492]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004592:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80045ae:	e087      	b.n	80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80045be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c2:	4b6a      	ldr	r3, [pc, #424]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045f2:	e065      	b.n	80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800477c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004606:	4b59      	ldr	r3, [pc, #356]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004616:	ed97 6a03 	vldr	s12, [r7, #12]
 800461a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800461e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800462a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004632:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004636:	e043      	b.n	80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004642:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464a:	4b48      	ldr	r3, [pc, #288]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465a:	ed97 6a03 	vldr	s12, [r7, #12]
 800465e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800466e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004676:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800467a:	e021      	b.n	80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004686:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800477c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800468a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468e:	4b37      	ldr	r3, [pc, #220]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469e:	ed97 6a03 	vldr	s12, [r7, #12]
 80046a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80046c0:	4b2a      	ldr	r3, [pc, #168]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	0a5b      	lsrs	r3, r3, #9
 80046c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046da:	edd7 6a07 	vldr	s13, [r7, #28]
 80046de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e6:	ee17 2a90 	vmov	r2, s15
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80046ee:	4b1f      	ldr	r3, [pc, #124]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	0c1b      	lsrs	r3, r3, #16
 80046f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f8:	ee07 3a90 	vmov	s15, r3
 80046fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004700:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004704:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004708:	edd7 6a07 	vldr	s13, [r7, #28]
 800470c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004714:	ee17 2a90 	vmov	r2, s15
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800471c:	4b13      	ldr	r3, [pc, #76]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	0e1b      	lsrs	r3, r3, #24
 8004722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004732:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004736:	edd7 6a07 	vldr	s13, [r7, #28]
 800473a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800473e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004742:	ee17 2a90 	vmov	r2, s15
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800474a:	e008      	b.n	800475e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	609a      	str	r2, [r3, #8]
}
 800475e:	bf00      	nop
 8004760:	3724      	adds	r7, #36	; 0x24
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	58024400 	.word	0x58024400
 8004770:	03d09000 	.word	0x03d09000
 8004774:	46000000 	.word	0x46000000
 8004778:	4c742400 	.word	0x4c742400
 800477c:	4a742400 	.word	0x4a742400
 8004780:	4bbebc20 	.word	0x4bbebc20

08004784 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004784:	b480      	push	{r7}
 8004786:	b089      	sub	sp, #36	; 0x24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800478c:	4ba1      	ldr	r3, [pc, #644]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004796:	4b9f      	ldr	r3, [pc, #636]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479a:	0d1b      	lsrs	r3, r3, #20
 800479c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80047a2:	4b9c      	ldr	r3, [pc, #624]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	0a1b      	lsrs	r3, r3, #8
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80047ae:	4b99      	ldr	r3, [pc, #612]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	08db      	lsrs	r3, r3, #3
 80047b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	fb02 f303 	mul.w	r3, r2, r3
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8111 	beq.w	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	f000 8083 	beq.w	80048e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b02      	cmp	r3, #2
 80047de:	f200 80a1 	bhi.w	8004924 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d056      	beq.n	800489c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80047ee:	e099      	b.n	8004924 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047f0:	4b88      	ldr	r3, [pc, #544]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d02d      	beq.n	8004858 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047fc:	4b85      	ldr	r3, [pc, #532]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	08db      	lsrs	r3, r3, #3
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	4a84      	ldr	r2, [pc, #528]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
 800480c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	ee07 3a90 	vmov	s15, r3
 8004814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004826:	4b7b      	ldr	r3, [pc, #492]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004836:	ed97 6a03 	vldr	s12, [r7, #12]
 800483a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800483e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800484a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800484e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004852:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004856:	e087      	b.n	8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486a:	4b6a      	ldr	r3, [pc, #424]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487a:	ed97 6a03 	vldr	s12, [r7, #12]
 800487e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800488e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800489a:	e065      	b.n	8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ae:	4b59      	ldr	r3, [pc, #356]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048be:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048de:	e043      	b.n	8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80048ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f2:	4b48      	ldr	r3, [pc, #288]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004902:	ed97 6a03 	vldr	s12, [r7, #12]
 8004906:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800490a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004922:	e021      	b.n	8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004936:	4b37      	ldr	r3, [pc, #220]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004946:	ed97 6a03 	vldr	s12, [r7, #12]
 800494a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800494e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800495a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004966:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004968:	4b2a      	ldr	r3, [pc, #168]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	0a5b      	lsrs	r3, r3, #9
 800496e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800497e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004982:	edd7 6a07 	vldr	s13, [r7, #28]
 8004986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800498e:	ee17 2a90 	vmov	r2, s15
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004996:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	0c1b      	lsrs	r3, r3, #16
 800499c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a0:	ee07 3a90 	vmov	s15, r3
 80049a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80049b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049bc:	ee17 2a90 	vmov	r2, s15
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80049c4:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	0e1b      	lsrs	r3, r3, #24
 80049ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ce:	ee07 3a90 	vmov	s15, r3
 80049d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049de:	edd7 6a07 	vldr	s13, [r7, #28]
 80049e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ea:	ee17 2a90 	vmov	r2, s15
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80049f2:	e008      	b.n	8004a06 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	609a      	str	r2, [r3, #8]
}
 8004a06:	bf00      	nop
 8004a08:	3724      	adds	r7, #36	; 0x24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	58024400 	.word	0x58024400
 8004a18:	03d09000 	.word	0x03d09000
 8004a1c:	46000000 	.word	0x46000000
 8004a20:	4c742400 	.word	0x4c742400
 8004a24:	4a742400 	.word	0x4a742400
 8004a28:	4bbebc20 	.word	0x4bbebc20

08004a2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a3a:	4b53      	ldr	r3, [pc, #332]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d101      	bne.n	8004a4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e099      	b.n	8004b7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a4a:	4b4f      	ldr	r3, [pc, #316]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a4e      	ldr	r2, [pc, #312]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004a50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a56:	f7fc f9a3 	bl	8000da0 <HAL_GetTick>
 8004a5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a5c:	e008      	b.n	8004a70 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a5e:	f7fc f99f 	bl	8000da0 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e086      	b.n	8004b7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a70:	4b45      	ldr	r3, [pc, #276]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a7c:	4b42      	ldr	r3, [pc, #264]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	031b      	lsls	r3, r3, #12
 8004a8a:	493f      	ldr	r1, [pc, #252]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	628b      	str	r3, [r1, #40]	; 0x28
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	025b      	lsls	r3, r3, #9
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	041b      	lsls	r3, r3, #16
 8004aae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	061b      	lsls	r3, r3, #24
 8004abc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ac0:	4931      	ldr	r1, [pc, #196]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ac6:	4b30      	ldr	r3, [pc, #192]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	492d      	ldr	r1, [pc, #180]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ad8:	4b2b      	ldr	r3, [pc, #172]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	f023 0220 	bic.w	r2, r3, #32
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	4928      	ldr	r1, [pc, #160]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004aea:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	4a26      	ldr	r2, [pc, #152]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004af0:	f023 0310 	bic.w	r3, r3, #16
 8004af4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004af6:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004af8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004afa:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <RCCEx_PLL2_Config+0x160>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	69d2      	ldr	r2, [r2, #28]
 8004b02:	00d2      	lsls	r2, r2, #3
 8004b04:	4920      	ldr	r1, [pc, #128]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b0a:	4b1f      	ldr	r3, [pc, #124]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	4a1e      	ldr	r2, [pc, #120]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b10:	f043 0310 	orr.w	r3, r3, #16
 8004b14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b1c:	4b1a      	ldr	r3, [pc, #104]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	4a19      	ldr	r2, [pc, #100]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b28:	e00f      	b.n	8004b4a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d106      	bne.n	8004b3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b30:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	4a14      	ldr	r2, [pc, #80]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b3c:	e005      	b.n	8004b4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b3e:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	4a11      	ldr	r2, [pc, #68]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b4a:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a0e      	ldr	r2, [pc, #56]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b56:	f7fc f923 	bl	8000da0 <HAL_GetTick>
 8004b5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b5c:	e008      	b.n	8004b70 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b5e:	f7fc f91f 	bl	8000da0 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e006      	b.n	8004b7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	58024400 	.word	0x58024400
 8004b8c:	ffff0007 	.word	0xffff0007

08004b90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b9e:	4b53      	ldr	r3, [pc, #332]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d101      	bne.n	8004bae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e099      	b.n	8004ce2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004bae:	4b4f      	ldr	r3, [pc, #316]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a4e      	ldr	r2, [pc, #312]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bba:	f7fc f8f1 	bl	8000da0 <HAL_GetTick>
 8004bbe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bc0:	e008      	b.n	8004bd4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004bc2:	f7fc f8ed 	bl	8000da0 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e086      	b.n	8004ce2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bd4:	4b45      	ldr	r3, [pc, #276]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1f0      	bne.n	8004bc2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004be0:	4b42      	ldr	r3, [pc, #264]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	051b      	lsls	r3, r3, #20
 8004bee:	493f      	ldr	r1, [pc, #252]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	628b      	str	r3, [r1, #40]	; 0x28
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	025b      	lsls	r3, r3, #9
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	041b      	lsls	r3, r3, #16
 8004c12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	061b      	lsls	r3, r3, #24
 8004c20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c24:	4931      	ldr	r1, [pc, #196]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c2a:	4b30      	ldr	r3, [pc, #192]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	492d      	ldr	r1, [pc, #180]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c3c:	4b2b      	ldr	r3, [pc, #172]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	4928      	ldr	r1, [pc, #160]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c4e:	4b27      	ldr	r3, [pc, #156]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	4a26      	ldr	r2, [pc, #152]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c5a:	4b24      	ldr	r3, [pc, #144]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c5e:	4b24      	ldr	r3, [pc, #144]	; (8004cf0 <RCCEx_PLL3_Config+0x160>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	69d2      	ldr	r2, [r2, #28]
 8004c66:	00d2      	lsls	r2, r2, #3
 8004c68:	4920      	ldr	r1, [pc, #128]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c6e:	4b1f      	ldr	r3, [pc, #124]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	4a1e      	ldr	r2, [pc, #120]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d106      	bne.n	8004c8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c80:	4b1a      	ldr	r3, [pc, #104]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	4a19      	ldr	r2, [pc, #100]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c8c:	e00f      	b.n	8004cae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d106      	bne.n	8004ca2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c94:	4b15      	ldr	r3, [pc, #84]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	4a14      	ldr	r2, [pc, #80]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ca0:	e005      	b.n	8004cae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ca2:	4b12      	ldr	r3, [pc, #72]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	4a11      	ldr	r2, [pc, #68]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004ca8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004cae:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a0e      	ldr	r2, [pc, #56]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cba:	f7fc f871 	bl	8000da0 <HAL_GetTick>
 8004cbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cc0:	e008      	b.n	8004cd4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004cc2:	f7fc f86d 	bl	8000da0 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e006      	b.n	8004ce2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cd4:	4b05      	ldr	r3, [pc, #20]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	58024400 	.word	0x58024400
 8004cf0:	ffff0007 	.word	0xffff0007

08004cf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e042      	b.n	8004d8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d106      	bne.n	8004d1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7fb fef9 	bl	8000b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2224      	movs	r2, #36	; 0x24
 8004d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0201 	bic.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fc94 	bl	8005664 <UART_SetConfig>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e022      	b.n	8004d8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f001 f9f0 	bl	8006134 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f001 fa77 	bl	8006278 <UART_CheckIdleState>
 8004d8a:	4603      	mov	r3, r0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08a      	sub	sp, #40	; 0x28
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	4613      	mov	r3, r2
 8004da2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	d17b      	bne.n	8004ea6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_UART_Transmit+0x26>
 8004db4:	88fb      	ldrh	r3, [r7, #6]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e074      	b.n	8004ea8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2221      	movs	r2, #33	; 0x21
 8004dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dce:	f7fb ffe7 	bl	8000da0 <HAL_GetTick>
 8004dd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	88fa      	ldrh	r2, [r7, #6]
 8004dd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dec:	d108      	bne.n	8004e00 <HAL_UART_Transmit+0x6c>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d104      	bne.n	8004e00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	e003      	b.n	8004e08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e08:	e030      	b.n	8004e6c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2200      	movs	r2, #0
 8004e12:	2180      	movs	r1, #128	; 0x80
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f001 fad9 	bl	80063cc <UART_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e03d      	b.n	8004ea8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10b      	bne.n	8004e4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	3302      	adds	r3, #2
 8004e46:	61bb      	str	r3, [r7, #24]
 8004e48:	e007      	b.n	8004e5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	781a      	ldrb	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	3301      	adds	r3, #1
 8004e58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1c8      	bne.n	8004e0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2140      	movs	r1, #64	; 0x40
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f001 faa2 	bl	80063cc <UART_WaitOnFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d005      	beq.n	8004e9a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e006      	b.n	8004ea8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e000      	b.n	8004ea8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004ea6:	2302      	movs	r3, #2
  }
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b0ba      	sub	sp, #232	; 0xe8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ed6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004eda:	f640 030f 	movw	r3, #2063	; 0x80f
 8004ede:	4013      	ands	r3, r2
 8004ee0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ee4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d11b      	bne.n	8004f24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d015      	beq.n	8004f24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d105      	bne.n	8004f10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d009      	beq.n	8004f24 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 8377 	beq.w	8005608 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
      }
      return;
 8004f22:	e371      	b.n	8005608 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 8123 	beq.w	8005174 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004f2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004f32:	4b8d      	ldr	r3, [pc, #564]	; (8005168 <HAL_UART_IRQHandler+0x2b8>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004f3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f3e:	4b8b      	ldr	r3, [pc, #556]	; (800516c <HAL_UART_IRQHandler+0x2bc>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 8116 	beq.w	8005174 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d011      	beq.n	8004f78 <HAL_UART_IRQHandler+0xc8>
 8004f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00b      	beq.n	8004f78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2201      	movs	r2, #1
 8004f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6e:	f043 0201 	orr.w	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d011      	beq.n	8004fa8 <HAL_UART_IRQHandler+0xf8>
 8004f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00b      	beq.n	8004fa8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2202      	movs	r2, #2
 8004f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9e:	f043 0204 	orr.w	r2, r3, #4
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d011      	beq.n	8004fd8 <HAL_UART_IRQHandler+0x128>
 8004fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00b      	beq.n	8004fd8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fce:	f043 0202 	orr.w	r2, r3, #2
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fdc:	f003 0308 	and.w	r3, r3, #8
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d017      	beq.n	8005014 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d105      	bne.n	8004ffc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004ff0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004ff4:	4b5c      	ldr	r3, [pc, #368]	; (8005168 <HAL_UART_IRQHandler+0x2b8>)
 8004ff6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00b      	beq.n	8005014 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2208      	movs	r2, #8
 8005002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500a:	f043 0208 	orr.w	r2, r3, #8
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800501c:	2b00      	cmp	r3, #0
 800501e:	d012      	beq.n	8005046 <HAL_UART_IRQHandler+0x196>
 8005020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005024:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00c      	beq.n	8005046 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005034:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503c:	f043 0220 	orr.w	r2, r3, #32
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 82dd 	beq.w	800560c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d013      	beq.n	8005086 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800505e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d105      	bne.n	8005076 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800506a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800506e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	2b40      	cmp	r3, #64	; 0x40
 800509c:	d005      	beq.n	80050aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800509e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d054      	beq.n	8005154 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f001 f9f6 	bl	800649c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ba:	2b40      	cmp	r3, #64	; 0x40
 80050bc:	d146      	bne.n	800514c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3308      	adds	r3, #8
 80050c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3308      	adds	r3, #8
 80050e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1d9      	bne.n	80050be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005110:	2b00      	cmp	r3, #0
 8005112:	d017      	beq.n	8005144 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800511a:	4a15      	ldr	r2, [pc, #84]	; (8005170 <HAL_UART_IRQHandler+0x2c0>)
 800511c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005124:	4618      	mov	r0, r3
 8005126:	f7fc fb21 	bl	800176c <HAL_DMA_Abort_IT>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d019      	beq.n	8005164 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800513e:	4610      	mov	r0, r2
 8005140:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005142:	e00f      	b.n	8005164 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fa77 	bl	8005638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514a:	e00b      	b.n	8005164 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fa73 	bl	8005638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005152:	e007      	b.n	8005164 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fa6f 	bl	8005638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005162:	e253      	b.n	800560c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005164:	bf00      	nop
    return;
 8005166:	e251      	b.n	800560c <HAL_UART_IRQHandler+0x75c>
 8005168:	10000001 	.word	0x10000001
 800516c:	04000120 	.word	0x04000120
 8005170:	08006569 	.word	0x08006569

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005178:	2b01      	cmp	r3, #1
 800517a:	f040 81e7 	bne.w	800554c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800517e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005182:	f003 0310 	and.w	r3, r3, #16
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 81e0 	beq.w	800554c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800518c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 81d9 	beq.w	800554c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2210      	movs	r2, #16
 80051a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ac:	2b40      	cmp	r3, #64	; 0x40
 80051ae:	f040 8151 	bne.w	8005454 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a96      	ldr	r2, [pc, #600]	; (8005414 <HAL_UART_IRQHandler+0x564>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d068      	beq.n	8005292 <HAL_UART_IRQHandler+0x3e2>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a93      	ldr	r2, [pc, #588]	; (8005418 <HAL_UART_IRQHandler+0x568>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d061      	beq.n	8005292 <HAL_UART_IRQHandler+0x3e2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a91      	ldr	r2, [pc, #580]	; (800541c <HAL_UART_IRQHandler+0x56c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d05a      	beq.n	8005292 <HAL_UART_IRQHandler+0x3e2>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a8e      	ldr	r2, [pc, #568]	; (8005420 <HAL_UART_IRQHandler+0x570>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d053      	beq.n	8005292 <HAL_UART_IRQHandler+0x3e2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a8c      	ldr	r2, [pc, #560]	; (8005424 <HAL_UART_IRQHandler+0x574>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d04c      	beq.n	8005292 <HAL_UART_IRQHandler+0x3e2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a89      	ldr	r2, [pc, #548]	; (8005428 <HAL_UART_IRQHandler+0x578>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d045      	beq.n	8005292 <HAL_UART_IRQHandler+0x3e2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a87      	ldr	r2, [pc, #540]	; (800542c <HAL_UART_IRQHandler+0x57c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d03e      	beq.n	8005292 <HAL_UART_IRQHandler+0x3e2>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a84      	ldr	r2, [pc, #528]	; (8005430 <HAL_UART_IRQHandler+0x580>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d037      	beq.n	8005292 <HAL_UART_IRQHandler+0x3e2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a82      	ldr	r2, [pc, #520]	; (8005434 <HAL_UART_IRQHandler+0x584>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d030      	beq.n	8005292 <HAL_UART_IRQHandler+0x3e2>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a7f      	ldr	r2, [pc, #508]	; (8005438 <HAL_UART_IRQHandler+0x588>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d029      	beq.n	8005292 <HAL_UART_IRQHandler+0x3e2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a7d      	ldr	r2, [pc, #500]	; (800543c <HAL_UART_IRQHandler+0x58c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d022      	beq.n	8005292 <HAL_UART_IRQHandler+0x3e2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a7a      	ldr	r2, [pc, #488]	; (8005440 <HAL_UART_IRQHandler+0x590>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d01b      	beq.n	8005292 <HAL_UART_IRQHandler+0x3e2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a78      	ldr	r2, [pc, #480]	; (8005444 <HAL_UART_IRQHandler+0x594>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d014      	beq.n	8005292 <HAL_UART_IRQHandler+0x3e2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a75      	ldr	r2, [pc, #468]	; (8005448 <HAL_UART_IRQHandler+0x598>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00d      	beq.n	8005292 <HAL_UART_IRQHandler+0x3e2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a73      	ldr	r2, [pc, #460]	; (800544c <HAL_UART_IRQHandler+0x59c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d006      	beq.n	8005292 <HAL_UART_IRQHandler+0x3e2>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a70      	ldr	r2, [pc, #448]	; (8005450 <HAL_UART_IRQHandler+0x5a0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d106      	bne.n	80052a0 <HAL_UART_IRQHandler+0x3f0>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	b29b      	uxth	r3, r3
 800529e:	e005      	b.n	80052ac <HAL_UART_IRQHandler+0x3fc>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 81ab 	beq.w	8005610 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052c4:	429a      	cmp	r2, r3
 80052c6:	f080 81a3 	bcs.w	8005610 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e0:	f000 8087 	beq.w	80053f2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005300:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800530e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005312:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800531a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800531e:	e841 2300 	strex	r3, r2, [r1]
 8005322:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005326:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1da      	bne.n	80052e4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3308      	adds	r3, #8
 8005334:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800533e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005340:	f023 0301 	bic.w	r3, r3, #1
 8005344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3308      	adds	r3, #8
 800534e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005352:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005356:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800535a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e1      	bne.n	800532e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3308      	adds	r3, #8
 8005370:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005374:	e853 3f00 	ldrex	r3, [r3]
 8005378:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800537a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800537c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3308      	adds	r3, #8
 800538a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800538e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005390:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005394:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800539c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e3      	bne.n	800536a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c0:	f023 0310 	bic.w	r3, r3, #16
 80053c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80053d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e4      	bne.n	80053b0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fb fe9f 	bl	8001130 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2202      	movs	r2, #2
 80053f6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005404:	b29b      	uxth	r3, r3
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	b29b      	uxth	r3, r3
 800540a:	4619      	mov	r1, r3
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f91d 	bl	800564c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005412:	e0fd      	b.n	8005610 <HAL_UART_IRQHandler+0x760>
 8005414:	40020010 	.word	0x40020010
 8005418:	40020028 	.word	0x40020028
 800541c:	40020040 	.word	0x40020040
 8005420:	40020058 	.word	0x40020058
 8005424:	40020070 	.word	0x40020070
 8005428:	40020088 	.word	0x40020088
 800542c:	400200a0 	.word	0x400200a0
 8005430:	400200b8 	.word	0x400200b8
 8005434:	40020410 	.word	0x40020410
 8005438:	40020428 	.word	0x40020428
 800543c:	40020440 	.word	0x40020440
 8005440:	40020458 	.word	0x40020458
 8005444:	40020470 	.word	0x40020470
 8005448:	40020488 	.word	0x40020488
 800544c:	400204a0 	.word	0x400204a0
 8005450:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005460:	b29b      	uxth	r3, r3
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 80cf 	beq.w	8005614 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8005476:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 80ca 	beq.w	8005614 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	e853 3f00 	ldrex	r3, [r3]
 800548c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800548e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005490:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005494:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80054a2:	647b      	str	r3, [r7, #68]	; 0x44
 80054a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054aa:	e841 2300 	strex	r3, r2, [r1]
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1e4      	bne.n	8005480 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3308      	adds	r3, #8
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	e853 3f00 	ldrex	r3, [r3]
 80054c4:	623b      	str	r3, [r7, #32]
   return(result);
 80054c6:	6a3a      	ldr	r2, [r7, #32]
 80054c8:	4b55      	ldr	r3, [pc, #340]	; (8005620 <HAL_UART_IRQHandler+0x770>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3308      	adds	r3, #8
 80054d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054da:	633a      	str	r2, [r7, #48]	; 0x30
 80054dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e3      	bne.n	80054b6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0310 	bic.w	r3, r3, #16
 8005516:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005524:	61fb      	str	r3, [r7, #28]
 8005526:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	69b9      	ldr	r1, [r7, #24]
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	617b      	str	r3, [r7, #20]
   return(result);
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e4      	bne.n	8005502 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800553e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f881 	bl	800564c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800554a:	e063      	b.n	8005614 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800554c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00e      	beq.n	8005576 <HAL_UART_IRQHandler+0x6c6>
 8005558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800555c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d008      	beq.n	8005576 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800556c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f001 f83b 	bl	80065ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005574:	e051      	b.n	800561a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557e:	2b00      	cmp	r3, #0
 8005580:	d014      	beq.n	80055ac <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558a:	2b00      	cmp	r3, #0
 800558c:	d105      	bne.n	800559a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800558e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005592:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d03a      	beq.n	8005618 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	4798      	blx	r3
    }
    return;
 80055aa:	e035      	b.n	8005618 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d009      	beq.n	80055cc <HAL_UART_IRQHandler+0x71c>
 80055b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 ffe5 	bl	8006594 <UART_EndTransmit_IT>
    return;
 80055ca:	e026      	b.n	800561a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80055cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d009      	beq.n	80055ec <HAL_UART_IRQHandler+0x73c>
 80055d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f001 f814 	bl	8006612 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055ea:	e016      	b.n	800561a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80055ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d010      	beq.n	800561a <HAL_UART_IRQHandler+0x76a>
 80055f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	da0c      	bge.n	800561a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fffc 	bl	80065fe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005606:	e008      	b.n	800561a <HAL_UART_IRQHandler+0x76a>
      return;
 8005608:	bf00      	nop
 800560a:	e006      	b.n	800561a <HAL_UART_IRQHandler+0x76a>
    return;
 800560c:	bf00      	nop
 800560e:	e004      	b.n	800561a <HAL_UART_IRQHandler+0x76a>
      return;
 8005610:	bf00      	nop
 8005612:	e002      	b.n	800561a <HAL_UART_IRQHandler+0x76a>
      return;
 8005614:	bf00      	nop
 8005616:	e000      	b.n	800561a <HAL_UART_IRQHandler+0x76a>
    return;
 8005618:	bf00      	nop
  }
}
 800561a:	37e8      	adds	r7, #232	; 0xe8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	effffffe 	.word	0xeffffffe

08005624 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005668:	b092      	sub	sp, #72	; 0x48
 800566a:	af00      	add	r7, sp, #0
 800566c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	431a      	orrs	r2, r3
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	431a      	orrs	r2, r3
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	4313      	orrs	r3, r2
 800568a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4bbe      	ldr	r3, [pc, #760]	; (800598c <UART_SetConfig+0x328>)
 8005694:	4013      	ands	r3, r2
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	6812      	ldr	r2, [r2, #0]
 800569a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800569c:	430b      	orrs	r3, r1
 800569e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4ab3      	ldr	r2, [pc, #716]	; (8005990 <UART_SetConfig+0x32c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056cc:	4313      	orrs	r3, r2
 80056ce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	4baf      	ldr	r3, [pc, #700]	; (8005994 <UART_SetConfig+0x330>)
 80056d8:	4013      	ands	r3, r2
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	6812      	ldr	r2, [r2, #0]
 80056de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056e0:	430b      	orrs	r3, r1
 80056e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ea:	f023 010f 	bic.w	r1, r3, #15
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4aa6      	ldr	r2, [pc, #664]	; (8005998 <UART_SetConfig+0x334>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d177      	bne.n	80057f4 <UART_SetConfig+0x190>
 8005704:	4ba5      	ldr	r3, [pc, #660]	; (800599c <UART_SetConfig+0x338>)
 8005706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005708:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800570c:	2b28      	cmp	r3, #40	; 0x28
 800570e:	d86d      	bhi.n	80057ec <UART_SetConfig+0x188>
 8005710:	a201      	add	r2, pc, #4	; (adr r2, 8005718 <UART_SetConfig+0xb4>)
 8005712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005716:	bf00      	nop
 8005718:	080057bd 	.word	0x080057bd
 800571c:	080057ed 	.word	0x080057ed
 8005720:	080057ed 	.word	0x080057ed
 8005724:	080057ed 	.word	0x080057ed
 8005728:	080057ed 	.word	0x080057ed
 800572c:	080057ed 	.word	0x080057ed
 8005730:	080057ed 	.word	0x080057ed
 8005734:	080057ed 	.word	0x080057ed
 8005738:	080057c5 	.word	0x080057c5
 800573c:	080057ed 	.word	0x080057ed
 8005740:	080057ed 	.word	0x080057ed
 8005744:	080057ed 	.word	0x080057ed
 8005748:	080057ed 	.word	0x080057ed
 800574c:	080057ed 	.word	0x080057ed
 8005750:	080057ed 	.word	0x080057ed
 8005754:	080057ed 	.word	0x080057ed
 8005758:	080057cd 	.word	0x080057cd
 800575c:	080057ed 	.word	0x080057ed
 8005760:	080057ed 	.word	0x080057ed
 8005764:	080057ed 	.word	0x080057ed
 8005768:	080057ed 	.word	0x080057ed
 800576c:	080057ed 	.word	0x080057ed
 8005770:	080057ed 	.word	0x080057ed
 8005774:	080057ed 	.word	0x080057ed
 8005778:	080057d5 	.word	0x080057d5
 800577c:	080057ed 	.word	0x080057ed
 8005780:	080057ed 	.word	0x080057ed
 8005784:	080057ed 	.word	0x080057ed
 8005788:	080057ed 	.word	0x080057ed
 800578c:	080057ed 	.word	0x080057ed
 8005790:	080057ed 	.word	0x080057ed
 8005794:	080057ed 	.word	0x080057ed
 8005798:	080057dd 	.word	0x080057dd
 800579c:	080057ed 	.word	0x080057ed
 80057a0:	080057ed 	.word	0x080057ed
 80057a4:	080057ed 	.word	0x080057ed
 80057a8:	080057ed 	.word	0x080057ed
 80057ac:	080057ed 	.word	0x080057ed
 80057b0:	080057ed 	.word	0x080057ed
 80057b4:	080057ed 	.word	0x080057ed
 80057b8:	080057e5 	.word	0x080057e5
 80057bc:	2301      	movs	r3, #1
 80057be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057c2:	e222      	b.n	8005c0a <UART_SetConfig+0x5a6>
 80057c4:	2304      	movs	r3, #4
 80057c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ca:	e21e      	b.n	8005c0a <UART_SetConfig+0x5a6>
 80057cc:	2308      	movs	r3, #8
 80057ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057d2:	e21a      	b.n	8005c0a <UART_SetConfig+0x5a6>
 80057d4:	2310      	movs	r3, #16
 80057d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057da:	e216      	b.n	8005c0a <UART_SetConfig+0x5a6>
 80057dc:	2320      	movs	r3, #32
 80057de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057e2:	e212      	b.n	8005c0a <UART_SetConfig+0x5a6>
 80057e4:	2340      	movs	r3, #64	; 0x40
 80057e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ea:	e20e      	b.n	8005c0a <UART_SetConfig+0x5a6>
 80057ec:	2380      	movs	r3, #128	; 0x80
 80057ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057f2:	e20a      	b.n	8005c0a <UART_SetConfig+0x5a6>
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a69      	ldr	r2, [pc, #420]	; (80059a0 <UART_SetConfig+0x33c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d130      	bne.n	8005860 <UART_SetConfig+0x1fc>
 80057fe:	4b67      	ldr	r3, [pc, #412]	; (800599c <UART_SetConfig+0x338>)
 8005800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	2b05      	cmp	r3, #5
 8005808:	d826      	bhi.n	8005858 <UART_SetConfig+0x1f4>
 800580a:	a201      	add	r2, pc, #4	; (adr r2, 8005810 <UART_SetConfig+0x1ac>)
 800580c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005810:	08005829 	.word	0x08005829
 8005814:	08005831 	.word	0x08005831
 8005818:	08005839 	.word	0x08005839
 800581c:	08005841 	.word	0x08005841
 8005820:	08005849 	.word	0x08005849
 8005824:	08005851 	.word	0x08005851
 8005828:	2300      	movs	r3, #0
 800582a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800582e:	e1ec      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005830:	2304      	movs	r3, #4
 8005832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005836:	e1e8      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005838:	2308      	movs	r3, #8
 800583a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800583e:	e1e4      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005840:	2310      	movs	r3, #16
 8005842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005846:	e1e0      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005848:	2320      	movs	r3, #32
 800584a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800584e:	e1dc      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005850:	2340      	movs	r3, #64	; 0x40
 8005852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005856:	e1d8      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005858:	2380      	movs	r3, #128	; 0x80
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585e:	e1d4      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a4f      	ldr	r2, [pc, #316]	; (80059a4 <UART_SetConfig+0x340>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d130      	bne.n	80058cc <UART_SetConfig+0x268>
 800586a:	4b4c      	ldr	r3, [pc, #304]	; (800599c <UART_SetConfig+0x338>)
 800586c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	2b05      	cmp	r3, #5
 8005874:	d826      	bhi.n	80058c4 <UART_SetConfig+0x260>
 8005876:	a201      	add	r2, pc, #4	; (adr r2, 800587c <UART_SetConfig+0x218>)
 8005878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587c:	08005895 	.word	0x08005895
 8005880:	0800589d 	.word	0x0800589d
 8005884:	080058a5 	.word	0x080058a5
 8005888:	080058ad 	.word	0x080058ad
 800588c:	080058b5 	.word	0x080058b5
 8005890:	080058bd 	.word	0x080058bd
 8005894:	2300      	movs	r3, #0
 8005896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800589a:	e1b6      	b.n	8005c0a <UART_SetConfig+0x5a6>
 800589c:	2304      	movs	r3, #4
 800589e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058a2:	e1b2      	b.n	8005c0a <UART_SetConfig+0x5a6>
 80058a4:	2308      	movs	r3, #8
 80058a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058aa:	e1ae      	b.n	8005c0a <UART_SetConfig+0x5a6>
 80058ac:	2310      	movs	r3, #16
 80058ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058b2:	e1aa      	b.n	8005c0a <UART_SetConfig+0x5a6>
 80058b4:	2320      	movs	r3, #32
 80058b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ba:	e1a6      	b.n	8005c0a <UART_SetConfig+0x5a6>
 80058bc:	2340      	movs	r3, #64	; 0x40
 80058be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c2:	e1a2      	b.n	8005c0a <UART_SetConfig+0x5a6>
 80058c4:	2380      	movs	r3, #128	; 0x80
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ca:	e19e      	b.n	8005c0a <UART_SetConfig+0x5a6>
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a35      	ldr	r2, [pc, #212]	; (80059a8 <UART_SetConfig+0x344>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d130      	bne.n	8005938 <UART_SetConfig+0x2d4>
 80058d6:	4b31      	ldr	r3, [pc, #196]	; (800599c <UART_SetConfig+0x338>)
 80058d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	2b05      	cmp	r3, #5
 80058e0:	d826      	bhi.n	8005930 <UART_SetConfig+0x2cc>
 80058e2:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <UART_SetConfig+0x284>)
 80058e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e8:	08005901 	.word	0x08005901
 80058ec:	08005909 	.word	0x08005909
 80058f0:	08005911 	.word	0x08005911
 80058f4:	08005919 	.word	0x08005919
 80058f8:	08005921 	.word	0x08005921
 80058fc:	08005929 	.word	0x08005929
 8005900:	2300      	movs	r3, #0
 8005902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005906:	e180      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005908:	2304      	movs	r3, #4
 800590a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800590e:	e17c      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005910:	2308      	movs	r3, #8
 8005912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005916:	e178      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005918:	2310      	movs	r3, #16
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800591e:	e174      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005920:	2320      	movs	r3, #32
 8005922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005926:	e170      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005928:	2340      	movs	r3, #64	; 0x40
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592e:	e16c      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005936:	e168      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a1b      	ldr	r2, [pc, #108]	; (80059ac <UART_SetConfig+0x348>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d142      	bne.n	80059c8 <UART_SetConfig+0x364>
 8005942:	4b16      	ldr	r3, [pc, #88]	; (800599c <UART_SetConfig+0x338>)
 8005944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	2b05      	cmp	r3, #5
 800594c:	d838      	bhi.n	80059c0 <UART_SetConfig+0x35c>
 800594e:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <UART_SetConfig+0x2f0>)
 8005950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005954:	0800596d 	.word	0x0800596d
 8005958:	08005975 	.word	0x08005975
 800595c:	0800597d 	.word	0x0800597d
 8005960:	08005985 	.word	0x08005985
 8005964:	080059b1 	.word	0x080059b1
 8005968:	080059b9 	.word	0x080059b9
 800596c:	2300      	movs	r3, #0
 800596e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005972:	e14a      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005974:	2304      	movs	r3, #4
 8005976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800597a:	e146      	b.n	8005c0a <UART_SetConfig+0x5a6>
 800597c:	2308      	movs	r3, #8
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005982:	e142      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005984:	2310      	movs	r3, #16
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800598a:	e13e      	b.n	8005c0a <UART_SetConfig+0x5a6>
 800598c:	cfff69f3 	.word	0xcfff69f3
 8005990:	58000c00 	.word	0x58000c00
 8005994:	11fff4ff 	.word	0x11fff4ff
 8005998:	40011000 	.word	0x40011000
 800599c:	58024400 	.word	0x58024400
 80059a0:	40004400 	.word	0x40004400
 80059a4:	40004800 	.word	0x40004800
 80059a8:	40004c00 	.word	0x40004c00
 80059ac:	40005000 	.word	0x40005000
 80059b0:	2320      	movs	r3, #32
 80059b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059b6:	e128      	b.n	8005c0a <UART_SetConfig+0x5a6>
 80059b8:	2340      	movs	r3, #64	; 0x40
 80059ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059be:	e124      	b.n	8005c0a <UART_SetConfig+0x5a6>
 80059c0:	2380      	movs	r3, #128	; 0x80
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059c6:	e120      	b.n	8005c0a <UART_SetConfig+0x5a6>
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4acb      	ldr	r2, [pc, #812]	; (8005cfc <UART_SetConfig+0x698>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d176      	bne.n	8005ac0 <UART_SetConfig+0x45c>
 80059d2:	4bcb      	ldr	r3, [pc, #812]	; (8005d00 <UART_SetConfig+0x69c>)
 80059d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059da:	2b28      	cmp	r3, #40	; 0x28
 80059dc:	d86c      	bhi.n	8005ab8 <UART_SetConfig+0x454>
 80059de:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <UART_SetConfig+0x380>)
 80059e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e4:	08005a89 	.word	0x08005a89
 80059e8:	08005ab9 	.word	0x08005ab9
 80059ec:	08005ab9 	.word	0x08005ab9
 80059f0:	08005ab9 	.word	0x08005ab9
 80059f4:	08005ab9 	.word	0x08005ab9
 80059f8:	08005ab9 	.word	0x08005ab9
 80059fc:	08005ab9 	.word	0x08005ab9
 8005a00:	08005ab9 	.word	0x08005ab9
 8005a04:	08005a91 	.word	0x08005a91
 8005a08:	08005ab9 	.word	0x08005ab9
 8005a0c:	08005ab9 	.word	0x08005ab9
 8005a10:	08005ab9 	.word	0x08005ab9
 8005a14:	08005ab9 	.word	0x08005ab9
 8005a18:	08005ab9 	.word	0x08005ab9
 8005a1c:	08005ab9 	.word	0x08005ab9
 8005a20:	08005ab9 	.word	0x08005ab9
 8005a24:	08005a99 	.word	0x08005a99
 8005a28:	08005ab9 	.word	0x08005ab9
 8005a2c:	08005ab9 	.word	0x08005ab9
 8005a30:	08005ab9 	.word	0x08005ab9
 8005a34:	08005ab9 	.word	0x08005ab9
 8005a38:	08005ab9 	.word	0x08005ab9
 8005a3c:	08005ab9 	.word	0x08005ab9
 8005a40:	08005ab9 	.word	0x08005ab9
 8005a44:	08005aa1 	.word	0x08005aa1
 8005a48:	08005ab9 	.word	0x08005ab9
 8005a4c:	08005ab9 	.word	0x08005ab9
 8005a50:	08005ab9 	.word	0x08005ab9
 8005a54:	08005ab9 	.word	0x08005ab9
 8005a58:	08005ab9 	.word	0x08005ab9
 8005a5c:	08005ab9 	.word	0x08005ab9
 8005a60:	08005ab9 	.word	0x08005ab9
 8005a64:	08005aa9 	.word	0x08005aa9
 8005a68:	08005ab9 	.word	0x08005ab9
 8005a6c:	08005ab9 	.word	0x08005ab9
 8005a70:	08005ab9 	.word	0x08005ab9
 8005a74:	08005ab9 	.word	0x08005ab9
 8005a78:	08005ab9 	.word	0x08005ab9
 8005a7c:	08005ab9 	.word	0x08005ab9
 8005a80:	08005ab9 	.word	0x08005ab9
 8005a84:	08005ab1 	.word	0x08005ab1
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a8e:	e0bc      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005a90:	2304      	movs	r3, #4
 8005a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a96:	e0b8      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005a98:	2308      	movs	r3, #8
 8005a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a9e:	e0b4      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aa6:	e0b0      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005aa8:	2320      	movs	r3, #32
 8005aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aae:	e0ac      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005ab0:	2340      	movs	r3, #64	; 0x40
 8005ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ab6:	e0a8      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005ab8:	2380      	movs	r3, #128	; 0x80
 8005aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005abe:	e0a4      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a8f      	ldr	r2, [pc, #572]	; (8005d04 <UART_SetConfig+0x6a0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d130      	bne.n	8005b2c <UART_SetConfig+0x4c8>
 8005aca:	4b8d      	ldr	r3, [pc, #564]	; (8005d00 <UART_SetConfig+0x69c>)
 8005acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	2b05      	cmp	r3, #5
 8005ad4:	d826      	bhi.n	8005b24 <UART_SetConfig+0x4c0>
 8005ad6:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <UART_SetConfig+0x478>)
 8005ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005adc:	08005af5 	.word	0x08005af5
 8005ae0:	08005afd 	.word	0x08005afd
 8005ae4:	08005b05 	.word	0x08005b05
 8005ae8:	08005b0d 	.word	0x08005b0d
 8005aec:	08005b15 	.word	0x08005b15
 8005af0:	08005b1d 	.word	0x08005b1d
 8005af4:	2300      	movs	r3, #0
 8005af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005afa:	e086      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005afc:	2304      	movs	r3, #4
 8005afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b02:	e082      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005b04:	2308      	movs	r3, #8
 8005b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b0a:	e07e      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005b0c:	2310      	movs	r3, #16
 8005b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b12:	e07a      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005b14:	2320      	movs	r3, #32
 8005b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b1a:	e076      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005b1c:	2340      	movs	r3, #64	; 0x40
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b22:	e072      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005b24:	2380      	movs	r3, #128	; 0x80
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b2a:	e06e      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a75      	ldr	r2, [pc, #468]	; (8005d08 <UART_SetConfig+0x6a4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d130      	bne.n	8005b98 <UART_SetConfig+0x534>
 8005b36:	4b72      	ldr	r3, [pc, #456]	; (8005d00 <UART_SetConfig+0x69c>)
 8005b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3a:	f003 0307 	and.w	r3, r3, #7
 8005b3e:	2b05      	cmp	r3, #5
 8005b40:	d826      	bhi.n	8005b90 <UART_SetConfig+0x52c>
 8005b42:	a201      	add	r2, pc, #4	; (adr r2, 8005b48 <UART_SetConfig+0x4e4>)
 8005b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b48:	08005b61 	.word	0x08005b61
 8005b4c:	08005b69 	.word	0x08005b69
 8005b50:	08005b71 	.word	0x08005b71
 8005b54:	08005b79 	.word	0x08005b79
 8005b58:	08005b81 	.word	0x08005b81
 8005b5c:	08005b89 	.word	0x08005b89
 8005b60:	2300      	movs	r3, #0
 8005b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b66:	e050      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005b68:	2304      	movs	r3, #4
 8005b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b6e:	e04c      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005b70:	2308      	movs	r3, #8
 8005b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b76:	e048      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005b78:	2310      	movs	r3, #16
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b7e:	e044      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005b80:	2320      	movs	r3, #32
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b86:	e040      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005b88:	2340      	movs	r3, #64	; 0x40
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8e:	e03c      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005b90:	2380      	movs	r3, #128	; 0x80
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b96:	e038      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a5b      	ldr	r2, [pc, #364]	; (8005d0c <UART_SetConfig+0x6a8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d130      	bne.n	8005c04 <UART_SetConfig+0x5a0>
 8005ba2:	4b57      	ldr	r3, [pc, #348]	; (8005d00 <UART_SetConfig+0x69c>)
 8005ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	2b05      	cmp	r3, #5
 8005bac:	d826      	bhi.n	8005bfc <UART_SetConfig+0x598>
 8005bae:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <UART_SetConfig+0x550>)
 8005bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb4:	08005bcd 	.word	0x08005bcd
 8005bb8:	08005bd5 	.word	0x08005bd5
 8005bbc:	08005bdd 	.word	0x08005bdd
 8005bc0:	08005be5 	.word	0x08005be5
 8005bc4:	08005bed 	.word	0x08005bed
 8005bc8:	08005bf5 	.word	0x08005bf5
 8005bcc:	2302      	movs	r3, #2
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bd2:	e01a      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bda:	e016      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005bdc:	2308      	movs	r3, #8
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005be2:	e012      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005be4:	2310      	movs	r3, #16
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bea:	e00e      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005bec:	2320      	movs	r3, #32
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bf2:	e00a      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005bf4:	2340      	movs	r3, #64	; 0x40
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfa:	e006      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005bfc:	2380      	movs	r3, #128	; 0x80
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c02:	e002      	b.n	8005c0a <UART_SetConfig+0x5a6>
 8005c04:	2380      	movs	r3, #128	; 0x80
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a3f      	ldr	r2, [pc, #252]	; (8005d0c <UART_SetConfig+0x6a8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	f040 80f8 	bne.w	8005e06 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c1a:	2b20      	cmp	r3, #32
 8005c1c:	dc46      	bgt.n	8005cac <UART_SetConfig+0x648>
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	f2c0 8082 	blt.w	8005d28 <UART_SetConfig+0x6c4>
 8005c24:	3b02      	subs	r3, #2
 8005c26:	2b1e      	cmp	r3, #30
 8005c28:	d87e      	bhi.n	8005d28 <UART_SetConfig+0x6c4>
 8005c2a:	a201      	add	r2, pc, #4	; (adr r2, 8005c30 <UART_SetConfig+0x5cc>)
 8005c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c30:	08005cb3 	.word	0x08005cb3
 8005c34:	08005d29 	.word	0x08005d29
 8005c38:	08005cbb 	.word	0x08005cbb
 8005c3c:	08005d29 	.word	0x08005d29
 8005c40:	08005d29 	.word	0x08005d29
 8005c44:	08005d29 	.word	0x08005d29
 8005c48:	08005ccb 	.word	0x08005ccb
 8005c4c:	08005d29 	.word	0x08005d29
 8005c50:	08005d29 	.word	0x08005d29
 8005c54:	08005d29 	.word	0x08005d29
 8005c58:	08005d29 	.word	0x08005d29
 8005c5c:	08005d29 	.word	0x08005d29
 8005c60:	08005d29 	.word	0x08005d29
 8005c64:	08005d29 	.word	0x08005d29
 8005c68:	08005cdb 	.word	0x08005cdb
 8005c6c:	08005d29 	.word	0x08005d29
 8005c70:	08005d29 	.word	0x08005d29
 8005c74:	08005d29 	.word	0x08005d29
 8005c78:	08005d29 	.word	0x08005d29
 8005c7c:	08005d29 	.word	0x08005d29
 8005c80:	08005d29 	.word	0x08005d29
 8005c84:	08005d29 	.word	0x08005d29
 8005c88:	08005d29 	.word	0x08005d29
 8005c8c:	08005d29 	.word	0x08005d29
 8005c90:	08005d29 	.word	0x08005d29
 8005c94:	08005d29 	.word	0x08005d29
 8005c98:	08005d29 	.word	0x08005d29
 8005c9c:	08005d29 	.word	0x08005d29
 8005ca0:	08005d29 	.word	0x08005d29
 8005ca4:	08005d29 	.word	0x08005d29
 8005ca8:	08005d1b 	.word	0x08005d1b
 8005cac:	2b40      	cmp	r3, #64	; 0x40
 8005cae:	d037      	beq.n	8005d20 <UART_SetConfig+0x6bc>
 8005cb0:	e03a      	b.n	8005d28 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005cb2:	f7fe fbfd 	bl	80044b0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005cb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005cb8:	e03c      	b.n	8005d34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fe fc0c 	bl	80044dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cc8:	e034      	b.n	8005d34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cca:	f107 0318 	add.w	r3, r7, #24
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe fd58 	bl	8004784 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cd8:	e02c      	b.n	8005d34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cda:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <UART_SetConfig+0x69c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d016      	beq.n	8005d14 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ce6:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <UART_SetConfig+0x69c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	08db      	lsrs	r3, r3, #3
 8005cec:	f003 0303 	and.w	r3, r3, #3
 8005cf0:	4a07      	ldr	r2, [pc, #28]	; (8005d10 <UART_SetConfig+0x6ac>)
 8005cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cf8:	e01c      	b.n	8005d34 <UART_SetConfig+0x6d0>
 8005cfa:	bf00      	nop
 8005cfc:	40011400 	.word	0x40011400
 8005d00:	58024400 	.word	0x58024400
 8005d04:	40007800 	.word	0x40007800
 8005d08:	40007c00 	.word	0x40007c00
 8005d0c:	58000c00 	.word	0x58000c00
 8005d10:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005d14:	4b9d      	ldr	r3, [pc, #628]	; (8005f8c <UART_SetConfig+0x928>)
 8005d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d18:	e00c      	b.n	8005d34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d1a:	4b9d      	ldr	r3, [pc, #628]	; (8005f90 <UART_SetConfig+0x92c>)
 8005d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d1e:	e009      	b.n	8005d34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d26:	e005      	b.n	8005d34 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005d32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 81de 	beq.w	80060f8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	4a94      	ldr	r2, [pc, #592]	; (8005f94 <UART_SetConfig+0x930>)
 8005d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d46:	461a      	mov	r2, r3
 8005d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d4e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	4613      	mov	r3, r2
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	4413      	add	r3, r2
 8005d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d305      	bcc.n	8005d6c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d903      	bls.n	8005d74 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d72:	e1c1      	b.n	80060f8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d76:	2200      	movs	r2, #0
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	60fa      	str	r2, [r7, #12]
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	4a84      	ldr	r2, [pc, #528]	; (8005f94 <UART_SetConfig+0x930>)
 8005d82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2200      	movs	r2, #0
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	607a      	str	r2, [r7, #4]
 8005d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d96:	f7fa fa9f 	bl	80002d8 <__aeabi_uldivmod>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4610      	mov	r0, r2
 8005da0:	4619      	mov	r1, r3
 8005da2:	f04f 0200 	mov.w	r2, #0
 8005da6:	f04f 0300 	mov.w	r3, #0
 8005daa:	020b      	lsls	r3, r1, #8
 8005dac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005db0:	0202      	lsls	r2, r0, #8
 8005db2:	6979      	ldr	r1, [r7, #20]
 8005db4:	6849      	ldr	r1, [r1, #4]
 8005db6:	0849      	lsrs	r1, r1, #1
 8005db8:	2000      	movs	r0, #0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	eb12 0804 	adds.w	r8, r2, r4
 8005dc2:	eb43 0905 	adc.w	r9, r3, r5
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	469a      	mov	sl, r3
 8005dce:	4693      	mov	fp, r2
 8005dd0:	4652      	mov	r2, sl
 8005dd2:	465b      	mov	r3, fp
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	f7fa fa7e 	bl	80002d8 <__aeabi_uldivmod>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4613      	mov	r3, r2
 8005de2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dea:	d308      	bcc.n	8005dfe <UART_SetConfig+0x79a>
 8005dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005df2:	d204      	bcs.n	8005dfe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dfa:	60da      	str	r2, [r3, #12]
 8005dfc:	e17c      	b.n	80060f8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005e04:	e178      	b.n	80060f8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e0e:	f040 80c5 	bne.w	8005f9c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005e12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	dc48      	bgt.n	8005eac <UART_SetConfig+0x848>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	db7b      	blt.n	8005f16 <UART_SetConfig+0x8b2>
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	d879      	bhi.n	8005f16 <UART_SetConfig+0x8b2>
 8005e22:	a201      	add	r2, pc, #4	; (adr r2, 8005e28 <UART_SetConfig+0x7c4>)
 8005e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e28:	08005eb3 	.word	0x08005eb3
 8005e2c:	08005ebb 	.word	0x08005ebb
 8005e30:	08005f17 	.word	0x08005f17
 8005e34:	08005f17 	.word	0x08005f17
 8005e38:	08005ec3 	.word	0x08005ec3
 8005e3c:	08005f17 	.word	0x08005f17
 8005e40:	08005f17 	.word	0x08005f17
 8005e44:	08005f17 	.word	0x08005f17
 8005e48:	08005ed3 	.word	0x08005ed3
 8005e4c:	08005f17 	.word	0x08005f17
 8005e50:	08005f17 	.word	0x08005f17
 8005e54:	08005f17 	.word	0x08005f17
 8005e58:	08005f17 	.word	0x08005f17
 8005e5c:	08005f17 	.word	0x08005f17
 8005e60:	08005f17 	.word	0x08005f17
 8005e64:	08005f17 	.word	0x08005f17
 8005e68:	08005ee3 	.word	0x08005ee3
 8005e6c:	08005f17 	.word	0x08005f17
 8005e70:	08005f17 	.word	0x08005f17
 8005e74:	08005f17 	.word	0x08005f17
 8005e78:	08005f17 	.word	0x08005f17
 8005e7c:	08005f17 	.word	0x08005f17
 8005e80:	08005f17 	.word	0x08005f17
 8005e84:	08005f17 	.word	0x08005f17
 8005e88:	08005f17 	.word	0x08005f17
 8005e8c:	08005f17 	.word	0x08005f17
 8005e90:	08005f17 	.word	0x08005f17
 8005e94:	08005f17 	.word	0x08005f17
 8005e98:	08005f17 	.word	0x08005f17
 8005e9c:	08005f17 	.word	0x08005f17
 8005ea0:	08005f17 	.word	0x08005f17
 8005ea4:	08005f17 	.word	0x08005f17
 8005ea8:	08005f09 	.word	0x08005f09
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	d02e      	beq.n	8005f0e <UART_SetConfig+0x8aa>
 8005eb0:	e031      	b.n	8005f16 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eb2:	f7fd f8c7 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8005eb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005eb8:	e033      	b.n	8005f22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005eba:	f7fd f8d9 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 8005ebe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ec0:	e02f      	b.n	8005f22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe fb08 	bl	80044dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ed0:	e027      	b.n	8005f22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ed2:	f107 0318 	add.w	r3, r7, #24
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fe fc54 	bl	8004784 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ee0:	e01f      	b.n	8005f22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ee2:	4b2d      	ldr	r3, [pc, #180]	; (8005f98 <UART_SetConfig+0x934>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005eee:	4b2a      	ldr	r3, [pc, #168]	; (8005f98 <UART_SetConfig+0x934>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	08db      	lsrs	r3, r3, #3
 8005ef4:	f003 0303 	and.w	r3, r3, #3
 8005ef8:	4a24      	ldr	r2, [pc, #144]	; (8005f8c <UART_SetConfig+0x928>)
 8005efa:	fa22 f303 	lsr.w	r3, r2, r3
 8005efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f00:	e00f      	b.n	8005f22 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005f02:	4b22      	ldr	r3, [pc, #136]	; (8005f8c <UART_SetConfig+0x928>)
 8005f04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f06:	e00c      	b.n	8005f22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f08:	4b21      	ldr	r3, [pc, #132]	; (8005f90 <UART_SetConfig+0x92c>)
 8005f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f0c:	e009      	b.n	8005f22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f14:	e005      	b.n	8005f22 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005f20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 80e7 	beq.w	80060f8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	4a19      	ldr	r2, [pc, #100]	; (8005f94 <UART_SetConfig+0x930>)
 8005f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f34:	461a      	mov	r2, r3
 8005f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f38:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f3c:	005a      	lsls	r2, r3, #1
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	085b      	lsrs	r3, r3, #1
 8005f44:	441a      	add	r2, r3
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f52:	2b0f      	cmp	r3, #15
 8005f54:	d916      	bls.n	8005f84 <UART_SetConfig+0x920>
 8005f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5c:	d212      	bcs.n	8005f84 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	f023 030f 	bic.w	r3, r3, #15
 8005f66:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6a:	085b      	lsrs	r3, r3, #1
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f76:	4313      	orrs	r3, r2
 8005f78:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005f80:	60da      	str	r2, [r3, #12]
 8005f82:	e0b9      	b.n	80060f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005f8a:	e0b5      	b.n	80060f8 <UART_SetConfig+0xa94>
 8005f8c:	03d09000 	.word	0x03d09000
 8005f90:	003d0900 	.word	0x003d0900
 8005f94:	080068ac 	.word	0x080068ac
 8005f98:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	dc49      	bgt.n	8006038 <UART_SetConfig+0x9d4>
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	db7c      	blt.n	80060a2 <UART_SetConfig+0xa3e>
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	d87a      	bhi.n	80060a2 <UART_SetConfig+0xa3e>
 8005fac:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <UART_SetConfig+0x950>)
 8005fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb2:	bf00      	nop
 8005fb4:	0800603f 	.word	0x0800603f
 8005fb8:	08006047 	.word	0x08006047
 8005fbc:	080060a3 	.word	0x080060a3
 8005fc0:	080060a3 	.word	0x080060a3
 8005fc4:	0800604f 	.word	0x0800604f
 8005fc8:	080060a3 	.word	0x080060a3
 8005fcc:	080060a3 	.word	0x080060a3
 8005fd0:	080060a3 	.word	0x080060a3
 8005fd4:	0800605f 	.word	0x0800605f
 8005fd8:	080060a3 	.word	0x080060a3
 8005fdc:	080060a3 	.word	0x080060a3
 8005fe0:	080060a3 	.word	0x080060a3
 8005fe4:	080060a3 	.word	0x080060a3
 8005fe8:	080060a3 	.word	0x080060a3
 8005fec:	080060a3 	.word	0x080060a3
 8005ff0:	080060a3 	.word	0x080060a3
 8005ff4:	0800606f 	.word	0x0800606f
 8005ff8:	080060a3 	.word	0x080060a3
 8005ffc:	080060a3 	.word	0x080060a3
 8006000:	080060a3 	.word	0x080060a3
 8006004:	080060a3 	.word	0x080060a3
 8006008:	080060a3 	.word	0x080060a3
 800600c:	080060a3 	.word	0x080060a3
 8006010:	080060a3 	.word	0x080060a3
 8006014:	080060a3 	.word	0x080060a3
 8006018:	080060a3 	.word	0x080060a3
 800601c:	080060a3 	.word	0x080060a3
 8006020:	080060a3 	.word	0x080060a3
 8006024:	080060a3 	.word	0x080060a3
 8006028:	080060a3 	.word	0x080060a3
 800602c:	080060a3 	.word	0x080060a3
 8006030:	080060a3 	.word	0x080060a3
 8006034:	08006095 	.word	0x08006095
 8006038:	2b40      	cmp	r3, #64	; 0x40
 800603a:	d02e      	beq.n	800609a <UART_SetConfig+0xa36>
 800603c:	e031      	b.n	80060a2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800603e:	f7fd f801 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8006042:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006044:	e033      	b.n	80060ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006046:	f7fd f813 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 800604a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800604c:	e02f      	b.n	80060ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800604e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006052:	4618      	mov	r0, r3
 8006054:	f7fe fa42 	bl	80044dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800605c:	e027      	b.n	80060ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800605e:	f107 0318 	add.w	r3, r7, #24
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe fb8e 	bl	8004784 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800606c:	e01f      	b.n	80060ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800606e:	4b2d      	ldr	r3, [pc, #180]	; (8006124 <UART_SetConfig+0xac0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800607a:	4b2a      	ldr	r3, [pc, #168]	; (8006124 <UART_SetConfig+0xac0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	08db      	lsrs	r3, r3, #3
 8006080:	f003 0303 	and.w	r3, r3, #3
 8006084:	4a28      	ldr	r2, [pc, #160]	; (8006128 <UART_SetConfig+0xac4>)
 8006086:	fa22 f303 	lsr.w	r3, r2, r3
 800608a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800608c:	e00f      	b.n	80060ae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800608e:	4b26      	ldr	r3, [pc, #152]	; (8006128 <UART_SetConfig+0xac4>)
 8006090:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006092:	e00c      	b.n	80060ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006094:	4b25      	ldr	r3, [pc, #148]	; (800612c <UART_SetConfig+0xac8>)
 8006096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006098:	e009      	b.n	80060ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800609a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800609e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060a0:	e005      	b.n	80060ae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80060ac:	bf00      	nop
    }

    if (pclk != 0U)
 80060ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d021      	beq.n	80060f8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	4a1d      	ldr	r2, [pc, #116]	; (8006130 <UART_SetConfig+0xacc>)
 80060ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060be:	461a      	mov	r2, r3
 80060c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	085b      	lsrs	r3, r3, #1
 80060cc:	441a      	add	r2, r3
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060da:	2b0f      	cmp	r3, #15
 80060dc:	d909      	bls.n	80060f2 <UART_SetConfig+0xa8e>
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e4:	d205      	bcs.n	80060f2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	60da      	str	r2, [r3, #12]
 80060f0:	e002      	b.n	80060f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2201      	movs	r2, #1
 8006104:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	2200      	movs	r2, #0
 800610c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2200      	movs	r2, #0
 8006112:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006114:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006118:	4618      	mov	r0, r3
 800611a:	3748      	adds	r7, #72	; 0x48
 800611c:	46bd      	mov	sp, r7
 800611e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006122:	bf00      	nop
 8006124:	58024400 	.word	0x58024400
 8006128:	03d09000 	.word	0x03d09000
 800612c:	003d0900 	.word	0x003d0900
 8006130:	080068ac 	.word	0x080068ac

08006134 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00a      	beq.n	800615e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a6:	f003 0308 	and.w	r3, r3, #8
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	d01a      	beq.n	800624a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006232:	d10a      	bne.n	800624a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	605a      	str	r2, [r3, #4]
  }
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b098      	sub	sp, #96	; 0x60
 800627c:	af02      	add	r7, sp, #8
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006288:	f7fa fd8a 	bl	8000da0 <HAL_GetTick>
 800628c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b08      	cmp	r3, #8
 800629a:	d12f      	bne.n	80062fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800629c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062a4:	2200      	movs	r2, #0
 80062a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f88e 	bl	80063cc <UART_WaitOnFlagUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d022      	beq.n	80062fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ca:	653b      	str	r3, [r7, #80]	; 0x50
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	461a      	mov	r2, r3
 80062d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d4:	647b      	str	r3, [r7, #68]	; 0x44
 80062d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e6      	bne.n	80062b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e063      	b.n	80063c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b04      	cmp	r3, #4
 8006308:	d149      	bne.n	800639e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800630a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006312:	2200      	movs	r2, #0
 8006314:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f857 	bl	80063cc <UART_WaitOnFlagUntilTimeout>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d03c      	beq.n	800639e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	623b      	str	r3, [r7, #32]
   return(result);
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006338:	64fb      	str	r3, [r7, #76]	; 0x4c
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006342:	633b      	str	r3, [r7, #48]	; 0x30
 8006344:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e6      	bne.n	8006324 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3308      	adds	r3, #8
 800635c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	60fb      	str	r3, [r7, #12]
   return(result);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f023 0301 	bic.w	r3, r3, #1
 800636c:	64bb      	str	r3, [r7, #72]	; 0x48
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3308      	adds	r3, #8
 8006374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006376:	61fa      	str	r2, [r7, #28]
 8006378:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	69b9      	ldr	r1, [r7, #24]
 800637c:	69fa      	ldr	r2, [r7, #28]
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	617b      	str	r3, [r7, #20]
   return(result);
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e5      	bne.n	8006356 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2220      	movs	r2, #32
 800638e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e012      	b.n	80063c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3758      	adds	r7, #88	; 0x58
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	4613      	mov	r3, r2
 80063da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063dc:	e049      	b.n	8006472 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e4:	d045      	beq.n	8006472 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063e6:	f7fa fcdb 	bl	8000da0 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d302      	bcc.n	80063fc <UART_WaitOnFlagUntilTimeout+0x30>
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e048      	b.n	8006492 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0304 	and.w	r3, r3, #4
 800640a:	2b00      	cmp	r3, #0
 800640c:	d031      	beq.n	8006472 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	f003 0308 	and.w	r3, r3, #8
 8006418:	2b08      	cmp	r3, #8
 800641a:	d110      	bne.n	800643e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2208      	movs	r2, #8
 8006422:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f839 	bl	800649c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2208      	movs	r2, #8
 800642e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e029      	b.n	8006492 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800644c:	d111      	bne.n	8006472 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006456:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 f81f 	bl	800649c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2220      	movs	r2, #32
 8006462:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e00f      	b.n	8006492 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69da      	ldr	r2, [r3, #28]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4013      	ands	r3, r2
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	429a      	cmp	r2, r3
 8006480:	bf0c      	ite	eq
 8006482:	2301      	moveq	r3, #1
 8006484:	2300      	movne	r3, #0
 8006486:	b2db      	uxtb	r3, r3
 8006488:	461a      	mov	r2, r3
 800648a:	79fb      	ldrb	r3, [r7, #7]
 800648c:	429a      	cmp	r2, r3
 800648e:	d0a6      	beq.n	80063de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800649c:	b480      	push	{r7}
 800649e:	b095      	sub	sp, #84	; 0x54
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c2:	643b      	str	r3, [r7, #64]	; 0x40
 80064c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064ca:	e841 2300 	strex	r3, r2, [r1]
 80064ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1e6      	bne.n	80064a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	3308      	adds	r3, #8
 80064dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	e853 3f00 	ldrex	r3, [r3]
 80064e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	4b1e      	ldr	r3, [pc, #120]	; (8006564 <UART_EndRxTransfer+0xc8>)
 80064ea:	4013      	ands	r3, r2
 80064ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3308      	adds	r3, #8
 80064f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064fe:	e841 2300 	strex	r3, r2, [r1]
 8006502:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1e5      	bne.n	80064d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800650e:	2b01      	cmp	r3, #1
 8006510:	d118      	bne.n	8006544 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f023 0310 	bic.w	r3, r3, #16
 8006526:	647b      	str	r3, [r7, #68]	; 0x44
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	461a      	mov	r2, r3
 800652e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006534:	6979      	ldr	r1, [r7, #20]
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	e841 2300 	strex	r3, r2, [r1]
 800653c:	613b      	str	r3, [r7, #16]
   return(result);
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e6      	bne.n	8006512 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2220      	movs	r2, #32
 8006548:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006558:	bf00      	nop
 800655a:	3754      	adds	r7, #84	; 0x54
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	effffffe 	.word	0xeffffffe

08006568 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006574:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f7ff f856 	bl	8005638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800658c:	bf00      	nop
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b0:	61fb      	str	r3, [r7, #28]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	61bb      	str	r3, [r7, #24]
 80065bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6979      	ldr	r1, [r7, #20]
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	613b      	str	r3, [r7, #16]
   return(result);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e6      	bne.n	800659c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7ff f821 	bl	8005624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065e2:	bf00      	nop
 80065e4:	3720      	adds	r7, #32
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006606:	bf00      	nop
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006626:	b480      	push	{r7}
 8006628:	b085      	sub	sp, #20
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006634:	2b01      	cmp	r3, #1
 8006636:	d101      	bne.n	800663c <HAL_UARTEx_DisableFifoMode+0x16>
 8006638:	2302      	movs	r3, #2
 800663a:	e027      	b.n	800668c <HAL_UARTEx_DisableFifoMode+0x66>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2224      	movs	r2, #36	; 0x24
 8006648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0201 	bic.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800666a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d101      	bne.n	80066b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066ac:	2302      	movs	r3, #2
 80066ae:	e02d      	b.n	800670c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2224      	movs	r2, #36	; 0x24
 80066bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 0201 	bic.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f84f 	bl	8006790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006728:	2302      	movs	r3, #2
 800672a:	e02d      	b.n	8006788 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2224      	movs	r2, #36	; 0x24
 8006738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0201 	bic.w	r2, r2, #1
 8006752:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f811 	bl	8006790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2220      	movs	r2, #32
 800677a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800679c:	2b00      	cmp	r3, #0
 800679e:	d108      	bne.n	80067b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067b0:	e031      	b.n	8006816 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067b2:	2310      	movs	r3, #16
 80067b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067b6:	2310      	movs	r3, #16
 80067b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	0e5b      	lsrs	r3, r3, #25
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	0f5b      	lsrs	r3, r3, #29
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	f003 0307 	and.w	r3, r3, #7
 80067d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067da:	7bbb      	ldrb	r3, [r7, #14]
 80067dc:	7b3a      	ldrb	r2, [r7, #12]
 80067de:	4911      	ldr	r1, [pc, #68]	; (8006824 <UARTEx_SetNbDataToProcess+0x94>)
 80067e0:	5c8a      	ldrb	r2, [r1, r2]
 80067e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80067e6:	7b3a      	ldrb	r2, [r7, #12]
 80067e8:	490f      	ldr	r1, [pc, #60]	; (8006828 <UARTEx_SetNbDataToProcess+0x98>)
 80067ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
 80067fa:	7b7a      	ldrb	r2, [r7, #13]
 80067fc:	4909      	ldr	r1, [pc, #36]	; (8006824 <UARTEx_SetNbDataToProcess+0x94>)
 80067fe:	5c8a      	ldrb	r2, [r1, r2]
 8006800:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006804:	7b7a      	ldrb	r2, [r7, #13]
 8006806:	4908      	ldr	r1, [pc, #32]	; (8006828 <UARTEx_SetNbDataToProcess+0x98>)
 8006808:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800680a:	fb93 f3f2 	sdiv	r3, r3, r2
 800680e:	b29a      	uxth	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006816:	bf00      	nop
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	080068c4 	.word	0x080068c4
 8006828:	080068cc 	.word	0x080068cc

0800682c <memset>:
 800682c:	4402      	add	r2, r0
 800682e:	4603      	mov	r3, r0
 8006830:	4293      	cmp	r3, r2
 8006832:	d100      	bne.n	8006836 <memset+0xa>
 8006834:	4770      	bx	lr
 8006836:	f803 1b01 	strb.w	r1, [r3], #1
 800683a:	e7f9      	b.n	8006830 <memset+0x4>

0800683c <__libc_init_array>:
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	4d0d      	ldr	r5, [pc, #52]	; (8006874 <__libc_init_array+0x38>)
 8006840:	4c0d      	ldr	r4, [pc, #52]	; (8006878 <__libc_init_array+0x3c>)
 8006842:	1b64      	subs	r4, r4, r5
 8006844:	10a4      	asrs	r4, r4, #2
 8006846:	2600      	movs	r6, #0
 8006848:	42a6      	cmp	r6, r4
 800684a:	d109      	bne.n	8006860 <__libc_init_array+0x24>
 800684c:	4d0b      	ldr	r5, [pc, #44]	; (800687c <__libc_init_array+0x40>)
 800684e:	4c0c      	ldr	r4, [pc, #48]	; (8006880 <__libc_init_array+0x44>)
 8006850:	f000 f818 	bl	8006884 <_init>
 8006854:	1b64      	subs	r4, r4, r5
 8006856:	10a4      	asrs	r4, r4, #2
 8006858:	2600      	movs	r6, #0
 800685a:	42a6      	cmp	r6, r4
 800685c:	d105      	bne.n	800686a <__libc_init_array+0x2e>
 800685e:	bd70      	pop	{r4, r5, r6, pc}
 8006860:	f855 3b04 	ldr.w	r3, [r5], #4
 8006864:	4798      	blx	r3
 8006866:	3601      	adds	r6, #1
 8006868:	e7ee      	b.n	8006848 <__libc_init_array+0xc>
 800686a:	f855 3b04 	ldr.w	r3, [r5], #4
 800686e:	4798      	blx	r3
 8006870:	3601      	adds	r6, #1
 8006872:	e7f2      	b.n	800685a <__libc_init_array+0x1e>
 8006874:	080068dc 	.word	0x080068dc
 8006878:	080068dc 	.word	0x080068dc
 800687c:	080068dc 	.word	0x080068dc
 8006880:	080068e0 	.word	0x080068e0

08006884 <_init>:
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	bf00      	nop
 8006888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688a:	bc08      	pop	{r3}
 800688c:	469e      	mov	lr, r3
 800688e:	4770      	bx	lr

08006890 <_fini>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	bf00      	nop
 8006894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006896:	bc08      	pop	{r3}
 8006898:	469e      	mov	lr, r3
 800689a:	4770      	bx	lr
