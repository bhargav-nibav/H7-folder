
uart_ldr_prg_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a40  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009ce0  08009ce0  00019ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d68  08009d68  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08009d68  08009d68  00019d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d70  08009d70  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d70  08009d70  00019d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d74  08009d74  00019d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  08009d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  24000060  08009dd8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240004ec  08009dd8  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000125b7  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002790  00000000  00000000  00032688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  00034e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000979  00000000  00000000  00035a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003999e  00000000  00000000  00036401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140da  00000000  00000000  0006fd9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00178064  00000000  00000000  00083e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003698  00000000  00000000  001fbee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  001ff578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009cc8 	.word	0x08009cc8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	08009cc8 	.word	0x08009cc8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <SystemInit+0xfc>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <SystemInit+0xfc>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0xfc>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <SystemInit+0xfc>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	2b06      	cmp	r3, #6
 80006b6:	d807      	bhi.n	80006c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <SystemInit+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 030f 	bic.w	r3, r3, #15
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x100>)
 80006c2:	f043 0307 	orr.w	r3, r3, #7
 80006c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <SystemInit+0x104>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a30      	ldr	r2, [pc, #192]	; (8000790 <SystemInit+0x104>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x104>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <SystemInit+0x104>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	492c      	ldr	r1, [pc, #176]	; (8000790 <SystemInit+0x104>)
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <SystemInit+0x108>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemInit+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <SystemInit+0x100>)
 80006fc:	f043 0307 	orr.w	r3, r3, #7
 8000700:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemInit+0x104>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemInit+0x104>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemInit+0x104>)
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <SystemInit+0x10c>)
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <SystemInit+0x104>)
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <SystemInit+0x110>)
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <SystemInit+0x104>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <SystemInit+0x114>)
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <SystemInit+0x104>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <SystemInit+0x114>)
 8000730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <SystemInit+0x104>)
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <SystemInit+0x114>)
 800073c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <SystemInit+0x104>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <SystemInit+0x104>)
 800074a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <SystemInit+0x104>)
 8000752:	2200      	movs	r2, #0
 8000754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x118>)
 8000758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <SystemInit+0x118>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x11c>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x120>)
 8000768:	4013      	ands	r3, r2
 800076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076e:	d202      	bcs.n	8000776 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <SystemInit+0x124>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <SystemInit+0x128>)
 8000778:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800077c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	52002000 	.word	0x52002000
 8000790:	58024400 	.word	0x58024400
 8000794:	eaf6ed7f 	.word	0xeaf6ed7f
 8000798:	02020200 	.word	0x02020200
 800079c:	01ff0000 	.word	0x01ff0000
 80007a0:	01010280 	.word	0x01010280
 80007a4:	580000c0 	.word	0x580000c0
 80007a8:	5c001000 	.word	0x5c001000
 80007ac:	ffff0000 	.word	0xffff0000
 80007b0:	51008108 	.word	0x51008108
 80007b4:	52004000 	.word	0x52004000

080007b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_DMA_Init+0x6c>)
 80007c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007c4:	4a17      	ldr	r2, [pc, #92]	; (8000824 <MX_DMA_Init+0x6c>)
 80007c6:	f043 0301 	orr.w	r3, r3, #1
 80007ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_DMA_Init+0x6c>)
 80007d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007d4:	f003 0301 	and.w	r3, r3, #1
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	200b      	movs	r0, #11
 80007e2:	f000 fe68 	bl	80014b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80007e6:	200b      	movs	r0, #11
 80007e8:	f000 fe7f 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	200c      	movs	r0, #12
 80007f2:	f000 fe60 	bl	80014b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007f6:	200c      	movs	r0, #12
 80007f8:	f000 fe77 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	200d      	movs	r0, #13
 8000802:	f000 fe58 	bl	80014b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000806:	200d      	movs	r0, #13
 8000808:	f000 fe6f 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	200e      	movs	r0, #14
 8000812:	f000 fe50 	bl	80014b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000816:	200e      	movs	r0, #14
 8000818:	f000 fe67 	bl	80014ea <HAL_NVIC_EnableIRQ>

}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	58024400 	.word	0x58024400

08000828 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_GPIO_Init+0x50>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a10      	ldr	r2, [pc, #64]	; (8000878 <MX_GPIO_Init+0x50>)
 8000836:	f043 0302 	orr.w	r3, r3, #2
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_GPIO_Init+0x50>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f003 0302 	and.w	r3, r3, #2
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_GPIO_Init+0x50>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000852:	4a09      	ldr	r2, [pc, #36]	; (8000878 <MX_GPIO_Init+0x50>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_GPIO_Init+0x50>)
 800085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	58024400 	.word	0x58024400

0800087c <processLidarValue>:
int strength = 0;



void processLidarValue()
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
	static uint8_t i = 0;
	uint8_t j = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	71fb      	strb	r3, [r7, #7]
	int checksum = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]

	HAL_UART_Receive(&huart5, &tfminiData[i], 1, 10);
 800088a:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <processLidarValue+0xc8>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <processLidarValue+0xcc>)
 8000892:	18d1      	adds	r1, r2, r3
 8000894:	230a      	movs	r3, #10
 8000896:	2201      	movs	r2, #1
 8000898:	482c      	ldr	r0, [pc, #176]	; (800094c <processLidarValue+0xd0>)
 800089a:	f006 fda5 	bl	80073e8 <HAL_UART_Receive>
	{
	  //HAL_UART_Transmit(&huart3, tfminiData[i], 1, 100);
		if (tfminiData[0] != 0x59)
 800089e:	4b2a      	ldr	r3, [pc, #168]	; (8000948 <processLidarValue+0xcc>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b59      	cmp	r3, #89	; 0x59
 80008a4:	d003      	beq.n	80008ae <processLidarValue+0x32>
		{
			i = 0;
 80008a6:	4b27      	ldr	r3, [pc, #156]	; (8000944 <processLidarValue+0xc8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
		else
		{
			i++;
		}
	}
}
 80008ac:	e046      	b.n	800093c <processLidarValue+0xc0>
		else if (i == 1 && tfminiData[1] != 0x59)
 80008ae:	4b25      	ldr	r3, [pc, #148]	; (8000944 <processLidarValue+0xc8>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d107      	bne.n	80008c6 <processLidarValue+0x4a>
 80008b6:	4b24      	ldr	r3, [pc, #144]	; (8000948 <processLidarValue+0xcc>)
 80008b8:	785b      	ldrb	r3, [r3, #1]
 80008ba:	2b59      	cmp	r3, #89	; 0x59
 80008bc:	d003      	beq.n	80008c6 <processLidarValue+0x4a>
			i = 0;
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <processLidarValue+0xc8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
}
 80008c4:	e03a      	b.n	800093c <processLidarValue+0xc0>
		else if (i == 8)
 80008c6:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <processLidarValue+0xc8>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b08      	cmp	r3, #8
 80008cc:	d130      	bne.n	8000930 <processLidarValue+0xb4>
			for (j = 0; j < 8; j++)
 80008ce:	2300      	movs	r3, #0
 80008d0:	71fb      	strb	r3, [r7, #7]
 80008d2:	e009      	b.n	80008e8 <processLidarValue+0x6c>
				checksum += tfminiData[j];
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <processLidarValue+0xcc>)
 80008d8:	5cd3      	ldrb	r3, [r2, r3]
 80008da:	461a      	mov	r2, r3
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	603b      	str	r3, [r7, #0]
			for (j = 0; j < 8; j++)
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	3301      	adds	r3, #1
 80008e6:	71fb      	strb	r3, [r7, #7]
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b07      	cmp	r3, #7
 80008ec:	d9f2      	bls.n	80008d4 <processLidarValue+0x58>
			if (tfminiData[8] == (checksum % 256))
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <processLidarValue+0xcc>)
 80008f0:	7a1b      	ldrb	r3, [r3, #8]
 80008f2:	4619      	mov	r1, r3
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	425a      	negs	r2, r3
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	bf58      	it	pl
 80008fe:	4253      	negpl	r3, r2
 8000900:	4299      	cmp	r1, r3
 8000902:	d111      	bne.n	8000928 <processLidarValue+0xac>
				 distance = tfminiData[2] + (tfminiData[3] << 8);
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <processLidarValue+0xcc>)
 8000906:	789b      	ldrb	r3, [r3, #2]
 8000908:	461a      	mov	r2, r3
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <processLidarValue+0xcc>)
 800090c:	78db      	ldrb	r3, [r3, #3]
 800090e:	021b      	lsls	r3, r3, #8
 8000910:	4413      	add	r3, r2
 8000912:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <processLidarValue+0xd4>)
 8000914:	6013      	str	r3, [r2, #0]
				 strength = tfminiData[4] + (tfminiData[5] << 8);
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <processLidarValue+0xcc>)
 8000918:	791b      	ldrb	r3, [r3, #4]
 800091a:	461a      	mov	r2, r3
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <processLidarValue+0xcc>)
 800091e:	795b      	ldrb	r3, [r3, #5]
 8000920:	021b      	lsls	r3, r3, #8
 8000922:	4413      	add	r3, r2
 8000924:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <processLidarValue+0xd8>)
 8000926:	6013      	str	r3, [r2, #0]
			i = 0;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <processLidarValue+0xc8>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
}
 800092e:	e005      	b.n	800093c <processLidarValue+0xc0>
			i++;
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <processLidarValue+0xc8>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	b2da      	uxtb	r2, r3
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <processLidarValue+0xc8>)
 800093a:	701a      	strb	r2, [r3, #0]
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	24000090 	.word	0x24000090
 8000948:	2400007c 	.word	0x2400007c
 800094c:	24000098 	.word	0x24000098
 8000950:	24000088 	.word	0x24000088
 8000954:	2400008c 	.word	0x2400008c

08000958 <getTFminiData>:


void getTFminiData()
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0

	char buffer[20];
    snprintf(buffer, sizeof(buffer),"Distance: %d cm\t", distance);
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <getTFminiData+0x38>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	1d38      	adds	r0, r7, #4
 8000964:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <getTFminiData+0x3c>)
 8000966:	2114      	movs	r1, #20
 8000968:	f008 fcf6 	bl	8009358 <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 20);
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fcb6 	bl	80002e0 <strlen>
 8000974:	4603      	mov	r3, r0
 8000976:	b29a      	uxth	r2, r3
 8000978:	1d39      	adds	r1, r7, #4
 800097a:	2314      	movs	r3, #20
 800097c:	4806      	ldr	r0, [pc, #24]	; (8000998 <getTFminiData+0x40>)
 800097e:	f006 fca5 	bl	80072cc <HAL_UART_Transmit>
    HAL_Delay(100);
 8000982:	2064      	movs	r0, #100	; 0x64
 8000984:	f000 fc8c 	bl	80012a0 <HAL_Delay>

}
 8000988:	bf00      	nop
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	24000088 	.word	0x24000088
 8000994:	08009ce0 	.word	0x08009ce0
 8000998:	2400012c 	.word	0x2400012c

0800099c <setUpLiudarDMA>:


void setUpLiudarDMA()
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_DMA(&huart5, tfminiData, sizeof(tfminiData)) != HAL_OK)
 80009a0:	2209      	movs	r2, #9
 80009a2:	4905      	ldr	r1, [pc, #20]	; (80009b8 <setUpLiudarDMA+0x1c>)
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <setUpLiudarDMA+0x20>)
 80009a6:	f006 fde7 	bl	8007578 <HAL_UART_Receive_DMA>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <setUpLiudarDMA+0x18>
	  {
		  Error_Handler();
 80009b0:	f000 f8ce 	bl	8000b50 <Error_Handler>
	  }
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	2400007c 	.word	0x2400007c
 80009bc:	24000098 	.word	0x24000098

080009c0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

        processLidarValue();
 80009c8:	f7ff ff58 	bl	800087c <processLidarValue>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80009da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009de:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80009e0:	bf00      	nop
 80009e2:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <main+0xa4>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d004      	beq.n	80009f8 <main+0x24>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	1e5a      	subs	r2, r3, #1
 80009f2:	607a      	str	r2, [r7, #4]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	dcf4      	bgt.n	80009e2 <main+0xe>
  if ( timeout < 0 )
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	da01      	bge.n	8000a02 <main+0x2e>
  {
  Error_Handler();
 80009fe:	f000 f8a7 	bl	8000b50 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a02:	f000 fbbb 	bl	800117c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a06:	f000 f839 	bl	8000a7c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <main+0xa4>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	4a19      	ldr	r2, [pc, #100]	; (8000a78 <main+0xa4>)
 8000a12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <main+0xa4>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f003 fd65 	bl	80044f8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2000      	movs	r0, #0
 8000a32:	f003 fd7b 	bl	800452c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a3a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a3c:	bf00      	nop
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <main+0xa4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d104      	bne.n	8000a54 <main+0x80>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	1e5a      	subs	r2, r3, #1
 8000a4e:	607a      	str	r2, [r7, #4]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	dcf4      	bgt.n	8000a3e <main+0x6a>
if ( timeout < 0 )
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da01      	bge.n	8000a5e <main+0x8a>
{
Error_Handler();
 8000a5a:	f000 f879 	bl	8000b50 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5e:	f7ff fee3 	bl	8000828 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a62:	f7ff fea9 	bl	80007b8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000a66:	f000 f97b 	bl	8000d60 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8000a6a:	f000 f92d 	bl	8000cc8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  setUpLiudarDMA();
 8000a6e:	f7ff ff95 	bl	800099c <setUpLiudarDMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  getTFminiData();
 8000a72:	f7ff ff71 	bl	8000958 <getTFminiData>
 8000a76:	e7fc      	b.n	8000a72 <main+0x9e>
 8000a78:	58024400 	.word	0x58024400

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09c      	sub	sp, #112	; 0x70
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	224c      	movs	r2, #76	; 0x4c
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f008 fc98 	bl	80093c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2220      	movs	r2, #32
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f008 fc92 	bl	80093c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a9c:	2004      	movs	r0, #4
 8000a9e:	f003 fd59 	bl	8004554 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <SystemClock_Config+0xcc>)
 8000aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aaa:	4a27      	ldr	r2, [pc, #156]	; (8000b48 <SystemClock_Config+0xcc>)
 8000aac:	f023 0301 	bic.w	r3, r3, #1
 8000ab0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <SystemClock_Config+0xcc>)
 8000ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <SystemClock_Config+0xd0>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ac4:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <SystemClock_Config+0xd0>)
 8000ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <SystemClock_Config+0xd0>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ad8:	bf00      	nop
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <SystemClock_Config+0xd0>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ae6:	d1f8      	bne.n	8000ada <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af0:	2340      	movs	r3, #64	; 0x40
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afc:	4618      	mov	r0, r3
 8000afe:	f003 fd83 	bl	8004608 <HAL_RCC_OscConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b08:	f000 f822 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0c:	233f      	movs	r3, #63	; 0x3f
 8000b0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b20:	2340      	movs	r3, #64	; 0x40
 8000b22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2101      	movs	r1, #1
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 f9c3 	bl	8004ebc <HAL_RCC_ClockConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b3c:	f000 f808 	bl	8000b50 <Error_Handler>
  }
}
 8000b40:	bf00      	nop
 8000b42:	3770      	adds	r7, #112	; 0x70
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	58000400 	.word	0x58000400
 8000b4c:	58024800 	.word	0x58024800

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_MspInit+0x30>)
 8000b64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b68:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x30>)
 8000b6a:	f043 0302 	orr.w	r3, r3, #2
 8000b6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x30>)
 8000b74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	58024400 	.word	0x58024400

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 fb40 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <DMA1_Stream0_IRQHandler+0x10>)
 8000bea:	f001 ffc3 	bl	8002b74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	240002b0 	.word	0x240002b0

08000bf8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <DMA1_Stream1_IRQHandler+0x10>)
 8000bfe:	f001 ffb9 	bl	8002b74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	24000328 	.word	0x24000328

08000c0c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <DMA1_Stream2_IRQHandler+0x10>)
 8000c12:	f001 ffaf 	bl	8002b74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	240001c0 	.word	0x240001c0

08000c20 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <DMA1_Stream3_IRQHandler+0x10>)
 8000c26:	f001 ffa5 	bl	8002b74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	24000238 	.word	0x24000238

08000c34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <USART3_IRQHandler+0x10>)
 8000c3a:	f006 fce9 	bl	8007610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2400012c 	.word	0x2400012c

08000c48 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <UART5_IRQHandler+0x10>)
 8000c4e:	f006 fcdf 	bl	8007610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	24000098 	.word	0x24000098

08000c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c64:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <_sbrk+0x5c>)
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <_sbrk+0x60>)
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d102      	bne.n	8000c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <_sbrk+0x64>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <_sbrk+0x68>)
 8000c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d207      	bcs.n	8000c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c8c:	f008 fba0 	bl	80093d0 <__errno>
 8000c90:	4603      	mov	r3, r0
 8000c92:	220c      	movs	r2, #12
 8000c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	e009      	b.n	8000cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <_sbrk+0x64>)
 8000cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	24080000 	.word	0x24080000
 8000cbc:	00000400 	.word	0x00000400
 8000cc0:	24000094 	.word	0x24000094
 8000cc4:	240004f0 	.word	0x240004f0

08000cc8 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <MX_UART5_Init+0x90>)
 8000cce:	4a23      	ldr	r2, [pc, #140]	; (8000d5c <MX_UART5_Init+0x94>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <MX_UART5_Init+0x90>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <MX_UART5_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <MX_UART5_Init+0x90>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <MX_UART5_Init+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <MX_UART5_Init+0x90>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <MX_UART5_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <MX_UART5_Init+0x90>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <MX_UART5_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_UART5_Init+0x90>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <MX_UART5_Init+0x90>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000d10:	4811      	ldr	r0, [pc, #68]	; (8000d58 <MX_UART5_Init+0x90>)
 8000d12:	f006 fa8b 	bl	800722c <HAL_UART_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000d1c:	f7ff ff18 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d20:	2100      	movs	r1, #0
 8000d22:	480d      	ldr	r0, [pc, #52]	; (8000d58 <MX_UART5_Init+0x90>)
 8000d24:	f008 fa4d 	bl	80091c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000d2e:	f7ff ff0f 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d32:	2100      	movs	r1, #0
 8000d34:	4808      	ldr	r0, [pc, #32]	; (8000d58 <MX_UART5_Init+0x90>)
 8000d36:	f008 fa82 	bl	800923e <HAL_UARTEx_SetRxFifoThreshold>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000d40:	f7ff ff06 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_UART5_Init+0x90>)
 8000d46:	f008 fa03 	bl	8009150 <HAL_UARTEx_DisableFifoMode>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000d50:	f7ff fefe 	bl	8000b50 <Error_Handler>
  /* USER CODE BEGIN UART5_Init 2 */


  /* USER CODE END UART5_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	24000098 	.word	0x24000098
 8000d5c:	40005000 	.word	0x40005000

08000d60 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d66:	4a23      	ldr	r2, [pc, #140]	; (8000df4 <MX_USART3_UART_Init+0x94>)
 8000d68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d6a:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000da8:	4811      	ldr	r0, [pc, #68]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000daa:	f006 fa3f 	bl	800722c <HAL_UART_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000db4:	f7ff fecc 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db8:	2100      	movs	r1, #0
 8000dba:	480d      	ldr	r0, [pc, #52]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000dbc:	f008 fa01 	bl	80091c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dc6:	f7ff fec3 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4808      	ldr	r0, [pc, #32]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000dce:	f008 fa36 	bl	800923e <HAL_UARTEx_SetRxFifoThreshold>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dd8:	f7ff feba 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_USART3_UART_Init+0x90>)
 8000dde:	f008 f9b7 	bl	8009150 <HAL_UARTEx_DisableFifoMode>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000de8:	f7ff feb2 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2400012c 	.word	0x2400012c
 8000df4:	40004800 	.word	0x40004800

08000df8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b0bc      	sub	sp, #240	; 0xf0
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e10:	f107 0318 	add.w	r3, r7, #24
 8000e14:	22c0      	movs	r2, #192	; 0xc0
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f008 fad1 	bl	80093c0 <memset>
  if(uartHandle->Instance==UART5)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a58      	ldr	r2, [pc, #352]	; (8000f84 <HAL_UART_MspInit+0x18c>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	f040 80bb 	bne.w	8000fa0 <HAL_UART_MspInit+0x1a8>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000e2a:	f04f 0202 	mov.w	r2, #2
 8000e2e:	f04f 0300 	mov.w	r3, #0
 8000e32:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e3c:	f107 0318 	add.w	r3, r7, #24
 8000e40:	4618      	mov	r0, r3
 8000e42:	f004 fbc7 	bl	80055d4 <HAL_RCCEx_PeriphCLKConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000e4c:	f7ff fe80 	bl	8000b50 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000e50:	4b4d      	ldr	r3, [pc, #308]	; (8000f88 <HAL_UART_MspInit+0x190>)
 8000e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e56:	4a4c      	ldr	r2, [pc, #304]	; (8000f88 <HAL_UART_MspInit+0x190>)
 8000e58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e60:	4b49      	ldr	r3, [pc, #292]	; (8000f88 <HAL_UART_MspInit+0x190>)
 8000e62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b46      	ldr	r3, [pc, #280]	; (8000f88 <HAL_UART_MspInit+0x190>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	4a44      	ldr	r2, [pc, #272]	; (8000f88 <HAL_UART_MspInit+0x190>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7e:	4b42      	ldr	r3, [pc, #264]	; (8000f88 <HAL_UART_MspInit+0x190>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e8c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8000ea6:	230e      	movs	r3, #14
 8000ea8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4836      	ldr	r0, [pc, #216]	; (8000f8c <HAL_UART_MspInit+0x194>)
 8000eb4:	f003 f970 	bl	8004198 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream2;
 8000eb8:	4b35      	ldr	r3, [pc, #212]	; (8000f90 <HAL_UART_MspInit+0x198>)
 8000eba:	4a36      	ldr	r2, [pc, #216]	; (8000f94 <HAL_UART_MspInit+0x19c>)
 8000ebc:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8000ebe:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <HAL_UART_MspInit+0x198>)
 8000ec0:	2241      	movs	r2, #65	; 0x41
 8000ec2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec4:	4b32      	ldr	r3, [pc, #200]	; (8000f90 <HAL_UART_MspInit+0x198>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eca:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <HAL_UART_MspInit+0x198>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ed0:	4b2f      	ldr	r3, [pc, #188]	; (8000f90 <HAL_UART_MspInit+0x198>)
 8000ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed6:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ed8:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <HAL_UART_MspInit+0x198>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ede:	4b2c      	ldr	r3, [pc, #176]	; (8000f90 <HAL_UART_MspInit+0x198>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8000ee4:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <HAL_UART_MspInit+0x198>)
 8000ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eea:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eec:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <HAL_UART_MspInit+0x198>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ef2:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <HAL_UART_MspInit+0x198>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000ef8:	4825      	ldr	r0, [pc, #148]	; (8000f90 <HAL_UART_MspInit+0x198>)
 8000efa:	f000 fb11 	bl	8001520 <HAL_DMA_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000f04:	f7ff fe24 	bl	8000b50 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a21      	ldr	r2, [pc, #132]	; (8000f90 <HAL_UART_MspInit+0x198>)
 8000f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000f10:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <HAL_UART_MspInit+0x198>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream3;
 8000f16:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <HAL_UART_MspInit+0x1a0>)
 8000f18:	4a20      	ldr	r2, [pc, #128]	; (8000f9c <HAL_UART_MspInit+0x1a4>)
 8000f1a:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <HAL_UART_MspInit+0x1a0>)
 8000f1e:	2242      	movs	r2, #66	; 0x42
 8000f20:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <HAL_UART_MspInit+0x1a0>)
 8000f24:	2240      	movs	r2, #64	; 0x40
 8000f26:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <HAL_UART_MspInit+0x1a0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <HAL_UART_MspInit+0x1a0>)
 8000f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f34:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <HAL_UART_MspInit+0x1a0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <HAL_UART_MspInit+0x1a0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_UART_MspInit+0x1a0>)
 8000f44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f48:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <HAL_UART_MspInit+0x1a0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_UART_MspInit+0x1a0>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8000f56:	4810      	ldr	r0, [pc, #64]	; (8000f98 <HAL_UART_MspInit+0x1a0>)
 8000f58:	f000 fae2 	bl	8001520 <HAL_DMA_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 8000f62:	f7ff fdf5 	bl	8000b50 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <HAL_UART_MspInit+0x1a0>)
 8000f6a:	67da      	str	r2, [r3, #124]	; 0x7c
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <HAL_UART_MspInit+0x1a0>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	2035      	movs	r0, #53	; 0x35
 8000f78:	f000 fa9d 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000f7c:	2035      	movs	r0, #53	; 0x35
 8000f7e:	f000 fab4 	bl	80014ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f82:	e0bf      	b.n	8001104 <HAL_UART_MspInit+0x30c>
 8000f84:	40005000 	.word	0x40005000
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	58020400 	.word	0x58020400
 8000f90:	240001c0 	.word	0x240001c0
 8000f94:	40020040 	.word	0x40020040
 8000f98:	24000238 	.word	0x24000238
 8000f9c:	40020058 	.word	0x40020058
  else if(uartHandle->Instance==USART3)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a59      	ldr	r2, [pc, #356]	; (800110c <HAL_UART_MspInit+0x314>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	f040 80ac 	bne.w	8001104 <HAL_UART_MspInit+0x30c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fac:	f04f 0202 	mov.w	r2, #2
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fbe:	f107 0318 	add.w	r3, r7, #24
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f004 fb06 	bl	80055d4 <HAL_RCCEx_PeriphCLKConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8000fce:	f7ff fdbf 	bl	8000b50 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fd2:	4b4f      	ldr	r3, [pc, #316]	; (8001110 <HAL_UART_MspInit+0x318>)
 8000fd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fd8:	4a4d      	ldr	r2, [pc, #308]	; (8001110 <HAL_UART_MspInit+0x318>)
 8000fda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fe2:	4b4b      	ldr	r3, [pc, #300]	; (8001110 <HAL_UART_MspInit+0x318>)
 8000fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff0:	4b47      	ldr	r3, [pc, #284]	; (8001110 <HAL_UART_MspInit+0x318>)
 8000ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff6:	4a46      	ldr	r2, [pc, #280]	; (8001110 <HAL_UART_MspInit+0x318>)
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001000:	4b43      	ldr	r3, [pc, #268]	; (8001110 <HAL_UART_MspInit+0x318>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800100e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001012:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001028:	2307      	movs	r3, #7
 800102a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800102e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001032:	4619      	mov	r1, r3
 8001034:	4837      	ldr	r0, [pc, #220]	; (8001114 <HAL_UART_MspInit+0x31c>)
 8001036:	f003 f8af 	bl	8004198 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800103a:	4b37      	ldr	r3, [pc, #220]	; (8001118 <HAL_UART_MspInit+0x320>)
 800103c:	4a37      	ldr	r2, [pc, #220]	; (800111c <HAL_UART_MspInit+0x324>)
 800103e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001040:	4b35      	ldr	r3, [pc, #212]	; (8001118 <HAL_UART_MspInit+0x320>)
 8001042:	222d      	movs	r2, #45	; 0x2d
 8001044:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001046:	4b34      	ldr	r3, [pc, #208]	; (8001118 <HAL_UART_MspInit+0x320>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800104c:	4b32      	ldr	r3, [pc, #200]	; (8001118 <HAL_UART_MspInit+0x320>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <HAL_UART_MspInit+0x320>)
 8001054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001058:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800105a:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <HAL_UART_MspInit+0x320>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001060:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <HAL_UART_MspInit+0x320>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001066:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <HAL_UART_MspInit+0x320>)
 8001068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800106c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800106e:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <HAL_UART_MspInit+0x320>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <HAL_UART_MspInit+0x320>)
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800107a:	4827      	ldr	r0, [pc, #156]	; (8001118 <HAL_UART_MspInit+0x320>)
 800107c:	f000 fa50 	bl	8001520 <HAL_DMA_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_UART_MspInit+0x292>
      Error_Handler();
 8001086:	f7ff fd63 	bl	8000b50 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a22      	ldr	r2, [pc, #136]	; (8001118 <HAL_UART_MspInit+0x320>)
 800108e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001092:	4a21      	ldr	r2, [pc, #132]	; (8001118 <HAL_UART_MspInit+0x320>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001098:	4b21      	ldr	r3, [pc, #132]	; (8001120 <HAL_UART_MspInit+0x328>)
 800109a:	4a22      	ldr	r2, [pc, #136]	; (8001124 <HAL_UART_MspInit+0x32c>)
 800109c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <HAL_UART_MspInit+0x328>)
 80010a0:	222e      	movs	r2, #46	; 0x2e
 80010a2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a4:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <HAL_UART_MspInit+0x328>)
 80010a6:	2240      	movs	r2, #64	; 0x40
 80010a8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <HAL_UART_MspInit+0x328>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <HAL_UART_MspInit+0x328>)
 80010b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_UART_MspInit+0x328>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <HAL_UART_MspInit+0x328>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <HAL_UART_MspInit+0x328>)
 80010c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ca:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_UART_MspInit+0x328>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <HAL_UART_MspInit+0x328>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80010d8:	4811      	ldr	r0, [pc, #68]	; (8001120 <HAL_UART_MspInit+0x328>)
 80010da:	f000 fa21 	bl	8001520 <HAL_DMA_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_UART_MspInit+0x2f0>
      Error_Handler();
 80010e4:	f7ff fd34 	bl	8000b50 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <HAL_UART_MspInit+0x328>)
 80010ec:	67da      	str	r2, [r3, #124]	; 0x7c
 80010ee:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <HAL_UART_MspInit+0x328>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2027      	movs	r0, #39	; 0x27
 80010fa:	f000 f9dc 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010fe:	2027      	movs	r0, #39	; 0x27
 8001100:	f000 f9f3 	bl	80014ea <HAL_NVIC_EnableIRQ>
}
 8001104:	bf00      	nop
 8001106:	37f0      	adds	r7, #240	; 0xf0
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40004800 	.word	0x40004800
 8001110:	58024400 	.word	0x58024400
 8001114:	58020c00 	.word	0x58020c00
 8001118:	240002b0 	.word	0x240002b0
 800111c:	40020010 	.word	0x40020010
 8001120:	24000328 	.word	0x24000328
 8001124:	40020028 	.word	0x40020028

08001128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001160 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800112c:	f7ff faae 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001132:	490d      	ldr	r1, [pc, #52]	; (8001168 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001148:	4c0a      	ldr	r4, [pc, #40]	; (8001174 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001156:	f008 f941 	bl	80093dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115a:	f7ff fc3b 	bl	80009d4 <main>
  bx  lr
 800115e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001164:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001168:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 800116c:	08009d78 	.word	0x08009d78
  ldr r2, =_sbss
 8001170:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001174:	240004ec 	.word	0x240004ec

08001178 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC3_IRQHandler>
	...

0800117c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001182:	2003      	movs	r0, #3
 8001184:	f000 f98c 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001188:	f004 f84e 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 800118c:	4602      	mov	r2, r0
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_Init+0x68>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	0a1b      	lsrs	r3, r3, #8
 8001194:	f003 030f 	and.w	r3, r3, #15
 8001198:	4913      	ldr	r1, [pc, #76]	; (80011e8 <HAL_Init+0x6c>)
 800119a:	5ccb      	ldrb	r3, [r1, r3]
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	fa22 f303 	lsr.w	r3, r2, r3
 80011a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_Init+0x68>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <HAL_Init+0x6c>)
 80011b0:	5cd3      	ldrb	r3, [r2, r3]
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	fa22 f303 	lsr.w	r3, r2, r3
 80011bc:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <HAL_Init+0x70>)
 80011be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011c0:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <HAL_Init+0x74>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c6:	200f      	movs	r0, #15
 80011c8:	f000 f814 	bl	80011f4 <HAL_InitTick>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e002      	b.n	80011dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011d6:	f7ff fcc1 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	58024400 	.word	0x58024400
 80011e8:	08009cf4 	.word	0x08009cf4
 80011ec:	24000004 	.word	0x24000004
 80011f0:	24000000 	.word	0x24000000

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_InitTick+0x60>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e021      	b.n	800124c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_InitTick+0x64>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_InitTick+0x60>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f971 	bl	8001506 <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e00e      	b.n	800124c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d80a      	bhi.n	800124a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f000 f93b 	bl	80014b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001240:	4a06      	ldr	r2, [pc, #24]	; (800125c <HAL_InitTick+0x68>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2400000c 	.word	0x2400000c
 8001258:	24000000 	.word	0x24000000
 800125c:	24000008 	.word	0x24000008

08001260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_IncTick+0x20>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x24>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a04      	ldr	r2, [pc, #16]	; (8001284 <HAL_IncTick+0x24>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	2400000c 	.word	0x2400000c
 8001284:	240003a0 	.word	0x240003a0

08001288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <HAL_GetTick+0x14>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	240003a0 	.word	0x240003a0

080012a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff ffee 	bl	8001288 <HAL_GetTick>
 80012ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b8:	d005      	beq.n	80012c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_Delay+0x44>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4413      	add	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012c6:	bf00      	nop
 80012c8:	f7ff ffde 	bl	8001288 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d8f7      	bhi.n	80012c8 <HAL_Delay+0x28>
  {
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2400000c 	.word	0x2400000c

080012e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetREVID+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	0c1b      	lsrs	r3, r3, #16
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	5c001000 	.word	0x5c001000

08001300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <__NVIC_SetPriorityGrouping+0x40>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 800132a:	4313      	orrs	r3, r2
 800132c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <__NVIC_SetPriorityGrouping+0x40>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60d3      	str	r3, [r2, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00
 8001344:	05fa0000 	.word	0x05fa0000

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800136e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0b      	blt.n	800138e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	4907      	ldr	r1, [pc, #28]	; (800139c <__NVIC_EnableIRQ+0x38>)
 800137e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	2001      	movs	r0, #1
 8001386:	fa00 f202 	lsl.w	r2, r0, r2
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	; (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
         );
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800146c:	d301      	bcc.n	8001472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146e:	2301      	movs	r3, #1
 8001470:	e00f      	b.n	8001492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <SysTick_Config+0x40>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147a:	210f      	movs	r1, #15
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f7ff ff8e 	bl	80013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <SysTick_Config+0x40>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148a:	4b04      	ldr	r3, [pc, #16]	; (800149c <SysTick_Config+0x40>)
 800148c:	2207      	movs	r2, #7
 800148e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	e000e010 	.word	0xe000e010

080014a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff29 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014c4:	f7ff ff40 	bl	8001348 <__NVIC_GetPriorityGrouping>
 80014c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	f7ff ff90 	bl	80013f4 <NVIC_EncodePriority>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff5f 	bl	80013a0 <__NVIC_SetPriority>
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff33 	bl	8001364 <__NVIC_EnableIRQ>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffa4 	bl	800145c <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001528:	f7ff feae 	bl	8001288 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e316      	b.n	8001b66 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a66      	ldr	r2, [pc, #408]	; (80016d8 <HAL_DMA_Init+0x1b8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d04a      	beq.n	80015d8 <HAL_DMA_Init+0xb8>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a65      	ldr	r2, [pc, #404]	; (80016dc <HAL_DMA_Init+0x1bc>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d045      	beq.n	80015d8 <HAL_DMA_Init+0xb8>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a63      	ldr	r2, [pc, #396]	; (80016e0 <HAL_DMA_Init+0x1c0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d040      	beq.n	80015d8 <HAL_DMA_Init+0xb8>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a62      	ldr	r2, [pc, #392]	; (80016e4 <HAL_DMA_Init+0x1c4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d03b      	beq.n	80015d8 <HAL_DMA_Init+0xb8>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a60      	ldr	r2, [pc, #384]	; (80016e8 <HAL_DMA_Init+0x1c8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d036      	beq.n	80015d8 <HAL_DMA_Init+0xb8>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a5f      	ldr	r2, [pc, #380]	; (80016ec <HAL_DMA_Init+0x1cc>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d031      	beq.n	80015d8 <HAL_DMA_Init+0xb8>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a5d      	ldr	r2, [pc, #372]	; (80016f0 <HAL_DMA_Init+0x1d0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d02c      	beq.n	80015d8 <HAL_DMA_Init+0xb8>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a5c      	ldr	r2, [pc, #368]	; (80016f4 <HAL_DMA_Init+0x1d4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d027      	beq.n	80015d8 <HAL_DMA_Init+0xb8>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a5a      	ldr	r2, [pc, #360]	; (80016f8 <HAL_DMA_Init+0x1d8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d022      	beq.n	80015d8 <HAL_DMA_Init+0xb8>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a59      	ldr	r2, [pc, #356]	; (80016fc <HAL_DMA_Init+0x1dc>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d01d      	beq.n	80015d8 <HAL_DMA_Init+0xb8>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a57      	ldr	r2, [pc, #348]	; (8001700 <HAL_DMA_Init+0x1e0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d018      	beq.n	80015d8 <HAL_DMA_Init+0xb8>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a56      	ldr	r2, [pc, #344]	; (8001704 <HAL_DMA_Init+0x1e4>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d013      	beq.n	80015d8 <HAL_DMA_Init+0xb8>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a54      	ldr	r2, [pc, #336]	; (8001708 <HAL_DMA_Init+0x1e8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00e      	beq.n	80015d8 <HAL_DMA_Init+0xb8>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a53      	ldr	r2, [pc, #332]	; (800170c <HAL_DMA_Init+0x1ec>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d009      	beq.n	80015d8 <HAL_DMA_Init+0xb8>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a51      	ldr	r2, [pc, #324]	; (8001710 <HAL_DMA_Init+0x1f0>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d004      	beq.n	80015d8 <HAL_DMA_Init+0xb8>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a50      	ldr	r2, [pc, #320]	; (8001714 <HAL_DMA_Init+0x1f4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d101      	bne.n	80015dc <HAL_DMA_Init+0xbc>
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <HAL_DMA_Init+0xbe>
 80015dc:	2300      	movs	r3, #0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 813b 	beq.w	800185a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2202      	movs	r2, #2
 80015e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a37      	ldr	r2, [pc, #220]	; (80016d8 <HAL_DMA_Init+0x1b8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d04a      	beq.n	8001694 <HAL_DMA_Init+0x174>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a36      	ldr	r2, [pc, #216]	; (80016dc <HAL_DMA_Init+0x1bc>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d045      	beq.n	8001694 <HAL_DMA_Init+0x174>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a34      	ldr	r2, [pc, #208]	; (80016e0 <HAL_DMA_Init+0x1c0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d040      	beq.n	8001694 <HAL_DMA_Init+0x174>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a33      	ldr	r2, [pc, #204]	; (80016e4 <HAL_DMA_Init+0x1c4>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d03b      	beq.n	8001694 <HAL_DMA_Init+0x174>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a31      	ldr	r2, [pc, #196]	; (80016e8 <HAL_DMA_Init+0x1c8>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d036      	beq.n	8001694 <HAL_DMA_Init+0x174>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a30      	ldr	r2, [pc, #192]	; (80016ec <HAL_DMA_Init+0x1cc>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d031      	beq.n	8001694 <HAL_DMA_Init+0x174>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a2e      	ldr	r2, [pc, #184]	; (80016f0 <HAL_DMA_Init+0x1d0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d02c      	beq.n	8001694 <HAL_DMA_Init+0x174>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a2d      	ldr	r2, [pc, #180]	; (80016f4 <HAL_DMA_Init+0x1d4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d027      	beq.n	8001694 <HAL_DMA_Init+0x174>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a2b      	ldr	r2, [pc, #172]	; (80016f8 <HAL_DMA_Init+0x1d8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d022      	beq.n	8001694 <HAL_DMA_Init+0x174>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a2a      	ldr	r2, [pc, #168]	; (80016fc <HAL_DMA_Init+0x1dc>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d01d      	beq.n	8001694 <HAL_DMA_Init+0x174>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a28      	ldr	r2, [pc, #160]	; (8001700 <HAL_DMA_Init+0x1e0>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d018      	beq.n	8001694 <HAL_DMA_Init+0x174>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a27      	ldr	r2, [pc, #156]	; (8001704 <HAL_DMA_Init+0x1e4>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d013      	beq.n	8001694 <HAL_DMA_Init+0x174>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a25      	ldr	r2, [pc, #148]	; (8001708 <HAL_DMA_Init+0x1e8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d00e      	beq.n	8001694 <HAL_DMA_Init+0x174>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a24      	ldr	r2, [pc, #144]	; (800170c <HAL_DMA_Init+0x1ec>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d009      	beq.n	8001694 <HAL_DMA_Init+0x174>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a22      	ldr	r2, [pc, #136]	; (8001710 <HAL_DMA_Init+0x1f0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d004      	beq.n	8001694 <HAL_DMA_Init+0x174>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a21      	ldr	r2, [pc, #132]	; (8001714 <HAL_DMA_Init+0x1f4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d108      	bne.n	80016a6 <HAL_DMA_Init+0x186>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0201 	bic.w	r2, r2, #1
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	e007      	b.n	80016b6 <HAL_DMA_Init+0x196>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0201 	bic.w	r2, r2, #1
 80016b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80016b6:	e02f      	b.n	8001718 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016b8:	f7ff fde6 	bl	8001288 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b05      	cmp	r3, #5
 80016c4:	d928      	bls.n	8001718 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2220      	movs	r2, #32
 80016ca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2203      	movs	r2, #3
 80016d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e246      	b.n	8001b66 <HAL_DMA_Init+0x646>
 80016d8:	40020010 	.word	0x40020010
 80016dc:	40020028 	.word	0x40020028
 80016e0:	40020040 	.word	0x40020040
 80016e4:	40020058 	.word	0x40020058
 80016e8:	40020070 	.word	0x40020070
 80016ec:	40020088 	.word	0x40020088
 80016f0:	400200a0 	.word	0x400200a0
 80016f4:	400200b8 	.word	0x400200b8
 80016f8:	40020410 	.word	0x40020410
 80016fc:	40020428 	.word	0x40020428
 8001700:	40020440 	.word	0x40020440
 8001704:	40020458 	.word	0x40020458
 8001708:	40020470 	.word	0x40020470
 800170c:	40020488 	.word	0x40020488
 8001710:	400204a0 	.word	0x400204a0
 8001714:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1c8      	bne.n	80016b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	4b83      	ldr	r3, [pc, #524]	; (8001940 <HAL_DMA_Init+0x420>)
 8001732:	4013      	ands	r3, r2
 8001734:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800173e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800174a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001756:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	4313      	orrs	r3, r2
 8001762:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	2b04      	cmp	r3, #4
 800176a:	d107      	bne.n	800177c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	4313      	orrs	r3, r2
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	4313      	orrs	r3, r2
 800177a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800177c:	4b71      	ldr	r3, [pc, #452]	; (8001944 <HAL_DMA_Init+0x424>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b71      	ldr	r3, [pc, #452]	; (8001948 <HAL_DMA_Init+0x428>)
 8001782:	4013      	ands	r3, r2
 8001784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001788:	d328      	bcc.n	80017dc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b28      	cmp	r3, #40	; 0x28
 8001790:	d903      	bls.n	800179a <HAL_DMA_Init+0x27a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b2e      	cmp	r3, #46	; 0x2e
 8001798:	d917      	bls.n	80017ca <HAL_DMA_Init+0x2aa>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b3e      	cmp	r3, #62	; 0x3e
 80017a0:	d903      	bls.n	80017aa <HAL_DMA_Init+0x28a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b42      	cmp	r3, #66	; 0x42
 80017a8:	d90f      	bls.n	80017ca <HAL_DMA_Init+0x2aa>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b46      	cmp	r3, #70	; 0x46
 80017b0:	d903      	bls.n	80017ba <HAL_DMA_Init+0x29a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b48      	cmp	r3, #72	; 0x48
 80017b8:	d907      	bls.n	80017ca <HAL_DMA_Init+0x2aa>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b4e      	cmp	r3, #78	; 0x4e
 80017c0:	d905      	bls.n	80017ce <HAL_DMA_Init+0x2ae>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b52      	cmp	r3, #82	; 0x52
 80017c8:	d801      	bhi.n	80017ce <HAL_DMA_Init+0x2ae>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_DMA_Init+0x2b0>
 80017ce:	2300      	movs	r3, #0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017da:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f023 0307 	bic.w	r3, r3, #7
 80017f2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	2b04      	cmp	r3, #4
 8001804:	d117      	bne.n	8001836 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	4313      	orrs	r3, r2
 800180e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00e      	beq.n	8001836 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f002 fb33 	bl	8003e84 <DMA_CheckFifoParam>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d008      	beq.n	8001836 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2240      	movs	r2, #64	; 0x40
 8001828:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e197      	b.n	8001b66 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f002 fa6e 	bl	8003d20 <DMA_CalcBaseAndBitshift>
 8001844:	4603      	mov	r3, r0
 8001846:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	f003 031f 	and.w	r3, r3, #31
 8001850:	223f      	movs	r2, #63	; 0x3f
 8001852:	409a      	lsls	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	e0cd      	b.n	80019f6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a3b      	ldr	r2, [pc, #236]	; (800194c <HAL_DMA_Init+0x42c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d022      	beq.n	80018aa <HAL_DMA_Init+0x38a>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a39      	ldr	r2, [pc, #228]	; (8001950 <HAL_DMA_Init+0x430>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d01d      	beq.n	80018aa <HAL_DMA_Init+0x38a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a38      	ldr	r2, [pc, #224]	; (8001954 <HAL_DMA_Init+0x434>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d018      	beq.n	80018aa <HAL_DMA_Init+0x38a>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a36      	ldr	r2, [pc, #216]	; (8001958 <HAL_DMA_Init+0x438>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <HAL_DMA_Init+0x38a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a35      	ldr	r2, [pc, #212]	; (800195c <HAL_DMA_Init+0x43c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d00e      	beq.n	80018aa <HAL_DMA_Init+0x38a>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a33      	ldr	r2, [pc, #204]	; (8001960 <HAL_DMA_Init+0x440>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d009      	beq.n	80018aa <HAL_DMA_Init+0x38a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a32      	ldr	r2, [pc, #200]	; (8001964 <HAL_DMA_Init+0x444>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d004      	beq.n	80018aa <HAL_DMA_Init+0x38a>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a30      	ldr	r2, [pc, #192]	; (8001968 <HAL_DMA_Init+0x448>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d101      	bne.n	80018ae <HAL_DMA_Init+0x38e>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <HAL_DMA_Init+0x390>
 80018ae:	2300      	movs	r3, #0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 8097 	beq.w	80019e4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a24      	ldr	r2, [pc, #144]	; (800194c <HAL_DMA_Init+0x42c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d021      	beq.n	8001904 <HAL_DMA_Init+0x3e4>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a22      	ldr	r2, [pc, #136]	; (8001950 <HAL_DMA_Init+0x430>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d01c      	beq.n	8001904 <HAL_DMA_Init+0x3e4>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a21      	ldr	r2, [pc, #132]	; (8001954 <HAL_DMA_Init+0x434>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d017      	beq.n	8001904 <HAL_DMA_Init+0x3e4>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1f      	ldr	r2, [pc, #124]	; (8001958 <HAL_DMA_Init+0x438>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d012      	beq.n	8001904 <HAL_DMA_Init+0x3e4>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a1e      	ldr	r2, [pc, #120]	; (800195c <HAL_DMA_Init+0x43c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d00d      	beq.n	8001904 <HAL_DMA_Init+0x3e4>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a1c      	ldr	r2, [pc, #112]	; (8001960 <HAL_DMA_Init+0x440>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d008      	beq.n	8001904 <HAL_DMA_Init+0x3e4>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1b      	ldr	r2, [pc, #108]	; (8001964 <HAL_DMA_Init+0x444>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d003      	beq.n	8001904 <HAL_DMA_Init+0x3e4>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a19      	ldr	r2, [pc, #100]	; (8001968 <HAL_DMA_Init+0x448>)
 8001902:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2202      	movs	r2, #2
 8001908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_DMA_Init+0x44c>)
 8001920:	4013      	ands	r3, r2
 8001922:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b40      	cmp	r3, #64	; 0x40
 800192a:	d021      	beq.n	8001970 <HAL_DMA_Init+0x450>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b80      	cmp	r3, #128	; 0x80
 8001932:	d102      	bne.n	800193a <HAL_DMA_Init+0x41a>
 8001934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001938:	e01b      	b.n	8001972 <HAL_DMA_Init+0x452>
 800193a:	2300      	movs	r3, #0
 800193c:	e019      	b.n	8001972 <HAL_DMA_Init+0x452>
 800193e:	bf00      	nop
 8001940:	fe10803f 	.word	0xfe10803f
 8001944:	5c001000 	.word	0x5c001000
 8001948:	ffff0000 	.word	0xffff0000
 800194c:	58025408 	.word	0x58025408
 8001950:	5802541c 	.word	0x5802541c
 8001954:	58025430 	.word	0x58025430
 8001958:	58025444 	.word	0x58025444
 800195c:	58025458 	.word	0x58025458
 8001960:	5802546c 	.word	0x5802546c
 8001964:	58025480 	.word	0x58025480
 8001968:	58025494 	.word	0x58025494
 800196c:	fffe000f 	.word	0xfffe000f
 8001970:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68d2      	ldr	r2, [r2, #12]
 8001976:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001978:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001980:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001988:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001990:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001998:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80019a0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b6e      	ldr	r3, [pc, #440]	; (8001b70 <HAL_DMA_Init+0x650>)
 80019b8:	4413      	add	r3, r2
 80019ba:	4a6e      	ldr	r2, [pc, #440]	; (8001b74 <HAL_DMA_Init+0x654>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	009a      	lsls	r2, r3, #2
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f002 f9a9 	bl	8003d20 <DMA_CalcBaseAndBitshift>
 80019ce:	4603      	mov	r3, r0
 80019d0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	2201      	movs	r2, #1
 80019dc:	409a      	lsls	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	e008      	b.n	80019f6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2240      	movs	r2, #64	; 0x40
 80019e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2203      	movs	r2, #3
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0b7      	b.n	8001b66 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a5f      	ldr	r2, [pc, #380]	; (8001b78 <HAL_DMA_Init+0x658>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d072      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a5d      	ldr	r2, [pc, #372]	; (8001b7c <HAL_DMA_Init+0x65c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d06d      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a5c      	ldr	r2, [pc, #368]	; (8001b80 <HAL_DMA_Init+0x660>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d068      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a5a      	ldr	r2, [pc, #360]	; (8001b84 <HAL_DMA_Init+0x664>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d063      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a59      	ldr	r2, [pc, #356]	; (8001b88 <HAL_DMA_Init+0x668>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d05e      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a57      	ldr	r2, [pc, #348]	; (8001b8c <HAL_DMA_Init+0x66c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d059      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a56      	ldr	r2, [pc, #344]	; (8001b90 <HAL_DMA_Init+0x670>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d054      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a54      	ldr	r2, [pc, #336]	; (8001b94 <HAL_DMA_Init+0x674>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d04f      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a53      	ldr	r2, [pc, #332]	; (8001b98 <HAL_DMA_Init+0x678>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d04a      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a51      	ldr	r2, [pc, #324]	; (8001b9c <HAL_DMA_Init+0x67c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d045      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a50      	ldr	r2, [pc, #320]	; (8001ba0 <HAL_DMA_Init+0x680>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d040      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a4e      	ldr	r2, [pc, #312]	; (8001ba4 <HAL_DMA_Init+0x684>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d03b      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a4d      	ldr	r2, [pc, #308]	; (8001ba8 <HAL_DMA_Init+0x688>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d036      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a4b      	ldr	r2, [pc, #300]	; (8001bac <HAL_DMA_Init+0x68c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d031      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a4a      	ldr	r2, [pc, #296]	; (8001bb0 <HAL_DMA_Init+0x690>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d02c      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a48      	ldr	r2, [pc, #288]	; (8001bb4 <HAL_DMA_Init+0x694>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d027      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a47      	ldr	r2, [pc, #284]	; (8001bb8 <HAL_DMA_Init+0x698>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d022      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a45      	ldr	r2, [pc, #276]	; (8001bbc <HAL_DMA_Init+0x69c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d01d      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a44      	ldr	r2, [pc, #272]	; (8001bc0 <HAL_DMA_Init+0x6a0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d018      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a42      	ldr	r2, [pc, #264]	; (8001bc4 <HAL_DMA_Init+0x6a4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d013      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a41      	ldr	r2, [pc, #260]	; (8001bc8 <HAL_DMA_Init+0x6a8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d00e      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a3f      	ldr	r2, [pc, #252]	; (8001bcc <HAL_DMA_Init+0x6ac>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d009      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a3e      	ldr	r2, [pc, #248]	; (8001bd0 <HAL_DMA_Init+0x6b0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d004      	beq.n	8001ae6 <HAL_DMA_Init+0x5c6>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a3c      	ldr	r2, [pc, #240]	; (8001bd4 <HAL_DMA_Init+0x6b4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d101      	bne.n	8001aea <HAL_DMA_Init+0x5ca>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_DMA_Init+0x5cc>
 8001aea:	2300      	movs	r3, #0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d032      	beq.n	8001b56 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f002 fa43 	bl	8003f7c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b80      	cmp	r3, #128	; 0x80
 8001afc:	d102      	bne.n	8001b04 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b18:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d010      	beq.n	8001b44 <HAL_DMA_Init+0x624>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d80c      	bhi.n	8001b44 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f002 fac0 	bl	80040b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	e008      	b.n	8001b56 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	a7fdabf8 	.word	0xa7fdabf8
 8001b74:	cccccccd 	.word	0xcccccccd
 8001b78:	40020010 	.word	0x40020010
 8001b7c:	40020028 	.word	0x40020028
 8001b80:	40020040 	.word	0x40020040
 8001b84:	40020058 	.word	0x40020058
 8001b88:	40020070 	.word	0x40020070
 8001b8c:	40020088 	.word	0x40020088
 8001b90:	400200a0 	.word	0x400200a0
 8001b94:	400200b8 	.word	0x400200b8
 8001b98:	40020410 	.word	0x40020410
 8001b9c:	40020428 	.word	0x40020428
 8001ba0:	40020440 	.word	0x40020440
 8001ba4:	40020458 	.word	0x40020458
 8001ba8:	40020470 	.word	0x40020470
 8001bac:	40020488 	.word	0x40020488
 8001bb0:	400204a0 	.word	0x400204a0
 8001bb4:	400204b8 	.word	0x400204b8
 8001bb8:	58025408 	.word	0x58025408
 8001bbc:	5802541c 	.word	0x5802541c
 8001bc0:	58025430 	.word	0x58025430
 8001bc4:	58025444 	.word	0x58025444
 8001bc8:	58025458 	.word	0x58025458
 8001bcc:	5802546c 	.word	0x5802546c
 8001bd0:	58025480 	.word	0x58025480
 8001bd4:	58025494 	.word	0x58025494

08001bd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e226      	b.n	8002042 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_DMA_Start_IT+0x2a>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e21f      	b.n	8002042 <HAL_DMA_Start_IT+0x46a>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	f040 820a 	bne.w	800202c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a68      	ldr	r2, [pc, #416]	; (8001dcc <HAL_DMA_Start_IT+0x1f4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d04a      	beq.n	8001cc6 <HAL_DMA_Start_IT+0xee>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a66      	ldr	r2, [pc, #408]	; (8001dd0 <HAL_DMA_Start_IT+0x1f8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d045      	beq.n	8001cc6 <HAL_DMA_Start_IT+0xee>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a65      	ldr	r2, [pc, #404]	; (8001dd4 <HAL_DMA_Start_IT+0x1fc>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d040      	beq.n	8001cc6 <HAL_DMA_Start_IT+0xee>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a63      	ldr	r2, [pc, #396]	; (8001dd8 <HAL_DMA_Start_IT+0x200>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d03b      	beq.n	8001cc6 <HAL_DMA_Start_IT+0xee>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a62      	ldr	r2, [pc, #392]	; (8001ddc <HAL_DMA_Start_IT+0x204>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d036      	beq.n	8001cc6 <HAL_DMA_Start_IT+0xee>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a60      	ldr	r2, [pc, #384]	; (8001de0 <HAL_DMA_Start_IT+0x208>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d031      	beq.n	8001cc6 <HAL_DMA_Start_IT+0xee>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a5f      	ldr	r2, [pc, #380]	; (8001de4 <HAL_DMA_Start_IT+0x20c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d02c      	beq.n	8001cc6 <HAL_DMA_Start_IT+0xee>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a5d      	ldr	r2, [pc, #372]	; (8001de8 <HAL_DMA_Start_IT+0x210>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d027      	beq.n	8001cc6 <HAL_DMA_Start_IT+0xee>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a5c      	ldr	r2, [pc, #368]	; (8001dec <HAL_DMA_Start_IT+0x214>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d022      	beq.n	8001cc6 <HAL_DMA_Start_IT+0xee>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a5a      	ldr	r2, [pc, #360]	; (8001df0 <HAL_DMA_Start_IT+0x218>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d01d      	beq.n	8001cc6 <HAL_DMA_Start_IT+0xee>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a59      	ldr	r2, [pc, #356]	; (8001df4 <HAL_DMA_Start_IT+0x21c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d018      	beq.n	8001cc6 <HAL_DMA_Start_IT+0xee>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a57      	ldr	r2, [pc, #348]	; (8001df8 <HAL_DMA_Start_IT+0x220>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d013      	beq.n	8001cc6 <HAL_DMA_Start_IT+0xee>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a56      	ldr	r2, [pc, #344]	; (8001dfc <HAL_DMA_Start_IT+0x224>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d00e      	beq.n	8001cc6 <HAL_DMA_Start_IT+0xee>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a54      	ldr	r2, [pc, #336]	; (8001e00 <HAL_DMA_Start_IT+0x228>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d009      	beq.n	8001cc6 <HAL_DMA_Start_IT+0xee>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a53      	ldr	r2, [pc, #332]	; (8001e04 <HAL_DMA_Start_IT+0x22c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d004      	beq.n	8001cc6 <HAL_DMA_Start_IT+0xee>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a51      	ldr	r2, [pc, #324]	; (8001e08 <HAL_DMA_Start_IT+0x230>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d108      	bne.n	8001cd8 <HAL_DMA_Start_IT+0x100>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0201 	bic.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e007      	b.n	8001ce8 <HAL_DMA_Start_IT+0x110>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f001 fe6a 	bl	80039c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a34      	ldr	r2, [pc, #208]	; (8001dcc <HAL_DMA_Start_IT+0x1f4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d04a      	beq.n	8001d94 <HAL_DMA_Start_IT+0x1bc>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a33      	ldr	r2, [pc, #204]	; (8001dd0 <HAL_DMA_Start_IT+0x1f8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d045      	beq.n	8001d94 <HAL_DMA_Start_IT+0x1bc>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a31      	ldr	r2, [pc, #196]	; (8001dd4 <HAL_DMA_Start_IT+0x1fc>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d040      	beq.n	8001d94 <HAL_DMA_Start_IT+0x1bc>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a30      	ldr	r2, [pc, #192]	; (8001dd8 <HAL_DMA_Start_IT+0x200>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d03b      	beq.n	8001d94 <HAL_DMA_Start_IT+0x1bc>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a2e      	ldr	r2, [pc, #184]	; (8001ddc <HAL_DMA_Start_IT+0x204>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d036      	beq.n	8001d94 <HAL_DMA_Start_IT+0x1bc>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a2d      	ldr	r2, [pc, #180]	; (8001de0 <HAL_DMA_Start_IT+0x208>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d031      	beq.n	8001d94 <HAL_DMA_Start_IT+0x1bc>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a2b      	ldr	r2, [pc, #172]	; (8001de4 <HAL_DMA_Start_IT+0x20c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d02c      	beq.n	8001d94 <HAL_DMA_Start_IT+0x1bc>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2a      	ldr	r2, [pc, #168]	; (8001de8 <HAL_DMA_Start_IT+0x210>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d027      	beq.n	8001d94 <HAL_DMA_Start_IT+0x1bc>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a28      	ldr	r2, [pc, #160]	; (8001dec <HAL_DMA_Start_IT+0x214>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d022      	beq.n	8001d94 <HAL_DMA_Start_IT+0x1bc>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a27      	ldr	r2, [pc, #156]	; (8001df0 <HAL_DMA_Start_IT+0x218>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d01d      	beq.n	8001d94 <HAL_DMA_Start_IT+0x1bc>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a25      	ldr	r2, [pc, #148]	; (8001df4 <HAL_DMA_Start_IT+0x21c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d018      	beq.n	8001d94 <HAL_DMA_Start_IT+0x1bc>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a24      	ldr	r2, [pc, #144]	; (8001df8 <HAL_DMA_Start_IT+0x220>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d013      	beq.n	8001d94 <HAL_DMA_Start_IT+0x1bc>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <HAL_DMA_Start_IT+0x224>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00e      	beq.n	8001d94 <HAL_DMA_Start_IT+0x1bc>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a21      	ldr	r2, [pc, #132]	; (8001e00 <HAL_DMA_Start_IT+0x228>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d009      	beq.n	8001d94 <HAL_DMA_Start_IT+0x1bc>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1f      	ldr	r2, [pc, #124]	; (8001e04 <HAL_DMA_Start_IT+0x22c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d004      	beq.n	8001d94 <HAL_DMA_Start_IT+0x1bc>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <HAL_DMA_Start_IT+0x230>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d101      	bne.n	8001d98 <HAL_DMA_Start_IT+0x1c0>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_DMA_Start_IT+0x1c2>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d036      	beq.n	8001e0c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f023 021e 	bic.w	r2, r3, #30
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 0216 	orr.w	r2, r2, #22
 8001db0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d03e      	beq.n	8001e38 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0208 	orr.w	r2, r2, #8
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	e035      	b.n	8001e38 <HAL_DMA_Start_IT+0x260>
 8001dcc:	40020010 	.word	0x40020010
 8001dd0:	40020028 	.word	0x40020028
 8001dd4:	40020040 	.word	0x40020040
 8001dd8:	40020058 	.word	0x40020058
 8001ddc:	40020070 	.word	0x40020070
 8001de0:	40020088 	.word	0x40020088
 8001de4:	400200a0 	.word	0x400200a0
 8001de8:	400200b8 	.word	0x400200b8
 8001dec:	40020410 	.word	0x40020410
 8001df0:	40020428 	.word	0x40020428
 8001df4:	40020440 	.word	0x40020440
 8001df8:	40020458 	.word	0x40020458
 8001dfc:	40020470 	.word	0x40020470
 8001e00:	40020488 	.word	0x40020488
 8001e04:	400204a0 	.word	0x400204a0
 8001e08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 020e 	bic.w	r2, r3, #14
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 020a 	orr.w	r2, r2, #10
 8001e1e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0204 	orr.w	r2, r2, #4
 8001e36:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a83      	ldr	r2, [pc, #524]	; (800204c <HAL_DMA_Start_IT+0x474>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d072      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a82      	ldr	r2, [pc, #520]	; (8002050 <HAL_DMA_Start_IT+0x478>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d06d      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a80      	ldr	r2, [pc, #512]	; (8002054 <HAL_DMA_Start_IT+0x47c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d068      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a7f      	ldr	r2, [pc, #508]	; (8002058 <HAL_DMA_Start_IT+0x480>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d063      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a7d      	ldr	r2, [pc, #500]	; (800205c <HAL_DMA_Start_IT+0x484>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d05e      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a7c      	ldr	r2, [pc, #496]	; (8002060 <HAL_DMA_Start_IT+0x488>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d059      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a7a      	ldr	r2, [pc, #488]	; (8002064 <HAL_DMA_Start_IT+0x48c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d054      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a79      	ldr	r2, [pc, #484]	; (8002068 <HAL_DMA_Start_IT+0x490>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d04f      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a77      	ldr	r2, [pc, #476]	; (800206c <HAL_DMA_Start_IT+0x494>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d04a      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a76      	ldr	r2, [pc, #472]	; (8002070 <HAL_DMA_Start_IT+0x498>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d045      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a74      	ldr	r2, [pc, #464]	; (8002074 <HAL_DMA_Start_IT+0x49c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d040      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a73      	ldr	r2, [pc, #460]	; (8002078 <HAL_DMA_Start_IT+0x4a0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d03b      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a71      	ldr	r2, [pc, #452]	; (800207c <HAL_DMA_Start_IT+0x4a4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d036      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a70      	ldr	r2, [pc, #448]	; (8002080 <HAL_DMA_Start_IT+0x4a8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d031      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a6e      	ldr	r2, [pc, #440]	; (8002084 <HAL_DMA_Start_IT+0x4ac>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d02c      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6d      	ldr	r2, [pc, #436]	; (8002088 <HAL_DMA_Start_IT+0x4b0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d027      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a6b      	ldr	r2, [pc, #428]	; (800208c <HAL_DMA_Start_IT+0x4b4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d022      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a6a      	ldr	r2, [pc, #424]	; (8002090 <HAL_DMA_Start_IT+0x4b8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d01d      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a68      	ldr	r2, [pc, #416]	; (8002094 <HAL_DMA_Start_IT+0x4bc>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d018      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a67      	ldr	r2, [pc, #412]	; (8002098 <HAL_DMA_Start_IT+0x4c0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d013      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a65      	ldr	r2, [pc, #404]	; (800209c <HAL_DMA_Start_IT+0x4c4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00e      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a64      	ldr	r2, [pc, #400]	; (80020a0 <HAL_DMA_Start_IT+0x4c8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d009      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a62      	ldr	r2, [pc, #392]	; (80020a4 <HAL_DMA_Start_IT+0x4cc>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d004      	beq.n	8001f28 <HAL_DMA_Start_IT+0x350>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a61      	ldr	r2, [pc, #388]	; (80020a8 <HAL_DMA_Start_IT+0x4d0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d101      	bne.n	8001f2c <HAL_DMA_Start_IT+0x354>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <HAL_DMA_Start_IT+0x356>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d01a      	beq.n	8001f68 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d007      	beq.n	8001f50 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f4e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f66:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a37      	ldr	r2, [pc, #220]	; (800204c <HAL_DMA_Start_IT+0x474>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d04a      	beq.n	8002008 <HAL_DMA_Start_IT+0x430>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a36      	ldr	r2, [pc, #216]	; (8002050 <HAL_DMA_Start_IT+0x478>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d045      	beq.n	8002008 <HAL_DMA_Start_IT+0x430>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a34      	ldr	r2, [pc, #208]	; (8002054 <HAL_DMA_Start_IT+0x47c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d040      	beq.n	8002008 <HAL_DMA_Start_IT+0x430>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a33      	ldr	r2, [pc, #204]	; (8002058 <HAL_DMA_Start_IT+0x480>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d03b      	beq.n	8002008 <HAL_DMA_Start_IT+0x430>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a31      	ldr	r2, [pc, #196]	; (800205c <HAL_DMA_Start_IT+0x484>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d036      	beq.n	8002008 <HAL_DMA_Start_IT+0x430>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a30      	ldr	r2, [pc, #192]	; (8002060 <HAL_DMA_Start_IT+0x488>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d031      	beq.n	8002008 <HAL_DMA_Start_IT+0x430>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a2e      	ldr	r2, [pc, #184]	; (8002064 <HAL_DMA_Start_IT+0x48c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d02c      	beq.n	8002008 <HAL_DMA_Start_IT+0x430>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a2d      	ldr	r2, [pc, #180]	; (8002068 <HAL_DMA_Start_IT+0x490>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d027      	beq.n	8002008 <HAL_DMA_Start_IT+0x430>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a2b      	ldr	r2, [pc, #172]	; (800206c <HAL_DMA_Start_IT+0x494>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d022      	beq.n	8002008 <HAL_DMA_Start_IT+0x430>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a2a      	ldr	r2, [pc, #168]	; (8002070 <HAL_DMA_Start_IT+0x498>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d01d      	beq.n	8002008 <HAL_DMA_Start_IT+0x430>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a28      	ldr	r2, [pc, #160]	; (8002074 <HAL_DMA_Start_IT+0x49c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d018      	beq.n	8002008 <HAL_DMA_Start_IT+0x430>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a27      	ldr	r2, [pc, #156]	; (8002078 <HAL_DMA_Start_IT+0x4a0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d013      	beq.n	8002008 <HAL_DMA_Start_IT+0x430>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a25      	ldr	r2, [pc, #148]	; (800207c <HAL_DMA_Start_IT+0x4a4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00e      	beq.n	8002008 <HAL_DMA_Start_IT+0x430>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a24      	ldr	r2, [pc, #144]	; (8002080 <HAL_DMA_Start_IT+0x4a8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d009      	beq.n	8002008 <HAL_DMA_Start_IT+0x430>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a22      	ldr	r2, [pc, #136]	; (8002084 <HAL_DMA_Start_IT+0x4ac>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d004      	beq.n	8002008 <HAL_DMA_Start_IT+0x430>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a21      	ldr	r2, [pc, #132]	; (8002088 <HAL_DMA_Start_IT+0x4b0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d108      	bne.n	800201a <HAL_DMA_Start_IT+0x442>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0201 	orr.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	e012      	b.n	8002040 <HAL_DMA_Start_IT+0x468>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0201 	orr.w	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	e009      	b.n	8002040 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002032:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002040:	7dfb      	ldrb	r3, [r7, #23]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40020010 	.word	0x40020010
 8002050:	40020028 	.word	0x40020028
 8002054:	40020040 	.word	0x40020040
 8002058:	40020058 	.word	0x40020058
 800205c:	40020070 	.word	0x40020070
 8002060:	40020088 	.word	0x40020088
 8002064:	400200a0 	.word	0x400200a0
 8002068:	400200b8 	.word	0x400200b8
 800206c:	40020410 	.word	0x40020410
 8002070:	40020428 	.word	0x40020428
 8002074:	40020440 	.word	0x40020440
 8002078:	40020458 	.word	0x40020458
 800207c:	40020470 	.word	0x40020470
 8002080:	40020488 	.word	0x40020488
 8002084:	400204a0 	.word	0x400204a0
 8002088:	400204b8 	.word	0x400204b8
 800208c:	58025408 	.word	0x58025408
 8002090:	5802541c 	.word	0x5802541c
 8002094:	58025430 	.word	0x58025430
 8002098:	58025444 	.word	0x58025444
 800209c:	58025458 	.word	0x58025458
 80020a0:	5802546c 	.word	0x5802546c
 80020a4:	58025480 	.word	0x58025480
 80020a8:	58025494 	.word	0x58025494

080020ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7ff f8e8 	bl	8001288 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e2dc      	b.n	800267e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d008      	beq.n	80020e2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2280      	movs	r2, #128	; 0x80
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e2cd      	b.n	800267e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a76      	ldr	r2, [pc, #472]	; (80022c0 <HAL_DMA_Abort+0x214>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d04a      	beq.n	8002182 <HAL_DMA_Abort+0xd6>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a74      	ldr	r2, [pc, #464]	; (80022c4 <HAL_DMA_Abort+0x218>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d045      	beq.n	8002182 <HAL_DMA_Abort+0xd6>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a73      	ldr	r2, [pc, #460]	; (80022c8 <HAL_DMA_Abort+0x21c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d040      	beq.n	8002182 <HAL_DMA_Abort+0xd6>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a71      	ldr	r2, [pc, #452]	; (80022cc <HAL_DMA_Abort+0x220>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d03b      	beq.n	8002182 <HAL_DMA_Abort+0xd6>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a70      	ldr	r2, [pc, #448]	; (80022d0 <HAL_DMA_Abort+0x224>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d036      	beq.n	8002182 <HAL_DMA_Abort+0xd6>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a6e      	ldr	r2, [pc, #440]	; (80022d4 <HAL_DMA_Abort+0x228>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d031      	beq.n	8002182 <HAL_DMA_Abort+0xd6>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a6d      	ldr	r2, [pc, #436]	; (80022d8 <HAL_DMA_Abort+0x22c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d02c      	beq.n	8002182 <HAL_DMA_Abort+0xd6>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a6b      	ldr	r2, [pc, #428]	; (80022dc <HAL_DMA_Abort+0x230>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d027      	beq.n	8002182 <HAL_DMA_Abort+0xd6>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a6a      	ldr	r2, [pc, #424]	; (80022e0 <HAL_DMA_Abort+0x234>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d022      	beq.n	8002182 <HAL_DMA_Abort+0xd6>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a68      	ldr	r2, [pc, #416]	; (80022e4 <HAL_DMA_Abort+0x238>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01d      	beq.n	8002182 <HAL_DMA_Abort+0xd6>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a67      	ldr	r2, [pc, #412]	; (80022e8 <HAL_DMA_Abort+0x23c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d018      	beq.n	8002182 <HAL_DMA_Abort+0xd6>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a65      	ldr	r2, [pc, #404]	; (80022ec <HAL_DMA_Abort+0x240>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_DMA_Abort+0xd6>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a64      	ldr	r2, [pc, #400]	; (80022f0 <HAL_DMA_Abort+0x244>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00e      	beq.n	8002182 <HAL_DMA_Abort+0xd6>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a62      	ldr	r2, [pc, #392]	; (80022f4 <HAL_DMA_Abort+0x248>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_DMA_Abort+0xd6>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a61      	ldr	r2, [pc, #388]	; (80022f8 <HAL_DMA_Abort+0x24c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d004      	beq.n	8002182 <HAL_DMA_Abort+0xd6>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a5f      	ldr	r2, [pc, #380]	; (80022fc <HAL_DMA_Abort+0x250>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d101      	bne.n	8002186 <HAL_DMA_Abort+0xda>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_DMA_Abort+0xdc>
 8002186:	2300      	movs	r3, #0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 021e 	bic.w	r2, r2, #30
 800219a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695a      	ldr	r2, [r3, #20]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021aa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	e00a      	b.n	80021ca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 020e 	bic.w	r2, r2, #14
 80021c2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a3c      	ldr	r2, [pc, #240]	; (80022c0 <HAL_DMA_Abort+0x214>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d072      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a3a      	ldr	r2, [pc, #232]	; (80022c4 <HAL_DMA_Abort+0x218>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d06d      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a39      	ldr	r2, [pc, #228]	; (80022c8 <HAL_DMA_Abort+0x21c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d068      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a37      	ldr	r2, [pc, #220]	; (80022cc <HAL_DMA_Abort+0x220>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d063      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a36      	ldr	r2, [pc, #216]	; (80022d0 <HAL_DMA_Abort+0x224>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d05e      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a34      	ldr	r2, [pc, #208]	; (80022d4 <HAL_DMA_Abort+0x228>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d059      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a33      	ldr	r2, [pc, #204]	; (80022d8 <HAL_DMA_Abort+0x22c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d054      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a31      	ldr	r2, [pc, #196]	; (80022dc <HAL_DMA_Abort+0x230>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d04f      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a30      	ldr	r2, [pc, #192]	; (80022e0 <HAL_DMA_Abort+0x234>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d04a      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2e      	ldr	r2, [pc, #184]	; (80022e4 <HAL_DMA_Abort+0x238>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d045      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a2d      	ldr	r2, [pc, #180]	; (80022e8 <HAL_DMA_Abort+0x23c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d040      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a2b      	ldr	r2, [pc, #172]	; (80022ec <HAL_DMA_Abort+0x240>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d03b      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <HAL_DMA_Abort+0x244>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d036      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a28      	ldr	r2, [pc, #160]	; (80022f4 <HAL_DMA_Abort+0x248>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d031      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a27      	ldr	r2, [pc, #156]	; (80022f8 <HAL_DMA_Abort+0x24c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d02c      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a25      	ldr	r2, [pc, #148]	; (80022fc <HAL_DMA_Abort+0x250>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d027      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a24      	ldr	r2, [pc, #144]	; (8002300 <HAL_DMA_Abort+0x254>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d022      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a22      	ldr	r2, [pc, #136]	; (8002304 <HAL_DMA_Abort+0x258>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d01d      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a21      	ldr	r2, [pc, #132]	; (8002308 <HAL_DMA_Abort+0x25c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d018      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a1f      	ldr	r2, [pc, #124]	; (800230c <HAL_DMA_Abort+0x260>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d013      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <HAL_DMA_Abort+0x264>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d00e      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1c      	ldr	r2, [pc, #112]	; (8002314 <HAL_DMA_Abort+0x268>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d009      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a1b      	ldr	r2, [pc, #108]	; (8002318 <HAL_DMA_Abort+0x26c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d004      	beq.n	80022ba <HAL_DMA_Abort+0x20e>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a19      	ldr	r2, [pc, #100]	; (800231c <HAL_DMA_Abort+0x270>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d132      	bne.n	8002320 <HAL_DMA_Abort+0x274>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e031      	b.n	8002322 <HAL_DMA_Abort+0x276>
 80022be:	bf00      	nop
 80022c0:	40020010 	.word	0x40020010
 80022c4:	40020028 	.word	0x40020028
 80022c8:	40020040 	.word	0x40020040
 80022cc:	40020058 	.word	0x40020058
 80022d0:	40020070 	.word	0x40020070
 80022d4:	40020088 	.word	0x40020088
 80022d8:	400200a0 	.word	0x400200a0
 80022dc:	400200b8 	.word	0x400200b8
 80022e0:	40020410 	.word	0x40020410
 80022e4:	40020428 	.word	0x40020428
 80022e8:	40020440 	.word	0x40020440
 80022ec:	40020458 	.word	0x40020458
 80022f0:	40020470 	.word	0x40020470
 80022f4:	40020488 	.word	0x40020488
 80022f8:	400204a0 	.word	0x400204a0
 80022fc:	400204b8 	.word	0x400204b8
 8002300:	58025408 	.word	0x58025408
 8002304:	5802541c 	.word	0x5802541c
 8002308:	58025430 	.word	0x58025430
 800230c:	58025444 	.word	0x58025444
 8002310:	58025458 	.word	0x58025458
 8002314:	5802546c 	.word	0x5802546c
 8002318:	58025480 	.word	0x58025480
 800231c:	58025494 	.word	0x58025494
 8002320:	2300      	movs	r3, #0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d007      	beq.n	8002336 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002334:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a6d      	ldr	r2, [pc, #436]	; (80024f0 <HAL_DMA_Abort+0x444>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d04a      	beq.n	80023d6 <HAL_DMA_Abort+0x32a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a6b      	ldr	r2, [pc, #428]	; (80024f4 <HAL_DMA_Abort+0x448>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d045      	beq.n	80023d6 <HAL_DMA_Abort+0x32a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a6a      	ldr	r2, [pc, #424]	; (80024f8 <HAL_DMA_Abort+0x44c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d040      	beq.n	80023d6 <HAL_DMA_Abort+0x32a>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a68      	ldr	r2, [pc, #416]	; (80024fc <HAL_DMA_Abort+0x450>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d03b      	beq.n	80023d6 <HAL_DMA_Abort+0x32a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a67      	ldr	r2, [pc, #412]	; (8002500 <HAL_DMA_Abort+0x454>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d036      	beq.n	80023d6 <HAL_DMA_Abort+0x32a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a65      	ldr	r2, [pc, #404]	; (8002504 <HAL_DMA_Abort+0x458>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d031      	beq.n	80023d6 <HAL_DMA_Abort+0x32a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a64      	ldr	r2, [pc, #400]	; (8002508 <HAL_DMA_Abort+0x45c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d02c      	beq.n	80023d6 <HAL_DMA_Abort+0x32a>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a62      	ldr	r2, [pc, #392]	; (800250c <HAL_DMA_Abort+0x460>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d027      	beq.n	80023d6 <HAL_DMA_Abort+0x32a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a61      	ldr	r2, [pc, #388]	; (8002510 <HAL_DMA_Abort+0x464>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d022      	beq.n	80023d6 <HAL_DMA_Abort+0x32a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a5f      	ldr	r2, [pc, #380]	; (8002514 <HAL_DMA_Abort+0x468>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d01d      	beq.n	80023d6 <HAL_DMA_Abort+0x32a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a5e      	ldr	r2, [pc, #376]	; (8002518 <HAL_DMA_Abort+0x46c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d018      	beq.n	80023d6 <HAL_DMA_Abort+0x32a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a5c      	ldr	r2, [pc, #368]	; (800251c <HAL_DMA_Abort+0x470>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d013      	beq.n	80023d6 <HAL_DMA_Abort+0x32a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a5b      	ldr	r2, [pc, #364]	; (8002520 <HAL_DMA_Abort+0x474>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d00e      	beq.n	80023d6 <HAL_DMA_Abort+0x32a>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a59      	ldr	r2, [pc, #356]	; (8002524 <HAL_DMA_Abort+0x478>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d009      	beq.n	80023d6 <HAL_DMA_Abort+0x32a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a58      	ldr	r2, [pc, #352]	; (8002528 <HAL_DMA_Abort+0x47c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d004      	beq.n	80023d6 <HAL_DMA_Abort+0x32a>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a56      	ldr	r2, [pc, #344]	; (800252c <HAL_DMA_Abort+0x480>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d108      	bne.n	80023e8 <HAL_DMA_Abort+0x33c>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0201 	bic.w	r2, r2, #1
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	e007      	b.n	80023f8 <HAL_DMA_Abort+0x34c>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80023f8:	e013      	b.n	8002422 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023fa:	f7fe ff45 	bl	8001288 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b05      	cmp	r3, #5
 8002406:	d90c      	bls.n	8002422 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2220      	movs	r2, #32
 800240c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2203      	movs	r2, #3
 8002412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e12d      	b.n	800267e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1e5      	bne.n	80023fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a2f      	ldr	r2, [pc, #188]	; (80024f0 <HAL_DMA_Abort+0x444>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d04a      	beq.n	80024ce <HAL_DMA_Abort+0x422>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a2d      	ldr	r2, [pc, #180]	; (80024f4 <HAL_DMA_Abort+0x448>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d045      	beq.n	80024ce <HAL_DMA_Abort+0x422>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a2c      	ldr	r2, [pc, #176]	; (80024f8 <HAL_DMA_Abort+0x44c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d040      	beq.n	80024ce <HAL_DMA_Abort+0x422>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a2a      	ldr	r2, [pc, #168]	; (80024fc <HAL_DMA_Abort+0x450>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d03b      	beq.n	80024ce <HAL_DMA_Abort+0x422>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a29      	ldr	r2, [pc, #164]	; (8002500 <HAL_DMA_Abort+0x454>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d036      	beq.n	80024ce <HAL_DMA_Abort+0x422>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a27      	ldr	r2, [pc, #156]	; (8002504 <HAL_DMA_Abort+0x458>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d031      	beq.n	80024ce <HAL_DMA_Abort+0x422>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a26      	ldr	r2, [pc, #152]	; (8002508 <HAL_DMA_Abort+0x45c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d02c      	beq.n	80024ce <HAL_DMA_Abort+0x422>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a24      	ldr	r2, [pc, #144]	; (800250c <HAL_DMA_Abort+0x460>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d027      	beq.n	80024ce <HAL_DMA_Abort+0x422>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a23      	ldr	r2, [pc, #140]	; (8002510 <HAL_DMA_Abort+0x464>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d022      	beq.n	80024ce <HAL_DMA_Abort+0x422>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a21      	ldr	r2, [pc, #132]	; (8002514 <HAL_DMA_Abort+0x468>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d01d      	beq.n	80024ce <HAL_DMA_Abort+0x422>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a20      	ldr	r2, [pc, #128]	; (8002518 <HAL_DMA_Abort+0x46c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d018      	beq.n	80024ce <HAL_DMA_Abort+0x422>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a1e      	ldr	r2, [pc, #120]	; (800251c <HAL_DMA_Abort+0x470>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <HAL_DMA_Abort+0x422>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <HAL_DMA_Abort+0x474>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00e      	beq.n	80024ce <HAL_DMA_Abort+0x422>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a1b      	ldr	r2, [pc, #108]	; (8002524 <HAL_DMA_Abort+0x478>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d009      	beq.n	80024ce <HAL_DMA_Abort+0x422>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a1a      	ldr	r2, [pc, #104]	; (8002528 <HAL_DMA_Abort+0x47c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d004      	beq.n	80024ce <HAL_DMA_Abort+0x422>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a18      	ldr	r2, [pc, #96]	; (800252c <HAL_DMA_Abort+0x480>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d101      	bne.n	80024d2 <HAL_DMA_Abort+0x426>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_DMA_Abort+0x428>
 80024d2:	2300      	movs	r3, #0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d02b      	beq.n	8002530 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	f003 031f 	and.w	r3, r3, #31
 80024e6:	223f      	movs	r2, #63	; 0x3f
 80024e8:	409a      	lsls	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	e02a      	b.n	8002546 <HAL_DMA_Abort+0x49a>
 80024f0:	40020010 	.word	0x40020010
 80024f4:	40020028 	.word	0x40020028
 80024f8:	40020040 	.word	0x40020040
 80024fc:	40020058 	.word	0x40020058
 8002500:	40020070 	.word	0x40020070
 8002504:	40020088 	.word	0x40020088
 8002508:	400200a0 	.word	0x400200a0
 800250c:	400200b8 	.word	0x400200b8
 8002510:	40020410 	.word	0x40020410
 8002514:	40020428 	.word	0x40020428
 8002518:	40020440 	.word	0x40020440
 800251c:	40020458 	.word	0x40020458
 8002520:	40020470 	.word	0x40020470
 8002524:	40020488 	.word	0x40020488
 8002528:	400204a0 	.word	0x400204a0
 800252c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	2201      	movs	r2, #1
 8002540:	409a      	lsls	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a4f      	ldr	r2, [pc, #316]	; (8002688 <HAL_DMA_Abort+0x5dc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d072      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a4d      	ldr	r2, [pc, #308]	; (800268c <HAL_DMA_Abort+0x5e0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d06d      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a4c      	ldr	r2, [pc, #304]	; (8002690 <HAL_DMA_Abort+0x5e4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d068      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a4a      	ldr	r2, [pc, #296]	; (8002694 <HAL_DMA_Abort+0x5e8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d063      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a49      	ldr	r2, [pc, #292]	; (8002698 <HAL_DMA_Abort+0x5ec>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d05e      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a47      	ldr	r2, [pc, #284]	; (800269c <HAL_DMA_Abort+0x5f0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d059      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a46      	ldr	r2, [pc, #280]	; (80026a0 <HAL_DMA_Abort+0x5f4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d054      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a44      	ldr	r2, [pc, #272]	; (80026a4 <HAL_DMA_Abort+0x5f8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d04f      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a43      	ldr	r2, [pc, #268]	; (80026a8 <HAL_DMA_Abort+0x5fc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d04a      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a41      	ldr	r2, [pc, #260]	; (80026ac <HAL_DMA_Abort+0x600>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d045      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a40      	ldr	r2, [pc, #256]	; (80026b0 <HAL_DMA_Abort+0x604>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d040      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a3e      	ldr	r2, [pc, #248]	; (80026b4 <HAL_DMA_Abort+0x608>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d03b      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a3d      	ldr	r2, [pc, #244]	; (80026b8 <HAL_DMA_Abort+0x60c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d036      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a3b      	ldr	r2, [pc, #236]	; (80026bc <HAL_DMA_Abort+0x610>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d031      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a3a      	ldr	r2, [pc, #232]	; (80026c0 <HAL_DMA_Abort+0x614>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d02c      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a38      	ldr	r2, [pc, #224]	; (80026c4 <HAL_DMA_Abort+0x618>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d027      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a37      	ldr	r2, [pc, #220]	; (80026c8 <HAL_DMA_Abort+0x61c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d022      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a35      	ldr	r2, [pc, #212]	; (80026cc <HAL_DMA_Abort+0x620>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01d      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a34      	ldr	r2, [pc, #208]	; (80026d0 <HAL_DMA_Abort+0x624>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d018      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a32      	ldr	r2, [pc, #200]	; (80026d4 <HAL_DMA_Abort+0x628>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a31      	ldr	r2, [pc, #196]	; (80026d8 <HAL_DMA_Abort+0x62c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00e      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a2f      	ldr	r2, [pc, #188]	; (80026dc <HAL_DMA_Abort+0x630>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d009      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a2e      	ldr	r2, [pc, #184]	; (80026e0 <HAL_DMA_Abort+0x634>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d004      	beq.n	8002636 <HAL_DMA_Abort+0x58a>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a2c      	ldr	r2, [pc, #176]	; (80026e4 <HAL_DMA_Abort+0x638>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d101      	bne.n	800263a <HAL_DMA_Abort+0x58e>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <HAL_DMA_Abort+0x590>
 800263a:	2300      	movs	r3, #0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d015      	beq.n	800266c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002648:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00c      	beq.n	800266c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800265c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002660:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800266a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40020010 	.word	0x40020010
 800268c:	40020028 	.word	0x40020028
 8002690:	40020040 	.word	0x40020040
 8002694:	40020058 	.word	0x40020058
 8002698:	40020070 	.word	0x40020070
 800269c:	40020088 	.word	0x40020088
 80026a0:	400200a0 	.word	0x400200a0
 80026a4:	400200b8 	.word	0x400200b8
 80026a8:	40020410 	.word	0x40020410
 80026ac:	40020428 	.word	0x40020428
 80026b0:	40020440 	.word	0x40020440
 80026b4:	40020458 	.word	0x40020458
 80026b8:	40020470 	.word	0x40020470
 80026bc:	40020488 	.word	0x40020488
 80026c0:	400204a0 	.word	0x400204a0
 80026c4:	400204b8 	.word	0x400204b8
 80026c8:	58025408 	.word	0x58025408
 80026cc:	5802541c 	.word	0x5802541c
 80026d0:	58025430 	.word	0x58025430
 80026d4:	58025444 	.word	0x58025444
 80026d8:	58025458 	.word	0x58025458
 80026dc:	5802546c 	.word	0x5802546c
 80026e0:	58025480 	.word	0x58025480
 80026e4:	58025494 	.word	0x58025494

080026e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e237      	b.n	8002b6a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d004      	beq.n	8002710 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2280      	movs	r2, #128	; 0x80
 800270a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e22c      	b.n	8002b6a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a5c      	ldr	r2, [pc, #368]	; (8002888 <HAL_DMA_Abort_IT+0x1a0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d04a      	beq.n	80027b0 <HAL_DMA_Abort_IT+0xc8>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a5b      	ldr	r2, [pc, #364]	; (800288c <HAL_DMA_Abort_IT+0x1a4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d045      	beq.n	80027b0 <HAL_DMA_Abort_IT+0xc8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a59      	ldr	r2, [pc, #356]	; (8002890 <HAL_DMA_Abort_IT+0x1a8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d040      	beq.n	80027b0 <HAL_DMA_Abort_IT+0xc8>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a58      	ldr	r2, [pc, #352]	; (8002894 <HAL_DMA_Abort_IT+0x1ac>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d03b      	beq.n	80027b0 <HAL_DMA_Abort_IT+0xc8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a56      	ldr	r2, [pc, #344]	; (8002898 <HAL_DMA_Abort_IT+0x1b0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d036      	beq.n	80027b0 <HAL_DMA_Abort_IT+0xc8>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a55      	ldr	r2, [pc, #340]	; (800289c <HAL_DMA_Abort_IT+0x1b4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d031      	beq.n	80027b0 <HAL_DMA_Abort_IT+0xc8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a53      	ldr	r2, [pc, #332]	; (80028a0 <HAL_DMA_Abort_IT+0x1b8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d02c      	beq.n	80027b0 <HAL_DMA_Abort_IT+0xc8>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a52      	ldr	r2, [pc, #328]	; (80028a4 <HAL_DMA_Abort_IT+0x1bc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d027      	beq.n	80027b0 <HAL_DMA_Abort_IT+0xc8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a50      	ldr	r2, [pc, #320]	; (80028a8 <HAL_DMA_Abort_IT+0x1c0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d022      	beq.n	80027b0 <HAL_DMA_Abort_IT+0xc8>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a4f      	ldr	r2, [pc, #316]	; (80028ac <HAL_DMA_Abort_IT+0x1c4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d01d      	beq.n	80027b0 <HAL_DMA_Abort_IT+0xc8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a4d      	ldr	r2, [pc, #308]	; (80028b0 <HAL_DMA_Abort_IT+0x1c8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d018      	beq.n	80027b0 <HAL_DMA_Abort_IT+0xc8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a4c      	ldr	r2, [pc, #304]	; (80028b4 <HAL_DMA_Abort_IT+0x1cc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d013      	beq.n	80027b0 <HAL_DMA_Abort_IT+0xc8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a4a      	ldr	r2, [pc, #296]	; (80028b8 <HAL_DMA_Abort_IT+0x1d0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00e      	beq.n	80027b0 <HAL_DMA_Abort_IT+0xc8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a49      	ldr	r2, [pc, #292]	; (80028bc <HAL_DMA_Abort_IT+0x1d4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d009      	beq.n	80027b0 <HAL_DMA_Abort_IT+0xc8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a47      	ldr	r2, [pc, #284]	; (80028c0 <HAL_DMA_Abort_IT+0x1d8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_DMA_Abort_IT+0xc8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a46      	ldr	r2, [pc, #280]	; (80028c4 <HAL_DMA_Abort_IT+0x1dc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d101      	bne.n	80027b4 <HAL_DMA_Abort_IT+0xcc>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_DMA_Abort_IT+0xce>
 80027b4:	2300      	movs	r3, #0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8086 	beq.w	80028c8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2204      	movs	r2, #4
 80027c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a2f      	ldr	r2, [pc, #188]	; (8002888 <HAL_DMA_Abort_IT+0x1a0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d04a      	beq.n	8002864 <HAL_DMA_Abort_IT+0x17c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a2e      	ldr	r2, [pc, #184]	; (800288c <HAL_DMA_Abort_IT+0x1a4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d045      	beq.n	8002864 <HAL_DMA_Abort_IT+0x17c>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a2c      	ldr	r2, [pc, #176]	; (8002890 <HAL_DMA_Abort_IT+0x1a8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d040      	beq.n	8002864 <HAL_DMA_Abort_IT+0x17c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a2b      	ldr	r2, [pc, #172]	; (8002894 <HAL_DMA_Abort_IT+0x1ac>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d03b      	beq.n	8002864 <HAL_DMA_Abort_IT+0x17c>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a29      	ldr	r2, [pc, #164]	; (8002898 <HAL_DMA_Abort_IT+0x1b0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d036      	beq.n	8002864 <HAL_DMA_Abort_IT+0x17c>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a28      	ldr	r2, [pc, #160]	; (800289c <HAL_DMA_Abort_IT+0x1b4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d031      	beq.n	8002864 <HAL_DMA_Abort_IT+0x17c>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a26      	ldr	r2, [pc, #152]	; (80028a0 <HAL_DMA_Abort_IT+0x1b8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d02c      	beq.n	8002864 <HAL_DMA_Abort_IT+0x17c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a25      	ldr	r2, [pc, #148]	; (80028a4 <HAL_DMA_Abort_IT+0x1bc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d027      	beq.n	8002864 <HAL_DMA_Abort_IT+0x17c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a23      	ldr	r2, [pc, #140]	; (80028a8 <HAL_DMA_Abort_IT+0x1c0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d022      	beq.n	8002864 <HAL_DMA_Abort_IT+0x17c>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a22      	ldr	r2, [pc, #136]	; (80028ac <HAL_DMA_Abort_IT+0x1c4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d01d      	beq.n	8002864 <HAL_DMA_Abort_IT+0x17c>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a20      	ldr	r2, [pc, #128]	; (80028b0 <HAL_DMA_Abort_IT+0x1c8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d018      	beq.n	8002864 <HAL_DMA_Abort_IT+0x17c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1f      	ldr	r2, [pc, #124]	; (80028b4 <HAL_DMA_Abort_IT+0x1cc>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d013      	beq.n	8002864 <HAL_DMA_Abort_IT+0x17c>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <HAL_DMA_Abort_IT+0x1d0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00e      	beq.n	8002864 <HAL_DMA_Abort_IT+0x17c>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1c      	ldr	r2, [pc, #112]	; (80028bc <HAL_DMA_Abort_IT+0x1d4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d009      	beq.n	8002864 <HAL_DMA_Abort_IT+0x17c>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1a      	ldr	r2, [pc, #104]	; (80028c0 <HAL_DMA_Abort_IT+0x1d8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d004      	beq.n	8002864 <HAL_DMA_Abort_IT+0x17c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a19      	ldr	r2, [pc, #100]	; (80028c4 <HAL_DMA_Abort_IT+0x1dc>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d108      	bne.n	8002876 <HAL_DMA_Abort_IT+0x18e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	e178      	b.n	8002b68 <HAL_DMA_Abort_IT+0x480>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0201 	bic.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	e16f      	b.n	8002b68 <HAL_DMA_Abort_IT+0x480>
 8002888:	40020010 	.word	0x40020010
 800288c:	40020028 	.word	0x40020028
 8002890:	40020040 	.word	0x40020040
 8002894:	40020058 	.word	0x40020058
 8002898:	40020070 	.word	0x40020070
 800289c:	40020088 	.word	0x40020088
 80028a0:	400200a0 	.word	0x400200a0
 80028a4:	400200b8 	.word	0x400200b8
 80028a8:	40020410 	.word	0x40020410
 80028ac:	40020428 	.word	0x40020428
 80028b0:	40020440 	.word	0x40020440
 80028b4:	40020458 	.word	0x40020458
 80028b8:	40020470 	.word	0x40020470
 80028bc:	40020488 	.word	0x40020488
 80028c0:	400204a0 	.word	0x400204a0
 80028c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 020e 	bic.w	r2, r2, #14
 80028d6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a6c      	ldr	r2, [pc, #432]	; (8002a90 <HAL_DMA_Abort_IT+0x3a8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d04a      	beq.n	8002978 <HAL_DMA_Abort_IT+0x290>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a6b      	ldr	r2, [pc, #428]	; (8002a94 <HAL_DMA_Abort_IT+0x3ac>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d045      	beq.n	8002978 <HAL_DMA_Abort_IT+0x290>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a69      	ldr	r2, [pc, #420]	; (8002a98 <HAL_DMA_Abort_IT+0x3b0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d040      	beq.n	8002978 <HAL_DMA_Abort_IT+0x290>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a68      	ldr	r2, [pc, #416]	; (8002a9c <HAL_DMA_Abort_IT+0x3b4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d03b      	beq.n	8002978 <HAL_DMA_Abort_IT+0x290>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a66      	ldr	r2, [pc, #408]	; (8002aa0 <HAL_DMA_Abort_IT+0x3b8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d036      	beq.n	8002978 <HAL_DMA_Abort_IT+0x290>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a65      	ldr	r2, [pc, #404]	; (8002aa4 <HAL_DMA_Abort_IT+0x3bc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d031      	beq.n	8002978 <HAL_DMA_Abort_IT+0x290>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a63      	ldr	r2, [pc, #396]	; (8002aa8 <HAL_DMA_Abort_IT+0x3c0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d02c      	beq.n	8002978 <HAL_DMA_Abort_IT+0x290>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a62      	ldr	r2, [pc, #392]	; (8002aac <HAL_DMA_Abort_IT+0x3c4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d027      	beq.n	8002978 <HAL_DMA_Abort_IT+0x290>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a60      	ldr	r2, [pc, #384]	; (8002ab0 <HAL_DMA_Abort_IT+0x3c8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d022      	beq.n	8002978 <HAL_DMA_Abort_IT+0x290>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a5f      	ldr	r2, [pc, #380]	; (8002ab4 <HAL_DMA_Abort_IT+0x3cc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d01d      	beq.n	8002978 <HAL_DMA_Abort_IT+0x290>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a5d      	ldr	r2, [pc, #372]	; (8002ab8 <HAL_DMA_Abort_IT+0x3d0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d018      	beq.n	8002978 <HAL_DMA_Abort_IT+0x290>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a5c      	ldr	r2, [pc, #368]	; (8002abc <HAL_DMA_Abort_IT+0x3d4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d013      	beq.n	8002978 <HAL_DMA_Abort_IT+0x290>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a5a      	ldr	r2, [pc, #360]	; (8002ac0 <HAL_DMA_Abort_IT+0x3d8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00e      	beq.n	8002978 <HAL_DMA_Abort_IT+0x290>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a59      	ldr	r2, [pc, #356]	; (8002ac4 <HAL_DMA_Abort_IT+0x3dc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d009      	beq.n	8002978 <HAL_DMA_Abort_IT+0x290>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a57      	ldr	r2, [pc, #348]	; (8002ac8 <HAL_DMA_Abort_IT+0x3e0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d004      	beq.n	8002978 <HAL_DMA_Abort_IT+0x290>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a56      	ldr	r2, [pc, #344]	; (8002acc <HAL_DMA_Abort_IT+0x3e4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d108      	bne.n	800298a <HAL_DMA_Abort_IT+0x2a2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0201 	bic.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	e007      	b.n	800299a <HAL_DMA_Abort_IT+0x2b2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0201 	bic.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a3c      	ldr	r2, [pc, #240]	; (8002a90 <HAL_DMA_Abort_IT+0x3a8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d072      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a3a      	ldr	r2, [pc, #232]	; (8002a94 <HAL_DMA_Abort_IT+0x3ac>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d06d      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a39      	ldr	r2, [pc, #228]	; (8002a98 <HAL_DMA_Abort_IT+0x3b0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d068      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a37      	ldr	r2, [pc, #220]	; (8002a9c <HAL_DMA_Abort_IT+0x3b4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d063      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a36      	ldr	r2, [pc, #216]	; (8002aa0 <HAL_DMA_Abort_IT+0x3b8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d05e      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a34      	ldr	r2, [pc, #208]	; (8002aa4 <HAL_DMA_Abort_IT+0x3bc>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d059      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a33      	ldr	r2, [pc, #204]	; (8002aa8 <HAL_DMA_Abort_IT+0x3c0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d054      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a31      	ldr	r2, [pc, #196]	; (8002aac <HAL_DMA_Abort_IT+0x3c4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d04f      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a30      	ldr	r2, [pc, #192]	; (8002ab0 <HAL_DMA_Abort_IT+0x3c8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d04a      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a2e      	ldr	r2, [pc, #184]	; (8002ab4 <HAL_DMA_Abort_IT+0x3cc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d045      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a2d      	ldr	r2, [pc, #180]	; (8002ab8 <HAL_DMA_Abort_IT+0x3d0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d040      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a2b      	ldr	r2, [pc, #172]	; (8002abc <HAL_DMA_Abort_IT+0x3d4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d03b      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2a      	ldr	r2, [pc, #168]	; (8002ac0 <HAL_DMA_Abort_IT+0x3d8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d036      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a28      	ldr	r2, [pc, #160]	; (8002ac4 <HAL_DMA_Abort_IT+0x3dc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d031      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a27      	ldr	r2, [pc, #156]	; (8002ac8 <HAL_DMA_Abort_IT+0x3e0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d02c      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a25      	ldr	r2, [pc, #148]	; (8002acc <HAL_DMA_Abort_IT+0x3e4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d027      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a24      	ldr	r2, [pc, #144]	; (8002ad0 <HAL_DMA_Abort_IT+0x3e8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d022      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a22      	ldr	r2, [pc, #136]	; (8002ad4 <HAL_DMA_Abort_IT+0x3ec>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01d      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a21      	ldr	r2, [pc, #132]	; (8002ad8 <HAL_DMA_Abort_IT+0x3f0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d018      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1f      	ldr	r2, [pc, #124]	; (8002adc <HAL_DMA_Abort_IT+0x3f4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d013      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1e      	ldr	r2, [pc, #120]	; (8002ae0 <HAL_DMA_Abort_IT+0x3f8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d00e      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1c      	ldr	r2, [pc, #112]	; (8002ae4 <HAL_DMA_Abort_IT+0x3fc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d009      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1b      	ldr	r2, [pc, #108]	; (8002ae8 <HAL_DMA_Abort_IT+0x400>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d004      	beq.n	8002a8a <HAL_DMA_Abort_IT+0x3a2>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a19      	ldr	r2, [pc, #100]	; (8002aec <HAL_DMA_Abort_IT+0x404>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d132      	bne.n	8002af0 <HAL_DMA_Abort_IT+0x408>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e031      	b.n	8002af2 <HAL_DMA_Abort_IT+0x40a>
 8002a8e:	bf00      	nop
 8002a90:	40020010 	.word	0x40020010
 8002a94:	40020028 	.word	0x40020028
 8002a98:	40020040 	.word	0x40020040
 8002a9c:	40020058 	.word	0x40020058
 8002aa0:	40020070 	.word	0x40020070
 8002aa4:	40020088 	.word	0x40020088
 8002aa8:	400200a0 	.word	0x400200a0
 8002aac:	400200b8 	.word	0x400200b8
 8002ab0:	40020410 	.word	0x40020410
 8002ab4:	40020428 	.word	0x40020428
 8002ab8:	40020440 	.word	0x40020440
 8002abc:	40020458 	.word	0x40020458
 8002ac0:	40020470 	.word	0x40020470
 8002ac4:	40020488 	.word	0x40020488
 8002ac8:	400204a0 	.word	0x400204a0
 8002acc:	400204b8 	.word	0x400204b8
 8002ad0:	58025408 	.word	0x58025408
 8002ad4:	5802541c 	.word	0x5802541c
 8002ad8:	58025430 	.word	0x58025430
 8002adc:	58025444 	.word	0x58025444
 8002ae0:	58025458 	.word	0x58025458
 8002ae4:	5802546c 	.word	0x5802546c
 8002ae8:	58025480 	.word	0x58025480
 8002aec:	58025494 	.word	0x58025494
 8002af0:	2300      	movs	r3, #0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d028      	beq.n	8002b48 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b04:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	2201      	movs	r2, #1
 8002b16:	409a      	lsls	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b24:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00c      	beq.n	8002b48 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b3c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b46:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop

08002b74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08a      	sub	sp, #40	; 0x28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b80:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <HAL_DMA_IRQHandler+0x1ac>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a67      	ldr	r2, [pc, #412]	; (8002d24 <HAL_DMA_IRQHandler+0x1b0>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	0a9b      	lsrs	r3, r3, #10
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b92:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a5f      	ldr	r2, [pc, #380]	; (8002d28 <HAL_DMA_IRQHandler+0x1b4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d04a      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xd2>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a5d      	ldr	r2, [pc, #372]	; (8002d2c <HAL_DMA_IRQHandler+0x1b8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d045      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xd2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a5c      	ldr	r2, [pc, #368]	; (8002d30 <HAL_DMA_IRQHandler+0x1bc>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d040      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xd2>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a5a      	ldr	r2, [pc, #360]	; (8002d34 <HAL_DMA_IRQHandler+0x1c0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d03b      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xd2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a59      	ldr	r2, [pc, #356]	; (8002d38 <HAL_DMA_IRQHandler+0x1c4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d036      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xd2>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a57      	ldr	r2, [pc, #348]	; (8002d3c <HAL_DMA_IRQHandler+0x1c8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d031      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xd2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a56      	ldr	r2, [pc, #344]	; (8002d40 <HAL_DMA_IRQHandler+0x1cc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d02c      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xd2>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a54      	ldr	r2, [pc, #336]	; (8002d44 <HAL_DMA_IRQHandler+0x1d0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d027      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xd2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a53      	ldr	r2, [pc, #332]	; (8002d48 <HAL_DMA_IRQHandler+0x1d4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d022      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xd2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a51      	ldr	r2, [pc, #324]	; (8002d4c <HAL_DMA_IRQHandler+0x1d8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01d      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xd2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a50      	ldr	r2, [pc, #320]	; (8002d50 <HAL_DMA_IRQHandler+0x1dc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d018      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xd2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a4e      	ldr	r2, [pc, #312]	; (8002d54 <HAL_DMA_IRQHandler+0x1e0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xd2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a4d      	ldr	r2, [pc, #308]	; (8002d58 <HAL_DMA_IRQHandler+0x1e4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00e      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xd2>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a4b      	ldr	r2, [pc, #300]	; (8002d5c <HAL_DMA_IRQHandler+0x1e8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d009      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xd2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a4a      	ldr	r2, [pc, #296]	; (8002d60 <HAL_DMA_IRQHandler+0x1ec>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d004      	beq.n	8002c46 <HAL_DMA_IRQHandler+0xd2>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a48      	ldr	r2, [pc, #288]	; (8002d64 <HAL_DMA_IRQHandler+0x1f0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d101      	bne.n	8002c4a <HAL_DMA_IRQHandler+0xd6>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <HAL_DMA_IRQHandler+0xd8>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 842b 	beq.w	80034a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	2208      	movs	r2, #8
 8002c5c:	409a      	lsls	r2, r3
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80a2 	beq.w	8002dac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a2e      	ldr	r2, [pc, #184]	; (8002d28 <HAL_DMA_IRQHandler+0x1b4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d04a      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x194>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a2d      	ldr	r2, [pc, #180]	; (8002d2c <HAL_DMA_IRQHandler+0x1b8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d045      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x194>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a2b      	ldr	r2, [pc, #172]	; (8002d30 <HAL_DMA_IRQHandler+0x1bc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d040      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x194>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a2a      	ldr	r2, [pc, #168]	; (8002d34 <HAL_DMA_IRQHandler+0x1c0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d03b      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x194>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a28      	ldr	r2, [pc, #160]	; (8002d38 <HAL_DMA_IRQHandler+0x1c4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d036      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x194>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a27      	ldr	r2, [pc, #156]	; (8002d3c <HAL_DMA_IRQHandler+0x1c8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d031      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x194>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a25      	ldr	r2, [pc, #148]	; (8002d40 <HAL_DMA_IRQHandler+0x1cc>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d02c      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x194>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a24      	ldr	r2, [pc, #144]	; (8002d44 <HAL_DMA_IRQHandler+0x1d0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d027      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x194>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a22      	ldr	r2, [pc, #136]	; (8002d48 <HAL_DMA_IRQHandler+0x1d4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d022      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x194>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <HAL_DMA_IRQHandler+0x1d8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d01d      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x194>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a1f      	ldr	r2, [pc, #124]	; (8002d50 <HAL_DMA_IRQHandler+0x1dc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d018      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x194>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1e      	ldr	r2, [pc, #120]	; (8002d54 <HAL_DMA_IRQHandler+0x1e0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x194>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1c      	ldr	r2, [pc, #112]	; (8002d58 <HAL_DMA_IRQHandler+0x1e4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00e      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x194>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1b      	ldr	r2, [pc, #108]	; (8002d5c <HAL_DMA_IRQHandler+0x1e8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d009      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x194>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a19      	ldr	r2, [pc, #100]	; (8002d60 <HAL_DMA_IRQHandler+0x1ec>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d004      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x194>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a18      	ldr	r2, [pc, #96]	; (8002d64 <HAL_DMA_IRQHandler+0x1f0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d12f      	bne.n	8002d68 <HAL_DMA_IRQHandler+0x1f4>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	bf14      	ite	ne
 8002d16:	2301      	movne	r3, #1
 8002d18:	2300      	moveq	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	e02e      	b.n	8002d7c <HAL_DMA_IRQHandler+0x208>
 8002d1e:	bf00      	nop
 8002d20:	24000000 	.word	0x24000000
 8002d24:	1b4e81b5 	.word	0x1b4e81b5
 8002d28:	40020010 	.word	0x40020010
 8002d2c:	40020028 	.word	0x40020028
 8002d30:	40020040 	.word	0x40020040
 8002d34:	40020058 	.word	0x40020058
 8002d38:	40020070 	.word	0x40020070
 8002d3c:	40020088 	.word	0x40020088
 8002d40:	400200a0 	.word	0x400200a0
 8002d44:	400200b8 	.word	0x400200b8
 8002d48:	40020410 	.word	0x40020410
 8002d4c:	40020428 	.word	0x40020428
 8002d50:	40020440 	.word	0x40020440
 8002d54:	40020458 	.word	0x40020458
 8002d58:	40020470 	.word	0x40020470
 8002d5c:	40020488 	.word	0x40020488
 8002d60:	400204a0 	.word	0x400204a0
 8002d64:	400204b8 	.word	0x400204b8
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	bf14      	ite	ne
 8002d76:	2301      	movne	r3, #1
 8002d78:	2300      	moveq	r3, #0
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d015      	beq.n	8002dac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0204 	bic.w	r2, r2, #4
 8002d8e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	2208      	movs	r2, #8
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	f043 0201 	orr.w	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d06e      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a69      	ldr	r2, [pc, #420]	; (8002f6c <HAL_DMA_IRQHandler+0x3f8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d04a      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x2ee>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a67      	ldr	r2, [pc, #412]	; (8002f70 <HAL_DMA_IRQHandler+0x3fc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d045      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x2ee>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a66      	ldr	r2, [pc, #408]	; (8002f74 <HAL_DMA_IRQHandler+0x400>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d040      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x2ee>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a64      	ldr	r2, [pc, #400]	; (8002f78 <HAL_DMA_IRQHandler+0x404>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d03b      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x2ee>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a63      	ldr	r2, [pc, #396]	; (8002f7c <HAL_DMA_IRQHandler+0x408>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d036      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x2ee>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a61      	ldr	r2, [pc, #388]	; (8002f80 <HAL_DMA_IRQHandler+0x40c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d031      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x2ee>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a60      	ldr	r2, [pc, #384]	; (8002f84 <HAL_DMA_IRQHandler+0x410>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d02c      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x2ee>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a5e      	ldr	r2, [pc, #376]	; (8002f88 <HAL_DMA_IRQHandler+0x414>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d027      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x2ee>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a5d      	ldr	r2, [pc, #372]	; (8002f8c <HAL_DMA_IRQHandler+0x418>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d022      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x2ee>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a5b      	ldr	r2, [pc, #364]	; (8002f90 <HAL_DMA_IRQHandler+0x41c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d01d      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x2ee>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a5a      	ldr	r2, [pc, #360]	; (8002f94 <HAL_DMA_IRQHandler+0x420>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d018      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x2ee>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a58      	ldr	r2, [pc, #352]	; (8002f98 <HAL_DMA_IRQHandler+0x424>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d013      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x2ee>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a57      	ldr	r2, [pc, #348]	; (8002f9c <HAL_DMA_IRQHandler+0x428>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00e      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x2ee>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a55      	ldr	r2, [pc, #340]	; (8002fa0 <HAL_DMA_IRQHandler+0x42c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d009      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x2ee>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a54      	ldr	r2, [pc, #336]	; (8002fa4 <HAL_DMA_IRQHandler+0x430>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d004      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x2ee>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a52      	ldr	r2, [pc, #328]	; (8002fa8 <HAL_DMA_IRQHandler+0x434>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d10a      	bne.n	8002e78 <HAL_DMA_IRQHandler+0x304>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	bf14      	ite	ne
 8002e70:	2301      	movne	r3, #1
 8002e72:	2300      	moveq	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e003      	b.n	8002e80 <HAL_DMA_IRQHandler+0x30c>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00d      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e98:	f043 0202 	orr.w	r2, r3, #2
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 808f 	beq.w	8002fd4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a2c      	ldr	r2, [pc, #176]	; (8002f6c <HAL_DMA_IRQHandler+0x3f8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d04a      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x3e2>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a2a      	ldr	r2, [pc, #168]	; (8002f70 <HAL_DMA_IRQHandler+0x3fc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d045      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x3e2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a29      	ldr	r2, [pc, #164]	; (8002f74 <HAL_DMA_IRQHandler+0x400>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d040      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x3e2>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a27      	ldr	r2, [pc, #156]	; (8002f78 <HAL_DMA_IRQHandler+0x404>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d03b      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x3e2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a26      	ldr	r2, [pc, #152]	; (8002f7c <HAL_DMA_IRQHandler+0x408>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d036      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x3e2>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a24      	ldr	r2, [pc, #144]	; (8002f80 <HAL_DMA_IRQHandler+0x40c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d031      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x3e2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a23      	ldr	r2, [pc, #140]	; (8002f84 <HAL_DMA_IRQHandler+0x410>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d02c      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x3e2>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a21      	ldr	r2, [pc, #132]	; (8002f88 <HAL_DMA_IRQHandler+0x414>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d027      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x3e2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a20      	ldr	r2, [pc, #128]	; (8002f8c <HAL_DMA_IRQHandler+0x418>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d022      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x3e2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1e      	ldr	r2, [pc, #120]	; (8002f90 <HAL_DMA_IRQHandler+0x41c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01d      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x3e2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <HAL_DMA_IRQHandler+0x420>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d018      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x3e2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1b      	ldr	r2, [pc, #108]	; (8002f98 <HAL_DMA_IRQHandler+0x424>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x3e2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1a      	ldr	r2, [pc, #104]	; (8002f9c <HAL_DMA_IRQHandler+0x428>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00e      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x3e2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a18      	ldr	r2, [pc, #96]	; (8002fa0 <HAL_DMA_IRQHandler+0x42c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d009      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x3e2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <HAL_DMA_IRQHandler+0x430>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d004      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x3e2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a15      	ldr	r2, [pc, #84]	; (8002fa8 <HAL_DMA_IRQHandler+0x434>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d12a      	bne.n	8002fac <HAL_DMA_IRQHandler+0x438>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e023      	b.n	8002fb4 <HAL_DMA_IRQHandler+0x440>
 8002f6c:	40020010 	.word	0x40020010
 8002f70:	40020028 	.word	0x40020028
 8002f74:	40020040 	.word	0x40020040
 8002f78:	40020058 	.word	0x40020058
 8002f7c:	40020070 	.word	0x40020070
 8002f80:	40020088 	.word	0x40020088
 8002f84:	400200a0 	.word	0x400200a0
 8002f88:	400200b8 	.word	0x400200b8
 8002f8c:	40020410 	.word	0x40020410
 8002f90:	40020428 	.word	0x40020428
 8002f94:	40020440 	.word	0x40020440
 8002f98:	40020458 	.word	0x40020458
 8002f9c:	40020470 	.word	0x40020470
 8002fa0:	40020488 	.word	0x40020488
 8002fa4:	400204a0 	.word	0x400204a0
 8002fa8:	400204b8 	.word	0x400204b8
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00d      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fcc:	f043 0204 	orr.w	r2, r3, #4
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	2210      	movs	r2, #16
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80a6 	beq.w	8003136 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a85      	ldr	r2, [pc, #532]	; (8003204 <HAL_DMA_IRQHandler+0x690>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d04a      	beq.n	800308a <HAL_DMA_IRQHandler+0x516>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a83      	ldr	r2, [pc, #524]	; (8003208 <HAL_DMA_IRQHandler+0x694>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d045      	beq.n	800308a <HAL_DMA_IRQHandler+0x516>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a82      	ldr	r2, [pc, #520]	; (800320c <HAL_DMA_IRQHandler+0x698>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d040      	beq.n	800308a <HAL_DMA_IRQHandler+0x516>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a80      	ldr	r2, [pc, #512]	; (8003210 <HAL_DMA_IRQHandler+0x69c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d03b      	beq.n	800308a <HAL_DMA_IRQHandler+0x516>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a7f      	ldr	r2, [pc, #508]	; (8003214 <HAL_DMA_IRQHandler+0x6a0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d036      	beq.n	800308a <HAL_DMA_IRQHandler+0x516>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a7d      	ldr	r2, [pc, #500]	; (8003218 <HAL_DMA_IRQHandler+0x6a4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d031      	beq.n	800308a <HAL_DMA_IRQHandler+0x516>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a7c      	ldr	r2, [pc, #496]	; (800321c <HAL_DMA_IRQHandler+0x6a8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d02c      	beq.n	800308a <HAL_DMA_IRQHandler+0x516>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a7a      	ldr	r2, [pc, #488]	; (8003220 <HAL_DMA_IRQHandler+0x6ac>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d027      	beq.n	800308a <HAL_DMA_IRQHandler+0x516>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a79      	ldr	r2, [pc, #484]	; (8003224 <HAL_DMA_IRQHandler+0x6b0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d022      	beq.n	800308a <HAL_DMA_IRQHandler+0x516>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a77      	ldr	r2, [pc, #476]	; (8003228 <HAL_DMA_IRQHandler+0x6b4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d01d      	beq.n	800308a <HAL_DMA_IRQHandler+0x516>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a76      	ldr	r2, [pc, #472]	; (800322c <HAL_DMA_IRQHandler+0x6b8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d018      	beq.n	800308a <HAL_DMA_IRQHandler+0x516>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a74      	ldr	r2, [pc, #464]	; (8003230 <HAL_DMA_IRQHandler+0x6bc>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d013      	beq.n	800308a <HAL_DMA_IRQHandler+0x516>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a73      	ldr	r2, [pc, #460]	; (8003234 <HAL_DMA_IRQHandler+0x6c0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00e      	beq.n	800308a <HAL_DMA_IRQHandler+0x516>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a71      	ldr	r2, [pc, #452]	; (8003238 <HAL_DMA_IRQHandler+0x6c4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d009      	beq.n	800308a <HAL_DMA_IRQHandler+0x516>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a70      	ldr	r2, [pc, #448]	; (800323c <HAL_DMA_IRQHandler+0x6c8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d004      	beq.n	800308a <HAL_DMA_IRQHandler+0x516>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6e      	ldr	r2, [pc, #440]	; (8003240 <HAL_DMA_IRQHandler+0x6cc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d10a      	bne.n	80030a0 <HAL_DMA_IRQHandler+0x52c>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf14      	ite	ne
 8003098:	2301      	movne	r3, #1
 800309a:	2300      	moveq	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	e009      	b.n	80030b4 <HAL_DMA_IRQHandler+0x540>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	bf14      	ite	ne
 80030ae:	2301      	movne	r3, #1
 80030b0:	2300      	moveq	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d03e      	beq.n	8003136 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	2210      	movs	r2, #16
 80030c2:	409a      	lsls	r2, r3
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d018      	beq.n	8003108 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d108      	bne.n	80030f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d024      	beq.n	8003136 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	4798      	blx	r3
 80030f4:	e01f      	b.n	8003136 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d01b      	beq.n	8003136 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	4798      	blx	r3
 8003106:	e016      	b.n	8003136 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d107      	bne.n	8003126 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0208 	bic.w	r2, r2, #8
 8003124:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	2220      	movs	r2, #32
 8003140:	409a      	lsls	r2, r3
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8110 	beq.w	800336c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a2c      	ldr	r2, [pc, #176]	; (8003204 <HAL_DMA_IRQHandler+0x690>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d04a      	beq.n	80031ec <HAL_DMA_IRQHandler+0x678>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a2b      	ldr	r2, [pc, #172]	; (8003208 <HAL_DMA_IRQHandler+0x694>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d045      	beq.n	80031ec <HAL_DMA_IRQHandler+0x678>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a29      	ldr	r2, [pc, #164]	; (800320c <HAL_DMA_IRQHandler+0x698>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d040      	beq.n	80031ec <HAL_DMA_IRQHandler+0x678>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a28      	ldr	r2, [pc, #160]	; (8003210 <HAL_DMA_IRQHandler+0x69c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d03b      	beq.n	80031ec <HAL_DMA_IRQHandler+0x678>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a26      	ldr	r2, [pc, #152]	; (8003214 <HAL_DMA_IRQHandler+0x6a0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d036      	beq.n	80031ec <HAL_DMA_IRQHandler+0x678>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a25      	ldr	r2, [pc, #148]	; (8003218 <HAL_DMA_IRQHandler+0x6a4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d031      	beq.n	80031ec <HAL_DMA_IRQHandler+0x678>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a23      	ldr	r2, [pc, #140]	; (800321c <HAL_DMA_IRQHandler+0x6a8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d02c      	beq.n	80031ec <HAL_DMA_IRQHandler+0x678>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a22      	ldr	r2, [pc, #136]	; (8003220 <HAL_DMA_IRQHandler+0x6ac>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d027      	beq.n	80031ec <HAL_DMA_IRQHandler+0x678>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a20      	ldr	r2, [pc, #128]	; (8003224 <HAL_DMA_IRQHandler+0x6b0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d022      	beq.n	80031ec <HAL_DMA_IRQHandler+0x678>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1f      	ldr	r2, [pc, #124]	; (8003228 <HAL_DMA_IRQHandler+0x6b4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d01d      	beq.n	80031ec <HAL_DMA_IRQHandler+0x678>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a1d      	ldr	r2, [pc, #116]	; (800322c <HAL_DMA_IRQHandler+0x6b8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d018      	beq.n	80031ec <HAL_DMA_IRQHandler+0x678>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <HAL_DMA_IRQHandler+0x6bc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d013      	beq.n	80031ec <HAL_DMA_IRQHandler+0x678>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a1a      	ldr	r2, [pc, #104]	; (8003234 <HAL_DMA_IRQHandler+0x6c0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00e      	beq.n	80031ec <HAL_DMA_IRQHandler+0x678>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a19      	ldr	r2, [pc, #100]	; (8003238 <HAL_DMA_IRQHandler+0x6c4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d009      	beq.n	80031ec <HAL_DMA_IRQHandler+0x678>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a17      	ldr	r2, [pc, #92]	; (800323c <HAL_DMA_IRQHandler+0x6c8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d004      	beq.n	80031ec <HAL_DMA_IRQHandler+0x678>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a16      	ldr	r2, [pc, #88]	; (8003240 <HAL_DMA_IRQHandler+0x6cc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d12b      	bne.n	8003244 <HAL_DMA_IRQHandler+0x6d0>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	bf14      	ite	ne
 80031fa:	2301      	movne	r3, #1
 80031fc:	2300      	moveq	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	e02a      	b.n	8003258 <HAL_DMA_IRQHandler+0x6e4>
 8003202:	bf00      	nop
 8003204:	40020010 	.word	0x40020010
 8003208:	40020028 	.word	0x40020028
 800320c:	40020040 	.word	0x40020040
 8003210:	40020058 	.word	0x40020058
 8003214:	40020070 	.word	0x40020070
 8003218:	40020088 	.word	0x40020088
 800321c:	400200a0 	.word	0x400200a0
 8003220:	400200b8 	.word	0x400200b8
 8003224:	40020410 	.word	0x40020410
 8003228:	40020428 	.word	0x40020428
 800322c:	40020440 	.word	0x40020440
 8003230:	40020458 	.word	0x40020458
 8003234:	40020470 	.word	0x40020470
 8003238:	40020488 	.word	0x40020488
 800323c:	400204a0 	.word	0x400204a0
 8003240:	400204b8 	.word	0x400204b8
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	bf14      	ite	ne
 8003252:	2301      	movne	r3, #1
 8003254:	2300      	moveq	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 8087 	beq.w	800336c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	2220      	movs	r2, #32
 8003268:	409a      	lsls	r2, r3
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b04      	cmp	r3, #4
 8003278:	d139      	bne.n	80032ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0216 	bic.w	r2, r2, #22
 8003288:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003298:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d103      	bne.n	80032aa <HAL_DMA_IRQHandler+0x736>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0208 	bic.w	r2, r2, #8
 80032b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	223f      	movs	r2, #63	; 0x3f
 80032c4:	409a      	lsls	r2, r3
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 834a 	beq.w	8003978 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	4798      	blx	r3
          }
          return;
 80032ec:	e344      	b.n	8003978 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d018      	beq.n	800332e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d108      	bne.n	800331c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	2b00      	cmp	r3, #0
 8003310:	d02c      	beq.n	800336c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	4798      	blx	r3
 800331a:	e027      	b.n	800336c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d023      	beq.n	800336c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
 800332c:	e01e      	b.n	800336c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10f      	bne.n	800335c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0210 	bic.w	r2, r2, #16
 800334a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 8306 	beq.w	8003982 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 8088 	beq.w	8003494 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2204      	movs	r2, #4
 8003388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a7a      	ldr	r2, [pc, #488]	; (800357c <HAL_DMA_IRQHandler+0xa08>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d04a      	beq.n	800342c <HAL_DMA_IRQHandler+0x8b8>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a79      	ldr	r2, [pc, #484]	; (8003580 <HAL_DMA_IRQHandler+0xa0c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d045      	beq.n	800342c <HAL_DMA_IRQHandler+0x8b8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a77      	ldr	r2, [pc, #476]	; (8003584 <HAL_DMA_IRQHandler+0xa10>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d040      	beq.n	800342c <HAL_DMA_IRQHandler+0x8b8>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a76      	ldr	r2, [pc, #472]	; (8003588 <HAL_DMA_IRQHandler+0xa14>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d03b      	beq.n	800342c <HAL_DMA_IRQHandler+0x8b8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a74      	ldr	r2, [pc, #464]	; (800358c <HAL_DMA_IRQHandler+0xa18>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d036      	beq.n	800342c <HAL_DMA_IRQHandler+0x8b8>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a73      	ldr	r2, [pc, #460]	; (8003590 <HAL_DMA_IRQHandler+0xa1c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d031      	beq.n	800342c <HAL_DMA_IRQHandler+0x8b8>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a71      	ldr	r2, [pc, #452]	; (8003594 <HAL_DMA_IRQHandler+0xa20>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d02c      	beq.n	800342c <HAL_DMA_IRQHandler+0x8b8>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a70      	ldr	r2, [pc, #448]	; (8003598 <HAL_DMA_IRQHandler+0xa24>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d027      	beq.n	800342c <HAL_DMA_IRQHandler+0x8b8>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a6e      	ldr	r2, [pc, #440]	; (800359c <HAL_DMA_IRQHandler+0xa28>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d022      	beq.n	800342c <HAL_DMA_IRQHandler+0x8b8>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a6d      	ldr	r2, [pc, #436]	; (80035a0 <HAL_DMA_IRQHandler+0xa2c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d01d      	beq.n	800342c <HAL_DMA_IRQHandler+0x8b8>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a6b      	ldr	r2, [pc, #428]	; (80035a4 <HAL_DMA_IRQHandler+0xa30>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d018      	beq.n	800342c <HAL_DMA_IRQHandler+0x8b8>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a6a      	ldr	r2, [pc, #424]	; (80035a8 <HAL_DMA_IRQHandler+0xa34>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d013      	beq.n	800342c <HAL_DMA_IRQHandler+0x8b8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a68      	ldr	r2, [pc, #416]	; (80035ac <HAL_DMA_IRQHandler+0xa38>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00e      	beq.n	800342c <HAL_DMA_IRQHandler+0x8b8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a67      	ldr	r2, [pc, #412]	; (80035b0 <HAL_DMA_IRQHandler+0xa3c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d009      	beq.n	800342c <HAL_DMA_IRQHandler+0x8b8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a65      	ldr	r2, [pc, #404]	; (80035b4 <HAL_DMA_IRQHandler+0xa40>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d004      	beq.n	800342c <HAL_DMA_IRQHandler+0x8b8>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a64      	ldr	r2, [pc, #400]	; (80035b8 <HAL_DMA_IRQHandler+0xa44>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d108      	bne.n	800343e <HAL_DMA_IRQHandler+0x8ca>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	e007      	b.n	800344e <HAL_DMA_IRQHandler+0x8da>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	3301      	adds	r3, #1
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003456:	429a      	cmp	r2, r3
 8003458:	d307      	bcc.n	800346a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f2      	bne.n	800344e <HAL_DMA_IRQHandler+0x8da>
 8003468:	e000      	b.n	800346c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800346a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d004      	beq.n	8003484 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2203      	movs	r2, #3
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003482:	e003      	b.n	800348c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8272 	beq.w	8003982 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
 80034a6:	e26c      	b.n	8003982 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a43      	ldr	r2, [pc, #268]	; (80035bc <HAL_DMA_IRQHandler+0xa48>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d022      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x984>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a42      	ldr	r2, [pc, #264]	; (80035c0 <HAL_DMA_IRQHandler+0xa4c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d01d      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x984>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a40      	ldr	r2, [pc, #256]	; (80035c4 <HAL_DMA_IRQHandler+0xa50>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d018      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x984>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a3f      	ldr	r2, [pc, #252]	; (80035c8 <HAL_DMA_IRQHandler+0xa54>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d013      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x984>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a3d      	ldr	r2, [pc, #244]	; (80035cc <HAL_DMA_IRQHandler+0xa58>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00e      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x984>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a3c      	ldr	r2, [pc, #240]	; (80035d0 <HAL_DMA_IRQHandler+0xa5c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d009      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x984>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a3a      	ldr	r2, [pc, #232]	; (80035d4 <HAL_DMA_IRQHandler+0xa60>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d004      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x984>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a39      	ldr	r2, [pc, #228]	; (80035d8 <HAL_DMA_IRQHandler+0xa64>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d101      	bne.n	80034fc <HAL_DMA_IRQHandler+0x988>
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <HAL_DMA_IRQHandler+0x98a>
 80034fc:	2300      	movs	r3, #0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 823f 	beq.w	8003982 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	2204      	movs	r2, #4
 8003516:	409a      	lsls	r2, r3
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80cd 	beq.w	80036bc <HAL_DMA_IRQHandler+0xb48>
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80c7 	beq.w	80036bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	2204      	movs	r2, #4
 8003538:	409a      	lsls	r2, r3
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d049      	beq.n	80035dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 8210 	beq.w	800397c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003564:	e20a      	b.n	800397c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 8206 	beq.w	800397c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003578:	e200      	b.n	800397c <HAL_DMA_IRQHandler+0xe08>
 800357a:	bf00      	nop
 800357c:	40020010 	.word	0x40020010
 8003580:	40020028 	.word	0x40020028
 8003584:	40020040 	.word	0x40020040
 8003588:	40020058 	.word	0x40020058
 800358c:	40020070 	.word	0x40020070
 8003590:	40020088 	.word	0x40020088
 8003594:	400200a0 	.word	0x400200a0
 8003598:	400200b8 	.word	0x400200b8
 800359c:	40020410 	.word	0x40020410
 80035a0:	40020428 	.word	0x40020428
 80035a4:	40020440 	.word	0x40020440
 80035a8:	40020458 	.word	0x40020458
 80035ac:	40020470 	.word	0x40020470
 80035b0:	40020488 	.word	0x40020488
 80035b4:	400204a0 	.word	0x400204a0
 80035b8:	400204b8 	.word	0x400204b8
 80035bc:	58025408 	.word	0x58025408
 80035c0:	5802541c 	.word	0x5802541c
 80035c4:	58025430 	.word	0x58025430
 80035c8:	58025444 	.word	0x58025444
 80035cc:	58025458 	.word	0x58025458
 80035d0:	5802546c 	.word	0x5802546c
 80035d4:	58025480 	.word	0x58025480
 80035d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d160      	bne.n	80036a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a7f      	ldr	r2, [pc, #508]	; (80037e8 <HAL_DMA_IRQHandler+0xc74>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d04a      	beq.n	8003686 <HAL_DMA_IRQHandler+0xb12>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a7d      	ldr	r2, [pc, #500]	; (80037ec <HAL_DMA_IRQHandler+0xc78>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d045      	beq.n	8003686 <HAL_DMA_IRQHandler+0xb12>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a7c      	ldr	r2, [pc, #496]	; (80037f0 <HAL_DMA_IRQHandler+0xc7c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d040      	beq.n	8003686 <HAL_DMA_IRQHandler+0xb12>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a7a      	ldr	r2, [pc, #488]	; (80037f4 <HAL_DMA_IRQHandler+0xc80>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d03b      	beq.n	8003686 <HAL_DMA_IRQHandler+0xb12>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a79      	ldr	r2, [pc, #484]	; (80037f8 <HAL_DMA_IRQHandler+0xc84>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d036      	beq.n	8003686 <HAL_DMA_IRQHandler+0xb12>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a77      	ldr	r2, [pc, #476]	; (80037fc <HAL_DMA_IRQHandler+0xc88>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d031      	beq.n	8003686 <HAL_DMA_IRQHandler+0xb12>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a76      	ldr	r2, [pc, #472]	; (8003800 <HAL_DMA_IRQHandler+0xc8c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d02c      	beq.n	8003686 <HAL_DMA_IRQHandler+0xb12>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a74      	ldr	r2, [pc, #464]	; (8003804 <HAL_DMA_IRQHandler+0xc90>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d027      	beq.n	8003686 <HAL_DMA_IRQHandler+0xb12>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a73      	ldr	r2, [pc, #460]	; (8003808 <HAL_DMA_IRQHandler+0xc94>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d022      	beq.n	8003686 <HAL_DMA_IRQHandler+0xb12>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a71      	ldr	r2, [pc, #452]	; (800380c <HAL_DMA_IRQHandler+0xc98>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d01d      	beq.n	8003686 <HAL_DMA_IRQHandler+0xb12>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a70      	ldr	r2, [pc, #448]	; (8003810 <HAL_DMA_IRQHandler+0xc9c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d018      	beq.n	8003686 <HAL_DMA_IRQHandler+0xb12>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a6e      	ldr	r2, [pc, #440]	; (8003814 <HAL_DMA_IRQHandler+0xca0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <HAL_DMA_IRQHandler+0xb12>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a6d      	ldr	r2, [pc, #436]	; (8003818 <HAL_DMA_IRQHandler+0xca4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00e      	beq.n	8003686 <HAL_DMA_IRQHandler+0xb12>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a6b      	ldr	r2, [pc, #428]	; (800381c <HAL_DMA_IRQHandler+0xca8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d009      	beq.n	8003686 <HAL_DMA_IRQHandler+0xb12>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a6a      	ldr	r2, [pc, #424]	; (8003820 <HAL_DMA_IRQHandler+0xcac>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d004      	beq.n	8003686 <HAL_DMA_IRQHandler+0xb12>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a68      	ldr	r2, [pc, #416]	; (8003824 <HAL_DMA_IRQHandler+0xcb0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d108      	bne.n	8003698 <HAL_DMA_IRQHandler+0xb24>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0208 	bic.w	r2, r2, #8
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	e007      	b.n	80036a8 <HAL_DMA_IRQHandler+0xb34>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0204 	bic.w	r2, r2, #4
 80036a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8165 	beq.w	800397c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036ba:	e15f      	b.n	800397c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	2202      	movs	r2, #2
 80036c6:	409a      	lsls	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80c5 	beq.w	800385c <HAL_DMA_IRQHandler+0xce8>
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80bf 	beq.w	800385c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2202      	movs	r2, #2
 80036e8:	409a      	lsls	r2, r3
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d018      	beq.n	800372a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 813a 	beq.w	8003980 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003714:	e134      	b.n	8003980 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 8130 	beq.w	8003980 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003728:	e12a      	b.n	8003980 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b00      	cmp	r3, #0
 8003732:	f040 8089 	bne.w	8003848 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a2b      	ldr	r2, [pc, #172]	; (80037e8 <HAL_DMA_IRQHandler+0xc74>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d04a      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xc62>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a29      	ldr	r2, [pc, #164]	; (80037ec <HAL_DMA_IRQHandler+0xc78>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d045      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xc62>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a28      	ldr	r2, [pc, #160]	; (80037f0 <HAL_DMA_IRQHandler+0xc7c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d040      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xc62>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a26      	ldr	r2, [pc, #152]	; (80037f4 <HAL_DMA_IRQHandler+0xc80>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d03b      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xc62>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a25      	ldr	r2, [pc, #148]	; (80037f8 <HAL_DMA_IRQHandler+0xc84>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d036      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xc62>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a23      	ldr	r2, [pc, #140]	; (80037fc <HAL_DMA_IRQHandler+0xc88>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d031      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xc62>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a22      	ldr	r2, [pc, #136]	; (8003800 <HAL_DMA_IRQHandler+0xc8c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d02c      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xc62>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a20      	ldr	r2, [pc, #128]	; (8003804 <HAL_DMA_IRQHandler+0xc90>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d027      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xc62>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1f      	ldr	r2, [pc, #124]	; (8003808 <HAL_DMA_IRQHandler+0xc94>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d022      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xc62>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1d      	ldr	r2, [pc, #116]	; (800380c <HAL_DMA_IRQHandler+0xc98>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01d      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xc62>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <HAL_DMA_IRQHandler+0xc9c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d018      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xc62>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1a      	ldr	r2, [pc, #104]	; (8003814 <HAL_DMA_IRQHandler+0xca0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xc62>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a19      	ldr	r2, [pc, #100]	; (8003818 <HAL_DMA_IRQHandler+0xca4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00e      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xc62>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a17      	ldr	r2, [pc, #92]	; (800381c <HAL_DMA_IRQHandler+0xca8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d009      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xc62>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a16      	ldr	r2, [pc, #88]	; (8003820 <HAL_DMA_IRQHandler+0xcac>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d004      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xc62>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a14      	ldr	r2, [pc, #80]	; (8003824 <HAL_DMA_IRQHandler+0xcb0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d128      	bne.n	8003828 <HAL_DMA_IRQHandler+0xcb4>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0214 	bic.w	r2, r2, #20
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e027      	b.n	8003838 <HAL_DMA_IRQHandler+0xcc4>
 80037e8:	40020010 	.word	0x40020010
 80037ec:	40020028 	.word	0x40020028
 80037f0:	40020040 	.word	0x40020040
 80037f4:	40020058 	.word	0x40020058
 80037f8:	40020070 	.word	0x40020070
 80037fc:	40020088 	.word	0x40020088
 8003800:	400200a0 	.word	0x400200a0
 8003804:	400200b8 	.word	0x400200b8
 8003808:	40020410 	.word	0x40020410
 800380c:	40020428 	.word	0x40020428
 8003810:	40020440 	.word	0x40020440
 8003814:	40020458 	.word	0x40020458
 8003818:	40020470 	.word	0x40020470
 800381c:	40020488 	.word	0x40020488
 8003820:	400204a0 	.word	0x400204a0
 8003824:	400204b8 	.word	0x400204b8
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 020a 	bic.w	r2, r2, #10
 8003836:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8097 	beq.w	8003980 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800385a:	e091      	b.n	8003980 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	2208      	movs	r2, #8
 8003866:	409a      	lsls	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8088 	beq.w	8003982 <HAL_DMA_IRQHandler+0xe0e>
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8082 	beq.w	8003982 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a41      	ldr	r2, [pc, #260]	; (8003988 <HAL_DMA_IRQHandler+0xe14>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d04a      	beq.n	800391e <HAL_DMA_IRQHandler+0xdaa>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a3f      	ldr	r2, [pc, #252]	; (800398c <HAL_DMA_IRQHandler+0xe18>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d045      	beq.n	800391e <HAL_DMA_IRQHandler+0xdaa>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a3e      	ldr	r2, [pc, #248]	; (8003990 <HAL_DMA_IRQHandler+0xe1c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d040      	beq.n	800391e <HAL_DMA_IRQHandler+0xdaa>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a3c      	ldr	r2, [pc, #240]	; (8003994 <HAL_DMA_IRQHandler+0xe20>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d03b      	beq.n	800391e <HAL_DMA_IRQHandler+0xdaa>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a3b      	ldr	r2, [pc, #236]	; (8003998 <HAL_DMA_IRQHandler+0xe24>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d036      	beq.n	800391e <HAL_DMA_IRQHandler+0xdaa>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a39      	ldr	r2, [pc, #228]	; (800399c <HAL_DMA_IRQHandler+0xe28>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d031      	beq.n	800391e <HAL_DMA_IRQHandler+0xdaa>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a38      	ldr	r2, [pc, #224]	; (80039a0 <HAL_DMA_IRQHandler+0xe2c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d02c      	beq.n	800391e <HAL_DMA_IRQHandler+0xdaa>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a36      	ldr	r2, [pc, #216]	; (80039a4 <HAL_DMA_IRQHandler+0xe30>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d027      	beq.n	800391e <HAL_DMA_IRQHandler+0xdaa>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a35      	ldr	r2, [pc, #212]	; (80039a8 <HAL_DMA_IRQHandler+0xe34>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d022      	beq.n	800391e <HAL_DMA_IRQHandler+0xdaa>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a33      	ldr	r2, [pc, #204]	; (80039ac <HAL_DMA_IRQHandler+0xe38>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01d      	beq.n	800391e <HAL_DMA_IRQHandler+0xdaa>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a32      	ldr	r2, [pc, #200]	; (80039b0 <HAL_DMA_IRQHandler+0xe3c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d018      	beq.n	800391e <HAL_DMA_IRQHandler+0xdaa>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a30      	ldr	r2, [pc, #192]	; (80039b4 <HAL_DMA_IRQHandler+0xe40>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d013      	beq.n	800391e <HAL_DMA_IRQHandler+0xdaa>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a2f      	ldr	r2, [pc, #188]	; (80039b8 <HAL_DMA_IRQHandler+0xe44>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00e      	beq.n	800391e <HAL_DMA_IRQHandler+0xdaa>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a2d      	ldr	r2, [pc, #180]	; (80039bc <HAL_DMA_IRQHandler+0xe48>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d009      	beq.n	800391e <HAL_DMA_IRQHandler+0xdaa>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a2c      	ldr	r2, [pc, #176]	; (80039c0 <HAL_DMA_IRQHandler+0xe4c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d004      	beq.n	800391e <HAL_DMA_IRQHandler+0xdaa>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a2a      	ldr	r2, [pc, #168]	; (80039c4 <HAL_DMA_IRQHandler+0xe50>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d108      	bne.n	8003930 <HAL_DMA_IRQHandler+0xdbc>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 021c 	bic.w	r2, r2, #28
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	e007      	b.n	8003940 <HAL_DMA_IRQHandler+0xdcc>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 020e 	bic.w	r2, r2, #14
 800393e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003944:	f003 031f 	and.w	r3, r3, #31
 8003948:	2201      	movs	r2, #1
 800394a:	409a      	lsls	r2, r3
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4798      	blx	r3
 8003976:	e004      	b.n	8003982 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003978:	bf00      	nop
 800397a:	e002      	b.n	8003982 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800397c:	bf00      	nop
 800397e:	e000      	b.n	8003982 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003980:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003982:	3728      	adds	r7, #40	; 0x28
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40020010 	.word	0x40020010
 800398c:	40020028 	.word	0x40020028
 8003990:	40020040 	.word	0x40020040
 8003994:	40020058 	.word	0x40020058
 8003998:	40020070 	.word	0x40020070
 800399c:	40020088 	.word	0x40020088
 80039a0:	400200a0 	.word	0x400200a0
 80039a4:	400200b8 	.word	0x400200b8
 80039a8:	40020410 	.word	0x40020410
 80039ac:	40020428 	.word	0x40020428
 80039b0:	40020440 	.word	0x40020440
 80039b4:	40020458 	.word	0x40020458
 80039b8:	40020470 	.word	0x40020470
 80039bc:	40020488 	.word	0x40020488
 80039c0:	400204a0 	.word	0x400204a0
 80039c4:	400204b8 	.word	0x400204b8

080039c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a7f      	ldr	r2, [pc, #508]	; (8003be4 <DMA_SetConfig+0x21c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d072      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a7d      	ldr	r2, [pc, #500]	; (8003be8 <DMA_SetConfig+0x220>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d06d      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a7c      	ldr	r2, [pc, #496]	; (8003bec <DMA_SetConfig+0x224>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d068      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a7a      	ldr	r2, [pc, #488]	; (8003bf0 <DMA_SetConfig+0x228>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d063      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a79      	ldr	r2, [pc, #484]	; (8003bf4 <DMA_SetConfig+0x22c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d05e      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a77      	ldr	r2, [pc, #476]	; (8003bf8 <DMA_SetConfig+0x230>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d059      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a76      	ldr	r2, [pc, #472]	; (8003bfc <DMA_SetConfig+0x234>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d054      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a74      	ldr	r2, [pc, #464]	; (8003c00 <DMA_SetConfig+0x238>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d04f      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a73      	ldr	r2, [pc, #460]	; (8003c04 <DMA_SetConfig+0x23c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d04a      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a71      	ldr	r2, [pc, #452]	; (8003c08 <DMA_SetConfig+0x240>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d045      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a70      	ldr	r2, [pc, #448]	; (8003c0c <DMA_SetConfig+0x244>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d040      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a6e      	ldr	r2, [pc, #440]	; (8003c10 <DMA_SetConfig+0x248>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d03b      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a6d      	ldr	r2, [pc, #436]	; (8003c14 <DMA_SetConfig+0x24c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d036      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a6b      	ldr	r2, [pc, #428]	; (8003c18 <DMA_SetConfig+0x250>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d031      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a6a      	ldr	r2, [pc, #424]	; (8003c1c <DMA_SetConfig+0x254>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d02c      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a68      	ldr	r2, [pc, #416]	; (8003c20 <DMA_SetConfig+0x258>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d027      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a67      	ldr	r2, [pc, #412]	; (8003c24 <DMA_SetConfig+0x25c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d022      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a65      	ldr	r2, [pc, #404]	; (8003c28 <DMA_SetConfig+0x260>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01d      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a64      	ldr	r2, [pc, #400]	; (8003c2c <DMA_SetConfig+0x264>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d018      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a62      	ldr	r2, [pc, #392]	; (8003c30 <DMA_SetConfig+0x268>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a61      	ldr	r2, [pc, #388]	; (8003c34 <DMA_SetConfig+0x26c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00e      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a5f      	ldr	r2, [pc, #380]	; (8003c38 <DMA_SetConfig+0x270>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d009      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a5e      	ldr	r2, [pc, #376]	; (8003c3c <DMA_SetConfig+0x274>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d004      	beq.n	8003ad2 <DMA_SetConfig+0x10a>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a5c      	ldr	r2, [pc, #368]	; (8003c40 <DMA_SetConfig+0x278>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d101      	bne.n	8003ad6 <DMA_SetConfig+0x10e>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <DMA_SetConfig+0x110>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00d      	beq.n	8003af8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ae4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d004      	beq.n	8003af8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003af6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a39      	ldr	r2, [pc, #228]	; (8003be4 <DMA_SetConfig+0x21c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d04a      	beq.n	8003b98 <DMA_SetConfig+0x1d0>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a38      	ldr	r2, [pc, #224]	; (8003be8 <DMA_SetConfig+0x220>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d045      	beq.n	8003b98 <DMA_SetConfig+0x1d0>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a36      	ldr	r2, [pc, #216]	; (8003bec <DMA_SetConfig+0x224>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d040      	beq.n	8003b98 <DMA_SetConfig+0x1d0>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a35      	ldr	r2, [pc, #212]	; (8003bf0 <DMA_SetConfig+0x228>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d03b      	beq.n	8003b98 <DMA_SetConfig+0x1d0>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a33      	ldr	r2, [pc, #204]	; (8003bf4 <DMA_SetConfig+0x22c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d036      	beq.n	8003b98 <DMA_SetConfig+0x1d0>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a32      	ldr	r2, [pc, #200]	; (8003bf8 <DMA_SetConfig+0x230>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d031      	beq.n	8003b98 <DMA_SetConfig+0x1d0>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a30      	ldr	r2, [pc, #192]	; (8003bfc <DMA_SetConfig+0x234>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d02c      	beq.n	8003b98 <DMA_SetConfig+0x1d0>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a2f      	ldr	r2, [pc, #188]	; (8003c00 <DMA_SetConfig+0x238>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d027      	beq.n	8003b98 <DMA_SetConfig+0x1d0>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a2d      	ldr	r2, [pc, #180]	; (8003c04 <DMA_SetConfig+0x23c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d022      	beq.n	8003b98 <DMA_SetConfig+0x1d0>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a2c      	ldr	r2, [pc, #176]	; (8003c08 <DMA_SetConfig+0x240>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d01d      	beq.n	8003b98 <DMA_SetConfig+0x1d0>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a2a      	ldr	r2, [pc, #168]	; (8003c0c <DMA_SetConfig+0x244>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d018      	beq.n	8003b98 <DMA_SetConfig+0x1d0>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a29      	ldr	r2, [pc, #164]	; (8003c10 <DMA_SetConfig+0x248>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d013      	beq.n	8003b98 <DMA_SetConfig+0x1d0>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a27      	ldr	r2, [pc, #156]	; (8003c14 <DMA_SetConfig+0x24c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00e      	beq.n	8003b98 <DMA_SetConfig+0x1d0>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a26      	ldr	r2, [pc, #152]	; (8003c18 <DMA_SetConfig+0x250>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d009      	beq.n	8003b98 <DMA_SetConfig+0x1d0>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a24      	ldr	r2, [pc, #144]	; (8003c1c <DMA_SetConfig+0x254>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d004      	beq.n	8003b98 <DMA_SetConfig+0x1d0>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a23      	ldr	r2, [pc, #140]	; (8003c20 <DMA_SetConfig+0x258>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d101      	bne.n	8003b9c <DMA_SetConfig+0x1d4>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <DMA_SetConfig+0x1d6>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d059      	beq.n	8003c56 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	223f      	movs	r2, #63	; 0x3f
 8003bac:	409a      	lsls	r2, r3
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bc0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d138      	bne.n	8003c44 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003be2:	e086      	b.n	8003cf2 <DMA_SetConfig+0x32a>
 8003be4:	40020010 	.word	0x40020010
 8003be8:	40020028 	.word	0x40020028
 8003bec:	40020040 	.word	0x40020040
 8003bf0:	40020058 	.word	0x40020058
 8003bf4:	40020070 	.word	0x40020070
 8003bf8:	40020088 	.word	0x40020088
 8003bfc:	400200a0 	.word	0x400200a0
 8003c00:	400200b8 	.word	0x400200b8
 8003c04:	40020410 	.word	0x40020410
 8003c08:	40020428 	.word	0x40020428
 8003c0c:	40020440 	.word	0x40020440
 8003c10:	40020458 	.word	0x40020458
 8003c14:	40020470 	.word	0x40020470
 8003c18:	40020488 	.word	0x40020488
 8003c1c:	400204a0 	.word	0x400204a0
 8003c20:	400204b8 	.word	0x400204b8
 8003c24:	58025408 	.word	0x58025408
 8003c28:	5802541c 	.word	0x5802541c
 8003c2c:	58025430 	.word	0x58025430
 8003c30:	58025444 	.word	0x58025444
 8003c34:	58025458 	.word	0x58025458
 8003c38:	5802546c 	.word	0x5802546c
 8003c3c:	58025480 	.word	0x58025480
 8003c40:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	60da      	str	r2, [r3, #12]
}
 8003c54:	e04d      	b.n	8003cf2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a29      	ldr	r2, [pc, #164]	; (8003d00 <DMA_SetConfig+0x338>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d022      	beq.n	8003ca6 <DMA_SetConfig+0x2de>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a27      	ldr	r2, [pc, #156]	; (8003d04 <DMA_SetConfig+0x33c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d01d      	beq.n	8003ca6 <DMA_SetConfig+0x2de>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a26      	ldr	r2, [pc, #152]	; (8003d08 <DMA_SetConfig+0x340>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d018      	beq.n	8003ca6 <DMA_SetConfig+0x2de>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a24      	ldr	r2, [pc, #144]	; (8003d0c <DMA_SetConfig+0x344>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d013      	beq.n	8003ca6 <DMA_SetConfig+0x2de>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a23      	ldr	r2, [pc, #140]	; (8003d10 <DMA_SetConfig+0x348>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00e      	beq.n	8003ca6 <DMA_SetConfig+0x2de>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a21      	ldr	r2, [pc, #132]	; (8003d14 <DMA_SetConfig+0x34c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d009      	beq.n	8003ca6 <DMA_SetConfig+0x2de>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a20      	ldr	r2, [pc, #128]	; (8003d18 <DMA_SetConfig+0x350>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d004      	beq.n	8003ca6 <DMA_SetConfig+0x2de>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1e      	ldr	r2, [pc, #120]	; (8003d1c <DMA_SetConfig+0x354>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d101      	bne.n	8003caa <DMA_SetConfig+0x2e2>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <DMA_SetConfig+0x2e4>
 8003caa:	2300      	movs	r3, #0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d020      	beq.n	8003cf2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb4:	f003 031f 	and.w	r3, r3, #31
 8003cb8:	2201      	movs	r2, #1
 8003cba:	409a      	lsls	r2, r3
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b40      	cmp	r3, #64	; 0x40
 8003cce:	d108      	bne.n	8003ce2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	60da      	str	r2, [r3, #12]
}
 8003ce0:	e007      	b.n	8003cf2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	60da      	str	r2, [r3, #12]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	58025408 	.word	0x58025408
 8003d04:	5802541c 	.word	0x5802541c
 8003d08:	58025430 	.word	0x58025430
 8003d0c:	58025444 	.word	0x58025444
 8003d10:	58025458 	.word	0x58025458
 8003d14:	5802546c 	.word	0x5802546c
 8003d18:	58025480 	.word	0x58025480
 8003d1c:	58025494 	.word	0x58025494

08003d20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a42      	ldr	r2, [pc, #264]	; (8003e38 <DMA_CalcBaseAndBitshift+0x118>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d04a      	beq.n	8003dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a41      	ldr	r2, [pc, #260]	; (8003e3c <DMA_CalcBaseAndBitshift+0x11c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d045      	beq.n	8003dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a3f      	ldr	r2, [pc, #252]	; (8003e40 <DMA_CalcBaseAndBitshift+0x120>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d040      	beq.n	8003dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a3e      	ldr	r2, [pc, #248]	; (8003e44 <DMA_CalcBaseAndBitshift+0x124>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d03b      	beq.n	8003dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a3c      	ldr	r2, [pc, #240]	; (8003e48 <DMA_CalcBaseAndBitshift+0x128>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d036      	beq.n	8003dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a3b      	ldr	r2, [pc, #236]	; (8003e4c <DMA_CalcBaseAndBitshift+0x12c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d031      	beq.n	8003dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a39      	ldr	r2, [pc, #228]	; (8003e50 <DMA_CalcBaseAndBitshift+0x130>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d02c      	beq.n	8003dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a38      	ldr	r2, [pc, #224]	; (8003e54 <DMA_CalcBaseAndBitshift+0x134>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d027      	beq.n	8003dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a36      	ldr	r2, [pc, #216]	; (8003e58 <DMA_CalcBaseAndBitshift+0x138>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d022      	beq.n	8003dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a35      	ldr	r2, [pc, #212]	; (8003e5c <DMA_CalcBaseAndBitshift+0x13c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d01d      	beq.n	8003dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a33      	ldr	r2, [pc, #204]	; (8003e60 <DMA_CalcBaseAndBitshift+0x140>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d018      	beq.n	8003dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a32      	ldr	r2, [pc, #200]	; (8003e64 <DMA_CalcBaseAndBitshift+0x144>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d013      	beq.n	8003dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a30      	ldr	r2, [pc, #192]	; (8003e68 <DMA_CalcBaseAndBitshift+0x148>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00e      	beq.n	8003dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a2f      	ldr	r2, [pc, #188]	; (8003e6c <DMA_CalcBaseAndBitshift+0x14c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d009      	beq.n	8003dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a2d      	ldr	r2, [pc, #180]	; (8003e70 <DMA_CalcBaseAndBitshift+0x150>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d004      	beq.n	8003dc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a2c      	ldr	r2, [pc, #176]	; (8003e74 <DMA_CalcBaseAndBitshift+0x154>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d101      	bne.n	8003dcc <DMA_CalcBaseAndBitshift+0xac>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <DMA_CalcBaseAndBitshift+0xae>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d024      	beq.n	8003e1c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	3b10      	subs	r3, #16
 8003dda:	4a27      	ldr	r2, [pc, #156]	; (8003e78 <DMA_CalcBaseAndBitshift+0x158>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	4a24      	ldr	r2, [pc, #144]	; (8003e7c <DMA_CalcBaseAndBitshift+0x15c>)
 8003dec:	5cd3      	ldrb	r3, [r2, r3]
 8003dee:	461a      	mov	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d908      	bls.n	8003e0c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4b1f      	ldr	r3, [pc, #124]	; (8003e80 <DMA_CalcBaseAndBitshift+0x160>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	1d1a      	adds	r2, r3, #4
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	659a      	str	r2, [r3, #88]	; 0x58
 8003e0a:	e00d      	b.n	8003e28 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <DMA_CalcBaseAndBitshift+0x160>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6593      	str	r3, [r2, #88]	; 0x58
 8003e1a:	e005      	b.n	8003e28 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	40020010 	.word	0x40020010
 8003e3c:	40020028 	.word	0x40020028
 8003e40:	40020040 	.word	0x40020040
 8003e44:	40020058 	.word	0x40020058
 8003e48:	40020070 	.word	0x40020070
 8003e4c:	40020088 	.word	0x40020088
 8003e50:	400200a0 	.word	0x400200a0
 8003e54:	400200b8 	.word	0x400200b8
 8003e58:	40020410 	.word	0x40020410
 8003e5c:	40020428 	.word	0x40020428
 8003e60:	40020440 	.word	0x40020440
 8003e64:	40020458 	.word	0x40020458
 8003e68:	40020470 	.word	0x40020470
 8003e6c:	40020488 	.word	0x40020488
 8003e70:	400204a0 	.word	0x400204a0
 8003e74:	400204b8 	.word	0x400204b8
 8003e78:	aaaaaaab 	.word	0xaaaaaaab
 8003e7c:	08009d04 	.word	0x08009d04
 8003e80:	fffffc00 	.word	0xfffffc00

08003e84 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d120      	bne.n	8003eda <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d858      	bhi.n	8003f52 <DMA_CheckFifoParam+0xce>
 8003ea0:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <DMA_CheckFifoParam+0x24>)
 8003ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea6:	bf00      	nop
 8003ea8:	08003eb9 	.word	0x08003eb9
 8003eac:	08003ecb 	.word	0x08003ecb
 8003eb0:	08003eb9 	.word	0x08003eb9
 8003eb4:	08003f53 	.word	0x08003f53
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d048      	beq.n	8003f56 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ec8:	e045      	b.n	8003f56 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ed2:	d142      	bne.n	8003f5a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ed8:	e03f      	b.n	8003f5a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ee2:	d123      	bne.n	8003f2c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d838      	bhi.n	8003f5e <DMA_CheckFifoParam+0xda>
 8003eec:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <DMA_CheckFifoParam+0x70>)
 8003eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef2:	bf00      	nop
 8003ef4:	08003f05 	.word	0x08003f05
 8003ef8:	08003f0b 	.word	0x08003f0b
 8003efc:	08003f05 	.word	0x08003f05
 8003f00:	08003f1d 	.word	0x08003f1d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
        break;
 8003f08:	e030      	b.n	8003f6c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d025      	beq.n	8003f62 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f1a:	e022      	b.n	8003f62 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f24:	d11f      	bne.n	8003f66 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f2a:	e01c      	b.n	8003f66 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d902      	bls.n	8003f3a <DMA_CheckFifoParam+0xb6>
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d003      	beq.n	8003f40 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003f38:	e018      	b.n	8003f6c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	73fb      	strb	r3, [r7, #15]
        break;
 8003f3e:	e015      	b.n	8003f6c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00e      	beq.n	8003f6a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8003f50:	e00b      	b.n	8003f6a <DMA_CheckFifoParam+0xe6>
        break;
 8003f52:	bf00      	nop
 8003f54:	e00a      	b.n	8003f6c <DMA_CheckFifoParam+0xe8>
        break;
 8003f56:	bf00      	nop
 8003f58:	e008      	b.n	8003f6c <DMA_CheckFifoParam+0xe8>
        break;
 8003f5a:	bf00      	nop
 8003f5c:	e006      	b.n	8003f6c <DMA_CheckFifoParam+0xe8>
        break;
 8003f5e:	bf00      	nop
 8003f60:	e004      	b.n	8003f6c <DMA_CheckFifoParam+0xe8>
        break;
 8003f62:	bf00      	nop
 8003f64:	e002      	b.n	8003f6c <DMA_CheckFifoParam+0xe8>
        break;
 8003f66:	bf00      	nop
 8003f68:	e000      	b.n	8003f6c <DMA_CheckFifoParam+0xe8>
    break;
 8003f6a:	bf00      	nop
    }
  }

  return status;
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop

08003f7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a38      	ldr	r2, [pc, #224]	; (8004070 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d022      	beq.n	8003fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a36      	ldr	r2, [pc, #216]	; (8004074 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01d      	beq.n	8003fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a35      	ldr	r2, [pc, #212]	; (8004078 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d018      	beq.n	8003fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a33      	ldr	r2, [pc, #204]	; (800407c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d013      	beq.n	8003fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a32      	ldr	r2, [pc, #200]	; (8004080 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00e      	beq.n	8003fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a30      	ldr	r2, [pc, #192]	; (8004084 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d009      	beq.n	8003fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a2f      	ldr	r2, [pc, #188]	; (8004088 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d004      	beq.n	8003fda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a2d      	ldr	r2, [pc, #180]	; (800408c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d101      	bne.n	8003fde <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01a      	beq.n	800401a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	3b08      	subs	r3, #8
 8003fec:	4a28      	ldr	r2, [pc, #160]	; (8004090 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	091b      	lsrs	r3, r3, #4
 8003ff4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4b26      	ldr	r3, [pc, #152]	; (8004094 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	461a      	mov	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a24      	ldr	r2, [pc, #144]	; (8004098 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004008:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	2201      	movs	r2, #1
 8004012:	409a      	lsls	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004018:	e024      	b.n	8004064 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	3b10      	subs	r3, #16
 8004022:	4a1e      	ldr	r2, [pc, #120]	; (800409c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	091b      	lsrs	r3, r3, #4
 800402a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d806      	bhi.n	8004042 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d902      	bls.n	8004042 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3308      	adds	r3, #8
 8004040:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4b18      	ldr	r3, [pc, #96]	; (80040a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	461a      	mov	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a16      	ldr	r2, [pc, #88]	; (80040ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004054:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	2201      	movs	r2, #1
 800405e:	409a      	lsls	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004064:	bf00      	nop
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	58025408 	.word	0x58025408
 8004074:	5802541c 	.word	0x5802541c
 8004078:	58025430 	.word	0x58025430
 800407c:	58025444 	.word	0x58025444
 8004080:	58025458 	.word	0x58025458
 8004084:	5802546c 	.word	0x5802546c
 8004088:	58025480 	.word	0x58025480
 800408c:	58025494 	.word	0x58025494
 8004090:	cccccccd 	.word	0xcccccccd
 8004094:	16009600 	.word	0x16009600
 8004098:	58025880 	.word	0x58025880
 800409c:	aaaaaaab 	.word	0xaaaaaaab
 80040a0:	400204b8 	.word	0x400204b8
 80040a4:	4002040f 	.word	0x4002040f
 80040a8:	10008200 	.word	0x10008200
 80040ac:	40020880 	.word	0x40020880

080040b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d04a      	beq.n	800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d847      	bhi.n	800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a25      	ldr	r2, [pc, #148]	; (8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d022      	beq.n	800411c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a24      	ldr	r2, [pc, #144]	; (800416c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d01d      	beq.n	800411c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a22      	ldr	r2, [pc, #136]	; (8004170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d018      	beq.n	800411c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a21      	ldr	r2, [pc, #132]	; (8004174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d013      	beq.n	800411c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a1f      	ldr	r2, [pc, #124]	; (8004178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00e      	beq.n	800411c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a1e      	ldr	r2, [pc, #120]	; (800417c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d009      	beq.n	800411c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d004      	beq.n	800411c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a1b      	ldr	r2, [pc, #108]	; (8004184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d101      	bne.n	8004120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004120:	2300      	movs	r3, #0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4b17      	ldr	r3, [pc, #92]	; (8004188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	461a      	mov	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a15      	ldr	r2, [pc, #84]	; (800418c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004138:	671a      	str	r2, [r3, #112]	; 0x70
 800413a:	e009      	b.n	8004150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4b14      	ldr	r3, [pc, #80]	; (8004190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	461a      	mov	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a11      	ldr	r2, [pc, #68]	; (8004194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800414e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3b01      	subs	r3, #1
 8004154:	2201      	movs	r2, #1
 8004156:	409a      	lsls	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800415c:	bf00      	nop
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	58025408 	.word	0x58025408
 800416c:	5802541c 	.word	0x5802541c
 8004170:	58025430 	.word	0x58025430
 8004174:	58025444 	.word	0x58025444
 8004178:	58025458 	.word	0x58025458
 800417c:	5802546c 	.word	0x5802546c
 8004180:	58025480 	.word	0x58025480
 8004184:	58025494 	.word	0x58025494
 8004188:	1600963f 	.word	0x1600963f
 800418c:	58025940 	.word	0x58025940
 8004190:	1000823f 	.word	0x1000823f
 8004194:	40020940 	.word	0x40020940

08004198 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004198:	b480      	push	{r7}
 800419a:	b089      	sub	sp, #36	; 0x24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80041a6:	4b89      	ldr	r3, [pc, #548]	; (80043cc <HAL_GPIO_Init+0x234>)
 80041a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041aa:	e194      	b.n	80044d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	2101      	movs	r1, #1
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	fa01 f303 	lsl.w	r3, r1, r3
 80041b8:	4013      	ands	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 8186 	beq.w	80044d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d005      	beq.n	80041dc <HAL_GPIO_Init+0x44>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d130      	bne.n	800423e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	2203      	movs	r2, #3
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4013      	ands	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4313      	orrs	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004212:	2201      	movs	r2, #1
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43db      	mvns	r3, r3
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	4013      	ands	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	091b      	lsrs	r3, r3, #4
 8004228:	f003 0201 	and.w	r2, r3, #1
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4313      	orrs	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	2b03      	cmp	r3, #3
 8004248:	d017      	beq.n	800427a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	2203      	movs	r2, #3
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d123      	bne.n	80042ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	08da      	lsrs	r2, r3, #3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3208      	adds	r2, #8
 800428e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	220f      	movs	r2, #15
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	43db      	mvns	r3, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4013      	ands	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	08da      	lsrs	r2, r3, #3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3208      	adds	r2, #8
 80042c8:	69b9      	ldr	r1, [r7, #24]
 80042ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	2203      	movs	r2, #3
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4013      	ands	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f003 0203 	and.w	r2, r3, #3
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 80e0 	beq.w	80044d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004310:	4b2f      	ldr	r3, [pc, #188]	; (80043d0 <HAL_GPIO_Init+0x238>)
 8004312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004316:	4a2e      	ldr	r2, [pc, #184]	; (80043d0 <HAL_GPIO_Init+0x238>)
 8004318:	f043 0302 	orr.w	r3, r3, #2
 800431c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004320:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <HAL_GPIO_Init+0x238>)
 8004322:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800432e:	4a29      	ldr	r2, [pc, #164]	; (80043d4 <HAL_GPIO_Init+0x23c>)
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	089b      	lsrs	r3, r3, #2
 8004334:	3302      	adds	r3, #2
 8004336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800433a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	220f      	movs	r2, #15
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	43db      	mvns	r3, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4013      	ands	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a20      	ldr	r2, [pc, #128]	; (80043d8 <HAL_GPIO_Init+0x240>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d052      	beq.n	8004400 <HAL_GPIO_Init+0x268>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a1f      	ldr	r2, [pc, #124]	; (80043dc <HAL_GPIO_Init+0x244>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d031      	beq.n	80043c6 <HAL_GPIO_Init+0x22e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <HAL_GPIO_Init+0x248>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d02b      	beq.n	80043c2 <HAL_GPIO_Init+0x22a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <HAL_GPIO_Init+0x24c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d025      	beq.n	80043be <HAL_GPIO_Init+0x226>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <HAL_GPIO_Init+0x250>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d01f      	beq.n	80043ba <HAL_GPIO_Init+0x222>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a1b      	ldr	r2, [pc, #108]	; (80043ec <HAL_GPIO_Init+0x254>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d019      	beq.n	80043b6 <HAL_GPIO_Init+0x21e>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a1a      	ldr	r2, [pc, #104]	; (80043f0 <HAL_GPIO_Init+0x258>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d013      	beq.n	80043b2 <HAL_GPIO_Init+0x21a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a19      	ldr	r2, [pc, #100]	; (80043f4 <HAL_GPIO_Init+0x25c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00d      	beq.n	80043ae <HAL_GPIO_Init+0x216>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a18      	ldr	r2, [pc, #96]	; (80043f8 <HAL_GPIO_Init+0x260>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d007      	beq.n	80043aa <HAL_GPIO_Init+0x212>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a17      	ldr	r2, [pc, #92]	; (80043fc <HAL_GPIO_Init+0x264>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d101      	bne.n	80043a6 <HAL_GPIO_Init+0x20e>
 80043a2:	2309      	movs	r3, #9
 80043a4:	e02d      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043a6:	230a      	movs	r3, #10
 80043a8:	e02b      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043aa:	2308      	movs	r3, #8
 80043ac:	e029      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043ae:	2307      	movs	r3, #7
 80043b0:	e027      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043b2:	2306      	movs	r3, #6
 80043b4:	e025      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043b6:	2305      	movs	r3, #5
 80043b8:	e023      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043ba:	2304      	movs	r3, #4
 80043bc:	e021      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043be:	2303      	movs	r3, #3
 80043c0:	e01f      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e01d      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e01b      	b.n	8004402 <HAL_GPIO_Init+0x26a>
 80043ca:	bf00      	nop
 80043cc:	58000080 	.word	0x58000080
 80043d0:	58024400 	.word	0x58024400
 80043d4:	58000400 	.word	0x58000400
 80043d8:	58020000 	.word	0x58020000
 80043dc:	58020400 	.word	0x58020400
 80043e0:	58020800 	.word	0x58020800
 80043e4:	58020c00 	.word	0x58020c00
 80043e8:	58021000 	.word	0x58021000
 80043ec:	58021400 	.word	0x58021400
 80043f0:	58021800 	.word	0x58021800
 80043f4:	58021c00 	.word	0x58021c00
 80043f8:	58022000 	.word	0x58022000
 80043fc:	58022400 	.word	0x58022400
 8004400:	2300      	movs	r3, #0
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	f002 0203 	and.w	r2, r2, #3
 8004408:	0092      	lsls	r2, r2, #2
 800440a:	4093      	lsls	r3, r2
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4313      	orrs	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004412:	4938      	ldr	r1, [pc, #224]	; (80044f4 <HAL_GPIO_Init+0x35c>)
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	089b      	lsrs	r3, r3, #2
 8004418:	3302      	adds	r3, #2
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	43db      	mvns	r3, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4013      	ands	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004446:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800444e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	43db      	mvns	r3, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4013      	ands	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004474:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	43db      	mvns	r3, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	43db      	mvns	r3, r3
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	4013      	ands	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	3301      	adds	r3, #1
 80044d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f47f ae63 	bne.w	80041ac <HAL_GPIO_Init+0x14>
  }
}
 80044e6:	bf00      	nop
 80044e8:	bf00      	nop
 80044ea:	3724      	adds	r7, #36	; 0x24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	58000400 	.word	0x58000400

080044f8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004500:	4a08      	ldr	r2, [pc, #32]	; (8004524 <HAL_HSEM_FastTake+0x2c>)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3320      	adds	r3, #32
 8004506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800450a:	4a07      	ldr	r2, [pc, #28]	; (8004528 <HAL_HSEM_FastTake+0x30>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d101      	bne.n	8004514 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	e000      	b.n	8004516 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
}
 8004516:	4618      	mov	r0, r3
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	58026400 	.word	0x58026400
 8004528:	80000300 	.word	0x80000300

0800452c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004536:	4906      	ldr	r1, [pc, #24]	; (8004550 <HAL_HSEM_Release+0x24>)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	58026400 	.word	0x58026400

08004554 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800455c:	4b29      	ldr	r3, [pc, #164]	; (8004604 <HAL_PWREx_ConfigSupply+0xb0>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	2b06      	cmp	r3, #6
 8004566:	d00a      	beq.n	800457e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004568:	4b26      	ldr	r3, [pc, #152]	; (8004604 <HAL_PWREx_ConfigSupply+0xb0>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	429a      	cmp	r2, r3
 8004574:	d001      	beq.n	800457a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e040      	b.n	80045fc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	e03e      	b.n	80045fc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800457e:	4b21      	ldr	r3, [pc, #132]	; (8004604 <HAL_PWREx_ConfigSupply+0xb0>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004586:	491f      	ldr	r1, [pc, #124]	; (8004604 <HAL_PWREx_ConfigSupply+0xb0>)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4313      	orrs	r3, r2
 800458c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800458e:	f7fc fe7b 	bl	8001288 <HAL_GetTick>
 8004592:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004594:	e009      	b.n	80045aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004596:	f7fc fe77 	bl	8001288 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045a4:	d901      	bls.n	80045aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e028      	b.n	80045fc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045aa:	4b16      	ldr	r3, [pc, #88]	; (8004604 <HAL_PWREx_ConfigSupply+0xb0>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b6:	d1ee      	bne.n	8004596 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b1e      	cmp	r3, #30
 80045bc:	d008      	beq.n	80045d0 <HAL_PWREx_ConfigSupply+0x7c>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b2e      	cmp	r3, #46	; 0x2e
 80045c2:	d005      	beq.n	80045d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b1d      	cmp	r3, #29
 80045c8:	d002      	beq.n	80045d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b2d      	cmp	r3, #45	; 0x2d
 80045ce:	d114      	bne.n	80045fa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80045d0:	f7fc fe5a 	bl	8001288 <HAL_GetTick>
 80045d4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80045d6:	e009      	b.n	80045ec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045d8:	f7fc fe56 	bl	8001288 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045e6:	d901      	bls.n	80045ec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e007      	b.n	80045fc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <HAL_PWREx_ConfigSupply+0xb0>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f8:	d1ee      	bne.n	80045d8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	58024800 	.word	0x58024800

08004608 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08c      	sub	sp, #48	; 0x30
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d102      	bne.n	800461c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	f000 bc48 	b.w	8004eac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8088 	beq.w	800473a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800462a:	4b99      	ldr	r3, [pc, #612]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004632:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004634:	4b96      	ldr	r3, [pc, #600]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004638:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	2b10      	cmp	r3, #16
 800463e:	d007      	beq.n	8004650 <HAL_RCC_OscConfig+0x48>
 8004640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004642:	2b18      	cmp	r3, #24
 8004644:	d111      	bne.n	800466a <HAL_RCC_OscConfig+0x62>
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d10c      	bne.n	800466a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004650:	4b8f      	ldr	r3, [pc, #572]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d06d      	beq.n	8004738 <HAL_RCC_OscConfig+0x130>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d169      	bne.n	8004738 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	f000 bc21 	b.w	8004eac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004672:	d106      	bne.n	8004682 <HAL_RCC_OscConfig+0x7a>
 8004674:	4b86      	ldr	r3, [pc, #536]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a85      	ldr	r2, [pc, #532]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800467a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	e02e      	b.n	80046e0 <HAL_RCC_OscConfig+0xd8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10c      	bne.n	80046a4 <HAL_RCC_OscConfig+0x9c>
 800468a:	4b81      	ldr	r3, [pc, #516]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a80      	ldr	r2, [pc, #512]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	4b7e      	ldr	r3, [pc, #504]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a7d      	ldr	r2, [pc, #500]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800469c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e01d      	b.n	80046e0 <HAL_RCC_OscConfig+0xd8>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046ac:	d10c      	bne.n	80046c8 <HAL_RCC_OscConfig+0xc0>
 80046ae:	4b78      	ldr	r3, [pc, #480]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a77      	ldr	r2, [pc, #476]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80046b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	4b75      	ldr	r3, [pc, #468]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a74      	ldr	r2, [pc, #464]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80046c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	e00b      	b.n	80046e0 <HAL_RCC_OscConfig+0xd8>
 80046c8:	4b71      	ldr	r3, [pc, #452]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a70      	ldr	r2, [pc, #448]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80046ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	4b6e      	ldr	r3, [pc, #440]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a6d      	ldr	r2, [pc, #436]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80046da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d013      	beq.n	8004710 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7fc fdce 	bl	8001288 <HAL_GetTick>
 80046ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046f0:	f7fc fdca 	bl	8001288 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b64      	cmp	r3, #100	; 0x64
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e3d4      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004702:	4b63      	ldr	r3, [pc, #396]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0xe8>
 800470e:	e014      	b.n	800473a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fc fdba 	bl	8001288 <HAL_GetTick>
 8004714:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004718:	f7fc fdb6 	bl	8001288 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b64      	cmp	r3, #100	; 0x64
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e3c0      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800472a:	4b59      	ldr	r3, [pc, #356]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0x110>
 8004736:	e000      	b.n	800473a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 80ca 	beq.w	80048dc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004748:	4b51      	ldr	r3, [pc, #324]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004750:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004752:	4b4f      	ldr	r3, [pc, #316]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d007      	beq.n	800476e <HAL_RCC_OscConfig+0x166>
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	2b18      	cmp	r3, #24
 8004762:	d156      	bne.n	8004812 <HAL_RCC_OscConfig+0x20a>
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d151      	bne.n	8004812 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800476e:	4b48      	ldr	r3, [pc, #288]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d005      	beq.n	8004786 <HAL_RCC_OscConfig+0x17e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e392      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004786:	4b42      	ldr	r3, [pc, #264]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f023 0219 	bic.w	r2, r3, #25
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	493f      	ldr	r1, [pc, #252]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004794:	4313      	orrs	r3, r2
 8004796:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004798:	f7fc fd76 	bl	8001288 <HAL_GetTick>
 800479c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a0:	f7fc fd72 	bl	8001288 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e37c      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047b2:	4b37      	ldr	r3, [pc, #220]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047be:	f7fc fd93 	bl	80012e8 <HAL_GetREVID>
 80047c2:	4603      	mov	r3, r0
 80047c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d817      	bhi.n	80047fc <HAL_RCC_OscConfig+0x1f4>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b40      	cmp	r3, #64	; 0x40
 80047d2:	d108      	bne.n	80047e6 <HAL_RCC_OscConfig+0x1de>
 80047d4:	4b2e      	ldr	r3, [pc, #184]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80047dc:	4a2c      	ldr	r2, [pc, #176]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80047de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047e4:	e07a      	b.n	80048dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e6:	4b2a      	ldr	r3, [pc, #168]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	031b      	lsls	r3, r3, #12
 80047f4:	4926      	ldr	r1, [pc, #152]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047fa:	e06f      	b.n	80048dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fc:	4b24      	ldr	r3, [pc, #144]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	061b      	lsls	r3, r3, #24
 800480a:	4921      	ldr	r1, [pc, #132]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800480c:	4313      	orrs	r3, r2
 800480e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004810:	e064      	b.n	80048dc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d047      	beq.n	80048aa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800481a:	4b1d      	ldr	r3, [pc, #116]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f023 0219 	bic.w	r2, r3, #25
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	491a      	ldr	r1, [pc, #104]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004828:	4313      	orrs	r3, r2
 800482a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482c:	f7fc fd2c 	bl	8001288 <HAL_GetTick>
 8004830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004834:	f7fc fd28 	bl	8001288 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e332      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004846:	4b12      	ldr	r3, [pc, #72]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f0      	beq.n	8004834 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004852:	f7fc fd49 	bl	80012e8 <HAL_GetREVID>
 8004856:	4603      	mov	r3, r0
 8004858:	f241 0203 	movw	r2, #4099	; 0x1003
 800485c:	4293      	cmp	r3, r2
 800485e:	d819      	bhi.n	8004894 <HAL_RCC_OscConfig+0x28c>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2b40      	cmp	r3, #64	; 0x40
 8004866:	d108      	bne.n	800487a <HAL_RCC_OscConfig+0x272>
 8004868:	4b09      	ldr	r3, [pc, #36]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004870:	4a07      	ldr	r2, [pc, #28]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 8004872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004876:	6053      	str	r3, [r2, #4]
 8004878:	e030      	b.n	80048dc <HAL_RCC_OscConfig+0x2d4>
 800487a:	4b05      	ldr	r3, [pc, #20]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	031b      	lsls	r3, r3, #12
 8004888:	4901      	ldr	r1, [pc, #4]	; (8004890 <HAL_RCC_OscConfig+0x288>)
 800488a:	4313      	orrs	r3, r2
 800488c:	604b      	str	r3, [r1, #4]
 800488e:	e025      	b.n	80048dc <HAL_RCC_OscConfig+0x2d4>
 8004890:	58024400 	.word	0x58024400
 8004894:	4b9a      	ldr	r3, [pc, #616]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	061b      	lsls	r3, r3, #24
 80048a2:	4997      	ldr	r1, [pc, #604]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]
 80048a8:	e018      	b.n	80048dc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048aa:	4b95      	ldr	r3, [pc, #596]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a94      	ldr	r2, [pc, #592]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b6:	f7fc fce7 	bl	8001288 <HAL_GetTick>
 80048ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048be:	f7fc fce3 	bl	8001288 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e2ed      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048d0:	4b8b      	ldr	r3, [pc, #556]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1f0      	bne.n	80048be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80a9 	beq.w	8004a3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ea:	4b85      	ldr	r3, [pc, #532]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048f4:	4b82      	ldr	r3, [pc, #520]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d007      	beq.n	8004910 <HAL_RCC_OscConfig+0x308>
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2b18      	cmp	r3, #24
 8004904:	d13a      	bne.n	800497c <HAL_RCC_OscConfig+0x374>
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	2b01      	cmp	r3, #1
 800490e:	d135      	bne.n	800497c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004910:	4b7b      	ldr	r3, [pc, #492]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_RCC_OscConfig+0x320>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	2b80      	cmp	r3, #128	; 0x80
 8004922:	d001      	beq.n	8004928 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e2c1      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004928:	f7fc fcde 	bl	80012e8 <HAL_GetREVID>
 800492c:	4603      	mov	r3, r0
 800492e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004932:	4293      	cmp	r3, r2
 8004934:	d817      	bhi.n	8004966 <HAL_RCC_OscConfig+0x35e>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	2b20      	cmp	r3, #32
 800493c:	d108      	bne.n	8004950 <HAL_RCC_OscConfig+0x348>
 800493e:	4b70      	ldr	r3, [pc, #448]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004946:	4a6e      	ldr	r2, [pc, #440]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004948:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800494c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800494e:	e075      	b.n	8004a3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004950:	4b6b      	ldr	r3, [pc, #428]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	069b      	lsls	r3, r3, #26
 800495e:	4968      	ldr	r1, [pc, #416]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004960:	4313      	orrs	r3, r2
 8004962:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004964:	e06a      	b.n	8004a3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004966:	4b66      	ldr	r3, [pc, #408]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	061b      	lsls	r3, r3, #24
 8004974:	4962      	ldr	r1, [pc, #392]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004976:	4313      	orrs	r3, r2
 8004978:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800497a:	e05f      	b.n	8004a3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d042      	beq.n	8004a0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004984:	4b5e      	ldr	r3, [pc, #376]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a5d      	ldr	r2, [pc, #372]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 800498a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004990:	f7fc fc7a 	bl	8001288 <HAL_GetTick>
 8004994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004998:	f7fc fc76 	bl	8001288 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e280      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049aa:	4b55      	ldr	r3, [pc, #340]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0f0      	beq.n	8004998 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049b6:	f7fc fc97 	bl	80012e8 <HAL_GetREVID>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d817      	bhi.n	80049f4 <HAL_RCC_OscConfig+0x3ec>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d108      	bne.n	80049de <HAL_RCC_OscConfig+0x3d6>
 80049cc:	4b4c      	ldr	r3, [pc, #304]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80049d4:	4a4a      	ldr	r2, [pc, #296]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 80049d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049da:	6053      	str	r3, [r2, #4]
 80049dc:	e02e      	b.n	8004a3c <HAL_RCC_OscConfig+0x434>
 80049de:	4b48      	ldr	r3, [pc, #288]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	069b      	lsls	r3, r3, #26
 80049ec:	4944      	ldr	r1, [pc, #272]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	604b      	str	r3, [r1, #4]
 80049f2:	e023      	b.n	8004a3c <HAL_RCC_OscConfig+0x434>
 80049f4:	4b42      	ldr	r3, [pc, #264]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	061b      	lsls	r3, r3, #24
 8004a02:	493f      	ldr	r1, [pc, #252]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60cb      	str	r3, [r1, #12]
 8004a08:	e018      	b.n	8004a3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a0a:	4b3d      	ldr	r3, [pc, #244]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a3c      	ldr	r2, [pc, #240]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a16:	f7fc fc37 	bl	8001288 <HAL_GetTick>
 8004a1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a1e:	f7fc fc33 	bl	8001288 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e23d      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a30:	4b33      	ldr	r3, [pc, #204]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f0      	bne.n	8004a1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d036      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d019      	beq.n	8004a84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a50:	4b2b      	ldr	r3, [pc, #172]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a54:	4a2a      	ldr	r2, [pc, #168]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5c:	f7fc fc14 	bl	8001288 <HAL_GetTick>
 8004a60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a64:	f7fc fc10 	bl	8001288 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e21a      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a76:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCC_OscConfig+0x45c>
 8004a82:	e018      	b.n	8004ab6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a84:	4b1e      	ldr	r3, [pc, #120]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a88:	4a1d      	ldr	r2, [pc, #116]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004a8a:	f023 0301 	bic.w	r3, r3, #1
 8004a8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a90:	f7fc fbfa 	bl	8001288 <HAL_GetTick>
 8004a94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a98:	f7fc fbf6 	bl	8001288 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e200      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004aaa:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d039      	beq.n	8004b36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d01c      	beq.n	8004b04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004aca:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a0c      	ldr	r2, [pc, #48]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004ad0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ad4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ad6:	f7fc fbd7 	bl	8001288 <HAL_GetTick>
 8004ada:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ade:	f7fc fbd3 	bl	8001288 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e1dd      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004af0:	4b03      	ldr	r3, [pc, #12]	; (8004b00 <HAL_RCC_OscConfig+0x4f8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0f0      	beq.n	8004ade <HAL_RCC_OscConfig+0x4d6>
 8004afc:	e01b      	b.n	8004b36 <HAL_RCC_OscConfig+0x52e>
 8004afe:	bf00      	nop
 8004b00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b04:	4b9b      	ldr	r3, [pc, #620]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a9a      	ldr	r2, [pc, #616]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b10:	f7fc fbba 	bl	8001288 <HAL_GetTick>
 8004b14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b18:	f7fc fbb6 	bl	8001288 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e1c0      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b2a:	4b92      	ldr	r3, [pc, #584]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 8081 	beq.w	8004c46 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b44:	4b8c      	ldr	r3, [pc, #560]	; (8004d78 <HAL_RCC_OscConfig+0x770>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a8b      	ldr	r2, [pc, #556]	; (8004d78 <HAL_RCC_OscConfig+0x770>)
 8004b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b50:	f7fc fb9a 	bl	8001288 <HAL_GetTick>
 8004b54:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b58:	f7fc fb96 	bl	8001288 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b64      	cmp	r3, #100	; 0x64
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e1a0      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b6a:	4b83      	ldr	r3, [pc, #524]	; (8004d78 <HAL_RCC_OscConfig+0x770>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0f0      	beq.n	8004b58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d106      	bne.n	8004b8c <HAL_RCC_OscConfig+0x584>
 8004b7e:	4b7d      	ldr	r3, [pc, #500]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b82:	4a7c      	ldr	r2, [pc, #496]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	6713      	str	r3, [r2, #112]	; 0x70
 8004b8a:	e02d      	b.n	8004be8 <HAL_RCC_OscConfig+0x5e0>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10c      	bne.n	8004bae <HAL_RCC_OscConfig+0x5a6>
 8004b94:	4b77      	ldr	r3, [pc, #476]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b98:	4a76      	ldr	r2, [pc, #472]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004b9a:	f023 0301 	bic.w	r3, r3, #1
 8004b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba0:	4b74      	ldr	r3, [pc, #464]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba4:	4a73      	ldr	r2, [pc, #460]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004ba6:	f023 0304 	bic.w	r3, r3, #4
 8004baa:	6713      	str	r3, [r2, #112]	; 0x70
 8004bac:	e01c      	b.n	8004be8 <HAL_RCC_OscConfig+0x5e0>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b05      	cmp	r3, #5
 8004bb4:	d10c      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x5c8>
 8004bb6:	4b6f      	ldr	r3, [pc, #444]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bba:	4a6e      	ldr	r2, [pc, #440]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004bbc:	f043 0304 	orr.w	r3, r3, #4
 8004bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc2:	4b6c      	ldr	r3, [pc, #432]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	4a6b      	ldr	r2, [pc, #428]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bce:	e00b      	b.n	8004be8 <HAL_RCC_OscConfig+0x5e0>
 8004bd0:	4b68      	ldr	r3, [pc, #416]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd4:	4a67      	ldr	r2, [pc, #412]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	6713      	str	r3, [r2, #112]	; 0x70
 8004bdc:	4b65      	ldr	r3, [pc, #404]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be0:	4a64      	ldr	r2, [pc, #400]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004be2:	f023 0304 	bic.w	r3, r3, #4
 8004be6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d015      	beq.n	8004c1c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf0:	f7fc fb4a 	bl	8001288 <HAL_GetTick>
 8004bf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bf6:	e00a      	b.n	8004c0e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf8:	f7fc fb46 	bl	8001288 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e14e      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c0e:	4b59      	ldr	r3, [pc, #356]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0ee      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x5f0>
 8004c1a:	e014      	b.n	8004c46 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1c:	f7fc fb34 	bl	8001288 <HAL_GetTick>
 8004c20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c22:	e00a      	b.n	8004c3a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c24:	f7fc fb30 	bl	8001288 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e138      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c3a:	4b4e      	ldr	r3, [pc, #312]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1ee      	bne.n	8004c24 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 812d 	beq.w	8004eaa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c50:	4b48      	ldr	r3, [pc, #288]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c58:	2b18      	cmp	r3, #24
 8004c5a:	f000 80bd 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	f040 809e 	bne.w	8004da4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c68:	4b42      	ldr	r3, [pc, #264]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a41      	ldr	r2, [pc, #260]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fc fb08 	bl	8001288 <HAL_GetTick>
 8004c78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7c:	f7fc fb04 	bl	8001288 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e10e      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c8e:	4b39      	ldr	r3, [pc, #228]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c9a:	4b36      	ldr	r3, [pc, #216]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c9e:	4b37      	ldr	r3, [pc, #220]	; (8004d7c <HAL_RCC_OscConfig+0x774>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004caa:	0112      	lsls	r2, r2, #4
 8004cac:	430a      	orrs	r2, r1
 8004cae:	4931      	ldr	r1, [pc, #196]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	628b      	str	r3, [r1, #40]	; 0x28
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	025b      	lsls	r3, r3, #9
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	041b      	lsls	r3, r3, #16
 8004cd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	061b      	lsls	r3, r3, #24
 8004ce0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ce4:	4923      	ldr	r1, [pc, #140]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004cea:	4b22      	ldr	r3, [pc, #136]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	4a21      	ldr	r2, [pc, #132]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004cf0:	f023 0301 	bic.w	r3, r3, #1
 8004cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004cf6:	4b1f      	ldr	r3, [pc, #124]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cfa:	4b21      	ldr	r3, [pc, #132]	; (8004d80 <HAL_RCC_OscConfig+0x778>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004d02:	00d2      	lsls	r2, r2, #3
 8004d04:	491b      	ldr	r1, [pc, #108]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d0a:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	f023 020c 	bic.w	r2, r3, #12
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	4917      	ldr	r1, [pc, #92]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d1c:	4b15      	ldr	r3, [pc, #84]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	f023 0202 	bic.w	r2, r3, #2
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d28:	4912      	ldr	r1, [pc, #72]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d2e:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	4a10      	ldr	r2, [pc, #64]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d3a:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	4a0d      	ldr	r2, [pc, #52]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d46:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d52:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004d58:	f043 0301 	orr.w	r3, r3, #1
 8004d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d5e:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a04      	ldr	r2, [pc, #16]	; (8004d74 <HAL_RCC_OscConfig+0x76c>)
 8004d64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6a:	f7fc fa8d 	bl	8001288 <HAL_GetTick>
 8004d6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d70:	e011      	b.n	8004d96 <HAL_RCC_OscConfig+0x78e>
 8004d72:	bf00      	nop
 8004d74:	58024400 	.word	0x58024400
 8004d78:	58024800 	.word	0x58024800
 8004d7c:	fffffc0c 	.word	0xfffffc0c
 8004d80:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d84:	f7fc fa80 	bl	8001288 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e08a      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d96:	4b47      	ldr	r3, [pc, #284]	; (8004eb4 <HAL_RCC_OscConfig+0x8ac>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0x77c>
 8004da2:	e082      	b.n	8004eaa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da4:	4b43      	ldr	r3, [pc, #268]	; (8004eb4 <HAL_RCC_OscConfig+0x8ac>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a42      	ldr	r2, [pc, #264]	; (8004eb4 <HAL_RCC_OscConfig+0x8ac>)
 8004daa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fc fa6a 	bl	8001288 <HAL_GetTick>
 8004db4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db8:	f7fc fa66 	bl	8001288 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e070      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dca:	4b3a      	ldr	r3, [pc, #232]	; (8004eb4 <HAL_RCC_OscConfig+0x8ac>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f0      	bne.n	8004db8 <HAL_RCC_OscConfig+0x7b0>
 8004dd6:	e068      	b.n	8004eaa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004dd8:	4b36      	ldr	r3, [pc, #216]	; (8004eb4 <HAL_RCC_OscConfig+0x8ac>)
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004dde:	4b35      	ldr	r3, [pc, #212]	; (8004eb4 <HAL_RCC_OscConfig+0x8ac>)
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d031      	beq.n	8004e50 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f003 0203 	and.w	r2, r3, #3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d12a      	bne.n	8004e50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	091b      	lsrs	r3, r3, #4
 8004dfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d122      	bne.n	8004e50 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d11a      	bne.n	8004e50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	0a5b      	lsrs	r3, r3, #9
 8004e1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e26:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d111      	bne.n	8004e50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	0c1b      	lsrs	r3, r3, #16
 8004e30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d108      	bne.n	8004e50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	0e1b      	lsrs	r3, r3, #24
 8004e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e02b      	b.n	8004eac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004e54:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <HAL_RCC_OscConfig+0x8ac>)
 8004e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e58:	08db      	lsrs	r3, r3, #3
 8004e5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e5e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d01f      	beq.n	8004eaa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004e6a:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <HAL_RCC_OscConfig+0x8ac>)
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6e:	4a11      	ldr	r2, [pc, #68]	; (8004eb4 <HAL_RCC_OscConfig+0x8ac>)
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e76:	f7fc fa07 	bl	8001288 <HAL_GetTick>
 8004e7a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004e7c:	bf00      	nop
 8004e7e:	f7fc fa03 	bl	8001288 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d0f9      	beq.n	8004e7e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e8a:	4b0a      	ldr	r3, [pc, #40]	; (8004eb4 <HAL_RCC_OscConfig+0x8ac>)
 8004e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e8e:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <HAL_RCC_OscConfig+0x8b0>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e96:	00d2      	lsls	r2, r2, #3
 8004e98:	4906      	ldr	r1, [pc, #24]	; (8004eb4 <HAL_RCC_OscConfig+0x8ac>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004e9e:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <HAL_RCC_OscConfig+0x8ac>)
 8004ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea2:	4a04      	ldr	r2, [pc, #16]	; (8004eb4 <HAL_RCC_OscConfig+0x8ac>)
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3730      	adds	r7, #48	; 0x30
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	58024400 	.word	0x58024400
 8004eb8:	ffff0007 	.word	0xffff0007

08004ebc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e19c      	b.n	800520a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ed0:	4b8a      	ldr	r3, [pc, #552]	; (80050fc <HAL_RCC_ClockConfig+0x240>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d910      	bls.n	8004f00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ede:	4b87      	ldr	r3, [pc, #540]	; (80050fc <HAL_RCC_ClockConfig+0x240>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f023 020f 	bic.w	r2, r3, #15
 8004ee6:	4985      	ldr	r1, [pc, #532]	; (80050fc <HAL_RCC_ClockConfig+0x240>)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eee:	4b83      	ldr	r3, [pc, #524]	; (80050fc <HAL_RCC_ClockConfig+0x240>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d001      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e184      	b.n	800520a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d010      	beq.n	8004f2e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	4b7b      	ldr	r3, [pc, #492]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d908      	bls.n	8004f2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f1c:	4b78      	ldr	r3, [pc, #480]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	4975      	ldr	r1, [pc, #468]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d010      	beq.n	8004f5c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695a      	ldr	r2, [r3, #20]
 8004f3e:	4b70      	ldr	r3, [pc, #448]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d908      	bls.n	8004f5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f4a:	4b6d      	ldr	r3, [pc, #436]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	496a      	ldr	r1, [pc, #424]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d010      	beq.n	8004f8a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699a      	ldr	r2, [r3, #24]
 8004f6c:	4b64      	ldr	r3, [pc, #400]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d908      	bls.n	8004f8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f78:	4b61      	ldr	r3, [pc, #388]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	495e      	ldr	r1, [pc, #376]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d010      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69da      	ldr	r2, [r3, #28]
 8004f9a:	4b59      	ldr	r3, [pc, #356]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d908      	bls.n	8004fb8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fa6:	4b56      	ldr	r3, [pc, #344]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	4953      	ldr	r1, [pc, #332]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d010      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	4b4d      	ldr	r3, [pc, #308]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d908      	bls.n	8004fe6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd4:	4b4a      	ldr	r3, [pc, #296]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	f023 020f 	bic.w	r2, r3, #15
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	4947      	ldr	r1, [pc, #284]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d055      	beq.n	800509e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ff2:	4b43      	ldr	r3, [pc, #268]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	4940      	ldr	r1, [pc, #256]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 8005000:	4313      	orrs	r3, r2
 8005002:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b02      	cmp	r3, #2
 800500a:	d107      	bne.n	800501c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800500c:	4b3c      	ldr	r3, [pc, #240]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d121      	bne.n	800505c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e0f6      	b.n	800520a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2b03      	cmp	r3, #3
 8005022:	d107      	bne.n	8005034 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005024:	4b36      	ldr	r3, [pc, #216]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d115      	bne.n	800505c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0ea      	b.n	800520a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d107      	bne.n	800504c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800503c:	4b30      	ldr	r3, [pc, #192]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005044:	2b00      	cmp	r3, #0
 8005046:	d109      	bne.n	800505c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e0de      	b.n	800520a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800504c:	4b2c      	ldr	r3, [pc, #176]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0d6      	b.n	800520a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800505c:	4b28      	ldr	r3, [pc, #160]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f023 0207 	bic.w	r2, r3, #7
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4925      	ldr	r1, [pc, #148]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 800506a:	4313      	orrs	r3, r2
 800506c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800506e:	f7fc f90b 	bl	8001288 <HAL_GetTick>
 8005072:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005074:	e00a      	b.n	800508c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005076:	f7fc f907 	bl	8001288 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	f241 3288 	movw	r2, #5000	; 0x1388
 8005084:	4293      	cmp	r3, r2
 8005086:	d901      	bls.n	800508c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e0be      	b.n	800520a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508c:	4b1c      	ldr	r3, [pc, #112]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	429a      	cmp	r2, r3
 800509c:	d1eb      	bne.n	8005076 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d010      	beq.n	80050cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	4b14      	ldr	r3, [pc, #80]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d208      	bcs.n	80050cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ba:	4b11      	ldr	r3, [pc, #68]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f023 020f 	bic.w	r2, r3, #15
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	490e      	ldr	r1, [pc, #56]	; (8005100 <HAL_RCC_ClockConfig+0x244>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <HAL_RCC_ClockConfig+0x240>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d214      	bcs.n	8005104 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050da:	4b08      	ldr	r3, [pc, #32]	; (80050fc <HAL_RCC_ClockConfig+0x240>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f023 020f 	bic.w	r2, r3, #15
 80050e2:	4906      	ldr	r1, [pc, #24]	; (80050fc <HAL_RCC_ClockConfig+0x240>)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ea:	4b04      	ldr	r3, [pc, #16]	; (80050fc <HAL_RCC_ClockConfig+0x240>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d005      	beq.n	8005104 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e086      	b.n	800520a <HAL_RCC_ClockConfig+0x34e>
 80050fc:	52002000 	.word	0x52002000
 8005100:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d010      	beq.n	8005132 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	4b3f      	ldr	r3, [pc, #252]	; (8005214 <HAL_RCC_ClockConfig+0x358>)
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800511c:	429a      	cmp	r2, r3
 800511e:	d208      	bcs.n	8005132 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005120:	4b3c      	ldr	r3, [pc, #240]	; (8005214 <HAL_RCC_ClockConfig+0x358>)
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	4939      	ldr	r1, [pc, #228]	; (8005214 <HAL_RCC_ClockConfig+0x358>)
 800512e:	4313      	orrs	r3, r2
 8005130:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d010      	beq.n	8005160 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	4b34      	ldr	r3, [pc, #208]	; (8005214 <HAL_RCC_ClockConfig+0x358>)
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800514a:	429a      	cmp	r2, r3
 800514c:	d208      	bcs.n	8005160 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800514e:	4b31      	ldr	r3, [pc, #196]	; (8005214 <HAL_RCC_ClockConfig+0x358>)
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	492e      	ldr	r1, [pc, #184]	; (8005214 <HAL_RCC_ClockConfig+0x358>)
 800515c:	4313      	orrs	r3, r2
 800515e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2b00      	cmp	r3, #0
 800516a:	d010      	beq.n	800518e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699a      	ldr	r2, [r3, #24]
 8005170:	4b28      	ldr	r3, [pc, #160]	; (8005214 <HAL_RCC_ClockConfig+0x358>)
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005178:	429a      	cmp	r2, r3
 800517a:	d208      	bcs.n	800518e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800517c:	4b25      	ldr	r3, [pc, #148]	; (8005214 <HAL_RCC_ClockConfig+0x358>)
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	4922      	ldr	r1, [pc, #136]	; (8005214 <HAL_RCC_ClockConfig+0x358>)
 800518a:	4313      	orrs	r3, r2
 800518c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b00      	cmp	r3, #0
 8005198:	d010      	beq.n	80051bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69da      	ldr	r2, [r3, #28]
 800519e:	4b1d      	ldr	r3, [pc, #116]	; (8005214 <HAL_RCC_ClockConfig+0x358>)
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d208      	bcs.n	80051bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80051aa:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <HAL_RCC_ClockConfig+0x358>)
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	4917      	ldr	r1, [pc, #92]	; (8005214 <HAL_RCC_ClockConfig+0x358>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80051bc:	f000 f834 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 80051c0:	4602      	mov	r2, r0
 80051c2:	4b14      	ldr	r3, [pc, #80]	; (8005214 <HAL_RCC_ClockConfig+0x358>)
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	0a1b      	lsrs	r3, r3, #8
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	4912      	ldr	r1, [pc, #72]	; (8005218 <HAL_RCC_ClockConfig+0x35c>)
 80051ce:	5ccb      	ldrb	r3, [r1, r3]
 80051d0:	f003 031f 	and.w	r3, r3, #31
 80051d4:	fa22 f303 	lsr.w	r3, r2, r3
 80051d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051da:	4b0e      	ldr	r3, [pc, #56]	; (8005214 <HAL_RCC_ClockConfig+0x358>)
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	4a0d      	ldr	r2, [pc, #52]	; (8005218 <HAL_RCC_ClockConfig+0x35c>)
 80051e4:	5cd3      	ldrb	r3, [r2, r3]
 80051e6:	f003 031f 	and.w	r3, r3, #31
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
 80051f0:	4a0a      	ldr	r2, [pc, #40]	; (800521c <HAL_RCC_ClockConfig+0x360>)
 80051f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051f4:	4a0a      	ldr	r2, [pc, #40]	; (8005220 <HAL_RCC_ClockConfig+0x364>)
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80051fa:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <HAL_RCC_ClockConfig+0x368>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fb fff8 	bl	80011f4 <HAL_InitTick>
 8005204:	4603      	mov	r3, r0
 8005206:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005208:	7bfb      	ldrb	r3, [r7, #15]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	58024400 	.word	0x58024400
 8005218:	08009cf4 	.word	0x08009cf4
 800521c:	24000004 	.word	0x24000004
 8005220:	24000000 	.word	0x24000000
 8005224:	24000008 	.word	0x24000008

08005228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005228:	b480      	push	{r7}
 800522a:	b089      	sub	sp, #36	; 0x24
 800522c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800522e:	4bb3      	ldr	r3, [pc, #716]	; (80054fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005236:	2b18      	cmp	r3, #24
 8005238:	f200 8155 	bhi.w	80054e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800523c:	a201      	add	r2, pc, #4	; (adr r2, 8005244 <HAL_RCC_GetSysClockFreq+0x1c>)
 800523e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005242:	bf00      	nop
 8005244:	080052a9 	.word	0x080052a9
 8005248:	080054e7 	.word	0x080054e7
 800524c:	080054e7 	.word	0x080054e7
 8005250:	080054e7 	.word	0x080054e7
 8005254:	080054e7 	.word	0x080054e7
 8005258:	080054e7 	.word	0x080054e7
 800525c:	080054e7 	.word	0x080054e7
 8005260:	080054e7 	.word	0x080054e7
 8005264:	080052cf 	.word	0x080052cf
 8005268:	080054e7 	.word	0x080054e7
 800526c:	080054e7 	.word	0x080054e7
 8005270:	080054e7 	.word	0x080054e7
 8005274:	080054e7 	.word	0x080054e7
 8005278:	080054e7 	.word	0x080054e7
 800527c:	080054e7 	.word	0x080054e7
 8005280:	080054e7 	.word	0x080054e7
 8005284:	080052d5 	.word	0x080052d5
 8005288:	080054e7 	.word	0x080054e7
 800528c:	080054e7 	.word	0x080054e7
 8005290:	080054e7 	.word	0x080054e7
 8005294:	080054e7 	.word	0x080054e7
 8005298:	080054e7 	.word	0x080054e7
 800529c:	080054e7 	.word	0x080054e7
 80052a0:	080054e7 	.word	0x080054e7
 80052a4:	080052db 	.word	0x080052db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052a8:	4b94      	ldr	r3, [pc, #592]	; (80054fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d009      	beq.n	80052c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052b4:	4b91      	ldr	r3, [pc, #580]	; (80054fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	08db      	lsrs	r3, r3, #3
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	4a90      	ldr	r2, [pc, #576]	; (8005500 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052c0:	fa22 f303 	lsr.w	r3, r2, r3
 80052c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80052c6:	e111      	b.n	80054ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80052c8:	4b8d      	ldr	r3, [pc, #564]	; (8005500 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052ca:	61bb      	str	r3, [r7, #24]
      break;
 80052cc:	e10e      	b.n	80054ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80052ce:	4b8d      	ldr	r3, [pc, #564]	; (8005504 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052d0:	61bb      	str	r3, [r7, #24]
      break;
 80052d2:	e10b      	b.n	80054ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80052d4:	4b8c      	ldr	r3, [pc, #560]	; (8005508 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80052d6:	61bb      	str	r3, [r7, #24]
      break;
 80052d8:	e108      	b.n	80054ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052da:	4b88      	ldr	r3, [pc, #544]	; (80054fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80052e4:	4b85      	ldr	r3, [pc, #532]	; (80054fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e8:	091b      	lsrs	r3, r3, #4
 80052ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80052f0:	4b82      	ldr	r3, [pc, #520]	; (80054fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80052fa:	4b80      	ldr	r3, [pc, #512]	; (80054fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fe:	08db      	lsrs	r3, r3, #3
 8005300:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	fb02 f303 	mul.w	r3, r2, r3
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005312:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80e1 	beq.w	80054e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b02      	cmp	r3, #2
 8005322:	f000 8083 	beq.w	800542c <HAL_RCC_GetSysClockFreq+0x204>
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b02      	cmp	r3, #2
 800532a:	f200 80a1 	bhi.w	8005470 <HAL_RCC_GetSysClockFreq+0x248>
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <HAL_RCC_GetSysClockFreq+0x114>
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d056      	beq.n	80053e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800533a:	e099      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800533c:	4b6f      	ldr	r3, [pc, #444]	; (80054fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0320 	and.w	r3, r3, #32
 8005344:	2b00      	cmp	r3, #0
 8005346:	d02d      	beq.n	80053a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005348:	4b6c      	ldr	r3, [pc, #432]	; (80054fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	08db      	lsrs	r3, r3, #3
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	4a6b      	ldr	r2, [pc, #428]	; (8005500 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005354:	fa22 f303 	lsr.w	r3, r2, r3
 8005358:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	ee07 3a90 	vmov	s15, r3
 8005360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005372:	4b62      	ldr	r3, [pc, #392]	; (80054fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005382:	ed97 6a02 	vldr	s12, [r7, #8]
 8005386:	eddf 5a61 	vldr	s11, [pc, #388]	; 800550c <HAL_RCC_GetSysClockFreq+0x2e4>
 800538a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800538e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80053a2:	e087      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	ee07 3a90 	vmov	s15, r3
 80053aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005510 <HAL_RCC_GetSysClockFreq+0x2e8>
 80053b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b6:	4b51      	ldr	r3, [pc, #324]	; (80054fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800550c <HAL_RCC_GetSysClockFreq+0x2e4>
 80053ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053e6:	e065      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	ee07 3a90 	vmov	s15, r3
 80053ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005514 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fa:	4b40      	ldr	r3, [pc, #256]	; (80054fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540a:	ed97 6a02 	vldr	s12, [r7, #8]
 800540e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800550c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800541e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005426:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800542a:	e043      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005436:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005518 <HAL_RCC_GetSysClockFreq+0x2f0>
 800543a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800543e:	4b2f      	ldr	r3, [pc, #188]	; (80054fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800544e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005452:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800550c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800545e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800546e:	e021      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005514 <HAL_RCC_GetSysClockFreq+0x2ec>
 800547e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005482:	4b1e      	ldr	r3, [pc, #120]	; (80054fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005492:	ed97 6a02 	vldr	s12, [r7, #8]
 8005496:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800550c <HAL_RCC_GetSysClockFreq+0x2e4>
 800549a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800549e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80054b4:	4b11      	ldr	r3, [pc, #68]	; (80054fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b8:	0a5b      	lsrs	r3, r3, #9
 80054ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054be:	3301      	adds	r3, #1
 80054c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	ee07 3a90 	vmov	s15, r3
 80054c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80054d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d8:	ee17 3a90 	vmov	r3, s15
 80054dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80054de:	e005      	b.n	80054ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61bb      	str	r3, [r7, #24]
      break;
 80054e4:	e002      	b.n	80054ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80054e6:	4b07      	ldr	r3, [pc, #28]	; (8005504 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054e8:	61bb      	str	r3, [r7, #24]
      break;
 80054ea:	bf00      	nop
  }

  return sysclockfreq;
 80054ec:	69bb      	ldr	r3, [r7, #24]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3724      	adds	r7, #36	; 0x24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	58024400 	.word	0x58024400
 8005500:	03d09000 	.word	0x03d09000
 8005504:	003d0900 	.word	0x003d0900
 8005508:	017d7840 	.word	0x017d7840
 800550c:	46000000 	.word	0x46000000
 8005510:	4c742400 	.word	0x4c742400
 8005514:	4a742400 	.word	0x4a742400
 8005518:	4bbebc20 	.word	0x4bbebc20

0800551c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005522:	f7ff fe81 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8005526:	4602      	mov	r2, r0
 8005528:	4b10      	ldr	r3, [pc, #64]	; (800556c <HAL_RCC_GetHCLKFreq+0x50>)
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	0a1b      	lsrs	r3, r3, #8
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	490f      	ldr	r1, [pc, #60]	; (8005570 <HAL_RCC_GetHCLKFreq+0x54>)
 8005534:	5ccb      	ldrb	r3, [r1, r3]
 8005536:	f003 031f 	and.w	r3, r3, #31
 800553a:	fa22 f303 	lsr.w	r3, r2, r3
 800553e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005540:	4b0a      	ldr	r3, [pc, #40]	; (800556c <HAL_RCC_GetHCLKFreq+0x50>)
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	f003 030f 	and.w	r3, r3, #15
 8005548:	4a09      	ldr	r2, [pc, #36]	; (8005570 <HAL_RCC_GetHCLKFreq+0x54>)
 800554a:	5cd3      	ldrb	r3, [r2, r3]
 800554c:	f003 031f 	and.w	r3, r3, #31
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	fa22 f303 	lsr.w	r3, r2, r3
 8005556:	4a07      	ldr	r2, [pc, #28]	; (8005574 <HAL_RCC_GetHCLKFreq+0x58>)
 8005558:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800555a:	4a07      	ldr	r2, [pc, #28]	; (8005578 <HAL_RCC_GetHCLKFreq+0x5c>)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005560:	4b04      	ldr	r3, [pc, #16]	; (8005574 <HAL_RCC_GetHCLKFreq+0x58>)
 8005562:	681b      	ldr	r3, [r3, #0]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	58024400 	.word	0x58024400
 8005570:	08009cf4 	.word	0x08009cf4
 8005574:	24000004 	.word	0x24000004
 8005578:	24000000 	.word	0x24000000

0800557c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005580:	f7ff ffcc 	bl	800551c <HAL_RCC_GetHCLKFreq>
 8005584:	4602      	mov	r2, r0
 8005586:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	091b      	lsrs	r3, r3, #4
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	4904      	ldr	r1, [pc, #16]	; (80055a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005592:	5ccb      	ldrb	r3, [r1, r3]
 8005594:	f003 031f 	and.w	r3, r3, #31
 8005598:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800559c:	4618      	mov	r0, r3
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	58024400 	.word	0x58024400
 80055a4:	08009cf4 	.word	0x08009cf4

080055a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80055ac:	f7ff ffb6 	bl	800551c <HAL_RCC_GetHCLKFreq>
 80055b0:	4602      	mov	r2, r0
 80055b2:	4b06      	ldr	r3, [pc, #24]	; (80055cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	0a1b      	lsrs	r3, r3, #8
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	4904      	ldr	r1, [pc, #16]	; (80055d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055be:	5ccb      	ldrb	r3, [r1, r3]
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	58024400 	.word	0x58024400
 80055d0:	08009cf4 	.word	0x08009cf4

080055d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055d8:	b0ca      	sub	sp, #296	; 0x128
 80055da:	af00      	add	r7, sp, #0
 80055dc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055e0:	2300      	movs	r3, #0
 80055e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055e6:	2300      	movs	r3, #0
 80055e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80055f8:	2500      	movs	r5, #0
 80055fa:	ea54 0305 	orrs.w	r3, r4, r5
 80055fe:	d049      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005606:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800560a:	d02f      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800560c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005610:	d828      	bhi.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005612:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005616:	d01a      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005618:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800561c:	d822      	bhi.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005626:	d007      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005628:	e01c      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800562a:	4bb8      	ldr	r3, [pc, #736]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562e:	4ab7      	ldr	r2, [pc, #732]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005634:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005636:	e01a      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800563c:	3308      	adds	r3, #8
 800563e:	2102      	movs	r1, #2
 8005640:	4618      	mov	r0, r3
 8005642:	f001 fc8f 	bl	8006f64 <RCCEx_PLL2_Config>
 8005646:	4603      	mov	r3, r0
 8005648:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800564c:	e00f      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800564e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005652:	3328      	adds	r3, #40	; 0x28
 8005654:	2102      	movs	r1, #2
 8005656:	4618      	mov	r0, r3
 8005658:	f001 fd36 	bl	80070c8 <RCCEx_PLL3_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005662:	e004      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800566a:	e000      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800566c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800566e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10a      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005676:	4ba5      	ldr	r3, [pc, #660]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800567e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005684:	4aa1      	ldr	r2, [pc, #644]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005686:	430b      	orrs	r3, r1
 8005688:	6513      	str	r3, [r2, #80]	; 0x50
 800568a:	e003      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005690:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80056a0:	f04f 0900 	mov.w	r9, #0
 80056a4:	ea58 0309 	orrs.w	r3, r8, r9
 80056a8:	d047      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80056aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d82a      	bhi.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80056b4:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80056b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ba:	bf00      	nop
 80056bc:	080056d1 	.word	0x080056d1
 80056c0:	080056df 	.word	0x080056df
 80056c4:	080056f5 	.word	0x080056f5
 80056c8:	08005713 	.word	0x08005713
 80056cc:	08005713 	.word	0x08005713
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d0:	4b8e      	ldr	r3, [pc, #568]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	4a8d      	ldr	r2, [pc, #564]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056dc:	e01a      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e2:	3308      	adds	r3, #8
 80056e4:	2100      	movs	r1, #0
 80056e6:	4618      	mov	r0, r3
 80056e8:	f001 fc3c 	bl	8006f64 <RCCEx_PLL2_Config>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056f2:	e00f      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f8:	3328      	adds	r3, #40	; 0x28
 80056fa:	2100      	movs	r1, #0
 80056fc:	4618      	mov	r0, r3
 80056fe:	f001 fce3 	bl	80070c8 <RCCEx_PLL3_Config>
 8005702:	4603      	mov	r3, r0
 8005704:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005708:	e004      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005710:	e000      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005714:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10a      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800571c:	4b7b      	ldr	r3, [pc, #492]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800571e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005720:	f023 0107 	bic.w	r1, r3, #7
 8005724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572a:	4a78      	ldr	r2, [pc, #480]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800572c:	430b      	orrs	r3, r1
 800572e:	6513      	str	r3, [r2, #80]	; 0x50
 8005730:	e003      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005732:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005736:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800573a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800573e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005742:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005746:	f04f 0b00 	mov.w	fp, #0
 800574a:	ea5a 030b 	orrs.w	r3, sl, fp
 800574e:	d04c      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800575a:	d030      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800575c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005760:	d829      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005762:	2bc0      	cmp	r3, #192	; 0xc0
 8005764:	d02d      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005766:	2bc0      	cmp	r3, #192	; 0xc0
 8005768:	d825      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800576a:	2b80      	cmp	r3, #128	; 0x80
 800576c:	d018      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800576e:	2b80      	cmp	r3, #128	; 0x80
 8005770:	d821      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005776:	2b40      	cmp	r3, #64	; 0x40
 8005778:	d007      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800577a:	e01c      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800577c:	4b63      	ldr	r3, [pc, #396]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	4a62      	ldr	r2, [pc, #392]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005786:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005788:	e01c      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800578a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800578e:	3308      	adds	r3, #8
 8005790:	2100      	movs	r1, #0
 8005792:	4618      	mov	r0, r3
 8005794:	f001 fbe6 	bl	8006f64 <RCCEx_PLL2_Config>
 8005798:	4603      	mov	r3, r0
 800579a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800579e:	e011      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a4:	3328      	adds	r3, #40	; 0x28
 80057a6:	2100      	movs	r1, #0
 80057a8:	4618      	mov	r0, r3
 80057aa:	f001 fc8d 	bl	80070c8 <RCCEx_PLL3_Config>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057b4:	e006      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057bc:	e002      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80057be:	bf00      	nop
 80057c0:	e000      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80057c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80057cc:	4b4f      	ldr	r3, [pc, #316]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80057d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057da:	4a4c      	ldr	r2, [pc, #304]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057dc:	430b      	orrs	r3, r1
 80057de:	6513      	str	r3, [r2, #80]	; 0x50
 80057e0:	e003      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80057ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80057f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80057fa:	2300      	movs	r3, #0
 80057fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005800:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005804:	460b      	mov	r3, r1
 8005806:	4313      	orrs	r3, r2
 8005808:	d053      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800580a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800580e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005812:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005816:	d035      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005818:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800581c:	d82e      	bhi.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800581e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005822:	d031      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005824:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005828:	d828      	bhi.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800582a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800582e:	d01a      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005830:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005834:	d822      	bhi.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800583a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800583e:	d007      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005840:	e01c      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005842:	4b32      	ldr	r3, [pc, #200]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005846:	4a31      	ldr	r2, [pc, #196]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800584c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800584e:	e01c      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005854:	3308      	adds	r3, #8
 8005856:	2100      	movs	r1, #0
 8005858:	4618      	mov	r0, r3
 800585a:	f001 fb83 	bl	8006f64 <RCCEx_PLL2_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005864:	e011      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800586a:	3328      	adds	r3, #40	; 0x28
 800586c:	2100      	movs	r1, #0
 800586e:	4618      	mov	r0, r3
 8005870:	f001 fc2a 	bl	80070c8 <RCCEx_PLL3_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800587a:	e006      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005882:	e002      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005884:	bf00      	nop
 8005886:	e000      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800588a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10b      	bne.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005892:	4b1e      	ldr	r3, [pc, #120]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005896:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800589a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800589e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80058a2:	4a1a      	ldr	r2, [pc, #104]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058a4:	430b      	orrs	r3, r1
 80058a6:	6593      	str	r3, [r2, #88]	; 0x58
 80058a8:	e003      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80058b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ba:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80058be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058c2:	2300      	movs	r3, #0
 80058c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058c8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80058cc:	460b      	mov	r3, r1
 80058ce:	4313      	orrs	r3, r2
 80058d0:	d056      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80058d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80058da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058de:	d038      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80058e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058e4:	d831      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058ea:	d034      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80058ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058f0:	d82b      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058f6:	d01d      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80058f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058fc:	d825      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d006      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005902:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005906:	d00a      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005908:	e01f      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800590a:	bf00      	nop
 800590c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005910:	4ba2      	ldr	r3, [pc, #648]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	4aa1      	ldr	r2, [pc, #644]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800591a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800591c:	e01c      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800591e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005922:	3308      	adds	r3, #8
 8005924:	2100      	movs	r1, #0
 8005926:	4618      	mov	r0, r3
 8005928:	f001 fb1c 	bl	8006f64 <RCCEx_PLL2_Config>
 800592c:	4603      	mov	r3, r0
 800592e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005932:	e011      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005938:	3328      	adds	r3, #40	; 0x28
 800593a:	2100      	movs	r1, #0
 800593c:	4618      	mov	r0, r3
 800593e:	f001 fbc3 	bl	80070c8 <RCCEx_PLL3_Config>
 8005942:	4603      	mov	r3, r0
 8005944:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005948:	e006      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005950:	e002      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005952:	bf00      	nop
 8005954:	e000      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005958:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10b      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005960:	4b8e      	ldr	r3, [pc, #568]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005964:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800596c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005970:	4a8a      	ldr	r2, [pc, #552]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005972:	430b      	orrs	r3, r1
 8005974:	6593      	str	r3, [r2, #88]	; 0x58
 8005976:	e003      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800597c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005988:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800598c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005990:	2300      	movs	r3, #0
 8005992:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005996:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800599a:	460b      	mov	r3, r1
 800599c:	4313      	orrs	r3, r2
 800599e:	d03a      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80059a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a6:	2b30      	cmp	r3, #48	; 0x30
 80059a8:	d01f      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x416>
 80059aa:	2b30      	cmp	r3, #48	; 0x30
 80059ac:	d819      	bhi.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	d00c      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	d815      	bhi.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d019      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80059ba:	2b10      	cmp	r3, #16
 80059bc:	d111      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059be:	4b77      	ldr	r3, [pc, #476]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c2:	4a76      	ldr	r2, [pc, #472]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80059ca:	e011      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059d0:	3308      	adds	r3, #8
 80059d2:	2102      	movs	r1, #2
 80059d4:	4618      	mov	r0, r3
 80059d6:	f001 fac5 	bl	8006f64 <RCCEx_PLL2_Config>
 80059da:	4603      	mov	r3, r0
 80059dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80059e0:	e006      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80059e8:	e002      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80059ea:	bf00      	nop
 80059ec:	e000      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80059ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80059f8:	4b68      	ldr	r3, [pc, #416]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059fc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a06:	4a65      	ldr	r2, [pc, #404]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a0c:	e003      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005a22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a26:	2300      	movs	r3, #0
 8005a28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a2c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4313      	orrs	r3, r2
 8005a34:	d051      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a40:	d035      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a46:	d82e      	bhi.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a4c:	d031      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005a4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a52:	d828      	bhi.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a58:	d01a      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a5e:	d822      	bhi.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a68:	d007      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005a6a:	e01c      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a6c:	4b4b      	ldr	r3, [pc, #300]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	4a4a      	ldr	r2, [pc, #296]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a78:	e01c      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a7e:	3308      	adds	r3, #8
 8005a80:	2100      	movs	r1, #0
 8005a82:	4618      	mov	r0, r3
 8005a84:	f001 fa6e 	bl	8006f64 <RCCEx_PLL2_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a8e:	e011      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a94:	3328      	adds	r3, #40	; 0x28
 8005a96:	2100      	movs	r1, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 fb15 	bl	80070c8 <RCCEx_PLL3_Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005aa4:	e006      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005aac:	e002      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005aae:	bf00      	nop
 8005ab0:	e000      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10a      	bne.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005abc:	4b37      	ldr	r3, [pc, #220]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aca:	4a34      	ldr	r2, [pc, #208]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005acc:	430b      	orrs	r3, r1
 8005ace:	6513      	str	r3, [r2, #80]	; 0x50
 8005ad0:	e003      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ad6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005aea:	2300      	movs	r3, #0
 8005aec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005af0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005af4:	460b      	mov	r3, r1
 8005af6:	4313      	orrs	r3, r2
 8005af8:	d056      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b04:	d033      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005b06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b0a:	d82c      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b10:	d02f      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005b12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b16:	d826      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b1c:	d02b      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005b1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b22:	d820      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b28:	d012      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005b2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b2e:	d81a      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d022      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b38:	d115      	bne.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b3e:	3308      	adds	r3, #8
 8005b40:	2101      	movs	r1, #1
 8005b42:	4618      	mov	r0, r3
 8005b44:	f001 fa0e 	bl	8006f64 <RCCEx_PLL2_Config>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b4e:	e015      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b54:	3328      	adds	r3, #40	; 0x28
 8005b56:	2101      	movs	r1, #1
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f001 fab5 	bl	80070c8 <RCCEx_PLL3_Config>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b64:	e00a      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b6c:	e006      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b6e:	bf00      	nop
 8005b70:	e004      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b72:	bf00      	nop
 8005b74:	e002      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b76:	bf00      	nop
 8005b78:	e000      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10d      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005b84:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b88:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b92:	4a02      	ldr	r2, [pc, #8]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b94:	430b      	orrs	r3, r1
 8005b96:	6513      	str	r3, [r2, #80]	; 0x50
 8005b98:	e006      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005b9a:	bf00      	nop
 8005b9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ba4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bbe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	d055      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bd4:	d033      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005bd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bda:	d82c      	bhi.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be0:	d02f      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be6:	d826      	bhi.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005be8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bec:	d02b      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005bee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bf2:	d820      	bhi.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bf8:	d012      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bfe:	d81a      	bhi.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d022      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c08:	d115      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c0e:	3308      	adds	r3, #8
 8005c10:	2101      	movs	r1, #1
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 f9a6 	bl	8006f64 <RCCEx_PLL2_Config>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c1e:	e015      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c24:	3328      	adds	r3, #40	; 0x28
 8005c26:	2101      	movs	r1, #1
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f001 fa4d 	bl	80070c8 <RCCEx_PLL3_Config>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c34:	e00a      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c3c:	e006      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c3e:	bf00      	nop
 8005c40:	e004      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c42:	bf00      	nop
 8005c44:	e002      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c46:	bf00      	nop
 8005c48:	e000      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10b      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c54:	4ba3      	ldr	r3, [pc, #652]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c58:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c64:	4a9f      	ldr	r2, [pc, #636]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c66:	430b      	orrs	r3, r1
 8005c68:	6593      	str	r3, [r2, #88]	; 0x58
 8005c6a:	e003      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005c80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c84:	2300      	movs	r3, #0
 8005c86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4313      	orrs	r3, r2
 8005c92:	d037      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c9e:	d00e      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ca4:	d816      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d018      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005caa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cae:	d111      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cb0:	4b8c      	ldr	r3, [pc, #560]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	4a8b      	ldr	r2, [pc, #556]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005cbc:	e00f      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f001 f94c 	bl	8006f64 <RCCEx_PLL2_Config>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005cd2:	e004      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cda:	e000      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10a      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ce6:	4b7f      	ldr	r3, [pc, #508]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cea:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf4:	4a7b      	ldr	r2, [pc, #492]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cf6:	430b      	orrs	r3, r1
 8005cf8:	6513      	str	r3, [r2, #80]	; 0x50
 8005cfa:	e003      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005d10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d14:	2300      	movs	r3, #0
 8005d16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d1a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4313      	orrs	r3, r2
 8005d22:	d039      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d81c      	bhi.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005d2e:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d34:	08005d71 	.word	0x08005d71
 8005d38:	08005d45 	.word	0x08005d45
 8005d3c:	08005d53 	.word	0x08005d53
 8005d40:	08005d71 	.word	0x08005d71
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d44:	4b67      	ldr	r3, [pc, #412]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	4a66      	ldr	r2, [pc, #408]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d50:	e00f      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d56:	3308      	adds	r3, #8
 8005d58:	2102      	movs	r1, #2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f001 f902 	bl	8006f64 <RCCEx_PLL2_Config>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d66:	e004      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d6e:	e000      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10a      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d7a:	4b5a      	ldr	r3, [pc, #360]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d7e:	f023 0103 	bic.w	r1, r3, #3
 8005d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d88:	4a56      	ldr	r2, [pc, #344]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d8a:	430b      	orrs	r3, r1
 8005d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d8e:	e003      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005da4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005da8:	2300      	movs	r3, #0
 8005daa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005dae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005db2:	460b      	mov	r3, r1
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f000 809f 	beq.w	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dba:	4b4b      	ldr	r3, [pc, #300]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a4a      	ldr	r2, [pc, #296]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dc6:	f7fb fa5f 	bl	8001288 <HAL_GetTick>
 8005dca:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dce:	e00b      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dd0:	f7fb fa5a 	bl	8001288 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b64      	cmp	r3, #100	; 0x64
 8005dde:	d903      	bls.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005de6:	e005      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005de8:	4b3f      	ldr	r3, [pc, #252]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d0ed      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005df4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d179      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005dfc:	4b39      	ldr	r3, [pc, #228]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e08:	4053      	eors	r3, r2
 8005e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d015      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e12:	4b34      	ldr	r3, [pc, #208]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e1e:	4b31      	ldr	r3, [pc, #196]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	4a30      	ldr	r2, [pc, #192]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e28:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e2a:	4b2e      	ldr	r3, [pc, #184]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2e:	4a2d      	ldr	r2, [pc, #180]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e34:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e36:	4a2b      	ldr	r2, [pc, #172]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e3c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e4a:	d118      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4c:	f7fb fa1c 	bl	8001288 <HAL_GetTick>
 8005e50:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e54:	e00d      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e56:	f7fb fa17 	bl	8001288 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e60:	1ad2      	subs	r2, r2, r3
 8005e62:	f241 3388 	movw	r3, #5000	; 0x1388
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d903      	bls.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005e70:	e005      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e72:	4b1c      	ldr	r3, [pc, #112]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0eb      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d129      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e96:	d10e      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005e98:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ea8:	091a      	lsrs	r2, r3, #4
 8005eaa:	4b10      	ldr	r3, [pc, #64]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005eac:	4013      	ands	r3, r2
 8005eae:	4a0d      	ldr	r2, [pc, #52]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	6113      	str	r3, [r2, #16]
 8005eb4:	e005      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005eb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	4a0a      	ldr	r2, [pc, #40]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ebc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ec0:	6113      	str	r3, [r2, #16]
 8005ec2:	4b08      	ldr	r3, [pc, #32]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ec4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ed2:	4a04      	ldr	r2, [pc, #16]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ed4:	430b      	orrs	r3, r1
 8005ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ed8:	e00e      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005eda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ede:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005ee2:	e009      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005ee4:	58024400 	.word	0x58024400
 8005ee8:	58024800 	.word	0x58024800
 8005eec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ef4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f002 0301 	and.w	r3, r2, #1
 8005f04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4313      	orrs	r3, r2
 8005f16:	f000 8089 	beq.w	800602c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f20:	2b28      	cmp	r3, #40	; 0x28
 8005f22:	d86b      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005f24:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2a:	bf00      	nop
 8005f2c:	08006005 	.word	0x08006005
 8005f30:	08005ffd 	.word	0x08005ffd
 8005f34:	08005ffd 	.word	0x08005ffd
 8005f38:	08005ffd 	.word	0x08005ffd
 8005f3c:	08005ffd 	.word	0x08005ffd
 8005f40:	08005ffd 	.word	0x08005ffd
 8005f44:	08005ffd 	.word	0x08005ffd
 8005f48:	08005ffd 	.word	0x08005ffd
 8005f4c:	08005fd1 	.word	0x08005fd1
 8005f50:	08005ffd 	.word	0x08005ffd
 8005f54:	08005ffd 	.word	0x08005ffd
 8005f58:	08005ffd 	.word	0x08005ffd
 8005f5c:	08005ffd 	.word	0x08005ffd
 8005f60:	08005ffd 	.word	0x08005ffd
 8005f64:	08005ffd 	.word	0x08005ffd
 8005f68:	08005ffd 	.word	0x08005ffd
 8005f6c:	08005fe7 	.word	0x08005fe7
 8005f70:	08005ffd 	.word	0x08005ffd
 8005f74:	08005ffd 	.word	0x08005ffd
 8005f78:	08005ffd 	.word	0x08005ffd
 8005f7c:	08005ffd 	.word	0x08005ffd
 8005f80:	08005ffd 	.word	0x08005ffd
 8005f84:	08005ffd 	.word	0x08005ffd
 8005f88:	08005ffd 	.word	0x08005ffd
 8005f8c:	08006005 	.word	0x08006005
 8005f90:	08005ffd 	.word	0x08005ffd
 8005f94:	08005ffd 	.word	0x08005ffd
 8005f98:	08005ffd 	.word	0x08005ffd
 8005f9c:	08005ffd 	.word	0x08005ffd
 8005fa0:	08005ffd 	.word	0x08005ffd
 8005fa4:	08005ffd 	.word	0x08005ffd
 8005fa8:	08005ffd 	.word	0x08005ffd
 8005fac:	08006005 	.word	0x08006005
 8005fb0:	08005ffd 	.word	0x08005ffd
 8005fb4:	08005ffd 	.word	0x08005ffd
 8005fb8:	08005ffd 	.word	0x08005ffd
 8005fbc:	08005ffd 	.word	0x08005ffd
 8005fc0:	08005ffd 	.word	0x08005ffd
 8005fc4:	08005ffd 	.word	0x08005ffd
 8005fc8:	08005ffd 	.word	0x08005ffd
 8005fcc:	08006005 	.word	0x08006005
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 ffc3 	bl	8006f64 <RCCEx_PLL2_Config>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005fe4:	e00f      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fea:	3328      	adds	r3, #40	; 0x28
 8005fec:	2101      	movs	r1, #1
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f001 f86a 	bl	80070c8 <RCCEx_PLL3_Config>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ffa:	e004      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006002:	e000      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800600e:	4bbf      	ldr	r3, [pc, #764]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006012:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800601a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800601c:	4abb      	ldr	r2, [pc, #748]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800601e:	430b      	orrs	r3, r1
 8006020:	6553      	str	r3, [r2, #84]	; 0x54
 8006022:	e003      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006024:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006028:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800602c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	f002 0302 	and.w	r3, r2, #2
 8006038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800603c:	2300      	movs	r3, #0
 800603e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006042:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006046:	460b      	mov	r3, r1
 8006048:	4313      	orrs	r3, r2
 800604a:	d041      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006052:	2b05      	cmp	r3, #5
 8006054:	d824      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006056:	a201      	add	r2, pc, #4	; (adr r2, 800605c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605c:	080060a9 	.word	0x080060a9
 8006060:	08006075 	.word	0x08006075
 8006064:	0800608b 	.word	0x0800608b
 8006068:	080060a9 	.word	0x080060a9
 800606c:	080060a9 	.word	0x080060a9
 8006070:	080060a9 	.word	0x080060a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006078:	3308      	adds	r3, #8
 800607a:	2101      	movs	r1, #1
 800607c:	4618      	mov	r0, r3
 800607e:	f000 ff71 	bl	8006f64 <RCCEx_PLL2_Config>
 8006082:	4603      	mov	r3, r0
 8006084:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006088:	e00f      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800608a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800608e:	3328      	adds	r3, #40	; 0x28
 8006090:	2101      	movs	r1, #1
 8006092:	4618      	mov	r0, r3
 8006094:	f001 f818 	bl	80070c8 <RCCEx_PLL3_Config>
 8006098:	4603      	mov	r3, r0
 800609a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800609e:	e004      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060a6:	e000      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80060a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10a      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80060b2:	4b96      	ldr	r3, [pc, #600]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b6:	f023 0107 	bic.w	r1, r3, #7
 80060ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060c0:	4a92      	ldr	r2, [pc, #584]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060c2:	430b      	orrs	r3, r1
 80060c4:	6553      	str	r3, [r2, #84]	; 0x54
 80060c6:	e003      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d8:	f002 0304 	and.w	r3, r2, #4
 80060dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060e0:	2300      	movs	r3, #0
 80060e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4313      	orrs	r3, r2
 80060ee:	d044      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80060f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060f8:	2b05      	cmp	r3, #5
 80060fa:	d825      	bhi.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80060fc:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80060fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006102:	bf00      	nop
 8006104:	08006151 	.word	0x08006151
 8006108:	0800611d 	.word	0x0800611d
 800610c:	08006133 	.word	0x08006133
 8006110:	08006151 	.word	0x08006151
 8006114:	08006151 	.word	0x08006151
 8006118:	08006151 	.word	0x08006151
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800611c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006120:	3308      	adds	r3, #8
 8006122:	2101      	movs	r1, #1
 8006124:	4618      	mov	r0, r3
 8006126:	f000 ff1d 	bl	8006f64 <RCCEx_PLL2_Config>
 800612a:	4603      	mov	r3, r0
 800612c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006130:	e00f      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006136:	3328      	adds	r3, #40	; 0x28
 8006138:	2101      	movs	r1, #1
 800613a:	4618      	mov	r0, r3
 800613c:	f000 ffc4 	bl	80070c8 <RCCEx_PLL3_Config>
 8006140:	4603      	mov	r3, r0
 8006142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006146:	e004      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800614e:	e000      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006152:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10b      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800615a:	4b6c      	ldr	r3, [pc, #432]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800615c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615e:	f023 0107 	bic.w	r1, r3, #7
 8006162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800616a:	4a68      	ldr	r2, [pc, #416]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800616c:	430b      	orrs	r3, r1
 800616e:	6593      	str	r3, [r2, #88]	; 0x58
 8006170:	e003      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006172:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006176:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800617a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	f002 0320 	and.w	r3, r2, #32
 8006186:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800618a:	2300      	movs	r3, #0
 800618c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006190:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006194:	460b      	mov	r3, r1
 8006196:	4313      	orrs	r3, r2
 8006198:	d055      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061a6:	d033      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80061a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061ac:	d82c      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b2:	d02f      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80061b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b8:	d826      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061be:	d02b      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80061c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061c4:	d820      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ca:	d012      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80061cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061d0:	d81a      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d022      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80061d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061da:	d115      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e0:	3308      	adds	r3, #8
 80061e2:	2100      	movs	r1, #0
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 febd 	bl	8006f64 <RCCEx_PLL2_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80061f0:	e015      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061f6:	3328      	adds	r3, #40	; 0x28
 80061f8:	2102      	movs	r1, #2
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 ff64 	bl	80070c8 <RCCEx_PLL3_Config>
 8006200:	4603      	mov	r3, r0
 8006202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006206:	e00a      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800620e:	e006      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006210:	bf00      	nop
 8006212:	e004      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006214:	bf00      	nop
 8006216:	e002      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006218:	bf00      	nop
 800621a:	e000      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800621c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800621e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10b      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006226:	4b39      	ldr	r3, [pc, #228]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800622e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006236:	4a35      	ldr	r2, [pc, #212]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006238:	430b      	orrs	r3, r1
 800623a:	6553      	str	r3, [r2, #84]	; 0x54
 800623c:	e003      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800623e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006242:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006256:	2300      	movs	r3, #0
 8006258:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800625c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006260:	460b      	mov	r3, r1
 8006262:	4313      	orrs	r3, r2
 8006264:	d058      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800626a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800626e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006272:	d033      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006274:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006278:	d82c      	bhi.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800627a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800627e:	d02f      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006284:	d826      	bhi.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006286:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800628a:	d02b      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800628c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006290:	d820      	bhi.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006296:	d012      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800629c:	d81a      	bhi.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d022      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80062a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a6:	d115      	bne.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ac:	3308      	adds	r3, #8
 80062ae:	2100      	movs	r1, #0
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 fe57 	bl	8006f64 <RCCEx_PLL2_Config>
 80062b6:	4603      	mov	r3, r0
 80062b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062bc:	e015      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c2:	3328      	adds	r3, #40	; 0x28
 80062c4:	2102      	movs	r1, #2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fefe 	bl	80070c8 <RCCEx_PLL3_Config>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062d2:	e00a      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80062da:	e006      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062dc:	bf00      	nop
 80062de:	e004      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062e0:	bf00      	nop
 80062e2:	e002      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062e4:	bf00      	nop
 80062e6:	e000      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10e      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062f2:	4b06      	ldr	r3, [pc, #24]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80062fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006302:	4a02      	ldr	r2, [pc, #8]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006304:	430b      	orrs	r3, r1
 8006306:	6593      	str	r3, [r2, #88]	; 0x58
 8006308:	e006      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800630a:	bf00      	nop
 800630c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006310:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006314:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006328:	2300      	movs	r3, #0
 800632a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800632e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006332:	460b      	mov	r3, r1
 8006334:	4313      	orrs	r3, r2
 8006336:	d055      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006340:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006344:	d033      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006346:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800634a:	d82c      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800634c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006350:	d02f      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006356:	d826      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006358:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800635c:	d02b      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800635e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006362:	d820      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006368:	d012      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800636a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800636e:	d81a      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006370:	2b00      	cmp	r3, #0
 8006372:	d022      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006378:	d115      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800637a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800637e:	3308      	adds	r3, #8
 8006380:	2100      	movs	r1, #0
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fdee 	bl	8006f64 <RCCEx_PLL2_Config>
 8006388:	4603      	mov	r3, r0
 800638a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800638e:	e015      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006394:	3328      	adds	r3, #40	; 0x28
 8006396:	2102      	movs	r1, #2
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fe95 	bl	80070c8 <RCCEx_PLL3_Config>
 800639e:	4603      	mov	r3, r0
 80063a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063a4:	e00a      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063ac:	e006      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063ae:	bf00      	nop
 80063b0:	e004      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063b2:	bf00      	nop
 80063b4:	e002      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063b6:	bf00      	nop
 80063b8:	e000      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10b      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80063c4:	4ba1      	ldr	r3, [pc, #644]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80063cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063d4:	4a9d      	ldr	r2, [pc, #628]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063d6:	430b      	orrs	r3, r1
 80063d8:	6593      	str	r3, [r2, #88]	; 0x58
 80063da:	e003      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80063e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ec:	f002 0308 	and.w	r3, r2, #8
 80063f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063f4:	2300      	movs	r3, #0
 80063f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80063fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80063fe:	460b      	mov	r3, r1
 8006400:	4313      	orrs	r3, r2
 8006402:	d01e      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800640c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006410:	d10c      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006416:	3328      	adds	r3, #40	; 0x28
 8006418:	2102      	movs	r1, #2
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fe54 	bl	80070c8 <RCCEx_PLL3_Config>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800642c:	4b87      	ldr	r3, [pc, #540]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800642e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006430:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800643c:	4a83      	ldr	r2, [pc, #524]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800643e:	430b      	orrs	r3, r1
 8006440:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	f002 0310 	and.w	r3, r2, #16
 800644e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006452:	2300      	movs	r3, #0
 8006454:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006458:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800645c:	460b      	mov	r3, r1
 800645e:	4313      	orrs	r3, r2
 8006460:	d01e      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006466:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800646a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800646e:	d10c      	bne.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006474:	3328      	adds	r3, #40	; 0x28
 8006476:	2102      	movs	r1, #2
 8006478:	4618      	mov	r0, r3
 800647a:	f000 fe25 	bl	80070c8 <RCCEx_PLL3_Config>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800648a:	4b70      	ldr	r3, [pc, #448]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800648c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800648e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006496:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800649a:	4a6c      	ldr	r2, [pc, #432]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800649c:	430b      	orrs	r3, r1
 800649e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80064ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064b0:	2300      	movs	r3, #0
 80064b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80064ba:	460b      	mov	r3, r1
 80064bc:	4313      	orrs	r3, r2
 80064be:	d03e      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80064c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064cc:	d022      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80064ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064d2:	d81b      	bhi.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d003      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80064d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064dc:	d00b      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80064de:	e015      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064e4:	3308      	adds	r3, #8
 80064e6:	2100      	movs	r1, #0
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 fd3b 	bl	8006f64 <RCCEx_PLL2_Config>
 80064ee:	4603      	mov	r3, r0
 80064f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80064f4:	e00f      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064fa:	3328      	adds	r3, #40	; 0x28
 80064fc:	2102      	movs	r1, #2
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fde2 	bl	80070c8 <RCCEx_PLL3_Config>
 8006504:	4603      	mov	r3, r0
 8006506:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800650a:	e004      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006512:	e000      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10b      	bne.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800651e:	4b4b      	ldr	r3, [pc, #300]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006522:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800652a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800652e:	4a47      	ldr	r2, [pc, #284]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006530:	430b      	orrs	r3, r1
 8006532:	6593      	str	r3, [r2, #88]	; 0x58
 8006534:	e003      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006536:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800653a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800653e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006546:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800654a:	67bb      	str	r3, [r7, #120]	; 0x78
 800654c:	2300      	movs	r3, #0
 800654e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006550:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006554:	460b      	mov	r3, r1
 8006556:	4313      	orrs	r3, r2
 8006558:	d03b      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800655a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800655e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006562:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006566:	d01f      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006568:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800656c:	d818      	bhi.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800656e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006572:	d003      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006574:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006578:	d007      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800657a:	e011      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800657c:	4b33      	ldr	r3, [pc, #204]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	4a32      	ldr	r2, [pc, #200]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006586:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006588:	e00f      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800658a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800658e:	3328      	adds	r3, #40	; 0x28
 8006590:	2101      	movs	r1, #1
 8006592:	4618      	mov	r0, r3
 8006594:	f000 fd98 	bl	80070c8 <RCCEx_PLL3_Config>
 8006598:	4603      	mov	r3, r0
 800659a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800659e:	e004      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80065a6:	e000      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80065a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10b      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065b2:	4b26      	ldr	r3, [pc, #152]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80065ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c2:	4a22      	ldr	r2, [pc, #136]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065c4:	430b      	orrs	r3, r1
 80065c6:	6553      	str	r3, [r2, #84]	; 0x54
 80065c8:	e003      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80065de:	673b      	str	r3, [r7, #112]	; 0x70
 80065e0:	2300      	movs	r3, #0
 80065e2:	677b      	str	r3, [r7, #116]	; 0x74
 80065e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80065e8:	460b      	mov	r3, r1
 80065ea:	4313      	orrs	r3, r2
 80065ec:	d034      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80065ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d003      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80065f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fc:	d007      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80065fe:	e011      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006600:	4b12      	ldr	r3, [pc, #72]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	4a11      	ldr	r2, [pc, #68]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800660a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800660c:	e00e      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800660e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006612:	3308      	adds	r3, #8
 8006614:	2102      	movs	r1, #2
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fca4 	bl	8006f64 <RCCEx_PLL2_Config>
 800661c:	4603      	mov	r3, r0
 800661e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006622:	e003      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800662a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800662c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10d      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006634:	4b05      	ldr	r3, [pc, #20]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006638:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800663c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006642:	4a02      	ldr	r2, [pc, #8]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006644:	430b      	orrs	r3, r1
 8006646:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006648:	e006      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800664a:	bf00      	nop
 800664c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006650:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006654:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800665c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006660:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006664:	66bb      	str	r3, [r7, #104]	; 0x68
 8006666:	2300      	movs	r3, #0
 8006668:	66fb      	str	r3, [r7, #108]	; 0x6c
 800666a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800666e:	460b      	mov	r3, r1
 8006670:	4313      	orrs	r3, r2
 8006672:	d00c      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006678:	3328      	adds	r3, #40	; 0x28
 800667a:	2102      	movs	r1, #2
 800667c:	4618      	mov	r0, r3
 800667e:	f000 fd23 	bl	80070c8 <RCCEx_PLL3_Config>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800668e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800669a:	663b      	str	r3, [r7, #96]	; 0x60
 800669c:	2300      	movs	r3, #0
 800669e:	667b      	str	r3, [r7, #100]	; 0x64
 80066a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80066a4:	460b      	mov	r3, r1
 80066a6:	4313      	orrs	r3, r2
 80066a8:	d038      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80066aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066b6:	d018      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80066b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066bc:	d811      	bhi.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80066be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c2:	d014      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80066c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c8:	d80b      	bhi.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d011      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80066ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d2:	d106      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d4:	4bc3      	ldr	r3, [pc, #780]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	4ac2      	ldr	r2, [pc, #776]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80066e0:	e008      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066e8:	e004      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80066ea:	bf00      	nop
 80066ec:	e002      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80066ee:	bf00      	nop
 80066f0:	e000      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80066f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10b      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066fc:	4bb9      	ldr	r3, [pc, #740]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006700:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800670c:	4ab5      	ldr	r2, [pc, #724]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800670e:	430b      	orrs	r3, r1
 8006710:	6553      	str	r3, [r2, #84]	; 0x54
 8006712:	e003      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006714:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006718:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800671c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006724:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006728:	65bb      	str	r3, [r7, #88]	; 0x58
 800672a:	2300      	movs	r3, #0
 800672c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800672e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006732:	460b      	mov	r3, r1
 8006734:	4313      	orrs	r3, r2
 8006736:	d009      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006738:	4baa      	ldr	r3, [pc, #680]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800673a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006746:	4aa7      	ldr	r2, [pc, #668]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006748:	430b      	orrs	r3, r1
 800674a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800674c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006758:	653b      	str	r3, [r7, #80]	; 0x50
 800675a:	2300      	movs	r3, #0
 800675c:	657b      	str	r3, [r7, #84]	; 0x54
 800675e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006762:	460b      	mov	r3, r1
 8006764:	4313      	orrs	r3, r2
 8006766:	d00a      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006768:	4b9e      	ldr	r3, [pc, #632]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006774:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006778:	4a9a      	ldr	r2, [pc, #616]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800677a:	430b      	orrs	r3, r1
 800677c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006786:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800678a:	64bb      	str	r3, [r7, #72]	; 0x48
 800678c:	2300      	movs	r3, #0
 800678e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006790:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006794:	460b      	mov	r3, r1
 8006796:	4313      	orrs	r3, r2
 8006798:	d009      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800679a:	4b92      	ldr	r3, [pc, #584]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800679c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067a8:	4a8e      	ldr	r2, [pc, #568]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067aa:	430b      	orrs	r3, r1
 80067ac:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80067ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80067ba:	643b      	str	r3, [r7, #64]	; 0x40
 80067bc:	2300      	movs	r3, #0
 80067be:	647b      	str	r3, [r7, #68]	; 0x44
 80067c0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80067c4:	460b      	mov	r3, r1
 80067c6:	4313      	orrs	r3, r2
 80067c8:	d00e      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067ca:	4b86      	ldr	r3, [pc, #536]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	4a85      	ldr	r2, [pc, #532]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067d4:	6113      	str	r3, [r2, #16]
 80067d6:	4b83      	ldr	r3, [pc, #524]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067d8:	6919      	ldr	r1, [r3, #16]
 80067da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80067e2:	4a80      	ldr	r2, [pc, #512]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067e4:	430b      	orrs	r3, r1
 80067e6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80067e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80067f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80067f6:	2300      	movs	r3, #0
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067fa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80067fe:	460b      	mov	r3, r1
 8006800:	4313      	orrs	r3, r2
 8006802:	d009      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006804:	4b77      	ldr	r3, [pc, #476]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006808:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800680c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006812:	4a74      	ldr	r2, [pc, #464]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006814:	430b      	orrs	r3, r1
 8006816:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006824:	633b      	str	r3, [r7, #48]	; 0x30
 8006826:	2300      	movs	r3, #0
 8006828:	637b      	str	r3, [r7, #52]	; 0x34
 800682a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800682e:	460b      	mov	r3, r1
 8006830:	4313      	orrs	r3, r2
 8006832:	d00a      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006834:	4b6b      	ldr	r3, [pc, #428]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006838:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800683c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006844:	4a67      	ldr	r2, [pc, #412]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006846:	430b      	orrs	r3, r1
 8006848:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800684a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006852:	2100      	movs	r1, #0
 8006854:	62b9      	str	r1, [r7, #40]	; 0x28
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800685c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006860:	460b      	mov	r3, r1
 8006862:	4313      	orrs	r3, r2
 8006864:	d011      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800686a:	3308      	adds	r3, #8
 800686c:	2100      	movs	r1, #0
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fb78 	bl	8006f64 <RCCEx_PLL2_Config>
 8006874:	4603      	mov	r3, r0
 8006876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800687a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006882:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006886:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800688a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006892:	2100      	movs	r1, #0
 8006894:	6239      	str	r1, [r7, #32]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
 800689c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80068a0:	460b      	mov	r3, r1
 80068a2:	4313      	orrs	r3, r2
 80068a4:	d011      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068aa:	3308      	adds	r3, #8
 80068ac:	2101      	movs	r1, #1
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fb58 	bl	8006f64 <RCCEx_PLL2_Config>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80068ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80068ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	2100      	movs	r1, #0
 80068d4:	61b9      	str	r1, [r7, #24]
 80068d6:	f003 0304 	and.w	r3, r3, #4
 80068da:	61fb      	str	r3, [r7, #28]
 80068dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80068e0:	460b      	mov	r3, r1
 80068e2:	4313      	orrs	r3, r2
 80068e4:	d011      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ea:	3308      	adds	r3, #8
 80068ec:	2102      	movs	r1, #2
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fb38 	bl	8006f64 <RCCEx_PLL2_Config>
 80068f4:	4603      	mov	r3, r0
 80068f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80068fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006906:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800690e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006912:	2100      	movs	r1, #0
 8006914:	6139      	str	r1, [r7, #16]
 8006916:	f003 0308 	and.w	r3, r3, #8
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006920:	460b      	mov	r3, r1
 8006922:	4313      	orrs	r3, r2
 8006924:	d011      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800692a:	3328      	adds	r3, #40	; 0x28
 800692c:	2100      	movs	r1, #0
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fbca 	bl	80070c8 <RCCEx_PLL3_Config>
 8006934:	4603      	mov	r3, r0
 8006936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800693a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006946:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800694a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	2100      	movs	r1, #0
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	f003 0310 	and.w	r3, r3, #16
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006960:	460b      	mov	r3, r1
 8006962:	4313      	orrs	r3, r2
 8006964:	d011      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800696a:	3328      	adds	r3, #40	; 0x28
 800696c:	2101      	movs	r1, #1
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fbaa 	bl	80070c8 <RCCEx_PLL3_Config>
 8006974:	4603      	mov	r3, r0
 8006976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800697a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006986:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800698a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	2100      	movs	r1, #0
 8006994:	6039      	str	r1, [r7, #0]
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	607b      	str	r3, [r7, #4]
 800699c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80069a0:	460b      	mov	r3, r1
 80069a2:	4313      	orrs	r3, r2
 80069a4:	d011      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069aa:	3328      	adds	r3, #40	; 0x28
 80069ac:	2102      	movs	r1, #2
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fb8a 	bl	80070c8 <RCCEx_PLL3_Config>
 80069b4:	4603      	mov	r3, r0
 80069b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80069ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d003      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80069ca:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	e000      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
}
 80069d8:	4618      	mov	r0, r3
 80069da:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80069de:	46bd      	mov	sp, r7
 80069e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069e4:	58024400 	.word	0x58024400

080069e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80069ec:	f7fe fd96 	bl	800551c <HAL_RCC_GetHCLKFreq>
 80069f0:	4602      	mov	r2, r0
 80069f2:	4b06      	ldr	r3, [pc, #24]	; (8006a0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	091b      	lsrs	r3, r3, #4
 80069f8:	f003 0307 	and.w	r3, r3, #7
 80069fc:	4904      	ldr	r1, [pc, #16]	; (8006a10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80069fe:	5ccb      	ldrb	r3, [r1, r3]
 8006a00:	f003 031f 	and.w	r3, r3, #31
 8006a04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	58024400 	.word	0x58024400
 8006a10:	08009cf4 	.word	0x08009cf4

08006a14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b089      	sub	sp, #36	; 0x24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a1c:	4ba1      	ldr	r3, [pc, #644]	; (8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a20:	f003 0303 	and.w	r3, r3, #3
 8006a24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006a26:	4b9f      	ldr	r3, [pc, #636]	; (8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2a:	0b1b      	lsrs	r3, r3, #12
 8006a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a32:	4b9c      	ldr	r3, [pc, #624]	; (8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a36:	091b      	lsrs	r3, r3, #4
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006a3e:	4b99      	ldr	r3, [pc, #612]	; (8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a42:	08db      	lsrs	r3, r3, #3
 8006a44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	fb02 f303 	mul.w	r3, r2, r3
 8006a4e:	ee07 3a90 	vmov	s15, r3
 8006a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 8111 	beq.w	8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	f000 8083 	beq.w	8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	f200 80a1 	bhi.w	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d056      	beq.n	8006b2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a7e:	e099      	b.n	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a80:	4b88      	ldr	r3, [pc, #544]	; (8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d02d      	beq.n	8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a8c:	4b85      	ldr	r3, [pc, #532]	; (8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	08db      	lsrs	r3, r3, #3
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	4a84      	ldr	r2, [pc, #528]	; (8006ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a98:	fa22 f303 	lsr.w	r3, r2, r3
 8006a9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	ee07 3a90 	vmov	s15, r3
 8006aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	ee07 3a90 	vmov	s15, r3
 8006aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab6:	4b7b      	ldr	r3, [pc, #492]	; (8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ae6:	e087      	b.n	8006bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006afa:	4b6a      	ldr	r3, [pc, #424]	; (8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b2a:	e065      	b.n	8006bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b3e:	4b59      	ldr	r3, [pc, #356]	; (8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b52:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b6e:	e043      	b.n	8006bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b82:	4b48      	ldr	r3, [pc, #288]	; (8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b96:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bb2:	e021      	b.n	8006bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bbe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc6:	4b37      	ldr	r3, [pc, #220]	; (8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bda:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bf6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006bf8:	4b2a      	ldr	r3, [pc, #168]	; (8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfc:	0a5b      	lsrs	r3, r3, #9
 8006bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c12:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c1e:	ee17 2a90 	vmov	r2, s15
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006c26:	4b1f      	ldr	r3, [pc, #124]	; (8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	0c1b      	lsrs	r3, r3, #16
 8006c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c30:	ee07 3a90 	vmov	s15, r3
 8006c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c40:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c4c:	ee17 2a90 	vmov	r2, s15
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006c54:	4b13      	ldr	r3, [pc, #76]	; (8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c58:	0e1b      	lsrs	r3, r3, #24
 8006c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c5e:	ee07 3a90 	vmov	s15, r3
 8006c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c7a:	ee17 2a90 	vmov	r2, s15
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c82:	e008      	b.n	8006c96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	609a      	str	r2, [r3, #8]
}
 8006c96:	bf00      	nop
 8006c98:	3724      	adds	r7, #36	; 0x24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	58024400 	.word	0x58024400
 8006ca8:	03d09000 	.word	0x03d09000
 8006cac:	46000000 	.word	0x46000000
 8006cb0:	4c742400 	.word	0x4c742400
 8006cb4:	4a742400 	.word	0x4a742400
 8006cb8:	4bbebc20 	.word	0x4bbebc20

08006cbc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b089      	sub	sp, #36	; 0x24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cc4:	4ba1      	ldr	r3, [pc, #644]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc8:	f003 0303 	and.w	r3, r3, #3
 8006ccc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006cce:	4b9f      	ldr	r3, [pc, #636]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd2:	0d1b      	lsrs	r3, r3, #20
 8006cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cd8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006cda:	4b9c      	ldr	r3, [pc, #624]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cde:	0a1b      	lsrs	r3, r3, #8
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006ce6:	4b99      	ldr	r3, [pc, #612]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cea:	08db      	lsrs	r3, r3, #3
 8006cec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	fb02 f303 	mul.w	r3, r2, r3
 8006cf6:	ee07 3a90 	vmov	s15, r3
 8006cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 8111 	beq.w	8006f2c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	f000 8083 	beq.w	8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	f200 80a1 	bhi.w	8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d056      	beq.n	8006dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d26:	e099      	b.n	8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d28:	4b88      	ldr	r3, [pc, #544]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0320 	and.w	r3, r3, #32
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d02d      	beq.n	8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d34:	4b85      	ldr	r3, [pc, #532]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	08db      	lsrs	r3, r3, #3
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	4a84      	ldr	r2, [pc, #528]	; (8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006d40:	fa22 f303 	lsr.w	r3, r2, r3
 8006d44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	ee07 3a90 	vmov	s15, r3
 8006d4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	ee07 3a90 	vmov	s15, r3
 8006d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d5e:	4b7b      	ldr	r3, [pc, #492]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d72:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d8e:	e087      	b.n	8006ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da2:	4b6a      	ldr	r3, [pc, #424]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006db6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dd2:	e065      	b.n	8006ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dde:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006de6:	4b59      	ldr	r3, [pc, #356]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dfa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e16:	e043      	b.n	8006ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2a:	4b48      	ldr	r3, [pc, #288]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e5a:	e021      	b.n	8006ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	ee07 3a90 	vmov	s15, r3
 8006e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e6e:	4b37      	ldr	r3, [pc, #220]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e82:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006ea0:	4b2a      	ldr	r3, [pc, #168]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea4:	0a5b      	lsrs	r3, r3, #9
 8006ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eba:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ec6:	ee17 2a90 	vmov	r2, s15
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006ece:	4b1f      	ldr	r3, [pc, #124]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	0c1b      	lsrs	r3, r3, #16
 8006ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed8:	ee07 3a90 	vmov	s15, r3
 8006edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ee4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ee8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ef4:	ee17 2a90 	vmov	r2, s15
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006efc:	4b13      	ldr	r3, [pc, #76]	; (8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f00:	0e1b      	lsrs	r3, r3, #24
 8006f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f16:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f22:	ee17 2a90 	vmov	r2, s15
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f2a:	e008      	b.n	8006f3e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	609a      	str	r2, [r3, #8]
}
 8006f3e:	bf00      	nop
 8006f40:	3724      	adds	r7, #36	; 0x24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	58024400 	.word	0x58024400
 8006f50:	03d09000 	.word	0x03d09000
 8006f54:	46000000 	.word	0x46000000
 8006f58:	4c742400 	.word	0x4c742400
 8006f5c:	4a742400 	.word	0x4a742400
 8006f60:	4bbebc20 	.word	0x4bbebc20

08006f64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f72:	4b53      	ldr	r3, [pc, #332]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 8006f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d101      	bne.n	8006f82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e099      	b.n	80070b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f82:	4b4f      	ldr	r3, [pc, #316]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a4e      	ldr	r2, [pc, #312]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 8006f88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f8e:	f7fa f97b 	bl	8001288 <HAL_GetTick>
 8006f92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f94:	e008      	b.n	8006fa8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f96:	f7fa f977 	bl	8001288 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d901      	bls.n	8006fa8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e086      	b.n	80070b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fa8:	4b45      	ldr	r3, [pc, #276]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1f0      	bne.n	8006f96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006fb4:	4b42      	ldr	r3, [pc, #264]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 8006fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	031b      	lsls	r3, r3, #12
 8006fc2:	493f      	ldr	r1, [pc, #252]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	628b      	str	r3, [r1, #40]	; 0x28
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	025b      	lsls	r3, r3, #9
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	041b      	lsls	r3, r3, #16
 8006fe6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	061b      	lsls	r3, r3, #24
 8006ff4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ff8:	4931      	ldr	r1, [pc, #196]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006ffe:	4b30      	ldr	r3, [pc, #192]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 8007000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007002:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	492d      	ldr	r1, [pc, #180]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 800700c:	4313      	orrs	r3, r2
 800700e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007010:	4b2b      	ldr	r3, [pc, #172]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 8007012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007014:	f023 0220 	bic.w	r2, r3, #32
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	4928      	ldr	r1, [pc, #160]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 800701e:	4313      	orrs	r3, r2
 8007020:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007022:	4b27      	ldr	r3, [pc, #156]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 8007024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007026:	4a26      	ldr	r2, [pc, #152]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 8007028:	f023 0310 	bic.w	r3, r3, #16
 800702c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800702e:	4b24      	ldr	r3, [pc, #144]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 8007030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007032:	4b24      	ldr	r3, [pc, #144]	; (80070c4 <RCCEx_PLL2_Config+0x160>)
 8007034:	4013      	ands	r3, r2
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	69d2      	ldr	r2, [r2, #28]
 800703a:	00d2      	lsls	r2, r2, #3
 800703c:	4920      	ldr	r1, [pc, #128]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 800703e:	4313      	orrs	r3, r2
 8007040:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007042:	4b1f      	ldr	r3, [pc, #124]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 8007044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007046:	4a1e      	ldr	r2, [pc, #120]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 8007048:	f043 0310 	orr.w	r3, r3, #16
 800704c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d106      	bne.n	8007062 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007054:	4b1a      	ldr	r3, [pc, #104]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	4a19      	ldr	r2, [pc, #100]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 800705a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800705e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007060:	e00f      	b.n	8007082 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d106      	bne.n	8007076 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007068:	4b15      	ldr	r3, [pc, #84]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	4a14      	ldr	r2, [pc, #80]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 800706e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007072:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007074:	e005      	b.n	8007082 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007076:	4b12      	ldr	r3, [pc, #72]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 8007078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707a:	4a11      	ldr	r2, [pc, #68]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 800707c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007080:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007082:	4b0f      	ldr	r3, [pc, #60]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a0e      	ldr	r2, [pc, #56]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 8007088:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800708c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800708e:	f7fa f8fb 	bl	8001288 <HAL_GetTick>
 8007092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007094:	e008      	b.n	80070a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007096:	f7fa f8f7 	bl	8001288 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d901      	bls.n	80070a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e006      	b.n	80070b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070a8:	4b05      	ldr	r3, [pc, #20]	; (80070c0 <RCCEx_PLL2_Config+0x15c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0f0      	beq.n	8007096 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	58024400 	.word	0x58024400
 80070c4:	ffff0007 	.word	0xffff0007

080070c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070d6:	4b53      	ldr	r3, [pc, #332]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 80070d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d101      	bne.n	80070e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e099      	b.n	800721a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80070e6:	4b4f      	ldr	r3, [pc, #316]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a4e      	ldr	r2, [pc, #312]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 80070ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070f2:	f7fa f8c9 	bl	8001288 <HAL_GetTick>
 80070f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070f8:	e008      	b.n	800710c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070fa:	f7fa f8c5 	bl	8001288 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	2b02      	cmp	r3, #2
 8007106:	d901      	bls.n	800710c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e086      	b.n	800721a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800710c:	4b45      	ldr	r3, [pc, #276]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1f0      	bne.n	80070fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007118:	4b42      	ldr	r3, [pc, #264]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 800711a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	051b      	lsls	r3, r3, #20
 8007126:	493f      	ldr	r1, [pc, #252]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 8007128:	4313      	orrs	r3, r2
 800712a:	628b      	str	r3, [r1, #40]	; 0x28
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	3b01      	subs	r3, #1
 8007132:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	3b01      	subs	r3, #1
 800713c:	025b      	lsls	r3, r3, #9
 800713e:	b29b      	uxth	r3, r3
 8007140:	431a      	orrs	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	3b01      	subs	r3, #1
 8007148:	041b      	lsls	r3, r3, #16
 800714a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800714e:	431a      	orrs	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	3b01      	subs	r3, #1
 8007156:	061b      	lsls	r3, r3, #24
 8007158:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800715c:	4931      	ldr	r1, [pc, #196]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 800715e:	4313      	orrs	r3, r2
 8007160:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007162:	4b30      	ldr	r3, [pc, #192]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	492d      	ldr	r1, [pc, #180]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 8007170:	4313      	orrs	r3, r2
 8007172:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007174:	4b2b      	ldr	r3, [pc, #172]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 8007176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007178:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	4928      	ldr	r1, [pc, #160]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 8007182:	4313      	orrs	r3, r2
 8007184:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007186:	4b27      	ldr	r3, [pc, #156]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	4a26      	ldr	r2, [pc, #152]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 800718c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007190:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007192:	4b24      	ldr	r3, [pc, #144]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 8007194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007196:	4b24      	ldr	r3, [pc, #144]	; (8007228 <RCCEx_PLL3_Config+0x160>)
 8007198:	4013      	ands	r3, r2
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	69d2      	ldr	r2, [r2, #28]
 800719e:	00d2      	lsls	r2, r2, #3
 80071a0:	4920      	ldr	r1, [pc, #128]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80071a6:	4b1f      	ldr	r3, [pc, #124]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 80071a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071aa:	4a1e      	ldr	r2, [pc, #120]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 80071ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d106      	bne.n	80071c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80071b8:	4b1a      	ldr	r3, [pc, #104]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 80071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071bc:	4a19      	ldr	r2, [pc, #100]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 80071be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80071c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80071c4:	e00f      	b.n	80071e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d106      	bne.n	80071da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80071cc:	4b15      	ldr	r3, [pc, #84]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 80071ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d0:	4a14      	ldr	r2, [pc, #80]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 80071d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80071d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80071d8:	e005      	b.n	80071e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80071da:	4b12      	ldr	r3, [pc, #72]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 80071dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071de:	4a11      	ldr	r2, [pc, #68]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 80071e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80071e6:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a0e      	ldr	r2, [pc, #56]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 80071ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071f2:	f7fa f849 	bl	8001288 <HAL_GetTick>
 80071f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071f8:	e008      	b.n	800720c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071fa:	f7fa f845 	bl	8001288 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b02      	cmp	r3, #2
 8007206:	d901      	bls.n	800720c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e006      	b.n	800721a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800720c:	4b05      	ldr	r3, [pc, #20]	; (8007224 <RCCEx_PLL3_Config+0x15c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0f0      	beq.n	80071fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007218:	7bfb      	ldrb	r3, [r7, #15]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	58024400 	.word	0x58024400
 8007228:	ffff0007 	.word	0xffff0007

0800722c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e042      	b.n	80072c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007244:	2b00      	cmp	r3, #0
 8007246:	d106      	bne.n	8007256 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7f9 fdd1 	bl	8000df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2224      	movs	r2, #36	; 0x24
 800725a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0201 	bic.w	r2, r2, #1
 800726c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fdb2 	bl	8007dd8 <UART_SetConfig>
 8007274:	4603      	mov	r3, r0
 8007276:	2b01      	cmp	r3, #1
 8007278:	d101      	bne.n	800727e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e022      	b.n	80072c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f001 fb0e 	bl	80088a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800729a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689a      	ldr	r2, [r3, #8]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0201 	orr.w	r2, r2, #1
 80072ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 fb95 	bl	80089ec <UART_CheckIdleState>
 80072c2:	4603      	mov	r3, r0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08a      	sub	sp, #40	; 0x28
 80072d0:	af02      	add	r7, sp, #8
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	603b      	str	r3, [r7, #0]
 80072d8:	4613      	mov	r3, r2
 80072da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e2:	2b20      	cmp	r3, #32
 80072e4:	d17b      	bne.n	80073de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <HAL_UART_Transmit+0x26>
 80072ec:	88fb      	ldrh	r3, [r7, #6]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e074      	b.n	80073e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2221      	movs	r2, #33	; 0x21
 8007302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007306:	f7f9 ffbf 	bl	8001288 <HAL_GetTick>
 800730a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	88fa      	ldrh	r2, [r7, #6]
 8007310:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	88fa      	ldrh	r2, [r7, #6]
 8007318:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007324:	d108      	bne.n	8007338 <HAL_UART_Transmit+0x6c>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d104      	bne.n	8007338 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800732e:	2300      	movs	r3, #0
 8007330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	61bb      	str	r3, [r7, #24]
 8007336:	e003      	b.n	8007340 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800733c:	2300      	movs	r3, #0
 800733e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007340:	e030      	b.n	80073a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2200      	movs	r2, #0
 800734a:	2180      	movs	r1, #128	; 0x80
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f001 fbf7 	bl	8008b40 <UART_WaitOnFlagUntilTimeout>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d005      	beq.n	8007364 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2220      	movs	r2, #32
 800735c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e03d      	b.n	80073e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10b      	bne.n	8007382 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007378:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	3302      	adds	r3, #2
 800737e:	61bb      	str	r3, [r7, #24]
 8007380:	e007      	b.n	8007392 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	781a      	ldrb	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	3301      	adds	r3, #1
 8007390:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007398:	b29b      	uxth	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1c8      	bne.n	8007342 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	2200      	movs	r2, #0
 80073b8:	2140      	movs	r1, #64	; 0x40
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f001 fbc0 	bl	8008b40 <UART_WaitOnFlagUntilTimeout>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d005      	beq.n	80073d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e006      	b.n	80073e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2220      	movs	r2, #32
 80073d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	e000      	b.n	80073e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80073de:	2302      	movs	r3, #2
  }
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3720      	adds	r7, #32
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08a      	sub	sp, #40	; 0x28
 80073ec:	af02      	add	r7, sp, #8
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	4613      	mov	r3, r2
 80073f6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073fe:	2b20      	cmp	r3, #32
 8007400:	f040 80b5 	bne.w	800756e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <HAL_UART_Receive+0x28>
 800740a:	88fb      	ldrh	r3, [r7, #6]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e0ad      	b.n	8007570 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2222      	movs	r2, #34	; 0x22
 8007420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800742a:	f7f9 ff2d 	bl	8001288 <HAL_GetTick>
 800742e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	88fa      	ldrh	r2, [r7, #6]
 8007434:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	88fa      	ldrh	r2, [r7, #6]
 800743c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007448:	d10e      	bne.n	8007468 <HAL_UART_Receive+0x80>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d105      	bne.n	800745e <HAL_UART_Receive+0x76>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007458:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800745c:	e02d      	b.n	80074ba <HAL_UART_Receive+0xd2>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	22ff      	movs	r2, #255	; 0xff
 8007462:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007466:	e028      	b.n	80074ba <HAL_UART_Receive+0xd2>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10d      	bne.n	800748c <HAL_UART_Receive+0xa4>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d104      	bne.n	8007482 <HAL_UART_Receive+0x9a>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	22ff      	movs	r2, #255	; 0xff
 800747c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007480:	e01b      	b.n	80074ba <HAL_UART_Receive+0xd2>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	227f      	movs	r2, #127	; 0x7f
 8007486:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800748a:	e016      	b.n	80074ba <HAL_UART_Receive+0xd2>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007494:	d10d      	bne.n	80074b2 <HAL_UART_Receive+0xca>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d104      	bne.n	80074a8 <HAL_UART_Receive+0xc0>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	227f      	movs	r2, #127	; 0x7f
 80074a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074a6:	e008      	b.n	80074ba <HAL_UART_Receive+0xd2>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	223f      	movs	r2, #63	; 0x3f
 80074ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074b0:	e003      	b.n	80074ba <HAL_UART_Receive+0xd2>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80074c0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ca:	d108      	bne.n	80074de <HAL_UART_Receive+0xf6>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d104      	bne.n	80074de <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	61bb      	str	r3, [r7, #24]
 80074dc:	e003      	b.n	80074e6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80074e6:	e036      	b.n	8007556 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	2200      	movs	r2, #0
 80074f0:	2120      	movs	r1, #32
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f001 fb24 	bl	8008b40 <UART_WaitOnFlagUntilTimeout>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2220      	movs	r2, #32
 8007502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e032      	b.n	8007570 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10c      	bne.n	800752a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007516:	b29a      	uxth	r2, r3
 8007518:	8a7b      	ldrh	r3, [r7, #18]
 800751a:	4013      	ands	r3, r2
 800751c:	b29a      	uxth	r2, r3
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	3302      	adds	r3, #2
 8007526:	61bb      	str	r3, [r7, #24]
 8007528:	e00c      	b.n	8007544 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	b2da      	uxtb	r2, r3
 8007532:	8a7b      	ldrh	r3, [r7, #18]
 8007534:	b2db      	uxtb	r3, r3
 8007536:	4013      	ands	r3, r2
 8007538:	b2da      	uxtb	r2, r3
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	3301      	adds	r3, #1
 8007542:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800754a:	b29b      	uxth	r3, r3
 800754c:	3b01      	subs	r3, #1
 800754e:	b29a      	uxth	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800755c:	b29b      	uxth	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1c2      	bne.n	80074e8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2220      	movs	r2, #32
 8007566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	e000      	b.n	8007570 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800756e:	2302      	movs	r3, #2
  }
}
 8007570:	4618      	mov	r0, r3
 8007572:	3720      	adds	r7, #32
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b08a      	sub	sp, #40	; 0x28
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	4613      	mov	r3, r2
 8007584:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800758c:	2b20      	cmp	r3, #32
 800758e:	d137      	bne.n	8007600 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d002      	beq.n	800759c <HAL_UART_Receive_DMA+0x24>
 8007596:	88fb      	ldrh	r3, [r7, #6]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e030      	b.n	8007602 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a18      	ldr	r2, [pc, #96]	; (800760c <HAL_UART_Receive_DMA+0x94>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d01f      	beq.n	80075f0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d018      	beq.n	80075f0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	613b      	str	r3, [r7, #16]
   return(result);
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075d2:	627b      	str	r3, [r7, #36]	; 0x24
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	461a      	mov	r2, r3
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	623b      	str	r3, [r7, #32]
 80075de:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e0:	69f9      	ldr	r1, [r7, #28]
 80075e2:	6a3a      	ldr	r2, [r7, #32]
 80075e4:	e841 2300 	strex	r3, r2, [r1]
 80075e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1e6      	bne.n	80075be <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80075f0:	88fb      	ldrh	r3, [r7, #6]
 80075f2:	461a      	mov	r2, r3
 80075f4:	68b9      	ldr	r1, [r7, #8]
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f001 fb0a 	bl	8008c10 <UART_Start_Receive_DMA>
 80075fc:	4603      	mov	r3, r0
 80075fe:	e000      	b.n	8007602 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007600:	2302      	movs	r3, #2
  }
}
 8007602:	4618      	mov	r0, r3
 8007604:	3728      	adds	r7, #40	; 0x28
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	58000c00 	.word	0x58000c00

08007610 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b0ba      	sub	sp, #232	; 0xe8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007636:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800763a:	f640 030f 	movw	r3, #2063	; 0x80f
 800763e:	4013      	ands	r3, r2
 8007640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007644:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007648:	2b00      	cmp	r3, #0
 800764a:	d11b      	bne.n	8007684 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800764c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007650:	f003 0320 	and.w	r3, r3, #32
 8007654:	2b00      	cmp	r3, #0
 8007656:	d015      	beq.n	8007684 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800765c:	f003 0320 	and.w	r3, r3, #32
 8007660:	2b00      	cmp	r3, #0
 8007662:	d105      	bne.n	8007670 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d009      	beq.n	8007684 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 8377 	beq.w	8007d68 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	4798      	blx	r3
      }
      return;
 8007682:	e371      	b.n	8007d68 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 8123 	beq.w	80078d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800768e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007692:	4b8d      	ldr	r3, [pc, #564]	; (80078c8 <HAL_UART_IRQHandler+0x2b8>)
 8007694:	4013      	ands	r3, r2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d106      	bne.n	80076a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800769a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800769e:	4b8b      	ldr	r3, [pc, #556]	; (80078cc <HAL_UART_IRQHandler+0x2bc>)
 80076a0:	4013      	ands	r3, r2
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f000 8116 	beq.w	80078d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d011      	beq.n	80076d8 <HAL_UART_IRQHandler+0xc8>
 80076b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00b      	beq.n	80076d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2201      	movs	r2, #1
 80076c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ce:	f043 0201 	orr.w	r2, r3, #1
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076dc:	f003 0302 	and.w	r3, r3, #2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d011      	beq.n	8007708 <HAL_UART_IRQHandler+0xf8>
 80076e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00b      	beq.n	8007708 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2202      	movs	r2, #2
 80076f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076fe:	f043 0204 	orr.w	r2, r3, #4
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800770c:	f003 0304 	and.w	r3, r3, #4
 8007710:	2b00      	cmp	r3, #0
 8007712:	d011      	beq.n	8007738 <HAL_UART_IRQHandler+0x128>
 8007714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00b      	beq.n	8007738 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2204      	movs	r2, #4
 8007726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772e:	f043 0202 	orr.w	r2, r3, #2
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800773c:	f003 0308 	and.w	r3, r3, #8
 8007740:	2b00      	cmp	r3, #0
 8007742:	d017      	beq.n	8007774 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007748:	f003 0320 	and.w	r3, r3, #32
 800774c:	2b00      	cmp	r3, #0
 800774e:	d105      	bne.n	800775c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007750:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007754:	4b5c      	ldr	r3, [pc, #368]	; (80078c8 <HAL_UART_IRQHandler+0x2b8>)
 8007756:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00b      	beq.n	8007774 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2208      	movs	r2, #8
 8007762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800776a:	f043 0208 	orr.w	r2, r3, #8
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800777c:	2b00      	cmp	r3, #0
 800777e:	d012      	beq.n	80077a6 <HAL_UART_IRQHandler+0x196>
 8007780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007784:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00c      	beq.n	80077a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007794:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800779c:	f043 0220 	orr.w	r2, r3, #32
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 82dd 	beq.w	8007d6c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b6:	f003 0320 	and.w	r3, r3, #32
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d013      	beq.n	80077e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d105      	bne.n	80077d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d007      	beq.n	80077e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fa:	2b40      	cmp	r3, #64	; 0x40
 80077fc:	d005      	beq.n	800780a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80077fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007802:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007806:	2b00      	cmp	r3, #0
 8007808:	d054      	beq.n	80078b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f001 fae8 	bl	8008de0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781a:	2b40      	cmp	r3, #64	; 0x40
 800781c:	d146      	bne.n	80078ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3308      	adds	r3, #8
 8007824:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007828:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800782c:	e853 3f00 	ldrex	r3, [r3]
 8007830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007834:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800783c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3308      	adds	r3, #8
 8007846:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800784a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800784e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007856:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800785a:	e841 2300 	strex	r3, r2, [r1]
 800785e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1d9      	bne.n	800781e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007870:	2b00      	cmp	r3, #0
 8007872:	d017      	beq.n	80078a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800787a:	4a15      	ldr	r2, [pc, #84]	; (80078d0 <HAL_UART_IRQHandler+0x2c0>)
 800787c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007884:	4618      	mov	r0, r3
 8007886:	f7fa ff2f 	bl	80026e8 <HAL_DMA_Abort_IT>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d019      	beq.n	80078c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800789e:	4610      	mov	r0, r2
 80078a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a2:	e00f      	b.n	80078c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fa81 	bl	8007dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078aa:	e00b      	b.n	80078c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fa7d 	bl	8007dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b2:	e007      	b.n	80078c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fa79 	bl	8007dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80078c2:	e253      	b.n	8007d6c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c4:	bf00      	nop
    return;
 80078c6:	e251      	b.n	8007d6c <HAL_UART_IRQHandler+0x75c>
 80078c8:	10000001 	.word	0x10000001
 80078cc:	04000120 	.word	0x04000120
 80078d0:	08009093 	.word	0x08009093

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d8:	2b01      	cmp	r3, #1
 80078da:	f040 81e7 	bne.w	8007cac <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078e2:	f003 0310 	and.w	r3, r3, #16
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 81e0 	beq.w	8007cac <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80078ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f0:	f003 0310 	and.w	r3, r3, #16
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f000 81d9 	beq.w	8007cac <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2210      	movs	r2, #16
 8007900:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790c:	2b40      	cmp	r3, #64	; 0x40
 800790e:	f040 8151 	bne.w	8007bb4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a96      	ldr	r2, [pc, #600]	; (8007b74 <HAL_UART_IRQHandler+0x564>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d068      	beq.n	80079f2 <HAL_UART_IRQHandler+0x3e2>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a93      	ldr	r2, [pc, #588]	; (8007b78 <HAL_UART_IRQHandler+0x568>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d061      	beq.n	80079f2 <HAL_UART_IRQHandler+0x3e2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a91      	ldr	r2, [pc, #580]	; (8007b7c <HAL_UART_IRQHandler+0x56c>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d05a      	beq.n	80079f2 <HAL_UART_IRQHandler+0x3e2>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a8e      	ldr	r2, [pc, #568]	; (8007b80 <HAL_UART_IRQHandler+0x570>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d053      	beq.n	80079f2 <HAL_UART_IRQHandler+0x3e2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a8c      	ldr	r2, [pc, #560]	; (8007b84 <HAL_UART_IRQHandler+0x574>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d04c      	beq.n	80079f2 <HAL_UART_IRQHandler+0x3e2>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a89      	ldr	r2, [pc, #548]	; (8007b88 <HAL_UART_IRQHandler+0x578>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d045      	beq.n	80079f2 <HAL_UART_IRQHandler+0x3e2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a87      	ldr	r2, [pc, #540]	; (8007b8c <HAL_UART_IRQHandler+0x57c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d03e      	beq.n	80079f2 <HAL_UART_IRQHandler+0x3e2>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a84      	ldr	r2, [pc, #528]	; (8007b90 <HAL_UART_IRQHandler+0x580>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d037      	beq.n	80079f2 <HAL_UART_IRQHandler+0x3e2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a82      	ldr	r2, [pc, #520]	; (8007b94 <HAL_UART_IRQHandler+0x584>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d030      	beq.n	80079f2 <HAL_UART_IRQHandler+0x3e2>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a7f      	ldr	r2, [pc, #508]	; (8007b98 <HAL_UART_IRQHandler+0x588>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d029      	beq.n	80079f2 <HAL_UART_IRQHandler+0x3e2>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a7d      	ldr	r2, [pc, #500]	; (8007b9c <HAL_UART_IRQHandler+0x58c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d022      	beq.n	80079f2 <HAL_UART_IRQHandler+0x3e2>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a7a      	ldr	r2, [pc, #488]	; (8007ba0 <HAL_UART_IRQHandler+0x590>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d01b      	beq.n	80079f2 <HAL_UART_IRQHandler+0x3e2>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a78      	ldr	r2, [pc, #480]	; (8007ba4 <HAL_UART_IRQHandler+0x594>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d014      	beq.n	80079f2 <HAL_UART_IRQHandler+0x3e2>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a75      	ldr	r2, [pc, #468]	; (8007ba8 <HAL_UART_IRQHandler+0x598>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d00d      	beq.n	80079f2 <HAL_UART_IRQHandler+0x3e2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a73      	ldr	r2, [pc, #460]	; (8007bac <HAL_UART_IRQHandler+0x59c>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d006      	beq.n	80079f2 <HAL_UART_IRQHandler+0x3e2>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a70      	ldr	r2, [pc, #448]	; (8007bb0 <HAL_UART_IRQHandler+0x5a0>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d106      	bne.n	8007a00 <HAL_UART_IRQHandler+0x3f0>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	e005      	b.n	8007a0c <HAL_UART_IRQHandler+0x3fc>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 81ab 	beq.w	8007d70 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a24:	429a      	cmp	r2, r3
 8007a26:	f080 81a3 	bcs.w	8007d70 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a40:	f000 8087 	beq.w	8007b52 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a50:	e853 3f00 	ldrex	r3, [r3]
 8007a54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a72:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a7e:	e841 2300 	strex	r3, r2, [r1]
 8007a82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1da      	bne.n	8007a44 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3308      	adds	r3, #8
 8007a94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a98:	e853 3f00 	ldrex	r3, [r3]
 8007a9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007aa0:	f023 0301 	bic.w	r3, r3, #1
 8007aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3308      	adds	r3, #8
 8007aae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ab2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007aba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e1      	bne.n	8007a8e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3308      	adds	r3, #8
 8007ad0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007aee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007af0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007af4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007af6:	e841 2300 	strex	r3, r2, [r1]
 8007afa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1e3      	bne.n	8007aca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2220      	movs	r2, #32
 8007b06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b18:	e853 3f00 	ldrex	r3, [r3]
 8007b1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b20:	f023 0310 	bic.w	r3, r3, #16
 8007b24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b32:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b34:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b3a:	e841 2300 	strex	r3, r2, [r1]
 8007b3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1e4      	bne.n	8007b10 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fa faad 	bl	80020ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2202      	movs	r2, #2
 8007b56:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f927 	bl	8007dc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b72:	e0fd      	b.n	8007d70 <HAL_UART_IRQHandler+0x760>
 8007b74:	40020010 	.word	0x40020010
 8007b78:	40020028 	.word	0x40020028
 8007b7c:	40020040 	.word	0x40020040
 8007b80:	40020058 	.word	0x40020058
 8007b84:	40020070 	.word	0x40020070
 8007b88:	40020088 	.word	0x40020088
 8007b8c:	400200a0 	.word	0x400200a0
 8007b90:	400200b8 	.word	0x400200b8
 8007b94:	40020410 	.word	0x40020410
 8007b98:	40020428 	.word	0x40020428
 8007b9c:	40020440 	.word	0x40020440
 8007ba0:	40020458 	.word	0x40020458
 8007ba4:	40020470 	.word	0x40020470
 8007ba8:	40020488 	.word	0x40020488
 8007bac:	400204a0 	.word	0x400204a0
 8007bb0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 80cf 	beq.w	8007d74 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007bd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 80ca 	beq.w	8007d74 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c02:	647b      	str	r3, [r7, #68]	; 0x44
 8007c04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c0a:	e841 2300 	strex	r3, r2, [r1]
 8007c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1e4      	bne.n	8007be0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3308      	adds	r3, #8
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	623b      	str	r3, [r7, #32]
   return(result);
 8007c26:	6a3a      	ldr	r2, [r7, #32]
 8007c28:	4b55      	ldr	r3, [pc, #340]	; (8007d80 <HAL_UART_IRQHandler+0x770>)
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3308      	adds	r3, #8
 8007c36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c3a:	633a      	str	r2, [r7, #48]	; 0x30
 8007c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1e3      	bne.n	8007c16 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	e853 3f00 	ldrex	r3, [r3]
 8007c6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f023 0310 	bic.w	r3, r3, #16
 8007c76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c84:	61fb      	str	r3, [r7, #28]
 8007c86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c88:	69b9      	ldr	r1, [r7, #24]
 8007c8a:	69fa      	ldr	r2, [r7, #28]
 8007c8c:	e841 2300 	strex	r3, r2, [r1]
 8007c90:	617b      	str	r3, [r7, #20]
   return(result);
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e4      	bne.n	8007c62 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f88b 	bl	8007dc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007caa:	e063      	b.n	8007d74 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00e      	beq.n	8007cd6 <HAL_UART_IRQHandler+0x6c6>
 8007cb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d008      	beq.n	8007cd6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ccc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f001 fa20 	bl	8009114 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cd4:	e051      	b.n	8007d7a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d014      	beq.n	8007d0c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d105      	bne.n	8007cfa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d008      	beq.n	8007d0c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d03a      	beq.n	8007d78 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	4798      	blx	r3
    }
    return;
 8007d0a:	e035      	b.n	8007d78 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d009      	beq.n	8007d2c <HAL_UART_IRQHandler+0x71c>
 8007d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d003      	beq.n	8007d2c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f001 f9ca 	bl	80090be <UART_EndTransmit_IT>
    return;
 8007d2a:	e026      	b.n	8007d7a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d009      	beq.n	8007d4c <HAL_UART_IRQHandler+0x73c>
 8007d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 f9f9 	bl	800913c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d4a:	e016      	b.n	8007d7a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d010      	beq.n	8007d7a <HAL_UART_IRQHandler+0x76a>
 8007d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	da0c      	bge.n	8007d7a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 f9e1 	bl	8009128 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d66:	e008      	b.n	8007d7a <HAL_UART_IRQHandler+0x76a>
      return;
 8007d68:	bf00      	nop
 8007d6a:	e006      	b.n	8007d7a <HAL_UART_IRQHandler+0x76a>
    return;
 8007d6c:	bf00      	nop
 8007d6e:	e004      	b.n	8007d7a <HAL_UART_IRQHandler+0x76a>
      return;
 8007d70:	bf00      	nop
 8007d72:	e002      	b.n	8007d7a <HAL_UART_IRQHandler+0x76a>
      return;
 8007d74:	bf00      	nop
 8007d76:	e000      	b.n	8007d7a <HAL_UART_IRQHandler+0x76a>
    return;
 8007d78:	bf00      	nop
  }
}
 8007d7a:	37e8      	adds	r7, #232	; 0xe8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	effffffe 	.word	0xeffffffe

08007d84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ddc:	b092      	sub	sp, #72	; 0x48
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	431a      	orrs	r2, r3
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	431a      	orrs	r2, r3
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	4bbe      	ldr	r3, [pc, #760]	; (8008100 <UART_SetConfig+0x328>)
 8007e08:	4013      	ands	r3, r2
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	6812      	ldr	r2, [r2, #0]
 8007e0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e10:	430b      	orrs	r3, r1
 8007e12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	68da      	ldr	r2, [r3, #12]
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4ab3      	ldr	r2, [pc, #716]	; (8008104 <UART_SetConfig+0x32c>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d004      	beq.n	8007e44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e40:	4313      	orrs	r3, r2
 8007e42:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689a      	ldr	r2, [r3, #8]
 8007e4a:	4baf      	ldr	r3, [pc, #700]	; (8008108 <UART_SetConfig+0x330>)
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	6812      	ldr	r2, [r2, #0]
 8007e52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e54:	430b      	orrs	r3, r1
 8007e56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5e:	f023 010f 	bic.w	r1, r3, #15
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4aa6      	ldr	r2, [pc, #664]	; (800810c <UART_SetConfig+0x334>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d177      	bne.n	8007f68 <UART_SetConfig+0x190>
 8007e78:	4ba5      	ldr	r3, [pc, #660]	; (8008110 <UART_SetConfig+0x338>)
 8007e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e80:	2b28      	cmp	r3, #40	; 0x28
 8007e82:	d86d      	bhi.n	8007f60 <UART_SetConfig+0x188>
 8007e84:	a201      	add	r2, pc, #4	; (adr r2, 8007e8c <UART_SetConfig+0xb4>)
 8007e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8a:	bf00      	nop
 8007e8c:	08007f31 	.word	0x08007f31
 8007e90:	08007f61 	.word	0x08007f61
 8007e94:	08007f61 	.word	0x08007f61
 8007e98:	08007f61 	.word	0x08007f61
 8007e9c:	08007f61 	.word	0x08007f61
 8007ea0:	08007f61 	.word	0x08007f61
 8007ea4:	08007f61 	.word	0x08007f61
 8007ea8:	08007f61 	.word	0x08007f61
 8007eac:	08007f39 	.word	0x08007f39
 8007eb0:	08007f61 	.word	0x08007f61
 8007eb4:	08007f61 	.word	0x08007f61
 8007eb8:	08007f61 	.word	0x08007f61
 8007ebc:	08007f61 	.word	0x08007f61
 8007ec0:	08007f61 	.word	0x08007f61
 8007ec4:	08007f61 	.word	0x08007f61
 8007ec8:	08007f61 	.word	0x08007f61
 8007ecc:	08007f41 	.word	0x08007f41
 8007ed0:	08007f61 	.word	0x08007f61
 8007ed4:	08007f61 	.word	0x08007f61
 8007ed8:	08007f61 	.word	0x08007f61
 8007edc:	08007f61 	.word	0x08007f61
 8007ee0:	08007f61 	.word	0x08007f61
 8007ee4:	08007f61 	.word	0x08007f61
 8007ee8:	08007f61 	.word	0x08007f61
 8007eec:	08007f49 	.word	0x08007f49
 8007ef0:	08007f61 	.word	0x08007f61
 8007ef4:	08007f61 	.word	0x08007f61
 8007ef8:	08007f61 	.word	0x08007f61
 8007efc:	08007f61 	.word	0x08007f61
 8007f00:	08007f61 	.word	0x08007f61
 8007f04:	08007f61 	.word	0x08007f61
 8007f08:	08007f61 	.word	0x08007f61
 8007f0c:	08007f51 	.word	0x08007f51
 8007f10:	08007f61 	.word	0x08007f61
 8007f14:	08007f61 	.word	0x08007f61
 8007f18:	08007f61 	.word	0x08007f61
 8007f1c:	08007f61 	.word	0x08007f61
 8007f20:	08007f61 	.word	0x08007f61
 8007f24:	08007f61 	.word	0x08007f61
 8007f28:	08007f61 	.word	0x08007f61
 8007f2c:	08007f59 	.word	0x08007f59
 8007f30:	2301      	movs	r3, #1
 8007f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f36:	e222      	b.n	800837e <UART_SetConfig+0x5a6>
 8007f38:	2304      	movs	r3, #4
 8007f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f3e:	e21e      	b.n	800837e <UART_SetConfig+0x5a6>
 8007f40:	2308      	movs	r3, #8
 8007f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f46:	e21a      	b.n	800837e <UART_SetConfig+0x5a6>
 8007f48:	2310      	movs	r3, #16
 8007f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f4e:	e216      	b.n	800837e <UART_SetConfig+0x5a6>
 8007f50:	2320      	movs	r3, #32
 8007f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f56:	e212      	b.n	800837e <UART_SetConfig+0x5a6>
 8007f58:	2340      	movs	r3, #64	; 0x40
 8007f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f5e:	e20e      	b.n	800837e <UART_SetConfig+0x5a6>
 8007f60:	2380      	movs	r3, #128	; 0x80
 8007f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f66:	e20a      	b.n	800837e <UART_SetConfig+0x5a6>
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a69      	ldr	r2, [pc, #420]	; (8008114 <UART_SetConfig+0x33c>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d130      	bne.n	8007fd4 <UART_SetConfig+0x1fc>
 8007f72:	4b67      	ldr	r3, [pc, #412]	; (8008110 <UART_SetConfig+0x338>)
 8007f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f76:	f003 0307 	and.w	r3, r3, #7
 8007f7a:	2b05      	cmp	r3, #5
 8007f7c:	d826      	bhi.n	8007fcc <UART_SetConfig+0x1f4>
 8007f7e:	a201      	add	r2, pc, #4	; (adr r2, 8007f84 <UART_SetConfig+0x1ac>)
 8007f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f84:	08007f9d 	.word	0x08007f9d
 8007f88:	08007fa5 	.word	0x08007fa5
 8007f8c:	08007fad 	.word	0x08007fad
 8007f90:	08007fb5 	.word	0x08007fb5
 8007f94:	08007fbd 	.word	0x08007fbd
 8007f98:	08007fc5 	.word	0x08007fc5
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fa2:	e1ec      	b.n	800837e <UART_SetConfig+0x5a6>
 8007fa4:	2304      	movs	r3, #4
 8007fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007faa:	e1e8      	b.n	800837e <UART_SetConfig+0x5a6>
 8007fac:	2308      	movs	r3, #8
 8007fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fb2:	e1e4      	b.n	800837e <UART_SetConfig+0x5a6>
 8007fb4:	2310      	movs	r3, #16
 8007fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fba:	e1e0      	b.n	800837e <UART_SetConfig+0x5a6>
 8007fbc:	2320      	movs	r3, #32
 8007fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fc2:	e1dc      	b.n	800837e <UART_SetConfig+0x5a6>
 8007fc4:	2340      	movs	r3, #64	; 0x40
 8007fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fca:	e1d8      	b.n	800837e <UART_SetConfig+0x5a6>
 8007fcc:	2380      	movs	r3, #128	; 0x80
 8007fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fd2:	e1d4      	b.n	800837e <UART_SetConfig+0x5a6>
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a4f      	ldr	r2, [pc, #316]	; (8008118 <UART_SetConfig+0x340>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d130      	bne.n	8008040 <UART_SetConfig+0x268>
 8007fde:	4b4c      	ldr	r3, [pc, #304]	; (8008110 <UART_SetConfig+0x338>)
 8007fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	2b05      	cmp	r3, #5
 8007fe8:	d826      	bhi.n	8008038 <UART_SetConfig+0x260>
 8007fea:	a201      	add	r2, pc, #4	; (adr r2, 8007ff0 <UART_SetConfig+0x218>)
 8007fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff0:	08008009 	.word	0x08008009
 8007ff4:	08008011 	.word	0x08008011
 8007ff8:	08008019 	.word	0x08008019
 8007ffc:	08008021 	.word	0x08008021
 8008000:	08008029 	.word	0x08008029
 8008004:	08008031 	.word	0x08008031
 8008008:	2300      	movs	r3, #0
 800800a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800e:	e1b6      	b.n	800837e <UART_SetConfig+0x5a6>
 8008010:	2304      	movs	r3, #4
 8008012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008016:	e1b2      	b.n	800837e <UART_SetConfig+0x5a6>
 8008018:	2308      	movs	r3, #8
 800801a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801e:	e1ae      	b.n	800837e <UART_SetConfig+0x5a6>
 8008020:	2310      	movs	r3, #16
 8008022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008026:	e1aa      	b.n	800837e <UART_SetConfig+0x5a6>
 8008028:	2320      	movs	r3, #32
 800802a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800802e:	e1a6      	b.n	800837e <UART_SetConfig+0x5a6>
 8008030:	2340      	movs	r3, #64	; 0x40
 8008032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008036:	e1a2      	b.n	800837e <UART_SetConfig+0x5a6>
 8008038:	2380      	movs	r3, #128	; 0x80
 800803a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800803e:	e19e      	b.n	800837e <UART_SetConfig+0x5a6>
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a35      	ldr	r2, [pc, #212]	; (800811c <UART_SetConfig+0x344>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d130      	bne.n	80080ac <UART_SetConfig+0x2d4>
 800804a:	4b31      	ldr	r3, [pc, #196]	; (8008110 <UART_SetConfig+0x338>)
 800804c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	2b05      	cmp	r3, #5
 8008054:	d826      	bhi.n	80080a4 <UART_SetConfig+0x2cc>
 8008056:	a201      	add	r2, pc, #4	; (adr r2, 800805c <UART_SetConfig+0x284>)
 8008058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805c:	08008075 	.word	0x08008075
 8008060:	0800807d 	.word	0x0800807d
 8008064:	08008085 	.word	0x08008085
 8008068:	0800808d 	.word	0x0800808d
 800806c:	08008095 	.word	0x08008095
 8008070:	0800809d 	.word	0x0800809d
 8008074:	2300      	movs	r3, #0
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807a:	e180      	b.n	800837e <UART_SetConfig+0x5a6>
 800807c:	2304      	movs	r3, #4
 800807e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008082:	e17c      	b.n	800837e <UART_SetConfig+0x5a6>
 8008084:	2308      	movs	r3, #8
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808a:	e178      	b.n	800837e <UART_SetConfig+0x5a6>
 800808c:	2310      	movs	r3, #16
 800808e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008092:	e174      	b.n	800837e <UART_SetConfig+0x5a6>
 8008094:	2320      	movs	r3, #32
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800809a:	e170      	b.n	800837e <UART_SetConfig+0x5a6>
 800809c:	2340      	movs	r3, #64	; 0x40
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080a2:	e16c      	b.n	800837e <UART_SetConfig+0x5a6>
 80080a4:	2380      	movs	r3, #128	; 0x80
 80080a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080aa:	e168      	b.n	800837e <UART_SetConfig+0x5a6>
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a1b      	ldr	r2, [pc, #108]	; (8008120 <UART_SetConfig+0x348>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d142      	bne.n	800813c <UART_SetConfig+0x364>
 80080b6:	4b16      	ldr	r3, [pc, #88]	; (8008110 <UART_SetConfig+0x338>)
 80080b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ba:	f003 0307 	and.w	r3, r3, #7
 80080be:	2b05      	cmp	r3, #5
 80080c0:	d838      	bhi.n	8008134 <UART_SetConfig+0x35c>
 80080c2:	a201      	add	r2, pc, #4	; (adr r2, 80080c8 <UART_SetConfig+0x2f0>)
 80080c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c8:	080080e1 	.word	0x080080e1
 80080cc:	080080e9 	.word	0x080080e9
 80080d0:	080080f1 	.word	0x080080f1
 80080d4:	080080f9 	.word	0x080080f9
 80080d8:	08008125 	.word	0x08008125
 80080dc:	0800812d 	.word	0x0800812d
 80080e0:	2300      	movs	r3, #0
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e6:	e14a      	b.n	800837e <UART_SetConfig+0x5a6>
 80080e8:	2304      	movs	r3, #4
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ee:	e146      	b.n	800837e <UART_SetConfig+0x5a6>
 80080f0:	2308      	movs	r3, #8
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f6:	e142      	b.n	800837e <UART_SetConfig+0x5a6>
 80080f8:	2310      	movs	r3, #16
 80080fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080fe:	e13e      	b.n	800837e <UART_SetConfig+0x5a6>
 8008100:	cfff69f3 	.word	0xcfff69f3
 8008104:	58000c00 	.word	0x58000c00
 8008108:	11fff4ff 	.word	0x11fff4ff
 800810c:	40011000 	.word	0x40011000
 8008110:	58024400 	.word	0x58024400
 8008114:	40004400 	.word	0x40004400
 8008118:	40004800 	.word	0x40004800
 800811c:	40004c00 	.word	0x40004c00
 8008120:	40005000 	.word	0x40005000
 8008124:	2320      	movs	r3, #32
 8008126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800812a:	e128      	b.n	800837e <UART_SetConfig+0x5a6>
 800812c:	2340      	movs	r3, #64	; 0x40
 800812e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008132:	e124      	b.n	800837e <UART_SetConfig+0x5a6>
 8008134:	2380      	movs	r3, #128	; 0x80
 8008136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800813a:	e120      	b.n	800837e <UART_SetConfig+0x5a6>
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4acb      	ldr	r2, [pc, #812]	; (8008470 <UART_SetConfig+0x698>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d176      	bne.n	8008234 <UART_SetConfig+0x45c>
 8008146:	4bcb      	ldr	r3, [pc, #812]	; (8008474 <UART_SetConfig+0x69c>)
 8008148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800814a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800814e:	2b28      	cmp	r3, #40	; 0x28
 8008150:	d86c      	bhi.n	800822c <UART_SetConfig+0x454>
 8008152:	a201      	add	r2, pc, #4	; (adr r2, 8008158 <UART_SetConfig+0x380>)
 8008154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008158:	080081fd 	.word	0x080081fd
 800815c:	0800822d 	.word	0x0800822d
 8008160:	0800822d 	.word	0x0800822d
 8008164:	0800822d 	.word	0x0800822d
 8008168:	0800822d 	.word	0x0800822d
 800816c:	0800822d 	.word	0x0800822d
 8008170:	0800822d 	.word	0x0800822d
 8008174:	0800822d 	.word	0x0800822d
 8008178:	08008205 	.word	0x08008205
 800817c:	0800822d 	.word	0x0800822d
 8008180:	0800822d 	.word	0x0800822d
 8008184:	0800822d 	.word	0x0800822d
 8008188:	0800822d 	.word	0x0800822d
 800818c:	0800822d 	.word	0x0800822d
 8008190:	0800822d 	.word	0x0800822d
 8008194:	0800822d 	.word	0x0800822d
 8008198:	0800820d 	.word	0x0800820d
 800819c:	0800822d 	.word	0x0800822d
 80081a0:	0800822d 	.word	0x0800822d
 80081a4:	0800822d 	.word	0x0800822d
 80081a8:	0800822d 	.word	0x0800822d
 80081ac:	0800822d 	.word	0x0800822d
 80081b0:	0800822d 	.word	0x0800822d
 80081b4:	0800822d 	.word	0x0800822d
 80081b8:	08008215 	.word	0x08008215
 80081bc:	0800822d 	.word	0x0800822d
 80081c0:	0800822d 	.word	0x0800822d
 80081c4:	0800822d 	.word	0x0800822d
 80081c8:	0800822d 	.word	0x0800822d
 80081cc:	0800822d 	.word	0x0800822d
 80081d0:	0800822d 	.word	0x0800822d
 80081d4:	0800822d 	.word	0x0800822d
 80081d8:	0800821d 	.word	0x0800821d
 80081dc:	0800822d 	.word	0x0800822d
 80081e0:	0800822d 	.word	0x0800822d
 80081e4:	0800822d 	.word	0x0800822d
 80081e8:	0800822d 	.word	0x0800822d
 80081ec:	0800822d 	.word	0x0800822d
 80081f0:	0800822d 	.word	0x0800822d
 80081f4:	0800822d 	.word	0x0800822d
 80081f8:	08008225 	.word	0x08008225
 80081fc:	2301      	movs	r3, #1
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008202:	e0bc      	b.n	800837e <UART_SetConfig+0x5a6>
 8008204:	2304      	movs	r3, #4
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800820a:	e0b8      	b.n	800837e <UART_SetConfig+0x5a6>
 800820c:	2308      	movs	r3, #8
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008212:	e0b4      	b.n	800837e <UART_SetConfig+0x5a6>
 8008214:	2310      	movs	r3, #16
 8008216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800821a:	e0b0      	b.n	800837e <UART_SetConfig+0x5a6>
 800821c:	2320      	movs	r3, #32
 800821e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008222:	e0ac      	b.n	800837e <UART_SetConfig+0x5a6>
 8008224:	2340      	movs	r3, #64	; 0x40
 8008226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800822a:	e0a8      	b.n	800837e <UART_SetConfig+0x5a6>
 800822c:	2380      	movs	r3, #128	; 0x80
 800822e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008232:	e0a4      	b.n	800837e <UART_SetConfig+0x5a6>
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a8f      	ldr	r2, [pc, #572]	; (8008478 <UART_SetConfig+0x6a0>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d130      	bne.n	80082a0 <UART_SetConfig+0x4c8>
 800823e:	4b8d      	ldr	r3, [pc, #564]	; (8008474 <UART_SetConfig+0x69c>)
 8008240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	2b05      	cmp	r3, #5
 8008248:	d826      	bhi.n	8008298 <UART_SetConfig+0x4c0>
 800824a:	a201      	add	r2, pc, #4	; (adr r2, 8008250 <UART_SetConfig+0x478>)
 800824c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008250:	08008269 	.word	0x08008269
 8008254:	08008271 	.word	0x08008271
 8008258:	08008279 	.word	0x08008279
 800825c:	08008281 	.word	0x08008281
 8008260:	08008289 	.word	0x08008289
 8008264:	08008291 	.word	0x08008291
 8008268:	2300      	movs	r3, #0
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800826e:	e086      	b.n	800837e <UART_SetConfig+0x5a6>
 8008270:	2304      	movs	r3, #4
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008276:	e082      	b.n	800837e <UART_SetConfig+0x5a6>
 8008278:	2308      	movs	r3, #8
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800827e:	e07e      	b.n	800837e <UART_SetConfig+0x5a6>
 8008280:	2310      	movs	r3, #16
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008286:	e07a      	b.n	800837e <UART_SetConfig+0x5a6>
 8008288:	2320      	movs	r3, #32
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800828e:	e076      	b.n	800837e <UART_SetConfig+0x5a6>
 8008290:	2340      	movs	r3, #64	; 0x40
 8008292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008296:	e072      	b.n	800837e <UART_SetConfig+0x5a6>
 8008298:	2380      	movs	r3, #128	; 0x80
 800829a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800829e:	e06e      	b.n	800837e <UART_SetConfig+0x5a6>
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a75      	ldr	r2, [pc, #468]	; (800847c <UART_SetConfig+0x6a4>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d130      	bne.n	800830c <UART_SetConfig+0x534>
 80082aa:	4b72      	ldr	r3, [pc, #456]	; (8008474 <UART_SetConfig+0x69c>)
 80082ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	2b05      	cmp	r3, #5
 80082b4:	d826      	bhi.n	8008304 <UART_SetConfig+0x52c>
 80082b6:	a201      	add	r2, pc, #4	; (adr r2, 80082bc <UART_SetConfig+0x4e4>)
 80082b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082bc:	080082d5 	.word	0x080082d5
 80082c0:	080082dd 	.word	0x080082dd
 80082c4:	080082e5 	.word	0x080082e5
 80082c8:	080082ed 	.word	0x080082ed
 80082cc:	080082f5 	.word	0x080082f5
 80082d0:	080082fd 	.word	0x080082fd
 80082d4:	2300      	movs	r3, #0
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082da:	e050      	b.n	800837e <UART_SetConfig+0x5a6>
 80082dc:	2304      	movs	r3, #4
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e2:	e04c      	b.n	800837e <UART_SetConfig+0x5a6>
 80082e4:	2308      	movs	r3, #8
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ea:	e048      	b.n	800837e <UART_SetConfig+0x5a6>
 80082ec:	2310      	movs	r3, #16
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f2:	e044      	b.n	800837e <UART_SetConfig+0x5a6>
 80082f4:	2320      	movs	r3, #32
 80082f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fa:	e040      	b.n	800837e <UART_SetConfig+0x5a6>
 80082fc:	2340      	movs	r3, #64	; 0x40
 80082fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008302:	e03c      	b.n	800837e <UART_SetConfig+0x5a6>
 8008304:	2380      	movs	r3, #128	; 0x80
 8008306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830a:	e038      	b.n	800837e <UART_SetConfig+0x5a6>
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a5b      	ldr	r2, [pc, #364]	; (8008480 <UART_SetConfig+0x6a8>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d130      	bne.n	8008378 <UART_SetConfig+0x5a0>
 8008316:	4b57      	ldr	r3, [pc, #348]	; (8008474 <UART_SetConfig+0x69c>)
 8008318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831a:	f003 0307 	and.w	r3, r3, #7
 800831e:	2b05      	cmp	r3, #5
 8008320:	d826      	bhi.n	8008370 <UART_SetConfig+0x598>
 8008322:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <UART_SetConfig+0x550>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	08008341 	.word	0x08008341
 800832c:	08008349 	.word	0x08008349
 8008330:	08008351 	.word	0x08008351
 8008334:	08008359 	.word	0x08008359
 8008338:	08008361 	.word	0x08008361
 800833c:	08008369 	.word	0x08008369
 8008340:	2302      	movs	r3, #2
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008346:	e01a      	b.n	800837e <UART_SetConfig+0x5a6>
 8008348:	2304      	movs	r3, #4
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834e:	e016      	b.n	800837e <UART_SetConfig+0x5a6>
 8008350:	2308      	movs	r3, #8
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008356:	e012      	b.n	800837e <UART_SetConfig+0x5a6>
 8008358:	2310      	movs	r3, #16
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835e:	e00e      	b.n	800837e <UART_SetConfig+0x5a6>
 8008360:	2320      	movs	r3, #32
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008366:	e00a      	b.n	800837e <UART_SetConfig+0x5a6>
 8008368:	2340      	movs	r3, #64	; 0x40
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836e:	e006      	b.n	800837e <UART_SetConfig+0x5a6>
 8008370:	2380      	movs	r3, #128	; 0x80
 8008372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008376:	e002      	b.n	800837e <UART_SetConfig+0x5a6>
 8008378:	2380      	movs	r3, #128	; 0x80
 800837a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a3f      	ldr	r2, [pc, #252]	; (8008480 <UART_SetConfig+0x6a8>)
 8008384:	4293      	cmp	r3, r2
 8008386:	f040 80f8 	bne.w	800857a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800838a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800838e:	2b20      	cmp	r3, #32
 8008390:	dc46      	bgt.n	8008420 <UART_SetConfig+0x648>
 8008392:	2b02      	cmp	r3, #2
 8008394:	f2c0 8082 	blt.w	800849c <UART_SetConfig+0x6c4>
 8008398:	3b02      	subs	r3, #2
 800839a:	2b1e      	cmp	r3, #30
 800839c:	d87e      	bhi.n	800849c <UART_SetConfig+0x6c4>
 800839e:	a201      	add	r2, pc, #4	; (adr r2, 80083a4 <UART_SetConfig+0x5cc>)
 80083a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a4:	08008427 	.word	0x08008427
 80083a8:	0800849d 	.word	0x0800849d
 80083ac:	0800842f 	.word	0x0800842f
 80083b0:	0800849d 	.word	0x0800849d
 80083b4:	0800849d 	.word	0x0800849d
 80083b8:	0800849d 	.word	0x0800849d
 80083bc:	0800843f 	.word	0x0800843f
 80083c0:	0800849d 	.word	0x0800849d
 80083c4:	0800849d 	.word	0x0800849d
 80083c8:	0800849d 	.word	0x0800849d
 80083cc:	0800849d 	.word	0x0800849d
 80083d0:	0800849d 	.word	0x0800849d
 80083d4:	0800849d 	.word	0x0800849d
 80083d8:	0800849d 	.word	0x0800849d
 80083dc:	0800844f 	.word	0x0800844f
 80083e0:	0800849d 	.word	0x0800849d
 80083e4:	0800849d 	.word	0x0800849d
 80083e8:	0800849d 	.word	0x0800849d
 80083ec:	0800849d 	.word	0x0800849d
 80083f0:	0800849d 	.word	0x0800849d
 80083f4:	0800849d 	.word	0x0800849d
 80083f8:	0800849d 	.word	0x0800849d
 80083fc:	0800849d 	.word	0x0800849d
 8008400:	0800849d 	.word	0x0800849d
 8008404:	0800849d 	.word	0x0800849d
 8008408:	0800849d 	.word	0x0800849d
 800840c:	0800849d 	.word	0x0800849d
 8008410:	0800849d 	.word	0x0800849d
 8008414:	0800849d 	.word	0x0800849d
 8008418:	0800849d 	.word	0x0800849d
 800841c:	0800848f 	.word	0x0800848f
 8008420:	2b40      	cmp	r3, #64	; 0x40
 8008422:	d037      	beq.n	8008494 <UART_SetConfig+0x6bc>
 8008424:	e03a      	b.n	800849c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008426:	f7fe fadf 	bl	80069e8 <HAL_RCCEx_GetD3PCLK1Freq>
 800842a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800842c:	e03c      	b.n	80084a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800842e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008432:	4618      	mov	r0, r3
 8008434:	f7fe faee 	bl	8006a14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800843c:	e034      	b.n	80084a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800843e:	f107 0318 	add.w	r3, r7, #24
 8008442:	4618      	mov	r0, r3
 8008444:	f7fe fc3a 	bl	8006cbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800844c:	e02c      	b.n	80084a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800844e:	4b09      	ldr	r3, [pc, #36]	; (8008474 <UART_SetConfig+0x69c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0320 	and.w	r3, r3, #32
 8008456:	2b00      	cmp	r3, #0
 8008458:	d016      	beq.n	8008488 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800845a:	4b06      	ldr	r3, [pc, #24]	; (8008474 <UART_SetConfig+0x69c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	08db      	lsrs	r3, r3, #3
 8008460:	f003 0303 	and.w	r3, r3, #3
 8008464:	4a07      	ldr	r2, [pc, #28]	; (8008484 <UART_SetConfig+0x6ac>)
 8008466:	fa22 f303 	lsr.w	r3, r2, r3
 800846a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800846c:	e01c      	b.n	80084a8 <UART_SetConfig+0x6d0>
 800846e:	bf00      	nop
 8008470:	40011400 	.word	0x40011400
 8008474:	58024400 	.word	0x58024400
 8008478:	40007800 	.word	0x40007800
 800847c:	40007c00 	.word	0x40007c00
 8008480:	58000c00 	.word	0x58000c00
 8008484:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008488:	4b9d      	ldr	r3, [pc, #628]	; (8008700 <UART_SetConfig+0x928>)
 800848a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800848c:	e00c      	b.n	80084a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800848e:	4b9d      	ldr	r3, [pc, #628]	; (8008704 <UART_SetConfig+0x92c>)
 8008490:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008492:	e009      	b.n	80084a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008494:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008498:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800849a:	e005      	b.n	80084a8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800849c:	2300      	movs	r3, #0
 800849e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80084a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 81de 	beq.w	800886c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b4:	4a94      	ldr	r2, [pc, #592]	; (8008708 <UART_SetConfig+0x930>)
 80084b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ba:	461a      	mov	r2, r3
 80084bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084be:	fbb3 f3f2 	udiv	r3, r3, r2
 80084c2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	4613      	mov	r3, r2
 80084ca:	005b      	lsls	r3, r3, #1
 80084cc:	4413      	add	r3, r2
 80084ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d305      	bcc.n	80084e0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084dc:	429a      	cmp	r2, r3
 80084de:	d903      	bls.n	80084e8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80084e6:	e1c1      	b.n	800886c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ea:	2200      	movs	r2, #0
 80084ec:	60bb      	str	r3, [r7, #8]
 80084ee:	60fa      	str	r2, [r7, #12]
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f4:	4a84      	ldr	r2, [pc, #528]	; (8008708 <UART_SetConfig+0x930>)
 80084f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	2200      	movs	r2, #0
 80084fe:	603b      	str	r3, [r7, #0]
 8008500:	607a      	str	r2, [r7, #4]
 8008502:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008506:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800850a:	f7f7 ff41 	bl	8000390 <__aeabi_uldivmod>
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	4610      	mov	r0, r2
 8008514:	4619      	mov	r1, r3
 8008516:	f04f 0200 	mov.w	r2, #0
 800851a:	f04f 0300 	mov.w	r3, #0
 800851e:	020b      	lsls	r3, r1, #8
 8008520:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008524:	0202      	lsls	r2, r0, #8
 8008526:	6979      	ldr	r1, [r7, #20]
 8008528:	6849      	ldr	r1, [r1, #4]
 800852a:	0849      	lsrs	r1, r1, #1
 800852c:	2000      	movs	r0, #0
 800852e:	460c      	mov	r4, r1
 8008530:	4605      	mov	r5, r0
 8008532:	eb12 0804 	adds.w	r8, r2, r4
 8008536:	eb43 0905 	adc.w	r9, r3, r5
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	469a      	mov	sl, r3
 8008542:	4693      	mov	fp, r2
 8008544:	4652      	mov	r2, sl
 8008546:	465b      	mov	r3, fp
 8008548:	4640      	mov	r0, r8
 800854a:	4649      	mov	r1, r9
 800854c:	f7f7 ff20 	bl	8000390 <__aeabi_uldivmod>
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	4613      	mov	r3, r2
 8008556:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800855e:	d308      	bcc.n	8008572 <UART_SetConfig+0x79a>
 8008560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008566:	d204      	bcs.n	8008572 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800856e:	60da      	str	r2, [r3, #12]
 8008570:	e17c      	b.n	800886c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008578:	e178      	b.n	800886c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008582:	f040 80c5 	bne.w	8008710 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008586:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800858a:	2b20      	cmp	r3, #32
 800858c:	dc48      	bgt.n	8008620 <UART_SetConfig+0x848>
 800858e:	2b00      	cmp	r3, #0
 8008590:	db7b      	blt.n	800868a <UART_SetConfig+0x8b2>
 8008592:	2b20      	cmp	r3, #32
 8008594:	d879      	bhi.n	800868a <UART_SetConfig+0x8b2>
 8008596:	a201      	add	r2, pc, #4	; (adr r2, 800859c <UART_SetConfig+0x7c4>)
 8008598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859c:	08008627 	.word	0x08008627
 80085a0:	0800862f 	.word	0x0800862f
 80085a4:	0800868b 	.word	0x0800868b
 80085a8:	0800868b 	.word	0x0800868b
 80085ac:	08008637 	.word	0x08008637
 80085b0:	0800868b 	.word	0x0800868b
 80085b4:	0800868b 	.word	0x0800868b
 80085b8:	0800868b 	.word	0x0800868b
 80085bc:	08008647 	.word	0x08008647
 80085c0:	0800868b 	.word	0x0800868b
 80085c4:	0800868b 	.word	0x0800868b
 80085c8:	0800868b 	.word	0x0800868b
 80085cc:	0800868b 	.word	0x0800868b
 80085d0:	0800868b 	.word	0x0800868b
 80085d4:	0800868b 	.word	0x0800868b
 80085d8:	0800868b 	.word	0x0800868b
 80085dc:	08008657 	.word	0x08008657
 80085e0:	0800868b 	.word	0x0800868b
 80085e4:	0800868b 	.word	0x0800868b
 80085e8:	0800868b 	.word	0x0800868b
 80085ec:	0800868b 	.word	0x0800868b
 80085f0:	0800868b 	.word	0x0800868b
 80085f4:	0800868b 	.word	0x0800868b
 80085f8:	0800868b 	.word	0x0800868b
 80085fc:	0800868b 	.word	0x0800868b
 8008600:	0800868b 	.word	0x0800868b
 8008604:	0800868b 	.word	0x0800868b
 8008608:	0800868b 	.word	0x0800868b
 800860c:	0800868b 	.word	0x0800868b
 8008610:	0800868b 	.word	0x0800868b
 8008614:	0800868b 	.word	0x0800868b
 8008618:	0800868b 	.word	0x0800868b
 800861c:	0800867d 	.word	0x0800867d
 8008620:	2b40      	cmp	r3, #64	; 0x40
 8008622:	d02e      	beq.n	8008682 <UART_SetConfig+0x8aa>
 8008624:	e031      	b.n	800868a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008626:	f7fc ffa9 	bl	800557c <HAL_RCC_GetPCLK1Freq>
 800862a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800862c:	e033      	b.n	8008696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800862e:	f7fc ffbb 	bl	80055a8 <HAL_RCC_GetPCLK2Freq>
 8008632:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008634:	e02f      	b.n	8008696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe f9ea 	bl	8006a14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008644:	e027      	b.n	8008696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008646:	f107 0318 	add.w	r3, r7, #24
 800864a:	4618      	mov	r0, r3
 800864c:	f7fe fb36 	bl	8006cbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008654:	e01f      	b.n	8008696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008656:	4b2d      	ldr	r3, [pc, #180]	; (800870c <UART_SetConfig+0x934>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0320 	and.w	r3, r3, #32
 800865e:	2b00      	cmp	r3, #0
 8008660:	d009      	beq.n	8008676 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008662:	4b2a      	ldr	r3, [pc, #168]	; (800870c <UART_SetConfig+0x934>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	08db      	lsrs	r3, r3, #3
 8008668:	f003 0303 	and.w	r3, r3, #3
 800866c:	4a24      	ldr	r2, [pc, #144]	; (8008700 <UART_SetConfig+0x928>)
 800866e:	fa22 f303 	lsr.w	r3, r2, r3
 8008672:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008674:	e00f      	b.n	8008696 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008676:	4b22      	ldr	r3, [pc, #136]	; (8008700 <UART_SetConfig+0x928>)
 8008678:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800867a:	e00c      	b.n	8008696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800867c:	4b21      	ldr	r3, [pc, #132]	; (8008704 <UART_SetConfig+0x92c>)
 800867e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008680:	e009      	b.n	8008696 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008688:	e005      	b.n	8008696 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800868a:	2300      	movs	r3, #0
 800868c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008694:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 80e7 	beq.w	800886c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a2:	4a19      	ldr	r2, [pc, #100]	; (8008708 <UART_SetConfig+0x930>)
 80086a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086a8:	461a      	mov	r2, r3
 80086aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80086b0:	005a      	lsls	r2, r3, #1
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	085b      	lsrs	r3, r3, #1
 80086b8:	441a      	add	r2, r3
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c6:	2b0f      	cmp	r3, #15
 80086c8:	d916      	bls.n	80086f8 <UART_SetConfig+0x920>
 80086ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086d0:	d212      	bcs.n	80086f8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	f023 030f 	bic.w	r3, r3, #15
 80086da:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086de:	085b      	lsrs	r3, r3, #1
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	f003 0307 	and.w	r3, r3, #7
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80086ea:	4313      	orrs	r3, r2
 80086ec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80086f4:	60da      	str	r2, [r3, #12]
 80086f6:	e0b9      	b.n	800886c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80086fe:	e0b5      	b.n	800886c <UART_SetConfig+0xa94>
 8008700:	03d09000 	.word	0x03d09000
 8008704:	003d0900 	.word	0x003d0900
 8008708:	08009d0c 	.word	0x08009d0c
 800870c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008710:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008714:	2b20      	cmp	r3, #32
 8008716:	dc49      	bgt.n	80087ac <UART_SetConfig+0x9d4>
 8008718:	2b00      	cmp	r3, #0
 800871a:	db7c      	blt.n	8008816 <UART_SetConfig+0xa3e>
 800871c:	2b20      	cmp	r3, #32
 800871e:	d87a      	bhi.n	8008816 <UART_SetConfig+0xa3e>
 8008720:	a201      	add	r2, pc, #4	; (adr r2, 8008728 <UART_SetConfig+0x950>)
 8008722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008726:	bf00      	nop
 8008728:	080087b3 	.word	0x080087b3
 800872c:	080087bb 	.word	0x080087bb
 8008730:	08008817 	.word	0x08008817
 8008734:	08008817 	.word	0x08008817
 8008738:	080087c3 	.word	0x080087c3
 800873c:	08008817 	.word	0x08008817
 8008740:	08008817 	.word	0x08008817
 8008744:	08008817 	.word	0x08008817
 8008748:	080087d3 	.word	0x080087d3
 800874c:	08008817 	.word	0x08008817
 8008750:	08008817 	.word	0x08008817
 8008754:	08008817 	.word	0x08008817
 8008758:	08008817 	.word	0x08008817
 800875c:	08008817 	.word	0x08008817
 8008760:	08008817 	.word	0x08008817
 8008764:	08008817 	.word	0x08008817
 8008768:	080087e3 	.word	0x080087e3
 800876c:	08008817 	.word	0x08008817
 8008770:	08008817 	.word	0x08008817
 8008774:	08008817 	.word	0x08008817
 8008778:	08008817 	.word	0x08008817
 800877c:	08008817 	.word	0x08008817
 8008780:	08008817 	.word	0x08008817
 8008784:	08008817 	.word	0x08008817
 8008788:	08008817 	.word	0x08008817
 800878c:	08008817 	.word	0x08008817
 8008790:	08008817 	.word	0x08008817
 8008794:	08008817 	.word	0x08008817
 8008798:	08008817 	.word	0x08008817
 800879c:	08008817 	.word	0x08008817
 80087a0:	08008817 	.word	0x08008817
 80087a4:	08008817 	.word	0x08008817
 80087a8:	08008809 	.word	0x08008809
 80087ac:	2b40      	cmp	r3, #64	; 0x40
 80087ae:	d02e      	beq.n	800880e <UART_SetConfig+0xa36>
 80087b0:	e031      	b.n	8008816 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087b2:	f7fc fee3 	bl	800557c <HAL_RCC_GetPCLK1Freq>
 80087b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087b8:	e033      	b.n	8008822 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087ba:	f7fc fef5 	bl	80055a8 <HAL_RCC_GetPCLK2Freq>
 80087be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087c0:	e02f      	b.n	8008822 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fe f924 	bl	8006a14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087d0:	e027      	b.n	8008822 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087d2:	f107 0318 	add.w	r3, r7, #24
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fe fa70 	bl	8006cbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087e0:	e01f      	b.n	8008822 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087e2:	4b2d      	ldr	r3, [pc, #180]	; (8008898 <UART_SetConfig+0xac0>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d009      	beq.n	8008802 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087ee:	4b2a      	ldr	r3, [pc, #168]	; (8008898 <UART_SetConfig+0xac0>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	08db      	lsrs	r3, r3, #3
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	4a28      	ldr	r2, [pc, #160]	; (800889c <UART_SetConfig+0xac4>)
 80087fa:	fa22 f303 	lsr.w	r3, r2, r3
 80087fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008800:	e00f      	b.n	8008822 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008802:	4b26      	ldr	r3, [pc, #152]	; (800889c <UART_SetConfig+0xac4>)
 8008804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008806:	e00c      	b.n	8008822 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008808:	4b25      	ldr	r3, [pc, #148]	; (80088a0 <UART_SetConfig+0xac8>)
 800880a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800880c:	e009      	b.n	8008822 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800880e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008814:	e005      	b.n	8008822 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008820:	bf00      	nop
    }

    if (pclk != 0U)
 8008822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008824:	2b00      	cmp	r3, #0
 8008826:	d021      	beq.n	800886c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882c:	4a1d      	ldr	r2, [pc, #116]	; (80088a4 <UART_SetConfig+0xacc>)
 800882e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008832:	461a      	mov	r2, r3
 8008834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008836:	fbb3 f2f2 	udiv	r2, r3, r2
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	085b      	lsrs	r3, r3, #1
 8008840:	441a      	add	r2, r3
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	fbb2 f3f3 	udiv	r3, r2, r3
 800884a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800884c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884e:	2b0f      	cmp	r3, #15
 8008850:	d909      	bls.n	8008866 <UART_SetConfig+0xa8e>
 8008852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008858:	d205      	bcs.n	8008866 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800885a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885c:	b29a      	uxth	r2, r3
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	60da      	str	r2, [r3, #12]
 8008864:	e002      	b.n	800886c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	2201      	movs	r2, #1
 8008870:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2201      	movs	r2, #1
 8008878:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	2200      	movs	r2, #0
 8008880:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2200      	movs	r2, #0
 8008886:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008888:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800888c:	4618      	mov	r0, r3
 800888e:	3748      	adds	r7, #72	; 0x48
 8008890:	46bd      	mov	sp, r7
 8008892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008896:	bf00      	nop
 8008898:	58024400 	.word	0x58024400
 800889c:	03d09000 	.word	0x03d09000
 80088a0:	003d0900 	.word	0x003d0900
 80088a4:	08009d0c 	.word	0x08009d0c

080088a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b4:	f003 0301 	and.w	r3, r3, #1
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00a      	beq.n	80088d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00a      	beq.n	80088f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f8:	f003 0304 	and.w	r3, r3, #4
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00a      	beq.n	8008916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891a:	f003 0308 	and.w	r3, r3, #8
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00a      	beq.n	8008938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893c:	f003 0310 	and.w	r3, r3, #16
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00a      	beq.n	800895a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895e:	f003 0320 	and.w	r3, r3, #32
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008984:	2b00      	cmp	r3, #0
 8008986:	d01a      	beq.n	80089be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089a6:	d10a      	bne.n	80089be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	430a      	orrs	r2, r1
 80089bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00a      	beq.n	80089e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	430a      	orrs	r2, r1
 80089de:	605a      	str	r2, [r3, #4]
  }
}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b098      	sub	sp, #96	; 0x60
 80089f0:	af02      	add	r7, sp, #8
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089fc:	f7f8 fc44 	bl	8001288 <HAL_GetTick>
 8008a00:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0308 	and.w	r3, r3, #8
 8008a0c:	2b08      	cmp	r3, #8
 8008a0e:	d12f      	bne.n	8008a70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f88e 	bl	8008b40 <UART_WaitOnFlagUntilTimeout>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d022      	beq.n	8008a70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a3e:	653b      	str	r3, [r7, #80]	; 0x50
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a48:	647b      	str	r3, [r7, #68]	; 0x44
 8008a4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e6      	bne.n	8008a2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2220      	movs	r2, #32
 8008a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	e063      	b.n	8008b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0304 	and.w	r3, r3, #4
 8008a7a:	2b04      	cmp	r3, #4
 8008a7c:	d149      	bne.n	8008b12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a86:	2200      	movs	r2, #0
 8008a88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f857 	bl	8008b40 <UART_WaitOnFlagUntilTimeout>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d03c      	beq.n	8008b12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	e853 3f00 	ldrex	r3, [r3]
 8008aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008aac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ab6:	633b      	str	r3, [r7, #48]	; 0x30
 8008ab8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008abe:	e841 2300 	strex	r3, r2, [r1]
 8008ac2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1e6      	bne.n	8008a98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3308      	adds	r3, #8
 8008ad0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	e853 3f00 	ldrex	r3, [r3]
 8008ad8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f023 0301 	bic.w	r3, r3, #1
 8008ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aea:	61fa      	str	r2, [r7, #28]
 8008aec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aee:	69b9      	ldr	r1, [r7, #24]
 8008af0:	69fa      	ldr	r2, [r7, #28]
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	617b      	str	r3, [r7, #20]
   return(result);
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1e5      	bne.n	8008aca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2220      	movs	r2, #32
 8008b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e012      	b.n	8008b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2220      	movs	r2, #32
 8008b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3758      	adds	r7, #88	; 0x58
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	603b      	str	r3, [r7, #0]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b50:	e049      	b.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b58:	d045      	beq.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b5a:	f7f8 fb95 	bl	8001288 <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	69ba      	ldr	r2, [r7, #24]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d302      	bcc.n	8008b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b70:	2303      	movs	r3, #3
 8008b72:	e048      	b.n	8008c06 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0304 	and.w	r3, r3, #4
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d031      	beq.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	69db      	ldr	r3, [r3, #28]
 8008b88:	f003 0308 	and.w	r3, r3, #8
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	d110      	bne.n	8008bb2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2208      	movs	r2, #8
 8008b96:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 f921 	bl	8008de0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e029      	b.n	8008c06 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bc0:	d111      	bne.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f000 f907 	bl	8008de0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e00f      	b.n	8008c06 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	69da      	ldr	r2, [r3, #28]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	4013      	ands	r3, r2
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	bf0c      	ite	eq
 8008bf6:	2301      	moveq	r3, #1
 8008bf8:	2300      	movne	r3, #0
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	79fb      	ldrb	r3, [r7, #7]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d0a6      	beq.n	8008b52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
	...

08008c10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b096      	sub	sp, #88	; 0x58
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	88fa      	ldrh	r2, [r7, #6]
 8008c28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2222      	movs	r2, #34	; 0x22
 8008c38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d02d      	beq.n	8008ca2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c4c:	4a40      	ldr	r2, [pc, #256]	; (8008d50 <UART_Start_Receive_DMA+0x140>)
 8008c4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c56:	4a3f      	ldr	r2, [pc, #252]	; (8008d54 <UART_Start_Receive_DMA+0x144>)
 8008c58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c60:	4a3d      	ldr	r2, [pc, #244]	; (8008d58 <UART_Start_Receive_DMA+0x148>)
 8008c62:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3324      	adds	r3, #36	; 0x24
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c80:	461a      	mov	r2, r3
 8008c82:	88fb      	ldrh	r3, [r7, #6]
 8008c84:	f7f8 ffa8 	bl	8001bd8 <HAL_DMA_Start_IT>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d009      	beq.n	8008ca2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2210      	movs	r2, #16
 8008c92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2220      	movs	r2, #32
 8008c9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e051      	b.n	8008d46 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d018      	beq.n	8008cdc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cb2:	e853 3f00 	ldrex	r3, [r3]
 8008cb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cbe:	657b      	str	r3, [r7, #84]	; 0x54
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cca:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ccc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cd0:	e841 2300 	strex	r3, r2, [r1]
 8008cd4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1e6      	bne.n	8008caa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	3308      	adds	r3, #8
 8008ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce6:	e853 3f00 	ldrex	r3, [r3]
 8008cea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cee:	f043 0301 	orr.w	r3, r3, #1
 8008cf2:	653b      	str	r3, [r7, #80]	; 0x50
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3308      	adds	r3, #8
 8008cfa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cfc:	637a      	str	r2, [r7, #52]	; 0x34
 8008cfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d04:	e841 2300 	strex	r3, r2, [r1]
 8008d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1e5      	bne.n	8008cdc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	3308      	adds	r3, #8
 8008d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	e853 3f00 	ldrex	r3, [r3]
 8008d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	3308      	adds	r3, #8
 8008d2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d30:	623a      	str	r2, [r7, #32]
 8008d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d34:	69f9      	ldr	r1, [r7, #28]
 8008d36:	6a3a      	ldr	r2, [r7, #32]
 8008d38:	e841 2300 	strex	r3, r2, [r1]
 8008d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1e5      	bne.n	8008d10 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3758      	adds	r7, #88	; 0x58
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	08008ead 	.word	0x08008ead
 8008d54:	08008fd5 	.word	0x08008fd5
 8008d58:	08009013 	.word	0x08009013

08008d5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b08f      	sub	sp, #60	; 0x3c
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	e853 3f00 	ldrex	r3, [r3]
 8008d70:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008d78:	637b      	str	r3, [r7, #52]	; 0x34
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d84:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d8a:	e841 2300 	strex	r3, r2, [r1]
 8008d8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1e6      	bne.n	8008d64 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3308      	adds	r3, #8
 8008d9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	e853 3f00 	ldrex	r3, [r3]
 8008da4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008dac:	633b      	str	r3, [r7, #48]	; 0x30
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3308      	adds	r3, #8
 8008db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008db6:	61ba      	str	r2, [r7, #24]
 8008db8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dba:	6979      	ldr	r1, [r7, #20]
 8008dbc:	69ba      	ldr	r2, [r7, #24]
 8008dbe:	e841 2300 	strex	r3, r2, [r1]
 8008dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1e5      	bne.n	8008d96 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2220      	movs	r2, #32
 8008dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008dd2:	bf00      	nop
 8008dd4:	373c      	adds	r7, #60	; 0x3c
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
	...

08008de0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b095      	sub	sp, #84	; 0x54
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df0:	e853 3f00 	ldrex	r3, [r3]
 8008df4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	461a      	mov	r2, r3
 8008e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e06:	643b      	str	r3, [r7, #64]	; 0x40
 8008e08:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e0e:	e841 2300 	strex	r3, r2, [r1]
 8008e12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1e6      	bne.n	8008de8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3308      	adds	r3, #8
 8008e20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e2a:	69fa      	ldr	r2, [r7, #28]
 8008e2c:	4b1e      	ldr	r3, [pc, #120]	; (8008ea8 <UART_EndRxTransfer+0xc8>)
 8008e2e:	4013      	ands	r3, r2
 8008e30:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	3308      	adds	r3, #8
 8008e38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e42:	e841 2300 	strex	r3, r2, [r1]
 8008e46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1e5      	bne.n	8008e1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d118      	bne.n	8008e88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	e853 3f00 	ldrex	r3, [r3]
 8008e62:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	f023 0310 	bic.w	r3, r3, #16
 8008e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	461a      	mov	r2, r3
 8008e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e74:	61bb      	str	r3, [r7, #24]
 8008e76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e78:	6979      	ldr	r1, [r7, #20]
 8008e7a:	69ba      	ldr	r2, [r7, #24]
 8008e7c:	e841 2300 	strex	r3, r2, [r1]
 8008e80:	613b      	str	r3, [r7, #16]
   return(result);
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e6      	bne.n	8008e56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2220      	movs	r2, #32
 8008e8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008e9c:	bf00      	nop
 8008e9e:	3754      	adds	r7, #84	; 0x54
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	effffffe 	.word	0xeffffffe

08008eac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b09c      	sub	sp, #112	; 0x70
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ec2:	d071      	beq.n	8008fa8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ed4:	e853 3f00 	ldrex	r3, [r3]
 8008ed8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ee0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008eea:	65bb      	str	r3, [r7, #88]	; 0x58
 8008eec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ef0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ef2:	e841 2300 	strex	r3, r2, [r1]
 8008ef6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1e6      	bne.n	8008ecc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	3308      	adds	r3, #8
 8008f04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f08:	e853 3f00 	ldrex	r3, [r3]
 8008f0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f10:	f023 0301 	bic.w	r3, r3, #1
 8008f14:	667b      	str	r3, [r7, #100]	; 0x64
 8008f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	3308      	adds	r3, #8
 8008f1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008f1e:	647a      	str	r2, [r7, #68]	; 0x44
 8008f20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f26:	e841 2300 	strex	r3, r2, [r1]
 8008f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1e5      	bne.n	8008efe <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3308      	adds	r3, #8
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	e853 3f00 	ldrex	r3, [r3]
 8008f40:	623b      	str	r3, [r7, #32]
   return(result);
 8008f42:	6a3b      	ldr	r3, [r7, #32]
 8008f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f48:	663b      	str	r3, [r7, #96]	; 0x60
 8008f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	3308      	adds	r3, #8
 8008f50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f52:	633a      	str	r2, [r7, #48]	; 0x30
 8008f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f5a:	e841 2300 	strex	r3, r2, [r1]
 8008f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1e5      	bne.n	8008f32 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f68:	2220      	movs	r2, #32
 8008f6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d118      	bne.n	8008fa8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	e853 3f00 	ldrex	r3, [r3]
 8008f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f023 0310 	bic.w	r3, r3, #16
 8008f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	461a      	mov	r2, r3
 8008f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f94:	61fb      	str	r3, [r7, #28]
 8008f96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f98:	69b9      	ldr	r1, [r7, #24]
 8008f9a:	69fa      	ldr	r2, [r7, #28]
 8008f9c:	e841 2300 	strex	r3, r2, [r1]
 8008fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e6      	bne.n	8008f76 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008faa:	2200      	movs	r2, #0
 8008fac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d107      	bne.n	8008fc6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008fc0:	f7fe fefe 	bl	8007dc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008fc4:	e002      	b.n	8008fcc <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008fc6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008fc8:	f7f7 fcfa 	bl	80009c0 <HAL_UART_RxCpltCallback>
}
 8008fcc:	bf00      	nop
 8008fce:	3770      	adds	r7, #112	; 0x70
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d109      	bne.n	8009004 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ff6:	085b      	lsrs	r3, r3, #1
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f7fe fedf 	bl	8007dc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009002:	e002      	b.n	800900a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f7fe fec7 	bl	8007d98 <HAL_UART_RxHalfCpltCallback>
}
 800900a:	bf00      	nop
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b086      	sub	sp, #24
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009026:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800902e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800903a:	2b80      	cmp	r3, #128	; 0x80
 800903c:	d109      	bne.n	8009052 <UART_DMAError+0x40>
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	2b21      	cmp	r3, #33	; 0x21
 8009042:	d106      	bne.n	8009052 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2200      	movs	r2, #0
 8009048:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800904c:	6978      	ldr	r0, [r7, #20]
 800904e:	f7ff fe85 	bl	8008d5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905c:	2b40      	cmp	r3, #64	; 0x40
 800905e:	d109      	bne.n	8009074 <UART_DMAError+0x62>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2b22      	cmp	r3, #34	; 0x22
 8009064:	d106      	bne.n	8009074 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	2200      	movs	r2, #0
 800906a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800906e:	6978      	ldr	r0, [r7, #20]
 8009070:	f7ff feb6 	bl	8008de0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800907a:	f043 0210 	orr.w	r2, r3, #16
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009084:	6978      	ldr	r0, [r7, #20]
 8009086:	f7fe fe91 	bl	8007dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800908a:	bf00      	nop
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b084      	sub	sp, #16
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f7fe fe7b 	bl	8007dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090b6:	bf00      	nop
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b088      	sub	sp, #32
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090da:	61fb      	str	r3, [r7, #28]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	61bb      	str	r3, [r7, #24]
 80090e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	6979      	ldr	r1, [r7, #20]
 80090ea:	69ba      	ldr	r2, [r7, #24]
 80090ec:	e841 2300 	strex	r3, r2, [r1]
 80090f0:	613b      	str	r3, [r7, #16]
   return(result);
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e6      	bne.n	80090c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2220      	movs	r2, #32
 80090fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7fe fe3c 	bl	8007d84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800910c:	bf00      	nop
 800910e:	3720      	adds	r7, #32
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800915e:	2b01      	cmp	r3, #1
 8009160:	d101      	bne.n	8009166 <HAL_UARTEx_DisableFifoMode+0x16>
 8009162:	2302      	movs	r3, #2
 8009164:	e027      	b.n	80091b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2224      	movs	r2, #36	; 0x24
 8009172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f022 0201 	bic.w	r2, r2, #1
 800918c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009194:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2220      	movs	r2, #32
 80091a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b084      	sub	sp, #16
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d101      	bne.n	80091da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091d6:	2302      	movs	r3, #2
 80091d8:	e02d      	b.n	8009236 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2224      	movs	r2, #36	; 0x24
 80091e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f022 0201 	bic.w	r2, r2, #1
 8009200:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	430a      	orrs	r2, r1
 8009214:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f850 	bl	80092bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2220      	movs	r2, #32
 8009228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b084      	sub	sp, #16
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800924e:	2b01      	cmp	r3, #1
 8009250:	d101      	bne.n	8009256 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009252:	2302      	movs	r3, #2
 8009254:	e02d      	b.n	80092b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2224      	movs	r2, #36	; 0x24
 8009262:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f022 0201 	bic.w	r2, r2, #1
 800927c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 f812 	bl	80092bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2220      	movs	r2, #32
 80092a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
	...

080092bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d108      	bne.n	80092de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092dc:	e031      	b.n	8009342 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092de:	2310      	movs	r3, #16
 80092e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092e2:	2310      	movs	r3, #16
 80092e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	0e5b      	lsrs	r3, r3, #25
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	f003 0307 	and.w	r3, r3, #7
 80092f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	0f5b      	lsrs	r3, r3, #29
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	f003 0307 	and.w	r3, r3, #7
 8009304:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009306:	7bbb      	ldrb	r3, [r7, #14]
 8009308:	7b3a      	ldrb	r2, [r7, #12]
 800930a:	4911      	ldr	r1, [pc, #68]	; (8009350 <UARTEx_SetNbDataToProcess+0x94>)
 800930c:	5c8a      	ldrb	r2, [r1, r2]
 800930e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009312:	7b3a      	ldrb	r2, [r7, #12]
 8009314:	490f      	ldr	r1, [pc, #60]	; (8009354 <UARTEx_SetNbDataToProcess+0x98>)
 8009316:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009318:	fb93 f3f2 	sdiv	r3, r3, r2
 800931c:	b29a      	uxth	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009324:	7bfb      	ldrb	r3, [r7, #15]
 8009326:	7b7a      	ldrb	r2, [r7, #13]
 8009328:	4909      	ldr	r1, [pc, #36]	; (8009350 <UARTEx_SetNbDataToProcess+0x94>)
 800932a:	5c8a      	ldrb	r2, [r1, r2]
 800932c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009330:	7b7a      	ldrb	r2, [r7, #13]
 8009332:	4908      	ldr	r1, [pc, #32]	; (8009354 <UARTEx_SetNbDataToProcess+0x98>)
 8009334:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009336:	fb93 f3f2 	sdiv	r3, r3, r2
 800933a:	b29a      	uxth	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009342:	bf00      	nop
 8009344:	3714      	adds	r7, #20
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	08009d24 	.word	0x08009d24
 8009354:	08009d2c 	.word	0x08009d2c

08009358 <sniprintf>:
 8009358:	b40c      	push	{r2, r3}
 800935a:	b530      	push	{r4, r5, lr}
 800935c:	4b17      	ldr	r3, [pc, #92]	; (80093bc <sniprintf+0x64>)
 800935e:	1e0c      	subs	r4, r1, #0
 8009360:	681d      	ldr	r5, [r3, #0]
 8009362:	b09d      	sub	sp, #116	; 0x74
 8009364:	da08      	bge.n	8009378 <sniprintf+0x20>
 8009366:	238b      	movs	r3, #139	; 0x8b
 8009368:	602b      	str	r3, [r5, #0]
 800936a:	f04f 30ff 	mov.w	r0, #4294967295
 800936e:	b01d      	add	sp, #116	; 0x74
 8009370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009374:	b002      	add	sp, #8
 8009376:	4770      	bx	lr
 8009378:	f44f 7302 	mov.w	r3, #520	; 0x208
 800937c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009380:	bf14      	ite	ne
 8009382:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009386:	4623      	moveq	r3, r4
 8009388:	9304      	str	r3, [sp, #16]
 800938a:	9307      	str	r3, [sp, #28]
 800938c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009390:	9002      	str	r0, [sp, #8]
 8009392:	9006      	str	r0, [sp, #24]
 8009394:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009398:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800939a:	ab21      	add	r3, sp, #132	; 0x84
 800939c:	a902      	add	r1, sp, #8
 800939e:	4628      	mov	r0, r5
 80093a0:	9301      	str	r3, [sp, #4]
 80093a2:	f000 f993 	bl	80096cc <_svfiprintf_r>
 80093a6:	1c43      	adds	r3, r0, #1
 80093a8:	bfbc      	itt	lt
 80093aa:	238b      	movlt	r3, #139	; 0x8b
 80093ac:	602b      	strlt	r3, [r5, #0]
 80093ae:	2c00      	cmp	r4, #0
 80093b0:	d0dd      	beq.n	800936e <sniprintf+0x16>
 80093b2:	9b02      	ldr	r3, [sp, #8]
 80093b4:	2200      	movs	r2, #0
 80093b6:	701a      	strb	r2, [r3, #0]
 80093b8:	e7d9      	b.n	800936e <sniprintf+0x16>
 80093ba:	bf00      	nop
 80093bc:	2400005c 	.word	0x2400005c

080093c0 <memset>:
 80093c0:	4402      	add	r2, r0
 80093c2:	4603      	mov	r3, r0
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d100      	bne.n	80093ca <memset+0xa>
 80093c8:	4770      	bx	lr
 80093ca:	f803 1b01 	strb.w	r1, [r3], #1
 80093ce:	e7f9      	b.n	80093c4 <memset+0x4>

080093d0 <__errno>:
 80093d0:	4b01      	ldr	r3, [pc, #4]	; (80093d8 <__errno+0x8>)
 80093d2:	6818      	ldr	r0, [r3, #0]
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	2400005c 	.word	0x2400005c

080093dc <__libc_init_array>:
 80093dc:	b570      	push	{r4, r5, r6, lr}
 80093de:	4d0d      	ldr	r5, [pc, #52]	; (8009414 <__libc_init_array+0x38>)
 80093e0:	4c0d      	ldr	r4, [pc, #52]	; (8009418 <__libc_init_array+0x3c>)
 80093e2:	1b64      	subs	r4, r4, r5
 80093e4:	10a4      	asrs	r4, r4, #2
 80093e6:	2600      	movs	r6, #0
 80093e8:	42a6      	cmp	r6, r4
 80093ea:	d109      	bne.n	8009400 <__libc_init_array+0x24>
 80093ec:	4d0b      	ldr	r5, [pc, #44]	; (800941c <__libc_init_array+0x40>)
 80093ee:	4c0c      	ldr	r4, [pc, #48]	; (8009420 <__libc_init_array+0x44>)
 80093f0:	f000 fc6a 	bl	8009cc8 <_init>
 80093f4:	1b64      	subs	r4, r4, r5
 80093f6:	10a4      	asrs	r4, r4, #2
 80093f8:	2600      	movs	r6, #0
 80093fa:	42a6      	cmp	r6, r4
 80093fc:	d105      	bne.n	800940a <__libc_init_array+0x2e>
 80093fe:	bd70      	pop	{r4, r5, r6, pc}
 8009400:	f855 3b04 	ldr.w	r3, [r5], #4
 8009404:	4798      	blx	r3
 8009406:	3601      	adds	r6, #1
 8009408:	e7ee      	b.n	80093e8 <__libc_init_array+0xc>
 800940a:	f855 3b04 	ldr.w	r3, [r5], #4
 800940e:	4798      	blx	r3
 8009410:	3601      	adds	r6, #1
 8009412:	e7f2      	b.n	80093fa <__libc_init_array+0x1e>
 8009414:	08009d70 	.word	0x08009d70
 8009418:	08009d70 	.word	0x08009d70
 800941c:	08009d70 	.word	0x08009d70
 8009420:	08009d74 	.word	0x08009d74

08009424 <__retarget_lock_acquire_recursive>:
 8009424:	4770      	bx	lr

08009426 <__retarget_lock_release_recursive>:
 8009426:	4770      	bx	lr

08009428 <_free_r>:
 8009428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800942a:	2900      	cmp	r1, #0
 800942c:	d044      	beq.n	80094b8 <_free_r+0x90>
 800942e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009432:	9001      	str	r0, [sp, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	f1a1 0404 	sub.w	r4, r1, #4
 800943a:	bfb8      	it	lt
 800943c:	18e4      	addlt	r4, r4, r3
 800943e:	f000 f8df 	bl	8009600 <__malloc_lock>
 8009442:	4a1e      	ldr	r2, [pc, #120]	; (80094bc <_free_r+0x94>)
 8009444:	9801      	ldr	r0, [sp, #4]
 8009446:	6813      	ldr	r3, [r2, #0]
 8009448:	b933      	cbnz	r3, 8009458 <_free_r+0x30>
 800944a:	6063      	str	r3, [r4, #4]
 800944c:	6014      	str	r4, [r2, #0]
 800944e:	b003      	add	sp, #12
 8009450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009454:	f000 b8da 	b.w	800960c <__malloc_unlock>
 8009458:	42a3      	cmp	r3, r4
 800945a:	d908      	bls.n	800946e <_free_r+0x46>
 800945c:	6825      	ldr	r5, [r4, #0]
 800945e:	1961      	adds	r1, r4, r5
 8009460:	428b      	cmp	r3, r1
 8009462:	bf01      	itttt	eq
 8009464:	6819      	ldreq	r1, [r3, #0]
 8009466:	685b      	ldreq	r3, [r3, #4]
 8009468:	1949      	addeq	r1, r1, r5
 800946a:	6021      	streq	r1, [r4, #0]
 800946c:	e7ed      	b.n	800944a <_free_r+0x22>
 800946e:	461a      	mov	r2, r3
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	b10b      	cbz	r3, 8009478 <_free_r+0x50>
 8009474:	42a3      	cmp	r3, r4
 8009476:	d9fa      	bls.n	800946e <_free_r+0x46>
 8009478:	6811      	ldr	r1, [r2, #0]
 800947a:	1855      	adds	r5, r2, r1
 800947c:	42a5      	cmp	r5, r4
 800947e:	d10b      	bne.n	8009498 <_free_r+0x70>
 8009480:	6824      	ldr	r4, [r4, #0]
 8009482:	4421      	add	r1, r4
 8009484:	1854      	adds	r4, r2, r1
 8009486:	42a3      	cmp	r3, r4
 8009488:	6011      	str	r1, [r2, #0]
 800948a:	d1e0      	bne.n	800944e <_free_r+0x26>
 800948c:	681c      	ldr	r4, [r3, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	6053      	str	r3, [r2, #4]
 8009492:	440c      	add	r4, r1
 8009494:	6014      	str	r4, [r2, #0]
 8009496:	e7da      	b.n	800944e <_free_r+0x26>
 8009498:	d902      	bls.n	80094a0 <_free_r+0x78>
 800949a:	230c      	movs	r3, #12
 800949c:	6003      	str	r3, [r0, #0]
 800949e:	e7d6      	b.n	800944e <_free_r+0x26>
 80094a0:	6825      	ldr	r5, [r4, #0]
 80094a2:	1961      	adds	r1, r4, r5
 80094a4:	428b      	cmp	r3, r1
 80094a6:	bf04      	itt	eq
 80094a8:	6819      	ldreq	r1, [r3, #0]
 80094aa:	685b      	ldreq	r3, [r3, #4]
 80094ac:	6063      	str	r3, [r4, #4]
 80094ae:	bf04      	itt	eq
 80094b0:	1949      	addeq	r1, r1, r5
 80094b2:	6021      	streq	r1, [r4, #0]
 80094b4:	6054      	str	r4, [r2, #4]
 80094b6:	e7ca      	b.n	800944e <_free_r+0x26>
 80094b8:	b003      	add	sp, #12
 80094ba:	bd30      	pop	{r4, r5, pc}
 80094bc:	240004e4 	.word	0x240004e4

080094c0 <sbrk_aligned>:
 80094c0:	b570      	push	{r4, r5, r6, lr}
 80094c2:	4e0e      	ldr	r6, [pc, #56]	; (80094fc <sbrk_aligned+0x3c>)
 80094c4:	460c      	mov	r4, r1
 80094c6:	6831      	ldr	r1, [r6, #0]
 80094c8:	4605      	mov	r5, r0
 80094ca:	b911      	cbnz	r1, 80094d2 <sbrk_aligned+0x12>
 80094cc:	f000 fba6 	bl	8009c1c <_sbrk_r>
 80094d0:	6030      	str	r0, [r6, #0]
 80094d2:	4621      	mov	r1, r4
 80094d4:	4628      	mov	r0, r5
 80094d6:	f000 fba1 	bl	8009c1c <_sbrk_r>
 80094da:	1c43      	adds	r3, r0, #1
 80094dc:	d00a      	beq.n	80094f4 <sbrk_aligned+0x34>
 80094de:	1cc4      	adds	r4, r0, #3
 80094e0:	f024 0403 	bic.w	r4, r4, #3
 80094e4:	42a0      	cmp	r0, r4
 80094e6:	d007      	beq.n	80094f8 <sbrk_aligned+0x38>
 80094e8:	1a21      	subs	r1, r4, r0
 80094ea:	4628      	mov	r0, r5
 80094ec:	f000 fb96 	bl	8009c1c <_sbrk_r>
 80094f0:	3001      	adds	r0, #1
 80094f2:	d101      	bne.n	80094f8 <sbrk_aligned+0x38>
 80094f4:	f04f 34ff 	mov.w	r4, #4294967295
 80094f8:	4620      	mov	r0, r4
 80094fa:	bd70      	pop	{r4, r5, r6, pc}
 80094fc:	240004e8 	.word	0x240004e8

08009500 <_malloc_r>:
 8009500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009504:	1ccd      	adds	r5, r1, #3
 8009506:	f025 0503 	bic.w	r5, r5, #3
 800950a:	3508      	adds	r5, #8
 800950c:	2d0c      	cmp	r5, #12
 800950e:	bf38      	it	cc
 8009510:	250c      	movcc	r5, #12
 8009512:	2d00      	cmp	r5, #0
 8009514:	4607      	mov	r7, r0
 8009516:	db01      	blt.n	800951c <_malloc_r+0x1c>
 8009518:	42a9      	cmp	r1, r5
 800951a:	d905      	bls.n	8009528 <_malloc_r+0x28>
 800951c:	230c      	movs	r3, #12
 800951e:	603b      	str	r3, [r7, #0]
 8009520:	2600      	movs	r6, #0
 8009522:	4630      	mov	r0, r6
 8009524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009528:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80095fc <_malloc_r+0xfc>
 800952c:	f000 f868 	bl	8009600 <__malloc_lock>
 8009530:	f8d8 3000 	ldr.w	r3, [r8]
 8009534:	461c      	mov	r4, r3
 8009536:	bb5c      	cbnz	r4, 8009590 <_malloc_r+0x90>
 8009538:	4629      	mov	r1, r5
 800953a:	4638      	mov	r0, r7
 800953c:	f7ff ffc0 	bl	80094c0 <sbrk_aligned>
 8009540:	1c43      	adds	r3, r0, #1
 8009542:	4604      	mov	r4, r0
 8009544:	d155      	bne.n	80095f2 <_malloc_r+0xf2>
 8009546:	f8d8 4000 	ldr.w	r4, [r8]
 800954a:	4626      	mov	r6, r4
 800954c:	2e00      	cmp	r6, #0
 800954e:	d145      	bne.n	80095dc <_malloc_r+0xdc>
 8009550:	2c00      	cmp	r4, #0
 8009552:	d048      	beq.n	80095e6 <_malloc_r+0xe6>
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	4631      	mov	r1, r6
 8009558:	4638      	mov	r0, r7
 800955a:	eb04 0903 	add.w	r9, r4, r3
 800955e:	f000 fb5d 	bl	8009c1c <_sbrk_r>
 8009562:	4581      	cmp	r9, r0
 8009564:	d13f      	bne.n	80095e6 <_malloc_r+0xe6>
 8009566:	6821      	ldr	r1, [r4, #0]
 8009568:	1a6d      	subs	r5, r5, r1
 800956a:	4629      	mov	r1, r5
 800956c:	4638      	mov	r0, r7
 800956e:	f7ff ffa7 	bl	80094c0 <sbrk_aligned>
 8009572:	3001      	adds	r0, #1
 8009574:	d037      	beq.n	80095e6 <_malloc_r+0xe6>
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	442b      	add	r3, r5
 800957a:	6023      	str	r3, [r4, #0]
 800957c:	f8d8 3000 	ldr.w	r3, [r8]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d038      	beq.n	80095f6 <_malloc_r+0xf6>
 8009584:	685a      	ldr	r2, [r3, #4]
 8009586:	42a2      	cmp	r2, r4
 8009588:	d12b      	bne.n	80095e2 <_malloc_r+0xe2>
 800958a:	2200      	movs	r2, #0
 800958c:	605a      	str	r2, [r3, #4]
 800958e:	e00f      	b.n	80095b0 <_malloc_r+0xb0>
 8009590:	6822      	ldr	r2, [r4, #0]
 8009592:	1b52      	subs	r2, r2, r5
 8009594:	d41f      	bmi.n	80095d6 <_malloc_r+0xd6>
 8009596:	2a0b      	cmp	r2, #11
 8009598:	d917      	bls.n	80095ca <_malloc_r+0xca>
 800959a:	1961      	adds	r1, r4, r5
 800959c:	42a3      	cmp	r3, r4
 800959e:	6025      	str	r5, [r4, #0]
 80095a0:	bf18      	it	ne
 80095a2:	6059      	strne	r1, [r3, #4]
 80095a4:	6863      	ldr	r3, [r4, #4]
 80095a6:	bf08      	it	eq
 80095a8:	f8c8 1000 	streq.w	r1, [r8]
 80095ac:	5162      	str	r2, [r4, r5]
 80095ae:	604b      	str	r3, [r1, #4]
 80095b0:	4638      	mov	r0, r7
 80095b2:	f104 060b 	add.w	r6, r4, #11
 80095b6:	f000 f829 	bl	800960c <__malloc_unlock>
 80095ba:	f026 0607 	bic.w	r6, r6, #7
 80095be:	1d23      	adds	r3, r4, #4
 80095c0:	1af2      	subs	r2, r6, r3
 80095c2:	d0ae      	beq.n	8009522 <_malloc_r+0x22>
 80095c4:	1b9b      	subs	r3, r3, r6
 80095c6:	50a3      	str	r3, [r4, r2]
 80095c8:	e7ab      	b.n	8009522 <_malloc_r+0x22>
 80095ca:	42a3      	cmp	r3, r4
 80095cc:	6862      	ldr	r2, [r4, #4]
 80095ce:	d1dd      	bne.n	800958c <_malloc_r+0x8c>
 80095d0:	f8c8 2000 	str.w	r2, [r8]
 80095d4:	e7ec      	b.n	80095b0 <_malloc_r+0xb0>
 80095d6:	4623      	mov	r3, r4
 80095d8:	6864      	ldr	r4, [r4, #4]
 80095da:	e7ac      	b.n	8009536 <_malloc_r+0x36>
 80095dc:	4634      	mov	r4, r6
 80095de:	6876      	ldr	r6, [r6, #4]
 80095e0:	e7b4      	b.n	800954c <_malloc_r+0x4c>
 80095e2:	4613      	mov	r3, r2
 80095e4:	e7cc      	b.n	8009580 <_malloc_r+0x80>
 80095e6:	230c      	movs	r3, #12
 80095e8:	603b      	str	r3, [r7, #0]
 80095ea:	4638      	mov	r0, r7
 80095ec:	f000 f80e 	bl	800960c <__malloc_unlock>
 80095f0:	e797      	b.n	8009522 <_malloc_r+0x22>
 80095f2:	6025      	str	r5, [r4, #0]
 80095f4:	e7dc      	b.n	80095b0 <_malloc_r+0xb0>
 80095f6:	605b      	str	r3, [r3, #4]
 80095f8:	deff      	udf	#255	; 0xff
 80095fa:	bf00      	nop
 80095fc:	240004e4 	.word	0x240004e4

08009600 <__malloc_lock>:
 8009600:	4801      	ldr	r0, [pc, #4]	; (8009608 <__malloc_lock+0x8>)
 8009602:	f7ff bf0f 	b.w	8009424 <__retarget_lock_acquire_recursive>
 8009606:	bf00      	nop
 8009608:	240004e0 	.word	0x240004e0

0800960c <__malloc_unlock>:
 800960c:	4801      	ldr	r0, [pc, #4]	; (8009614 <__malloc_unlock+0x8>)
 800960e:	f7ff bf0a 	b.w	8009426 <__retarget_lock_release_recursive>
 8009612:	bf00      	nop
 8009614:	240004e0 	.word	0x240004e0

08009618 <__ssputs_r>:
 8009618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800961c:	688e      	ldr	r6, [r1, #8]
 800961e:	461f      	mov	r7, r3
 8009620:	42be      	cmp	r6, r7
 8009622:	680b      	ldr	r3, [r1, #0]
 8009624:	4682      	mov	sl, r0
 8009626:	460c      	mov	r4, r1
 8009628:	4690      	mov	r8, r2
 800962a:	d82c      	bhi.n	8009686 <__ssputs_r+0x6e>
 800962c:	898a      	ldrh	r2, [r1, #12]
 800962e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009632:	d026      	beq.n	8009682 <__ssputs_r+0x6a>
 8009634:	6965      	ldr	r5, [r4, #20]
 8009636:	6909      	ldr	r1, [r1, #16]
 8009638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800963c:	eba3 0901 	sub.w	r9, r3, r1
 8009640:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009644:	1c7b      	adds	r3, r7, #1
 8009646:	444b      	add	r3, r9
 8009648:	106d      	asrs	r5, r5, #1
 800964a:	429d      	cmp	r5, r3
 800964c:	bf38      	it	cc
 800964e:	461d      	movcc	r5, r3
 8009650:	0553      	lsls	r3, r2, #21
 8009652:	d527      	bpl.n	80096a4 <__ssputs_r+0x8c>
 8009654:	4629      	mov	r1, r5
 8009656:	f7ff ff53 	bl	8009500 <_malloc_r>
 800965a:	4606      	mov	r6, r0
 800965c:	b360      	cbz	r0, 80096b8 <__ssputs_r+0xa0>
 800965e:	6921      	ldr	r1, [r4, #16]
 8009660:	464a      	mov	r2, r9
 8009662:	f000 faeb 	bl	8009c3c <memcpy>
 8009666:	89a3      	ldrh	r3, [r4, #12]
 8009668:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800966c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009670:	81a3      	strh	r3, [r4, #12]
 8009672:	6126      	str	r6, [r4, #16]
 8009674:	6165      	str	r5, [r4, #20]
 8009676:	444e      	add	r6, r9
 8009678:	eba5 0509 	sub.w	r5, r5, r9
 800967c:	6026      	str	r6, [r4, #0]
 800967e:	60a5      	str	r5, [r4, #8]
 8009680:	463e      	mov	r6, r7
 8009682:	42be      	cmp	r6, r7
 8009684:	d900      	bls.n	8009688 <__ssputs_r+0x70>
 8009686:	463e      	mov	r6, r7
 8009688:	6820      	ldr	r0, [r4, #0]
 800968a:	4632      	mov	r2, r6
 800968c:	4641      	mov	r1, r8
 800968e:	f000 faab 	bl	8009be8 <memmove>
 8009692:	68a3      	ldr	r3, [r4, #8]
 8009694:	1b9b      	subs	r3, r3, r6
 8009696:	60a3      	str	r3, [r4, #8]
 8009698:	6823      	ldr	r3, [r4, #0]
 800969a:	4433      	add	r3, r6
 800969c:	6023      	str	r3, [r4, #0]
 800969e:	2000      	movs	r0, #0
 80096a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096a4:	462a      	mov	r2, r5
 80096a6:	f000 fad7 	bl	8009c58 <_realloc_r>
 80096aa:	4606      	mov	r6, r0
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d1e0      	bne.n	8009672 <__ssputs_r+0x5a>
 80096b0:	6921      	ldr	r1, [r4, #16]
 80096b2:	4650      	mov	r0, sl
 80096b4:	f7ff feb8 	bl	8009428 <_free_r>
 80096b8:	230c      	movs	r3, #12
 80096ba:	f8ca 3000 	str.w	r3, [sl]
 80096be:	89a3      	ldrh	r3, [r4, #12]
 80096c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096c4:	81a3      	strh	r3, [r4, #12]
 80096c6:	f04f 30ff 	mov.w	r0, #4294967295
 80096ca:	e7e9      	b.n	80096a0 <__ssputs_r+0x88>

080096cc <_svfiprintf_r>:
 80096cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d0:	4698      	mov	r8, r3
 80096d2:	898b      	ldrh	r3, [r1, #12]
 80096d4:	061b      	lsls	r3, r3, #24
 80096d6:	b09d      	sub	sp, #116	; 0x74
 80096d8:	4607      	mov	r7, r0
 80096da:	460d      	mov	r5, r1
 80096dc:	4614      	mov	r4, r2
 80096de:	d50e      	bpl.n	80096fe <_svfiprintf_r+0x32>
 80096e0:	690b      	ldr	r3, [r1, #16]
 80096e2:	b963      	cbnz	r3, 80096fe <_svfiprintf_r+0x32>
 80096e4:	2140      	movs	r1, #64	; 0x40
 80096e6:	f7ff ff0b 	bl	8009500 <_malloc_r>
 80096ea:	6028      	str	r0, [r5, #0]
 80096ec:	6128      	str	r0, [r5, #16]
 80096ee:	b920      	cbnz	r0, 80096fa <_svfiprintf_r+0x2e>
 80096f0:	230c      	movs	r3, #12
 80096f2:	603b      	str	r3, [r7, #0]
 80096f4:	f04f 30ff 	mov.w	r0, #4294967295
 80096f8:	e0d0      	b.n	800989c <_svfiprintf_r+0x1d0>
 80096fa:	2340      	movs	r3, #64	; 0x40
 80096fc:	616b      	str	r3, [r5, #20]
 80096fe:	2300      	movs	r3, #0
 8009700:	9309      	str	r3, [sp, #36]	; 0x24
 8009702:	2320      	movs	r3, #32
 8009704:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009708:	f8cd 800c 	str.w	r8, [sp, #12]
 800970c:	2330      	movs	r3, #48	; 0x30
 800970e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80098b4 <_svfiprintf_r+0x1e8>
 8009712:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009716:	f04f 0901 	mov.w	r9, #1
 800971a:	4623      	mov	r3, r4
 800971c:	469a      	mov	sl, r3
 800971e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009722:	b10a      	cbz	r2, 8009728 <_svfiprintf_r+0x5c>
 8009724:	2a25      	cmp	r2, #37	; 0x25
 8009726:	d1f9      	bne.n	800971c <_svfiprintf_r+0x50>
 8009728:	ebba 0b04 	subs.w	fp, sl, r4
 800972c:	d00b      	beq.n	8009746 <_svfiprintf_r+0x7a>
 800972e:	465b      	mov	r3, fp
 8009730:	4622      	mov	r2, r4
 8009732:	4629      	mov	r1, r5
 8009734:	4638      	mov	r0, r7
 8009736:	f7ff ff6f 	bl	8009618 <__ssputs_r>
 800973a:	3001      	adds	r0, #1
 800973c:	f000 80a9 	beq.w	8009892 <_svfiprintf_r+0x1c6>
 8009740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009742:	445a      	add	r2, fp
 8009744:	9209      	str	r2, [sp, #36]	; 0x24
 8009746:	f89a 3000 	ldrb.w	r3, [sl]
 800974a:	2b00      	cmp	r3, #0
 800974c:	f000 80a1 	beq.w	8009892 <_svfiprintf_r+0x1c6>
 8009750:	2300      	movs	r3, #0
 8009752:	f04f 32ff 	mov.w	r2, #4294967295
 8009756:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800975a:	f10a 0a01 	add.w	sl, sl, #1
 800975e:	9304      	str	r3, [sp, #16]
 8009760:	9307      	str	r3, [sp, #28]
 8009762:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009766:	931a      	str	r3, [sp, #104]	; 0x68
 8009768:	4654      	mov	r4, sl
 800976a:	2205      	movs	r2, #5
 800976c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009770:	4850      	ldr	r0, [pc, #320]	; (80098b4 <_svfiprintf_r+0x1e8>)
 8009772:	f7f6 fdbd 	bl	80002f0 <memchr>
 8009776:	9a04      	ldr	r2, [sp, #16]
 8009778:	b9d8      	cbnz	r0, 80097b2 <_svfiprintf_r+0xe6>
 800977a:	06d0      	lsls	r0, r2, #27
 800977c:	bf44      	itt	mi
 800977e:	2320      	movmi	r3, #32
 8009780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009784:	0711      	lsls	r1, r2, #28
 8009786:	bf44      	itt	mi
 8009788:	232b      	movmi	r3, #43	; 0x2b
 800978a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800978e:	f89a 3000 	ldrb.w	r3, [sl]
 8009792:	2b2a      	cmp	r3, #42	; 0x2a
 8009794:	d015      	beq.n	80097c2 <_svfiprintf_r+0xf6>
 8009796:	9a07      	ldr	r2, [sp, #28]
 8009798:	4654      	mov	r4, sl
 800979a:	2000      	movs	r0, #0
 800979c:	f04f 0c0a 	mov.w	ip, #10
 80097a0:	4621      	mov	r1, r4
 80097a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097a6:	3b30      	subs	r3, #48	; 0x30
 80097a8:	2b09      	cmp	r3, #9
 80097aa:	d94d      	bls.n	8009848 <_svfiprintf_r+0x17c>
 80097ac:	b1b0      	cbz	r0, 80097dc <_svfiprintf_r+0x110>
 80097ae:	9207      	str	r2, [sp, #28]
 80097b0:	e014      	b.n	80097dc <_svfiprintf_r+0x110>
 80097b2:	eba0 0308 	sub.w	r3, r0, r8
 80097b6:	fa09 f303 	lsl.w	r3, r9, r3
 80097ba:	4313      	orrs	r3, r2
 80097bc:	9304      	str	r3, [sp, #16]
 80097be:	46a2      	mov	sl, r4
 80097c0:	e7d2      	b.n	8009768 <_svfiprintf_r+0x9c>
 80097c2:	9b03      	ldr	r3, [sp, #12]
 80097c4:	1d19      	adds	r1, r3, #4
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	9103      	str	r1, [sp, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	bfbb      	ittet	lt
 80097ce:	425b      	neglt	r3, r3
 80097d0:	f042 0202 	orrlt.w	r2, r2, #2
 80097d4:	9307      	strge	r3, [sp, #28]
 80097d6:	9307      	strlt	r3, [sp, #28]
 80097d8:	bfb8      	it	lt
 80097da:	9204      	strlt	r2, [sp, #16]
 80097dc:	7823      	ldrb	r3, [r4, #0]
 80097de:	2b2e      	cmp	r3, #46	; 0x2e
 80097e0:	d10c      	bne.n	80097fc <_svfiprintf_r+0x130>
 80097e2:	7863      	ldrb	r3, [r4, #1]
 80097e4:	2b2a      	cmp	r3, #42	; 0x2a
 80097e6:	d134      	bne.n	8009852 <_svfiprintf_r+0x186>
 80097e8:	9b03      	ldr	r3, [sp, #12]
 80097ea:	1d1a      	adds	r2, r3, #4
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	9203      	str	r2, [sp, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	bfb8      	it	lt
 80097f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80097f8:	3402      	adds	r4, #2
 80097fa:	9305      	str	r3, [sp, #20]
 80097fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80098c4 <_svfiprintf_r+0x1f8>
 8009800:	7821      	ldrb	r1, [r4, #0]
 8009802:	2203      	movs	r2, #3
 8009804:	4650      	mov	r0, sl
 8009806:	f7f6 fd73 	bl	80002f0 <memchr>
 800980a:	b138      	cbz	r0, 800981c <_svfiprintf_r+0x150>
 800980c:	9b04      	ldr	r3, [sp, #16]
 800980e:	eba0 000a 	sub.w	r0, r0, sl
 8009812:	2240      	movs	r2, #64	; 0x40
 8009814:	4082      	lsls	r2, r0
 8009816:	4313      	orrs	r3, r2
 8009818:	3401      	adds	r4, #1
 800981a:	9304      	str	r3, [sp, #16]
 800981c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009820:	4825      	ldr	r0, [pc, #148]	; (80098b8 <_svfiprintf_r+0x1ec>)
 8009822:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009826:	2206      	movs	r2, #6
 8009828:	f7f6 fd62 	bl	80002f0 <memchr>
 800982c:	2800      	cmp	r0, #0
 800982e:	d038      	beq.n	80098a2 <_svfiprintf_r+0x1d6>
 8009830:	4b22      	ldr	r3, [pc, #136]	; (80098bc <_svfiprintf_r+0x1f0>)
 8009832:	bb1b      	cbnz	r3, 800987c <_svfiprintf_r+0x1b0>
 8009834:	9b03      	ldr	r3, [sp, #12]
 8009836:	3307      	adds	r3, #7
 8009838:	f023 0307 	bic.w	r3, r3, #7
 800983c:	3308      	adds	r3, #8
 800983e:	9303      	str	r3, [sp, #12]
 8009840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009842:	4433      	add	r3, r6
 8009844:	9309      	str	r3, [sp, #36]	; 0x24
 8009846:	e768      	b.n	800971a <_svfiprintf_r+0x4e>
 8009848:	fb0c 3202 	mla	r2, ip, r2, r3
 800984c:	460c      	mov	r4, r1
 800984e:	2001      	movs	r0, #1
 8009850:	e7a6      	b.n	80097a0 <_svfiprintf_r+0xd4>
 8009852:	2300      	movs	r3, #0
 8009854:	3401      	adds	r4, #1
 8009856:	9305      	str	r3, [sp, #20]
 8009858:	4619      	mov	r1, r3
 800985a:	f04f 0c0a 	mov.w	ip, #10
 800985e:	4620      	mov	r0, r4
 8009860:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009864:	3a30      	subs	r2, #48	; 0x30
 8009866:	2a09      	cmp	r2, #9
 8009868:	d903      	bls.n	8009872 <_svfiprintf_r+0x1a6>
 800986a:	2b00      	cmp	r3, #0
 800986c:	d0c6      	beq.n	80097fc <_svfiprintf_r+0x130>
 800986e:	9105      	str	r1, [sp, #20]
 8009870:	e7c4      	b.n	80097fc <_svfiprintf_r+0x130>
 8009872:	fb0c 2101 	mla	r1, ip, r1, r2
 8009876:	4604      	mov	r4, r0
 8009878:	2301      	movs	r3, #1
 800987a:	e7f0      	b.n	800985e <_svfiprintf_r+0x192>
 800987c:	ab03      	add	r3, sp, #12
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	462a      	mov	r2, r5
 8009882:	4b0f      	ldr	r3, [pc, #60]	; (80098c0 <_svfiprintf_r+0x1f4>)
 8009884:	a904      	add	r1, sp, #16
 8009886:	4638      	mov	r0, r7
 8009888:	f3af 8000 	nop.w
 800988c:	1c42      	adds	r2, r0, #1
 800988e:	4606      	mov	r6, r0
 8009890:	d1d6      	bne.n	8009840 <_svfiprintf_r+0x174>
 8009892:	89ab      	ldrh	r3, [r5, #12]
 8009894:	065b      	lsls	r3, r3, #25
 8009896:	f53f af2d 	bmi.w	80096f4 <_svfiprintf_r+0x28>
 800989a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800989c:	b01d      	add	sp, #116	; 0x74
 800989e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a2:	ab03      	add	r3, sp, #12
 80098a4:	9300      	str	r3, [sp, #0]
 80098a6:	462a      	mov	r2, r5
 80098a8:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <_svfiprintf_r+0x1f4>)
 80098aa:	a904      	add	r1, sp, #16
 80098ac:	4638      	mov	r0, r7
 80098ae:	f000 f879 	bl	80099a4 <_printf_i>
 80098b2:	e7eb      	b.n	800988c <_svfiprintf_r+0x1c0>
 80098b4:	08009d34 	.word	0x08009d34
 80098b8:	08009d3e 	.word	0x08009d3e
 80098bc:	00000000 	.word	0x00000000
 80098c0:	08009619 	.word	0x08009619
 80098c4:	08009d3a 	.word	0x08009d3a

080098c8 <_printf_common>:
 80098c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098cc:	4616      	mov	r6, r2
 80098ce:	4699      	mov	r9, r3
 80098d0:	688a      	ldr	r2, [r1, #8]
 80098d2:	690b      	ldr	r3, [r1, #16]
 80098d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098d8:	4293      	cmp	r3, r2
 80098da:	bfb8      	it	lt
 80098dc:	4613      	movlt	r3, r2
 80098de:	6033      	str	r3, [r6, #0]
 80098e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098e4:	4607      	mov	r7, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	b10a      	cbz	r2, 80098ee <_printf_common+0x26>
 80098ea:	3301      	adds	r3, #1
 80098ec:	6033      	str	r3, [r6, #0]
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	0699      	lsls	r1, r3, #26
 80098f2:	bf42      	ittt	mi
 80098f4:	6833      	ldrmi	r3, [r6, #0]
 80098f6:	3302      	addmi	r3, #2
 80098f8:	6033      	strmi	r3, [r6, #0]
 80098fa:	6825      	ldr	r5, [r4, #0]
 80098fc:	f015 0506 	ands.w	r5, r5, #6
 8009900:	d106      	bne.n	8009910 <_printf_common+0x48>
 8009902:	f104 0a19 	add.w	sl, r4, #25
 8009906:	68e3      	ldr	r3, [r4, #12]
 8009908:	6832      	ldr	r2, [r6, #0]
 800990a:	1a9b      	subs	r3, r3, r2
 800990c:	42ab      	cmp	r3, r5
 800990e:	dc26      	bgt.n	800995e <_printf_common+0x96>
 8009910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009914:	1e13      	subs	r3, r2, #0
 8009916:	6822      	ldr	r2, [r4, #0]
 8009918:	bf18      	it	ne
 800991a:	2301      	movne	r3, #1
 800991c:	0692      	lsls	r2, r2, #26
 800991e:	d42b      	bmi.n	8009978 <_printf_common+0xb0>
 8009920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009924:	4649      	mov	r1, r9
 8009926:	4638      	mov	r0, r7
 8009928:	47c0      	blx	r8
 800992a:	3001      	adds	r0, #1
 800992c:	d01e      	beq.n	800996c <_printf_common+0xa4>
 800992e:	6823      	ldr	r3, [r4, #0]
 8009930:	6922      	ldr	r2, [r4, #16]
 8009932:	f003 0306 	and.w	r3, r3, #6
 8009936:	2b04      	cmp	r3, #4
 8009938:	bf02      	ittt	eq
 800993a:	68e5      	ldreq	r5, [r4, #12]
 800993c:	6833      	ldreq	r3, [r6, #0]
 800993e:	1aed      	subeq	r5, r5, r3
 8009940:	68a3      	ldr	r3, [r4, #8]
 8009942:	bf0c      	ite	eq
 8009944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009948:	2500      	movne	r5, #0
 800994a:	4293      	cmp	r3, r2
 800994c:	bfc4      	itt	gt
 800994e:	1a9b      	subgt	r3, r3, r2
 8009950:	18ed      	addgt	r5, r5, r3
 8009952:	2600      	movs	r6, #0
 8009954:	341a      	adds	r4, #26
 8009956:	42b5      	cmp	r5, r6
 8009958:	d11a      	bne.n	8009990 <_printf_common+0xc8>
 800995a:	2000      	movs	r0, #0
 800995c:	e008      	b.n	8009970 <_printf_common+0xa8>
 800995e:	2301      	movs	r3, #1
 8009960:	4652      	mov	r2, sl
 8009962:	4649      	mov	r1, r9
 8009964:	4638      	mov	r0, r7
 8009966:	47c0      	blx	r8
 8009968:	3001      	adds	r0, #1
 800996a:	d103      	bne.n	8009974 <_printf_common+0xac>
 800996c:	f04f 30ff 	mov.w	r0, #4294967295
 8009970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009974:	3501      	adds	r5, #1
 8009976:	e7c6      	b.n	8009906 <_printf_common+0x3e>
 8009978:	18e1      	adds	r1, r4, r3
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	2030      	movs	r0, #48	; 0x30
 800997e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009982:	4422      	add	r2, r4
 8009984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800998c:	3302      	adds	r3, #2
 800998e:	e7c7      	b.n	8009920 <_printf_common+0x58>
 8009990:	2301      	movs	r3, #1
 8009992:	4622      	mov	r2, r4
 8009994:	4649      	mov	r1, r9
 8009996:	4638      	mov	r0, r7
 8009998:	47c0      	blx	r8
 800999a:	3001      	adds	r0, #1
 800999c:	d0e6      	beq.n	800996c <_printf_common+0xa4>
 800999e:	3601      	adds	r6, #1
 80099a0:	e7d9      	b.n	8009956 <_printf_common+0x8e>
	...

080099a4 <_printf_i>:
 80099a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099a8:	7e0f      	ldrb	r7, [r1, #24]
 80099aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099ac:	2f78      	cmp	r7, #120	; 0x78
 80099ae:	4691      	mov	r9, r2
 80099b0:	4680      	mov	r8, r0
 80099b2:	460c      	mov	r4, r1
 80099b4:	469a      	mov	sl, r3
 80099b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099ba:	d807      	bhi.n	80099cc <_printf_i+0x28>
 80099bc:	2f62      	cmp	r7, #98	; 0x62
 80099be:	d80a      	bhi.n	80099d6 <_printf_i+0x32>
 80099c0:	2f00      	cmp	r7, #0
 80099c2:	f000 80d4 	beq.w	8009b6e <_printf_i+0x1ca>
 80099c6:	2f58      	cmp	r7, #88	; 0x58
 80099c8:	f000 80c0 	beq.w	8009b4c <_printf_i+0x1a8>
 80099cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099d4:	e03a      	b.n	8009a4c <_printf_i+0xa8>
 80099d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099da:	2b15      	cmp	r3, #21
 80099dc:	d8f6      	bhi.n	80099cc <_printf_i+0x28>
 80099de:	a101      	add	r1, pc, #4	; (adr r1, 80099e4 <_printf_i+0x40>)
 80099e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099e4:	08009a3d 	.word	0x08009a3d
 80099e8:	08009a51 	.word	0x08009a51
 80099ec:	080099cd 	.word	0x080099cd
 80099f0:	080099cd 	.word	0x080099cd
 80099f4:	080099cd 	.word	0x080099cd
 80099f8:	080099cd 	.word	0x080099cd
 80099fc:	08009a51 	.word	0x08009a51
 8009a00:	080099cd 	.word	0x080099cd
 8009a04:	080099cd 	.word	0x080099cd
 8009a08:	080099cd 	.word	0x080099cd
 8009a0c:	080099cd 	.word	0x080099cd
 8009a10:	08009b55 	.word	0x08009b55
 8009a14:	08009a7d 	.word	0x08009a7d
 8009a18:	08009b0f 	.word	0x08009b0f
 8009a1c:	080099cd 	.word	0x080099cd
 8009a20:	080099cd 	.word	0x080099cd
 8009a24:	08009b77 	.word	0x08009b77
 8009a28:	080099cd 	.word	0x080099cd
 8009a2c:	08009a7d 	.word	0x08009a7d
 8009a30:	080099cd 	.word	0x080099cd
 8009a34:	080099cd 	.word	0x080099cd
 8009a38:	08009b17 	.word	0x08009b17
 8009a3c:	682b      	ldr	r3, [r5, #0]
 8009a3e:	1d1a      	adds	r2, r3, #4
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	602a      	str	r2, [r5, #0]
 8009a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e09f      	b.n	8009b90 <_printf_i+0x1ec>
 8009a50:	6820      	ldr	r0, [r4, #0]
 8009a52:	682b      	ldr	r3, [r5, #0]
 8009a54:	0607      	lsls	r7, r0, #24
 8009a56:	f103 0104 	add.w	r1, r3, #4
 8009a5a:	6029      	str	r1, [r5, #0]
 8009a5c:	d501      	bpl.n	8009a62 <_printf_i+0xbe>
 8009a5e:	681e      	ldr	r6, [r3, #0]
 8009a60:	e003      	b.n	8009a6a <_printf_i+0xc6>
 8009a62:	0646      	lsls	r6, r0, #25
 8009a64:	d5fb      	bpl.n	8009a5e <_printf_i+0xba>
 8009a66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009a6a:	2e00      	cmp	r6, #0
 8009a6c:	da03      	bge.n	8009a76 <_printf_i+0xd2>
 8009a6e:	232d      	movs	r3, #45	; 0x2d
 8009a70:	4276      	negs	r6, r6
 8009a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a76:	485a      	ldr	r0, [pc, #360]	; (8009be0 <_printf_i+0x23c>)
 8009a78:	230a      	movs	r3, #10
 8009a7a:	e012      	b.n	8009aa2 <_printf_i+0xfe>
 8009a7c:	682b      	ldr	r3, [r5, #0]
 8009a7e:	6820      	ldr	r0, [r4, #0]
 8009a80:	1d19      	adds	r1, r3, #4
 8009a82:	6029      	str	r1, [r5, #0]
 8009a84:	0605      	lsls	r5, r0, #24
 8009a86:	d501      	bpl.n	8009a8c <_printf_i+0xe8>
 8009a88:	681e      	ldr	r6, [r3, #0]
 8009a8a:	e002      	b.n	8009a92 <_printf_i+0xee>
 8009a8c:	0641      	lsls	r1, r0, #25
 8009a8e:	d5fb      	bpl.n	8009a88 <_printf_i+0xe4>
 8009a90:	881e      	ldrh	r6, [r3, #0]
 8009a92:	4853      	ldr	r0, [pc, #332]	; (8009be0 <_printf_i+0x23c>)
 8009a94:	2f6f      	cmp	r7, #111	; 0x6f
 8009a96:	bf0c      	ite	eq
 8009a98:	2308      	moveq	r3, #8
 8009a9a:	230a      	movne	r3, #10
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009aa2:	6865      	ldr	r5, [r4, #4]
 8009aa4:	60a5      	str	r5, [r4, #8]
 8009aa6:	2d00      	cmp	r5, #0
 8009aa8:	bfa2      	ittt	ge
 8009aaa:	6821      	ldrge	r1, [r4, #0]
 8009aac:	f021 0104 	bicge.w	r1, r1, #4
 8009ab0:	6021      	strge	r1, [r4, #0]
 8009ab2:	b90e      	cbnz	r6, 8009ab8 <_printf_i+0x114>
 8009ab4:	2d00      	cmp	r5, #0
 8009ab6:	d04b      	beq.n	8009b50 <_printf_i+0x1ac>
 8009ab8:	4615      	mov	r5, r2
 8009aba:	fbb6 f1f3 	udiv	r1, r6, r3
 8009abe:	fb03 6711 	mls	r7, r3, r1, r6
 8009ac2:	5dc7      	ldrb	r7, [r0, r7]
 8009ac4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ac8:	4637      	mov	r7, r6
 8009aca:	42bb      	cmp	r3, r7
 8009acc:	460e      	mov	r6, r1
 8009ace:	d9f4      	bls.n	8009aba <_printf_i+0x116>
 8009ad0:	2b08      	cmp	r3, #8
 8009ad2:	d10b      	bne.n	8009aec <_printf_i+0x148>
 8009ad4:	6823      	ldr	r3, [r4, #0]
 8009ad6:	07de      	lsls	r6, r3, #31
 8009ad8:	d508      	bpl.n	8009aec <_printf_i+0x148>
 8009ada:	6923      	ldr	r3, [r4, #16]
 8009adc:	6861      	ldr	r1, [r4, #4]
 8009ade:	4299      	cmp	r1, r3
 8009ae0:	bfde      	ittt	le
 8009ae2:	2330      	movle	r3, #48	; 0x30
 8009ae4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ae8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009aec:	1b52      	subs	r2, r2, r5
 8009aee:	6122      	str	r2, [r4, #16]
 8009af0:	f8cd a000 	str.w	sl, [sp]
 8009af4:	464b      	mov	r3, r9
 8009af6:	aa03      	add	r2, sp, #12
 8009af8:	4621      	mov	r1, r4
 8009afa:	4640      	mov	r0, r8
 8009afc:	f7ff fee4 	bl	80098c8 <_printf_common>
 8009b00:	3001      	adds	r0, #1
 8009b02:	d14a      	bne.n	8009b9a <_printf_i+0x1f6>
 8009b04:	f04f 30ff 	mov.w	r0, #4294967295
 8009b08:	b004      	add	sp, #16
 8009b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	f043 0320 	orr.w	r3, r3, #32
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	4833      	ldr	r0, [pc, #204]	; (8009be4 <_printf_i+0x240>)
 8009b18:	2778      	movs	r7, #120	; 0x78
 8009b1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	6829      	ldr	r1, [r5, #0]
 8009b22:	061f      	lsls	r7, r3, #24
 8009b24:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b28:	d402      	bmi.n	8009b30 <_printf_i+0x18c>
 8009b2a:	065f      	lsls	r7, r3, #25
 8009b2c:	bf48      	it	mi
 8009b2e:	b2b6      	uxthmi	r6, r6
 8009b30:	07df      	lsls	r7, r3, #31
 8009b32:	bf48      	it	mi
 8009b34:	f043 0320 	orrmi.w	r3, r3, #32
 8009b38:	6029      	str	r1, [r5, #0]
 8009b3a:	bf48      	it	mi
 8009b3c:	6023      	strmi	r3, [r4, #0]
 8009b3e:	b91e      	cbnz	r6, 8009b48 <_printf_i+0x1a4>
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	f023 0320 	bic.w	r3, r3, #32
 8009b46:	6023      	str	r3, [r4, #0]
 8009b48:	2310      	movs	r3, #16
 8009b4a:	e7a7      	b.n	8009a9c <_printf_i+0xf8>
 8009b4c:	4824      	ldr	r0, [pc, #144]	; (8009be0 <_printf_i+0x23c>)
 8009b4e:	e7e4      	b.n	8009b1a <_printf_i+0x176>
 8009b50:	4615      	mov	r5, r2
 8009b52:	e7bd      	b.n	8009ad0 <_printf_i+0x12c>
 8009b54:	682b      	ldr	r3, [r5, #0]
 8009b56:	6826      	ldr	r6, [r4, #0]
 8009b58:	6961      	ldr	r1, [r4, #20]
 8009b5a:	1d18      	adds	r0, r3, #4
 8009b5c:	6028      	str	r0, [r5, #0]
 8009b5e:	0635      	lsls	r5, r6, #24
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	d501      	bpl.n	8009b68 <_printf_i+0x1c4>
 8009b64:	6019      	str	r1, [r3, #0]
 8009b66:	e002      	b.n	8009b6e <_printf_i+0x1ca>
 8009b68:	0670      	lsls	r0, r6, #25
 8009b6a:	d5fb      	bpl.n	8009b64 <_printf_i+0x1c0>
 8009b6c:	8019      	strh	r1, [r3, #0]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	6123      	str	r3, [r4, #16]
 8009b72:	4615      	mov	r5, r2
 8009b74:	e7bc      	b.n	8009af0 <_printf_i+0x14c>
 8009b76:	682b      	ldr	r3, [r5, #0]
 8009b78:	1d1a      	adds	r2, r3, #4
 8009b7a:	602a      	str	r2, [r5, #0]
 8009b7c:	681d      	ldr	r5, [r3, #0]
 8009b7e:	6862      	ldr	r2, [r4, #4]
 8009b80:	2100      	movs	r1, #0
 8009b82:	4628      	mov	r0, r5
 8009b84:	f7f6 fbb4 	bl	80002f0 <memchr>
 8009b88:	b108      	cbz	r0, 8009b8e <_printf_i+0x1ea>
 8009b8a:	1b40      	subs	r0, r0, r5
 8009b8c:	6060      	str	r0, [r4, #4]
 8009b8e:	6863      	ldr	r3, [r4, #4]
 8009b90:	6123      	str	r3, [r4, #16]
 8009b92:	2300      	movs	r3, #0
 8009b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b98:	e7aa      	b.n	8009af0 <_printf_i+0x14c>
 8009b9a:	6923      	ldr	r3, [r4, #16]
 8009b9c:	462a      	mov	r2, r5
 8009b9e:	4649      	mov	r1, r9
 8009ba0:	4640      	mov	r0, r8
 8009ba2:	47d0      	blx	sl
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	d0ad      	beq.n	8009b04 <_printf_i+0x160>
 8009ba8:	6823      	ldr	r3, [r4, #0]
 8009baa:	079b      	lsls	r3, r3, #30
 8009bac:	d413      	bmi.n	8009bd6 <_printf_i+0x232>
 8009bae:	68e0      	ldr	r0, [r4, #12]
 8009bb0:	9b03      	ldr	r3, [sp, #12]
 8009bb2:	4298      	cmp	r0, r3
 8009bb4:	bfb8      	it	lt
 8009bb6:	4618      	movlt	r0, r3
 8009bb8:	e7a6      	b.n	8009b08 <_printf_i+0x164>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	4632      	mov	r2, r6
 8009bbe:	4649      	mov	r1, r9
 8009bc0:	4640      	mov	r0, r8
 8009bc2:	47d0      	blx	sl
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	d09d      	beq.n	8009b04 <_printf_i+0x160>
 8009bc8:	3501      	adds	r5, #1
 8009bca:	68e3      	ldr	r3, [r4, #12]
 8009bcc:	9903      	ldr	r1, [sp, #12]
 8009bce:	1a5b      	subs	r3, r3, r1
 8009bd0:	42ab      	cmp	r3, r5
 8009bd2:	dcf2      	bgt.n	8009bba <_printf_i+0x216>
 8009bd4:	e7eb      	b.n	8009bae <_printf_i+0x20a>
 8009bd6:	2500      	movs	r5, #0
 8009bd8:	f104 0619 	add.w	r6, r4, #25
 8009bdc:	e7f5      	b.n	8009bca <_printf_i+0x226>
 8009bde:	bf00      	nop
 8009be0:	08009d45 	.word	0x08009d45
 8009be4:	08009d56 	.word	0x08009d56

08009be8 <memmove>:
 8009be8:	4288      	cmp	r0, r1
 8009bea:	b510      	push	{r4, lr}
 8009bec:	eb01 0402 	add.w	r4, r1, r2
 8009bf0:	d902      	bls.n	8009bf8 <memmove+0x10>
 8009bf2:	4284      	cmp	r4, r0
 8009bf4:	4623      	mov	r3, r4
 8009bf6:	d807      	bhi.n	8009c08 <memmove+0x20>
 8009bf8:	1e43      	subs	r3, r0, #1
 8009bfa:	42a1      	cmp	r1, r4
 8009bfc:	d008      	beq.n	8009c10 <memmove+0x28>
 8009bfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c06:	e7f8      	b.n	8009bfa <memmove+0x12>
 8009c08:	4402      	add	r2, r0
 8009c0a:	4601      	mov	r1, r0
 8009c0c:	428a      	cmp	r2, r1
 8009c0e:	d100      	bne.n	8009c12 <memmove+0x2a>
 8009c10:	bd10      	pop	{r4, pc}
 8009c12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c1a:	e7f7      	b.n	8009c0c <memmove+0x24>

08009c1c <_sbrk_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	4d06      	ldr	r5, [pc, #24]	; (8009c38 <_sbrk_r+0x1c>)
 8009c20:	2300      	movs	r3, #0
 8009c22:	4604      	mov	r4, r0
 8009c24:	4608      	mov	r0, r1
 8009c26:	602b      	str	r3, [r5, #0]
 8009c28:	f7f7 f818 	bl	8000c5c <_sbrk>
 8009c2c:	1c43      	adds	r3, r0, #1
 8009c2e:	d102      	bne.n	8009c36 <_sbrk_r+0x1a>
 8009c30:	682b      	ldr	r3, [r5, #0]
 8009c32:	b103      	cbz	r3, 8009c36 <_sbrk_r+0x1a>
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	bd38      	pop	{r3, r4, r5, pc}
 8009c38:	240004dc 	.word	0x240004dc

08009c3c <memcpy>:
 8009c3c:	440a      	add	r2, r1
 8009c3e:	4291      	cmp	r1, r2
 8009c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c44:	d100      	bne.n	8009c48 <memcpy+0xc>
 8009c46:	4770      	bx	lr
 8009c48:	b510      	push	{r4, lr}
 8009c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c52:	4291      	cmp	r1, r2
 8009c54:	d1f9      	bne.n	8009c4a <memcpy+0xe>
 8009c56:	bd10      	pop	{r4, pc}

08009c58 <_realloc_r>:
 8009c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c5c:	4680      	mov	r8, r0
 8009c5e:	4614      	mov	r4, r2
 8009c60:	460e      	mov	r6, r1
 8009c62:	b921      	cbnz	r1, 8009c6e <_realloc_r+0x16>
 8009c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c68:	4611      	mov	r1, r2
 8009c6a:	f7ff bc49 	b.w	8009500 <_malloc_r>
 8009c6e:	b92a      	cbnz	r2, 8009c7c <_realloc_r+0x24>
 8009c70:	f7ff fbda 	bl	8009428 <_free_r>
 8009c74:	4625      	mov	r5, r4
 8009c76:	4628      	mov	r0, r5
 8009c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c7c:	f000 f81b 	bl	8009cb6 <_malloc_usable_size_r>
 8009c80:	4284      	cmp	r4, r0
 8009c82:	4607      	mov	r7, r0
 8009c84:	d802      	bhi.n	8009c8c <_realloc_r+0x34>
 8009c86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c8a:	d812      	bhi.n	8009cb2 <_realloc_r+0x5a>
 8009c8c:	4621      	mov	r1, r4
 8009c8e:	4640      	mov	r0, r8
 8009c90:	f7ff fc36 	bl	8009500 <_malloc_r>
 8009c94:	4605      	mov	r5, r0
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d0ed      	beq.n	8009c76 <_realloc_r+0x1e>
 8009c9a:	42bc      	cmp	r4, r7
 8009c9c:	4622      	mov	r2, r4
 8009c9e:	4631      	mov	r1, r6
 8009ca0:	bf28      	it	cs
 8009ca2:	463a      	movcs	r2, r7
 8009ca4:	f7ff ffca 	bl	8009c3c <memcpy>
 8009ca8:	4631      	mov	r1, r6
 8009caa:	4640      	mov	r0, r8
 8009cac:	f7ff fbbc 	bl	8009428 <_free_r>
 8009cb0:	e7e1      	b.n	8009c76 <_realloc_r+0x1e>
 8009cb2:	4635      	mov	r5, r6
 8009cb4:	e7df      	b.n	8009c76 <_realloc_r+0x1e>

08009cb6 <_malloc_usable_size_r>:
 8009cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cba:	1f18      	subs	r0, r3, #4
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	bfbc      	itt	lt
 8009cc0:	580b      	ldrlt	r3, [r1, r0]
 8009cc2:	18c0      	addlt	r0, r0, r3
 8009cc4:	4770      	bx	lr
	...

08009cc8 <_init>:
 8009cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cca:	bf00      	nop
 8009ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cce:	bc08      	pop	{r3}
 8009cd0:	469e      	mov	lr, r3
 8009cd2:	4770      	bx	lr

08009cd4 <_fini>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	bf00      	nop
 8009cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cda:	bc08      	pop	{r3}
 8009cdc:	469e      	mov	lr, r3
 8009cde:	4770      	bx	lr
