
CabinControllCode_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001200  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08101498  08101498  00011498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081014d0  081014d0  000114d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081014d4  081014d4  000114d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  10000000  081014d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000028  10000018  081014f0  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000040  081014f0  00020040  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000635a  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001518  00000000  00000000  000263e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000005f0  00000000  00000000  00027900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000450  00000000  00000000  00027ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037860  00000000  00000000  00028340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00008745  00000000  00000000  0005fba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016ddff  00000000  00000000  000682e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000157c  00000000  00000000  001d60e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000052  00000000  00000000  001d7660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000018 	.word	0x10000018
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08101480 	.word	0x08101480

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	1000001c 	.word	0x1000001c
 81002d4:	08101480 	.word	0x08101480

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <checkChildLock>:
#include "stdbool.h"

void checkChildLock();

void checkChildLock()
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b082      	sub	sp, #8
 810030c:	af00      	add	r7, sp, #0
  //todo fix this delay
  static unsigned long	int clTimer;
  clTimer =  HAL_GetTick();
 810030e:	f000 fbfb 	bl	8100b08 <HAL_GetTick>
 8100312:	4603      	mov	r3, r0
 8100314:	4a1a      	ldr	r2, [pc, #104]	; (8100380 <checkChildLock+0x78>)
 8100316:	6013      	str	r3, [r2, #0]

  static bool prevState = false;

  shared_mem_data cl_data = child_lock_disabled;
 8100318:	2301      	movs	r3, #1
 810031a:	71fb      	strb	r3, [r7, #7]

  if(HAL_GetTick() - clTimer > 100)
 810031c:	f000 fbf4 	bl	8100b08 <HAL_GetTick>
 8100320:	4602      	mov	r2, r0
 8100322:	4b17      	ldr	r3, [pc, #92]	; (8100380 <checkChildLock+0x78>)
 8100324:	681b      	ldr	r3, [r3, #0]
 8100326:	1ad3      	subs	r3, r2, r3
 8100328:	2b64      	cmp	r3, #100	; 0x64
 810032a:	d925      	bls.n	8100378 <checkChildLock+0x70>
  {
    bool childLockStatus = HAL_GPIO_ReadPin(child_lock_GPIO_Port, child_lock_Pin);
 810032c:	2101      	movs	r1, #1
 810032e:	4815      	ldr	r0, [pc, #84]	; (8100384 <checkChildLock+0x7c>)
 8100330:	f000 feae 	bl	8101090 <HAL_GPIO_ReadPin>
 8100334:	4603      	mov	r3, r0
 8100336:	2b00      	cmp	r3, #0
 8100338:	bf14      	ite	ne
 810033a:	2301      	movne	r3, #1
 810033c:	2300      	moveq	r3, #0
 810033e:	71bb      	strb	r3, [r7, #6]
    if(prevState!=childLockStatus)
 8100340:	4b11      	ldr	r3, [pc, #68]	; (8100388 <checkChildLock+0x80>)
 8100342:	781b      	ldrb	r3, [r3, #0]
 8100344:	79ba      	ldrb	r2, [r7, #6]
 8100346:	429a      	cmp	r2, r3
 8100348:	d00d      	beq.n	8100366 <checkChildLock+0x5e>
    {
      prevState=childLockStatus;
 810034a:	4a0f      	ldr	r2, [pc, #60]	; (8100388 <checkChildLock+0x80>)
 810034c:	79bb      	ldrb	r3, [r7, #6]
 810034e:	7013      	strb	r3, [r2, #0]
      if (!childLockStatus)
 8100350:	79bb      	ldrb	r3, [r7, #6]
 8100352:	f083 0301 	eor.w	r3, r3, #1
 8100356:	b2db      	uxtb	r3, r3
 8100358:	2b00      	cmp	r3, #0
 810035a:	d002      	beq.n	8100362 <checkChildLock+0x5a>
      {
    	  cl_data = child_lock_enabled;
 810035c:	2300      	movs	r3, #0
 810035e:	71fb      	strb	r3, [r7, #7]
 8100360:	e001      	b.n	8100366 <checkChildLock+0x5e>
      }
      else
      {
    	  cl_data = child_lock_disabled;
 8100362:	2301      	movs	r3, #1
 8100364:	71fb      	strb	r3, [r7, #7]
      }
    }
    send_data_ringbuffer(cl_data);
 8100366:	79fb      	ldrb	r3, [r7, #7]
 8100368:	4618      	mov	r0, r3
 810036a:	f000 fa43 	bl	81007f4 <send_data_ringbuffer>
    clTimer=HAL_GetTick();
 810036e:	f000 fbcb 	bl	8100b08 <HAL_GetTick>
 8100372:	4603      	mov	r3, r0
 8100374:	4a02      	ldr	r2, [pc, #8]	; (8100380 <checkChildLock+0x78>)
 8100376:	6013      	str	r3, [r2, #0]
  }
}
 8100378:	bf00      	nop
 810037a:	3708      	adds	r7, #8
 810037c:	46bd      	mov	sp, r7
 810037e:	bd80      	pop	{r7, pc}
 8100380:	10000034 	.word	0x10000034
 8100384:	58020000 	.word	0x58020000
 8100388:	10000038 	.word	0x10000038

0810038c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 810038c:	b580      	push	{r7, lr}
 810038e:	b088      	sub	sp, #32
 8100390:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100392:	f107 030c 	add.w	r3, r7, #12
 8100396:	2200      	movs	r2, #0
 8100398:	601a      	str	r2, [r3, #0]
 810039a:	605a      	str	r2, [r3, #4]
 810039c:	609a      	str	r2, [r3, #8]
 810039e:	60da      	str	r2, [r3, #12]
 81003a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81003a2:	4b20      	ldr	r3, [pc, #128]	; (8100424 <MX_GPIO_Init+0x98>)
 81003a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003a8:	4a1e      	ldr	r2, [pc, #120]	; (8100424 <MX_GPIO_Init+0x98>)
 81003aa:	f043 0301 	orr.w	r3, r3, #1
 81003ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81003b2:	4b1c      	ldr	r3, [pc, #112]	; (8100424 <MX_GPIO_Init+0x98>)
 81003b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003b8:	f003 0301 	and.w	r3, r3, #1
 81003bc:	60bb      	str	r3, [r7, #8]
 81003be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81003c0:	4b18      	ldr	r3, [pc, #96]	; (8100424 <MX_GPIO_Init+0x98>)
 81003c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003c6:	4a17      	ldr	r2, [pc, #92]	; (8100424 <MX_GPIO_Init+0x98>)
 81003c8:	f043 0302 	orr.w	r3, r3, #2
 81003cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81003d0:	4b14      	ldr	r3, [pc, #80]	; (8100424 <MX_GPIO_Init+0x98>)
 81003d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003d6:	f003 0302 	and.w	r3, r3, #2
 81003da:	607b      	str	r3, [r7, #4]
 81003dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 81003de:	2200      	movs	r2, #0
 81003e0:	2101      	movs	r1, #1
 81003e2:	4811      	ldr	r0, [pc, #68]	; (8100428 <MX_GPIO_Init+0x9c>)
 81003e4:	f000 fe6c 	bl	81010c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = child_lock_Pin|emergency_Pin;
 81003e8:	2303      	movs	r3, #3
 81003ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81003ec:	2300      	movs	r3, #0
 81003ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 81003f0:	2301      	movs	r3, #1
 81003f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81003f4:	f107 030c 	add.w	r3, r7, #12
 81003f8:	4619      	mov	r1, r3
 81003fa:	480c      	ldr	r0, [pc, #48]	; (810042c <MX_GPIO_Init+0xa0>)
 81003fc:	f000 fc98 	bl	8100d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led1_Pin;
 8100400:	2301      	movs	r3, #1
 8100402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100404:	2301      	movs	r3, #1
 8100406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100408:	2300      	movs	r3, #0
 810040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810040c:	2300      	movs	r3, #0
 810040e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 8100410:	f107 030c 	add.w	r3, r7, #12
 8100414:	4619      	mov	r1, r3
 8100416:	4804      	ldr	r0, [pc, #16]	; (8100428 <MX_GPIO_Init+0x9c>)
 8100418:	f000 fc8a 	bl	8100d30 <HAL_GPIO_Init>

}
 810041c:	bf00      	nop
 810041e:	3720      	adds	r7, #32
 8100420:	46bd      	mov	sp, r7
 8100422:	bd80      	pop	{r7, pc}
 8100424:	58024400 	.word	0x58024400
 8100428:	58020400 	.word	0x58020400
 810042c:	58020000 	.word	0x58020000

08100430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100430:	b580      	push	{r7, lr}
 8100432:	af00      	add	r7, sp, #0

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100434:	f000 fac0 	bl	81009b8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100438:	f7ff ffa8 	bl	810038c <MX_GPIO_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 810043c:	2101      	movs	r1, #1
 810043e:	4805      	ldr	r0, [pc, #20]	; (8100454 <main+0x24>)
 8100440:	f000 fe57 	bl	81010f2 <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 8100444:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8100448:	f000 fb6a 	bl	8100b20 <HAL_Delay>
	  checkChildLock();
 810044c:	f7ff ff5c 	bl	8100308 <checkChildLock>
  {
 8100450:	e7f4      	b.n	810043c <main+0xc>
 8100452:	bf00      	nop
 8100454:	58020400 	.word	0x58020400

08100458 <ringbuff_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
ringbuff_write(RINGBUFF_VOLATILE ringbuff_t* buff, const void* data, size_t btw) {
 8100458:	b580      	push	{r7, lr}
 810045a:	b088      	sub	sp, #32
 810045c:	af00      	add	r7, sp, #0
 810045e:	60f8      	str	r0, [r7, #12]
 8100460:	60b9      	str	r1, [r7, #8]
 8100462:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8100464:	68bb      	ldr	r3, [r7, #8]
 8100466:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8100468:	68fb      	ldr	r3, [r7, #12]
 810046a:	2b00      	cmp	r3, #0
 810046c:	d017      	beq.n	810049e <ringbuff_write+0x46>
 810046e:	68fb      	ldr	r3, [r7, #12]
 8100470:	681b      	ldr	r3, [r3, #0]
 8100472:	4a3b      	ldr	r2, [pc, #236]	; (8100560 <ringbuff_write+0x108>)
 8100474:	4293      	cmp	r3, r2
 8100476:	d112      	bne.n	810049e <ringbuff_write+0x46>
 8100478:	68fb      	ldr	r3, [r7, #12]
 810047a:	699b      	ldr	r3, [r3, #24]
 810047c:	4a39      	ldr	r2, [pc, #228]	; (8100564 <ringbuff_write+0x10c>)
 810047e:	4293      	cmp	r3, r2
 8100480:	d10d      	bne.n	810049e <ringbuff_write+0x46>
 8100482:	68fb      	ldr	r3, [r7, #12]
 8100484:	685b      	ldr	r3, [r3, #4]
 8100486:	2b00      	cmp	r3, #0
 8100488:	d009      	beq.n	810049e <ringbuff_write+0x46>
 810048a:	68fb      	ldr	r3, [r7, #12]
 810048c:	689b      	ldr	r3, [r3, #8]
 810048e:	2b00      	cmp	r3, #0
 8100490:	d005      	beq.n	810049e <ringbuff_write+0x46>
 8100492:	68bb      	ldr	r3, [r7, #8]
 8100494:	2b00      	cmp	r3, #0
 8100496:	d002      	beq.n	810049e <ringbuff_write+0x46>
 8100498:	687b      	ldr	r3, [r7, #4]
 810049a:	2b00      	cmp	r3, #0
 810049c:	d101      	bne.n	81004a2 <ringbuff_write+0x4a>
        return 0;
 810049e:	2300      	movs	r3, #0
 81004a0:	e059      	b.n	8100556 <ringbuff_write+0xfe>
    }

    /* Calculate maximum number of bytes available to write */
    free = ringbuff_get_free(buff);
 81004a2:	68f8      	ldr	r0, [r7, #12]
 81004a4:	f000 f860 	bl	8100568 <ringbuff_get_free>
 81004a8:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 81004aa:	687a      	ldr	r2, [r7, #4]
 81004ac:	69bb      	ldr	r3, [r7, #24]
 81004ae:	4293      	cmp	r3, r2
 81004b0:	bf28      	it	cs
 81004b2:	4613      	movcs	r3, r2
 81004b4:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 81004b6:	687b      	ldr	r3, [r7, #4]
 81004b8:	2b00      	cmp	r3, #0
 81004ba:	d101      	bne.n	81004c0 <ringbuff_write+0x68>
        return 0;
 81004bc:	2300      	movs	r3, #0
 81004be:	e04a      	b.n	8100556 <ringbuff_write+0xfe>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 81004c0:	68fb      	ldr	r3, [r7, #12]
 81004c2:	689a      	ldr	r2, [r3, #8]
 81004c4:	68fb      	ldr	r3, [r7, #12]
 81004c6:	691b      	ldr	r3, [r3, #16]
 81004c8:	1ad3      	subs	r3, r2, r3
 81004ca:	687a      	ldr	r2, [r7, #4]
 81004cc:	429a      	cmp	r2, r3
 81004ce:	d905      	bls.n	81004dc <ringbuff_write+0x84>
 81004d0:	68fb      	ldr	r3, [r7, #12]
 81004d2:	689a      	ldr	r2, [r3, #8]
 81004d4:	68fb      	ldr	r3, [r7, #12]
 81004d6:	691b      	ldr	r3, [r3, #16]
 81004d8:	1ad3      	subs	r3, r2, r3
 81004da:	e000      	b.n	81004de <ringbuff_write+0x86>
 81004dc:	687b      	ldr	r3, [r7, #4]
 81004de:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 81004e0:	68fb      	ldr	r3, [r7, #12]
 81004e2:	685a      	ldr	r2, [r3, #4]
 81004e4:	68fb      	ldr	r3, [r7, #12]
 81004e6:	691b      	ldr	r3, [r3, #16]
 81004e8:	4413      	add	r3, r2
 81004ea:	697a      	ldr	r2, [r7, #20]
 81004ec:	69f9      	ldr	r1, [r7, #28]
 81004ee:	4618      	mov	r0, r3
 81004f0:	f000 ffb8 	bl	8101464 <memcpy>
    buff->w += tocopy;
 81004f4:	68fb      	ldr	r3, [r7, #12]
 81004f6:	691a      	ldr	r2, [r3, #16]
 81004f8:	697b      	ldr	r3, [r7, #20]
 81004fa:	441a      	add	r2, r3
 81004fc:	68fb      	ldr	r3, [r7, #12]
 81004fe:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 8100500:	687a      	ldr	r2, [r7, #4]
 8100502:	697b      	ldr	r3, [r7, #20]
 8100504:	1ad3      	subs	r3, r2, r3
 8100506:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8100508:	687b      	ldr	r3, [r7, #4]
 810050a:	2b00      	cmp	r3, #0
 810050c:	d00b      	beq.n	8100526 <ringbuff_write+0xce>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 810050e:	68fb      	ldr	r3, [r7, #12]
 8100510:	6858      	ldr	r0, [r3, #4]
 8100512:	69fa      	ldr	r2, [r7, #28]
 8100514:	697b      	ldr	r3, [r7, #20]
 8100516:	4413      	add	r3, r2
 8100518:	687a      	ldr	r2, [r7, #4]
 810051a:	4619      	mov	r1, r3
 810051c:	f000 ffa2 	bl	8101464 <memcpy>
        buff->w = btw;
 8100520:	68fb      	ldr	r3, [r7, #12]
 8100522:	687a      	ldr	r2, [r7, #4]
 8100524:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 8100526:	68fb      	ldr	r3, [r7, #12]
 8100528:	691a      	ldr	r2, [r3, #16]
 810052a:	68fb      	ldr	r3, [r7, #12]
 810052c:	689b      	ldr	r3, [r3, #8]
 810052e:	429a      	cmp	r2, r3
 8100530:	d302      	bcc.n	8100538 <ringbuff_write+0xe0>
        buff->w = 0;
 8100532:	68fb      	ldr	r3, [r7, #12]
 8100534:	2200      	movs	r2, #0
 8100536:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 8100538:	68fb      	ldr	r3, [r7, #12]
 810053a:	695b      	ldr	r3, [r3, #20]
 810053c:	2b00      	cmp	r3, #0
 810053e:	d007      	beq.n	8100550 <ringbuff_write+0xf8>
 8100540:	68fb      	ldr	r3, [r7, #12]
 8100542:	695b      	ldr	r3, [r3, #20]
 8100544:	6979      	ldr	r1, [r7, #20]
 8100546:	687a      	ldr	r2, [r7, #4]
 8100548:	440a      	add	r2, r1
 810054a:	2101      	movs	r1, #1
 810054c:	68f8      	ldr	r0, [r7, #12]
 810054e:	4798      	blx	r3
    return tocopy + btw;
 8100550:	697a      	ldr	r2, [r7, #20]
 8100552:	687b      	ldr	r3, [r7, #4]
 8100554:	4413      	add	r3, r2
}
 8100556:	4618      	mov	r0, r3
 8100558:	3720      	adds	r7, #32
 810055a:	46bd      	mov	sp, r7
 810055c:	bd80      	pop	{r7, pc}
 810055e:	bf00      	nop
 8100560:	deadbeef 	.word	0xdeadbeef
 8100564:	21524110 	.word	0x21524110

08100568 <ringbuff_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
ringbuff_get_free(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8100568:	b480      	push	{r7}
 810056a:	b087      	sub	sp, #28
 810056c:	af00      	add	r7, sp, #0
 810056e:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8100570:	687b      	ldr	r3, [r7, #4]
 8100572:	2b00      	cmp	r3, #0
 8100574:	d011      	beq.n	810059a <ringbuff_get_free+0x32>
 8100576:	687b      	ldr	r3, [r7, #4]
 8100578:	681b      	ldr	r3, [r3, #0]
 810057a:	4a1c      	ldr	r2, [pc, #112]	; (81005ec <ringbuff_get_free+0x84>)
 810057c:	4293      	cmp	r3, r2
 810057e:	d10c      	bne.n	810059a <ringbuff_get_free+0x32>
 8100580:	687b      	ldr	r3, [r7, #4]
 8100582:	699b      	ldr	r3, [r3, #24]
 8100584:	4a1a      	ldr	r2, [pc, #104]	; (81005f0 <ringbuff_get_free+0x88>)
 8100586:	4293      	cmp	r3, r2
 8100588:	d107      	bne.n	810059a <ringbuff_get_free+0x32>
 810058a:	687b      	ldr	r3, [r7, #4]
 810058c:	685b      	ldr	r3, [r3, #4]
 810058e:	2b00      	cmp	r3, #0
 8100590:	d003      	beq.n	810059a <ringbuff_get_free+0x32>
 8100592:	687b      	ldr	r3, [r7, #4]
 8100594:	689b      	ldr	r3, [r3, #8]
 8100596:	2b00      	cmp	r3, #0
 8100598:	d101      	bne.n	810059e <ringbuff_get_free+0x36>
        return 0;
 810059a:	2300      	movs	r3, #0
 810059c:	e01f      	b.n	81005de <ringbuff_get_free+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 810059e:	687b      	ldr	r3, [r7, #4]
 81005a0:	691b      	ldr	r3, [r3, #16]
 81005a2:	613b      	str	r3, [r7, #16]
    r = buff->r;
 81005a4:	687b      	ldr	r3, [r7, #4]
 81005a6:	68db      	ldr	r3, [r3, #12]
 81005a8:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 81005aa:	693a      	ldr	r2, [r7, #16]
 81005ac:	68fb      	ldr	r3, [r7, #12]
 81005ae:	429a      	cmp	r2, r3
 81005b0:	d103      	bne.n	81005ba <ringbuff_get_free+0x52>
        size = buff->size;
 81005b2:	687b      	ldr	r3, [r7, #4]
 81005b4:	689b      	ldr	r3, [r3, #8]
 81005b6:	617b      	str	r3, [r7, #20]
 81005b8:	e00f      	b.n	81005da <ringbuff_get_free+0x72>
    } else if (r > w) {
 81005ba:	68fa      	ldr	r2, [r7, #12]
 81005bc:	693b      	ldr	r3, [r7, #16]
 81005be:	429a      	cmp	r2, r3
 81005c0:	d904      	bls.n	81005cc <ringbuff_get_free+0x64>
        size = r - w;
 81005c2:	68fa      	ldr	r2, [r7, #12]
 81005c4:	693b      	ldr	r3, [r7, #16]
 81005c6:	1ad3      	subs	r3, r2, r3
 81005c8:	617b      	str	r3, [r7, #20]
 81005ca:	e006      	b.n	81005da <ringbuff_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 81005cc:	687b      	ldr	r3, [r7, #4]
 81005ce:	689a      	ldr	r2, [r3, #8]
 81005d0:	68f9      	ldr	r1, [r7, #12]
 81005d2:	693b      	ldr	r3, [r7, #16]
 81005d4:	1acb      	subs	r3, r1, r3
 81005d6:	4413      	add	r3, r2
 81005d8:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 81005da:	697b      	ldr	r3, [r7, #20]
 81005dc:	3b01      	subs	r3, #1
}
 81005de:	4618      	mov	r0, r3
 81005e0:	371c      	adds	r7, #28
 81005e2:	46bd      	mov	sp, r7
 81005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005e8:	4770      	bx	lr
 81005ea:	bf00      	nop
 81005ec:	deadbeef 	.word	0xdeadbeef
 81005f0:	21524110 	.word	0x21524110

081005f4 <ringbuff_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
ringbuff_get_full(RINGBUFF_VOLATILE ringbuff_t* buff) {
 81005f4:	b480      	push	{r7}
 81005f6:	b087      	sub	sp, #28
 81005f8:	af00      	add	r7, sp, #0
 81005fa:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 81005fc:	687b      	ldr	r3, [r7, #4]
 81005fe:	2b00      	cmp	r3, #0
 8100600:	d011      	beq.n	8100626 <ringbuff_get_full+0x32>
 8100602:	687b      	ldr	r3, [r7, #4]
 8100604:	681b      	ldr	r3, [r3, #0]
 8100606:	4a1b      	ldr	r2, [pc, #108]	; (8100674 <ringbuff_get_full+0x80>)
 8100608:	4293      	cmp	r3, r2
 810060a:	d10c      	bne.n	8100626 <ringbuff_get_full+0x32>
 810060c:	687b      	ldr	r3, [r7, #4]
 810060e:	699b      	ldr	r3, [r3, #24]
 8100610:	4a19      	ldr	r2, [pc, #100]	; (8100678 <ringbuff_get_full+0x84>)
 8100612:	4293      	cmp	r3, r2
 8100614:	d107      	bne.n	8100626 <ringbuff_get_full+0x32>
 8100616:	687b      	ldr	r3, [r7, #4]
 8100618:	685b      	ldr	r3, [r3, #4]
 810061a:	2b00      	cmp	r3, #0
 810061c:	d003      	beq.n	8100626 <ringbuff_get_full+0x32>
 810061e:	687b      	ldr	r3, [r7, #4]
 8100620:	689b      	ldr	r3, [r3, #8]
 8100622:	2b00      	cmp	r3, #0
 8100624:	d101      	bne.n	810062a <ringbuff_get_full+0x36>
        return 0;
 8100626:	2300      	movs	r3, #0
 8100628:	e01d      	b.n	8100666 <ringbuff_get_full+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 810062a:	687b      	ldr	r3, [r7, #4]
 810062c:	691b      	ldr	r3, [r3, #16]
 810062e:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8100630:	687b      	ldr	r3, [r7, #4]
 8100632:	68db      	ldr	r3, [r3, #12]
 8100634:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8100636:	693a      	ldr	r2, [r7, #16]
 8100638:	68fb      	ldr	r3, [r7, #12]
 810063a:	429a      	cmp	r2, r3
 810063c:	d102      	bne.n	8100644 <ringbuff_get_full+0x50>
        size = 0;
 810063e:	2300      	movs	r3, #0
 8100640:	617b      	str	r3, [r7, #20]
 8100642:	e00f      	b.n	8100664 <ringbuff_get_full+0x70>
    } else if (w > r) {
 8100644:	693a      	ldr	r2, [r7, #16]
 8100646:	68fb      	ldr	r3, [r7, #12]
 8100648:	429a      	cmp	r2, r3
 810064a:	d904      	bls.n	8100656 <ringbuff_get_full+0x62>
        size = w - r;
 810064c:	693a      	ldr	r2, [r7, #16]
 810064e:	68fb      	ldr	r3, [r7, #12]
 8100650:	1ad3      	subs	r3, r2, r3
 8100652:	617b      	str	r3, [r7, #20]
 8100654:	e006      	b.n	8100664 <ringbuff_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 8100656:	687b      	ldr	r3, [r7, #4]
 8100658:	689a      	ldr	r2, [r3, #8]
 810065a:	6939      	ldr	r1, [r7, #16]
 810065c:	68fb      	ldr	r3, [r7, #12]
 810065e:	1acb      	subs	r3, r1, r3
 8100660:	4413      	add	r3, r2
 8100662:	617b      	str	r3, [r7, #20]
    }
    return size;
 8100664:	697b      	ldr	r3, [r7, #20]
}
 8100666:	4618      	mov	r0, r3
 8100668:	371c      	adds	r7, #28
 810066a:	46bd      	mov	sp, r7
 810066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100670:	4770      	bx	lr
 8100672:	bf00      	nop
 8100674:	deadbeef 	.word	0xdeadbeef
 8100678:	21524110 	.word	0x21524110

0810067c <ringbuff_get_linear_block_read_address>:
/**
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *ringbuff_get_linear_block_read_address(RINGBUFF_VOLATILE ringbuff_t* buff) {
 810067c:	b480      	push	{r7}
 810067e:	b083      	sub	sp, #12
 8100680:	af00      	add	r7, sp, #0
 8100682:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8100684:	687b      	ldr	r3, [r7, #4]
 8100686:	2b00      	cmp	r3, #0
 8100688:	d011      	beq.n	81006ae <ringbuff_get_linear_block_read_address+0x32>
 810068a:	687b      	ldr	r3, [r7, #4]
 810068c:	681b      	ldr	r3, [r3, #0]
 810068e:	4a0e      	ldr	r2, [pc, #56]	; (81006c8 <ringbuff_get_linear_block_read_address+0x4c>)
 8100690:	4293      	cmp	r3, r2
 8100692:	d10c      	bne.n	81006ae <ringbuff_get_linear_block_read_address+0x32>
 8100694:	687b      	ldr	r3, [r7, #4]
 8100696:	699b      	ldr	r3, [r3, #24]
 8100698:	4a0c      	ldr	r2, [pc, #48]	; (81006cc <ringbuff_get_linear_block_read_address+0x50>)
 810069a:	4293      	cmp	r3, r2
 810069c:	d107      	bne.n	81006ae <ringbuff_get_linear_block_read_address+0x32>
 810069e:	687b      	ldr	r3, [r7, #4]
 81006a0:	685b      	ldr	r3, [r3, #4]
 81006a2:	2b00      	cmp	r3, #0
 81006a4:	d003      	beq.n	81006ae <ringbuff_get_linear_block_read_address+0x32>
 81006a6:	687b      	ldr	r3, [r7, #4]
 81006a8:	689b      	ldr	r3, [r3, #8]
 81006aa:	2b00      	cmp	r3, #0
 81006ac:	d101      	bne.n	81006b2 <ringbuff_get_linear_block_read_address+0x36>
        return NULL;
 81006ae:	2300      	movs	r3, #0
 81006b0:	e004      	b.n	81006bc <ringbuff_get_linear_block_read_address+0x40>
    }
    return &buff->buff[buff->r];
 81006b2:	687b      	ldr	r3, [r7, #4]
 81006b4:	685a      	ldr	r2, [r3, #4]
 81006b6:	687b      	ldr	r3, [r7, #4]
 81006b8:	68db      	ldr	r3, [r3, #12]
 81006ba:	4413      	add	r3, r2
}
 81006bc:	4618      	mov	r0, r3
 81006be:	370c      	adds	r7, #12
 81006c0:	46bd      	mov	sp, r7
 81006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006c6:	4770      	bx	lr
 81006c8:	deadbeef 	.word	0xdeadbeef
 81006cc:	21524110 	.word	0x21524110

081006d0 <ringbuff_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
ringbuff_get_linear_block_read_length(RINGBUFF_VOLATILE ringbuff_t* buff) {
 81006d0:	b480      	push	{r7}
 81006d2:	b087      	sub	sp, #28
 81006d4:	af00      	add	r7, sp, #0
 81006d6:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 81006d8:	687b      	ldr	r3, [r7, #4]
 81006da:	2b00      	cmp	r3, #0
 81006dc:	d011      	beq.n	8100702 <ringbuff_get_linear_block_read_length+0x32>
 81006de:	687b      	ldr	r3, [r7, #4]
 81006e0:	681b      	ldr	r3, [r3, #0]
 81006e2:	4a1a      	ldr	r2, [pc, #104]	; (810074c <ringbuff_get_linear_block_read_length+0x7c>)
 81006e4:	4293      	cmp	r3, r2
 81006e6:	d10c      	bne.n	8100702 <ringbuff_get_linear_block_read_length+0x32>
 81006e8:	687b      	ldr	r3, [r7, #4]
 81006ea:	699b      	ldr	r3, [r3, #24]
 81006ec:	4a18      	ldr	r2, [pc, #96]	; (8100750 <ringbuff_get_linear_block_read_length+0x80>)
 81006ee:	4293      	cmp	r3, r2
 81006f0:	d107      	bne.n	8100702 <ringbuff_get_linear_block_read_length+0x32>
 81006f2:	687b      	ldr	r3, [r7, #4]
 81006f4:	685b      	ldr	r3, [r3, #4]
 81006f6:	2b00      	cmp	r3, #0
 81006f8:	d003      	beq.n	8100702 <ringbuff_get_linear_block_read_length+0x32>
 81006fa:	687b      	ldr	r3, [r7, #4]
 81006fc:	689b      	ldr	r3, [r3, #8]
 81006fe:	2b00      	cmp	r3, #0
 8100700:	d101      	bne.n	8100706 <ringbuff_get_linear_block_read_length+0x36>
        return 0;
 8100702:	2300      	movs	r3, #0
 8100704:	e01b      	b.n	810073e <ringbuff_get_linear_block_read_length+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8100706:	687b      	ldr	r3, [r7, #4]
 8100708:	691b      	ldr	r3, [r3, #16]
 810070a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 810070c:	687b      	ldr	r3, [r7, #4]
 810070e:	68db      	ldr	r3, [r3, #12]
 8100710:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8100712:	693a      	ldr	r2, [r7, #16]
 8100714:	68fb      	ldr	r3, [r7, #12]
 8100716:	429a      	cmp	r2, r3
 8100718:	d904      	bls.n	8100724 <ringbuff_get_linear_block_read_length+0x54>
        len = w - r;
 810071a:	693a      	ldr	r2, [r7, #16]
 810071c:	68fb      	ldr	r3, [r7, #12]
 810071e:	1ad3      	subs	r3, r2, r3
 8100720:	617b      	str	r3, [r7, #20]
 8100722:	e00b      	b.n	810073c <ringbuff_get_linear_block_read_length+0x6c>
    } else if (r > w) {
 8100724:	68fa      	ldr	r2, [r7, #12]
 8100726:	693b      	ldr	r3, [r7, #16]
 8100728:	429a      	cmp	r2, r3
 810072a:	d905      	bls.n	8100738 <ringbuff_get_linear_block_read_length+0x68>
        len = buff->size - r;
 810072c:	687b      	ldr	r3, [r7, #4]
 810072e:	689a      	ldr	r2, [r3, #8]
 8100730:	68fb      	ldr	r3, [r7, #12]
 8100732:	1ad3      	subs	r3, r2, r3
 8100734:	617b      	str	r3, [r7, #20]
 8100736:	e001      	b.n	810073c <ringbuff_get_linear_block_read_length+0x6c>
    } else {
        len = 0;
 8100738:	2300      	movs	r3, #0
 810073a:	617b      	str	r3, [r7, #20]
    }
    return len;
 810073c:	697b      	ldr	r3, [r7, #20]
}
 810073e:	4618      	mov	r0, r3
 8100740:	371c      	adds	r7, #28
 8100742:	46bd      	mov	sp, r7
 8100744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100748:	4770      	bx	lr
 810074a:	bf00      	nop
 810074c:	deadbeef 	.word	0xdeadbeef
 8100750:	21524110 	.word	0x21524110

08100754 <ringbuff_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
ringbuff_skip(RINGBUFF_VOLATILE ringbuff_t* buff, size_t len) {
 8100754:	b580      	push	{r7, lr}
 8100756:	b084      	sub	sp, #16
 8100758:	af00      	add	r7, sp, #0
 810075a:	6078      	str	r0, [r7, #4]
 810075c:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 810075e:	687b      	ldr	r3, [r7, #4]
 8100760:	2b00      	cmp	r3, #0
 8100762:	d014      	beq.n	810078e <ringbuff_skip+0x3a>
 8100764:	687b      	ldr	r3, [r7, #4]
 8100766:	681b      	ldr	r3, [r3, #0]
 8100768:	4a20      	ldr	r2, [pc, #128]	; (81007ec <ringbuff_skip+0x98>)
 810076a:	4293      	cmp	r3, r2
 810076c:	d10f      	bne.n	810078e <ringbuff_skip+0x3a>
 810076e:	687b      	ldr	r3, [r7, #4]
 8100770:	699b      	ldr	r3, [r3, #24]
 8100772:	4a1f      	ldr	r2, [pc, #124]	; (81007f0 <ringbuff_skip+0x9c>)
 8100774:	4293      	cmp	r3, r2
 8100776:	d10a      	bne.n	810078e <ringbuff_skip+0x3a>
 8100778:	687b      	ldr	r3, [r7, #4]
 810077a:	685b      	ldr	r3, [r3, #4]
 810077c:	2b00      	cmp	r3, #0
 810077e:	d006      	beq.n	810078e <ringbuff_skip+0x3a>
 8100780:	687b      	ldr	r3, [r7, #4]
 8100782:	689b      	ldr	r3, [r3, #8]
 8100784:	2b00      	cmp	r3, #0
 8100786:	d002      	beq.n	810078e <ringbuff_skip+0x3a>
 8100788:	683b      	ldr	r3, [r7, #0]
 810078a:	2b00      	cmp	r3, #0
 810078c:	d101      	bne.n	8100792 <ringbuff_skip+0x3e>
        return 0;
 810078e:	2300      	movs	r3, #0
 8100790:	e027      	b.n	81007e2 <ringbuff_skip+0x8e>
    }

    full = ringbuff_get_full(buff);             /* Get buffer used length */
 8100792:	6878      	ldr	r0, [r7, #4]
 8100794:	f7ff ff2e 	bl	81005f4 <ringbuff_get_full>
 8100798:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 810079a:	683a      	ldr	r2, [r7, #0]
 810079c:	68fb      	ldr	r3, [r7, #12]
 810079e:	4293      	cmp	r3, r2
 81007a0:	bf28      	it	cs
 81007a2:	4613      	movcs	r3, r2
 81007a4:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 81007a6:	687b      	ldr	r3, [r7, #4]
 81007a8:	68da      	ldr	r2, [r3, #12]
 81007aa:	683b      	ldr	r3, [r7, #0]
 81007ac:	441a      	add	r2, r3
 81007ae:	687b      	ldr	r3, [r7, #4]
 81007b0:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 81007b2:	687b      	ldr	r3, [r7, #4]
 81007b4:	68da      	ldr	r2, [r3, #12]
 81007b6:	687b      	ldr	r3, [r7, #4]
 81007b8:	689b      	ldr	r3, [r3, #8]
 81007ba:	429a      	cmp	r2, r3
 81007bc:	d306      	bcc.n	81007cc <ringbuff_skip+0x78>
        buff->r -= buff->size;
 81007be:	687b      	ldr	r3, [r7, #4]
 81007c0:	689b      	ldr	r3, [r3, #8]
 81007c2:	687a      	ldr	r2, [r7, #4]
 81007c4:	68d2      	ldr	r2, [r2, #12]
 81007c6:	1ad2      	subs	r2, r2, r3
 81007c8:	687b      	ldr	r3, [r7, #4]
 81007ca:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 81007cc:	687b      	ldr	r3, [r7, #4]
 81007ce:	695b      	ldr	r3, [r3, #20]
 81007d0:	2b00      	cmp	r3, #0
 81007d2:	d005      	beq.n	81007e0 <ringbuff_skip+0x8c>
 81007d4:	687b      	ldr	r3, [r7, #4]
 81007d6:	695b      	ldr	r3, [r3, #20]
 81007d8:	683a      	ldr	r2, [r7, #0]
 81007da:	2100      	movs	r1, #0
 81007dc:	6878      	ldr	r0, [r7, #4]
 81007de:	4798      	blx	r3
    return len;
 81007e0:	683b      	ldr	r3, [r7, #0]
}
 81007e2:	4618      	mov	r0, r3
 81007e4:	3710      	adds	r7, #16
 81007e6:	46bd      	mov	sp, r7
 81007e8:	bd80      	pop	{r7, pc}
 81007ea:	bf00      	nop
 81007ec:	deadbeef 	.word	0xdeadbeef
 81007f0:	21524110 	.word	0x21524110

081007f4 <send_data_ringbuffer>:

volatile ringbuff_t* rb_cm4_to_cm7 = (void *)BUFF_CM4_TO_CM7_ADDR;
volatile ringbuff_t* rb_cm7_to_cm4 = (void *)BUFF_CM7_TO_CM4_ADDR;

void send_data_ringbuffer(shared_mem_data sh_dt)
{
 81007f4:	b580      	push	{r7, lr}
 81007f6:	b08a      	sub	sp, #40	; 0x28
 81007f8:	af00      	add	r7, sp, #0
 81007fa:	4603      	mov	r3, r0
 81007fc:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0, time, t1, t2;
 81007fe:	2300      	movs	r3, #0
 8100800:	627b      	str	r3, [r7, #36]	; 0x24
//
//	ringbuff_write(rb_cm4_to_cm7, "[CM4] Number: ", 14);
//	ringbuff_write(rb_cm4_to_cm7, (uint8_t *)sh_dt, 1);
//}

ringbuff_write(rb_cm4_to_cm7, "[CM4] Core ready\r\n", 18);
 8100802:	4b30      	ldr	r3, [pc, #192]	; (81008c4 <send_data_ringbuffer+0xd0>)
 8100804:	681b      	ldr	r3, [r3, #0]
 8100806:	2212      	movs	r2, #18
 8100808:	492f      	ldr	r1, [pc, #188]	; (81008c8 <send_data_ringbuffer+0xd4>)
 810080a:	4618      	mov	r0, r3
 810080c:	f7ff fe24 	bl	8100458 <ringbuff_write>

    /* Set default time */
    time = t1 = t2 = HAL_GetTick();
 8100810:	f000 f97a 	bl	8100b08 <HAL_GetTick>
 8100814:	4603      	mov	r3, r0
 8100816:	61fb      	str	r3, [r7, #28]
 8100818:	69fb      	ldr	r3, [r7, #28]
 810081a:	623b      	str	r3, [r7, #32]
 810081c:	6a3b      	ldr	r3, [r7, #32]
 810081e:	61bb      	str	r3, [r7, #24]
    while (1) {
        size_t len;
        void* addr;

        time = HAL_GetTick();
 8100820:	f000 f972 	bl	8100b08 <HAL_GetTick>
 8100824:	4603      	mov	r3, r0
 8100826:	61bb      	str	r3, [r7, #24]

        /* Send data to CPU1 */
        if (time - t1 >= 1000)
 8100828:	69ba      	ldr	r2, [r7, #24]
 810082a:	6a3b      	ldr	r3, [r7, #32]
 810082c:	1ad3      	subs	r3, r2, r3
 810082e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8100832:	d328      	bcc.n	8100886 <send_data_ringbuffer+0x92>
        {
            t1 = time;
 8100834:	69bb      	ldr	r3, [r7, #24]
 8100836:	623b      	str	r3, [r7, #32]
            char c = '0' + (++i % 10);
 8100838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810083a:	3301      	adds	r3, #1
 810083c:	627b      	str	r3, [r7, #36]	; 0x24
 810083e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8100840:	4b22      	ldr	r3, [pc, #136]	; (81008cc <send_data_ringbuffer+0xd8>)
 8100842:	fba3 2301 	umull	r2, r3, r3, r1
 8100846:	08da      	lsrs	r2, r3, #3
 8100848:	4613      	mov	r3, r2
 810084a:	009b      	lsls	r3, r3, #2
 810084c:	4413      	add	r3, r2
 810084e:	005b      	lsls	r3, r3, #1
 8100850:	1aca      	subs	r2, r1, r3
 8100852:	b2d3      	uxtb	r3, r2
 8100854:	3330      	adds	r3, #48	; 0x30
 8100856:	b2db      	uxtb	r3, r3
 8100858:	73fb      	strb	r3, [r7, #15]

            /* Write to buffer from CPU2 to CPU1 */
            ringbuff_write(rb_cm4_to_cm7, "[CM4] Number: ", 14);
 810085a:	4b1a      	ldr	r3, [pc, #104]	; (81008c4 <send_data_ringbuffer+0xd0>)
 810085c:	681b      	ldr	r3, [r3, #0]
 810085e:	220e      	movs	r2, #14
 8100860:	491b      	ldr	r1, [pc, #108]	; (81008d0 <send_data_ringbuffer+0xdc>)
 8100862:	4618      	mov	r0, r3
 8100864:	f7ff fdf8 	bl	8100458 <ringbuff_write>
            ringbuff_write(rb_cm4_to_cm7, &c, 1);
 8100868:	4b16      	ldr	r3, [pc, #88]	; (81008c4 <send_data_ringbuffer+0xd0>)
 810086a:	681b      	ldr	r3, [r3, #0]
 810086c:	f107 010f 	add.w	r1, r7, #15
 8100870:	2201      	movs	r2, #1
 8100872:	4618      	mov	r0, r3
 8100874:	f7ff fdf0 	bl	8100458 <ringbuff_write>
            ringbuff_write(rb_cm4_to_cm7, "\r\n", 2);
 8100878:	4b12      	ldr	r3, [pc, #72]	; (81008c4 <send_data_ringbuffer+0xd0>)
 810087a:	681b      	ldr	r3, [r3, #0]
 810087c:	2202      	movs	r2, #2
 810087e:	4915      	ldr	r1, [pc, #84]	; (81008d4 <send_data_ringbuffer+0xe0>)
 8100880:	4618      	mov	r0, r3
 8100882:	f7ff fde9 	bl	8100458 <ringbuff_write>
        }

        /* Toggle LED */
        if (time - t2 >= 500)
 8100886:	69ba      	ldr	r2, [r7, #24]
 8100888:	69fb      	ldr	r3, [r7, #28]
 810088a:	1ad3      	subs	r3, r2, r3
 810088c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8100890:	d30e      	bcc.n	81008b0 <send_data_ringbuffer+0xbc>
        {
            t2 = time;
 8100892:	69bb      	ldr	r3, [r7, #24]
 8100894:	61fb      	str	r3, [r7, #28]
//            HAL_GPIO_TogglePin(LD3_GPIO_PORT, LD3_GPIO_PIN);
        }

        /* Check if CPU1 sent some data to CPU2 core */
        while ((len = ringbuff_get_linear_block_read_length(rb_cm7_to_cm4)) > 0) {
 8100896:	e00b      	b.n	81008b0 <send_data_ringbuffer+0xbc>
            addr = ringbuff_get_linear_block_read_address(rb_cm7_to_cm4);
 8100898:	4b0f      	ldr	r3, [pc, #60]	; (81008d8 <send_data_ringbuffer+0xe4>)
 810089a:	681b      	ldr	r3, [r3, #0]
 810089c:	4618      	mov	r0, r3
 810089e:	f7ff feed 	bl	810067c <ringbuff_get_linear_block_read_address>
 81008a2:	6138      	str	r0, [r7, #16]
             */
            /* Process data here */
          //  HAL_UART_Transmit(&huart3, addr, len, 1000);

            /* Mark buffer as read to allow other writes from CPU1 */
            ringbuff_skip(rb_cm7_to_cm4, len);
 81008a4:	4b0c      	ldr	r3, [pc, #48]	; (81008d8 <send_data_ringbuffer+0xe4>)
 81008a6:	681b      	ldr	r3, [r3, #0]
 81008a8:	6979      	ldr	r1, [r7, #20]
 81008aa:	4618      	mov	r0, r3
 81008ac:	f7ff ff52 	bl	8100754 <ringbuff_skip>
        while ((len = ringbuff_get_linear_block_read_length(rb_cm7_to_cm4)) > 0) {
 81008b0:	4b09      	ldr	r3, [pc, #36]	; (81008d8 <send_data_ringbuffer+0xe4>)
 81008b2:	681b      	ldr	r3, [r3, #0]
 81008b4:	4618      	mov	r0, r3
 81008b6:	f7ff ff0b 	bl	81006d0 <ringbuff_get_linear_block_read_length>
 81008ba:	6178      	str	r0, [r7, #20]
 81008bc:	697b      	ldr	r3, [r7, #20]
 81008be:	2b00      	cmp	r3, #0
 81008c0:	d1ea      	bne.n	8100898 <send_data_ringbuffer+0xa4>
    while (1) {
 81008c2:	e7ad      	b.n	8100820 <send_data_ringbuffer+0x2c>
 81008c4:	10000008 	.word	0x10000008
 81008c8:	08101498 	.word	0x08101498
 81008cc:	cccccccd 	.word	0xcccccccd
 81008d0:	081014ac 	.word	0x081014ac
 81008d4:	081014bc 	.word	0x081014bc
 81008d8:	1000000c 	.word	0x1000000c

081008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81008dc:	b480      	push	{r7}
 81008de:	b083      	sub	sp, #12
 81008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81008e2:	4b0a      	ldr	r3, [pc, #40]	; (810090c <HAL_MspInit+0x30>)
 81008e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81008e8:	4a08      	ldr	r2, [pc, #32]	; (810090c <HAL_MspInit+0x30>)
 81008ea:	f043 0302 	orr.w	r3, r3, #2
 81008ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81008f2:	4b06      	ldr	r3, [pc, #24]	; (810090c <HAL_MspInit+0x30>)
 81008f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81008f8:	f003 0302 	and.w	r3, r3, #2
 81008fc:	607b      	str	r3, [r7, #4]
 81008fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100900:	bf00      	nop
 8100902:	370c      	adds	r7, #12
 8100904:	46bd      	mov	sp, r7
 8100906:	f85d 7b04 	ldr.w	r7, [sp], #4
 810090a:	4770      	bx	lr
 810090c:	58024400 	.word	0x58024400

08100910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100910:	b480      	push	{r7}
 8100912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100914:	e7fe      	b.n	8100914 <NMI_Handler+0x4>

08100916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100916:	b480      	push	{r7}
 8100918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810091a:	e7fe      	b.n	810091a <HardFault_Handler+0x4>

0810091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810091c:	b480      	push	{r7}
 810091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100920:	e7fe      	b.n	8100920 <MemManage_Handler+0x4>

08100922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100922:	b480      	push	{r7}
 8100924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100926:	e7fe      	b.n	8100926 <BusFault_Handler+0x4>

08100928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100928:	b480      	push	{r7}
 810092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810092c:	e7fe      	b.n	810092c <UsageFault_Handler+0x4>

0810092e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810092e:	b480      	push	{r7}
 8100930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100932:	bf00      	nop
 8100934:	46bd      	mov	sp, r7
 8100936:	f85d 7b04 	ldr.w	r7, [sp], #4
 810093a:	4770      	bx	lr

0810093c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810093c:	b480      	push	{r7}
 810093e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100940:	bf00      	nop
 8100942:	46bd      	mov	sp, r7
 8100944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100948:	4770      	bx	lr

0810094a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810094a:	b480      	push	{r7}
 810094c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810094e:	bf00      	nop
 8100950:	46bd      	mov	sp, r7
 8100952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100956:	4770      	bx	lr

08100958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100958:	b580      	push	{r7, lr}
 810095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810095c:	f000 f8c0 	bl	8100ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100960:	bf00      	nop
 8100962:	bd80      	pop	{r7, pc}

08100964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100964:	f8df d034 	ldr.w	sp, [pc, #52]	; 810099c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100968:	f7ff fcb6 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810096c:	480c      	ldr	r0, [pc, #48]	; (81009a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810096e:	490d      	ldr	r1, [pc, #52]	; (81009a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100970:	4a0d      	ldr	r2, [pc, #52]	; (81009a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100974:	e002      	b.n	810097c <LoopCopyDataInit>

08100976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810097a:	3304      	adds	r3, #4

0810097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100980:	d3f9      	bcc.n	8100976 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100982:	4a0a      	ldr	r2, [pc, #40]	; (81009ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100984:	4c0a      	ldr	r4, [pc, #40]	; (81009b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100988:	e001      	b.n	810098e <LoopFillZerobss>

0810098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810098c:	3204      	adds	r2, #4

0810098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100990:	d3fb      	bcc.n	810098a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100992:	f000 fd43 	bl	810141c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100996:	f7ff fd4b 	bl	8100430 <main>
  bx  lr
 810099a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810099c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81009a0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81009a4:	10000018 	.word	0x10000018
  ldr r2, =_sidata
 81009a8:	081014d8 	.word	0x081014d8
  ldr r2, =_sbss
 81009ac:	10000018 	.word	0x10000018
  ldr r4, =_ebss
 81009b0:	10000040 	.word	0x10000040

081009b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81009b4:	e7fe      	b.n	81009b4 <ADC3_IRQHandler>
	...

081009b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81009b8:	b580      	push	{r7, lr}
 81009ba:	b082      	sub	sp, #8
 81009bc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81009be:	4b28      	ldr	r3, [pc, #160]	; (8100a60 <HAL_Init+0xa8>)
 81009c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81009c4:	4a26      	ldr	r2, [pc, #152]	; (8100a60 <HAL_Init+0xa8>)
 81009c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81009ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81009ce:	4b24      	ldr	r3, [pc, #144]	; (8100a60 <HAL_Init+0xa8>)
 81009d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81009d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81009d8:	603b      	str	r3, [r7, #0]
 81009da:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81009dc:	4b21      	ldr	r3, [pc, #132]	; (8100a64 <HAL_Init+0xac>)
 81009de:	681b      	ldr	r3, [r3, #0]
 81009e0:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81009e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81009e8:	4a1e      	ldr	r2, [pc, #120]	; (8100a64 <HAL_Init+0xac>)
 81009ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81009ee:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81009f0:	4b1c      	ldr	r3, [pc, #112]	; (8100a64 <HAL_Init+0xac>)
 81009f2:	681b      	ldr	r3, [r3, #0]
 81009f4:	4a1b      	ldr	r2, [pc, #108]	; (8100a64 <HAL_Init+0xac>)
 81009f6:	f043 0301 	orr.w	r3, r3, #1
 81009fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81009fc:	2003      	movs	r0, #3
 81009fe:	f000 f965 	bl	8100ccc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100a02:	f000 fb91 	bl	8101128 <HAL_RCC_GetSysClockFreq>
 8100a06:	4602      	mov	r2, r0
 8100a08:	4b15      	ldr	r3, [pc, #84]	; (8100a60 <HAL_Init+0xa8>)
 8100a0a:	699b      	ldr	r3, [r3, #24]
 8100a0c:	0a1b      	lsrs	r3, r3, #8
 8100a0e:	f003 030f 	and.w	r3, r3, #15
 8100a12:	4915      	ldr	r1, [pc, #84]	; (8100a68 <HAL_Init+0xb0>)
 8100a14:	5ccb      	ldrb	r3, [r1, r3]
 8100a16:	f003 031f 	and.w	r3, r3, #31
 8100a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8100a1e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100a20:	4b0f      	ldr	r3, [pc, #60]	; (8100a60 <HAL_Init+0xa8>)
 8100a22:	699b      	ldr	r3, [r3, #24]
 8100a24:	f003 030f 	and.w	r3, r3, #15
 8100a28:	4a0f      	ldr	r2, [pc, #60]	; (8100a68 <HAL_Init+0xb0>)
 8100a2a:	5cd3      	ldrb	r3, [r2, r3]
 8100a2c:	f003 031f 	and.w	r3, r3, #31
 8100a30:	687a      	ldr	r2, [r7, #4]
 8100a32:	fa22 f303 	lsr.w	r3, r2, r3
 8100a36:	4a0d      	ldr	r2, [pc, #52]	; (8100a6c <HAL_Init+0xb4>)
 8100a38:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100a3a:	4b0c      	ldr	r3, [pc, #48]	; (8100a6c <HAL_Init+0xb4>)
 8100a3c:	681b      	ldr	r3, [r3, #0]
 8100a3e:	4a0c      	ldr	r2, [pc, #48]	; (8100a70 <HAL_Init+0xb8>)
 8100a40:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100a42:	200f      	movs	r0, #15
 8100a44:	f000 f816 	bl	8100a74 <HAL_InitTick>
 8100a48:	4603      	mov	r3, r0
 8100a4a:	2b00      	cmp	r3, #0
 8100a4c:	d001      	beq.n	8100a52 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100a4e:	2301      	movs	r3, #1
 8100a50:	e002      	b.n	8100a58 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100a52:	f7ff ff43 	bl	81008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100a56:	2300      	movs	r3, #0
}
 8100a58:	4618      	mov	r0, r3
 8100a5a:	3708      	adds	r7, #8
 8100a5c:	46bd      	mov	sp, r7
 8100a5e:	bd80      	pop	{r7, pc}
 8100a60:	58024400 	.word	0x58024400
 8100a64:	40024400 	.word	0x40024400
 8100a68:	081014c0 	.word	0x081014c0
 8100a6c:	10000004 	.word	0x10000004
 8100a70:	10000000 	.word	0x10000000

08100a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100a74:	b580      	push	{r7, lr}
 8100a76:	b082      	sub	sp, #8
 8100a78:	af00      	add	r7, sp, #0
 8100a7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100a7c:	4b15      	ldr	r3, [pc, #84]	; (8100ad4 <HAL_InitTick+0x60>)
 8100a7e:	781b      	ldrb	r3, [r3, #0]
 8100a80:	2b00      	cmp	r3, #0
 8100a82:	d101      	bne.n	8100a88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100a84:	2301      	movs	r3, #1
 8100a86:	e021      	b.n	8100acc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100a88:	4b13      	ldr	r3, [pc, #76]	; (8100ad8 <HAL_InitTick+0x64>)
 8100a8a:	681a      	ldr	r2, [r3, #0]
 8100a8c:	4b11      	ldr	r3, [pc, #68]	; (8100ad4 <HAL_InitTick+0x60>)
 8100a8e:	781b      	ldrb	r3, [r3, #0]
 8100a90:	4619      	mov	r1, r3
 8100a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8100a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8100a9e:	4618      	mov	r0, r3
 8100aa0:	f000 f939 	bl	8100d16 <HAL_SYSTICK_Config>
 8100aa4:	4603      	mov	r3, r0
 8100aa6:	2b00      	cmp	r3, #0
 8100aa8:	d001      	beq.n	8100aae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100aaa:	2301      	movs	r3, #1
 8100aac:	e00e      	b.n	8100acc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100aae:	687b      	ldr	r3, [r7, #4]
 8100ab0:	2b0f      	cmp	r3, #15
 8100ab2:	d80a      	bhi.n	8100aca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100ab4:	2200      	movs	r2, #0
 8100ab6:	6879      	ldr	r1, [r7, #4]
 8100ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8100abc:	f000 f911 	bl	8100ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100ac0:	4a06      	ldr	r2, [pc, #24]	; (8100adc <HAL_InitTick+0x68>)
 8100ac2:	687b      	ldr	r3, [r7, #4]
 8100ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100ac6:	2300      	movs	r3, #0
 8100ac8:	e000      	b.n	8100acc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100aca:	2301      	movs	r3, #1
}
 8100acc:	4618      	mov	r0, r3
 8100ace:	3708      	adds	r7, #8
 8100ad0:	46bd      	mov	sp, r7
 8100ad2:	bd80      	pop	{r7, pc}
 8100ad4:	10000014 	.word	0x10000014
 8100ad8:	10000000 	.word	0x10000000
 8100adc:	10000010 	.word	0x10000010

08100ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100ae0:	b480      	push	{r7}
 8100ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100ae4:	4b06      	ldr	r3, [pc, #24]	; (8100b00 <HAL_IncTick+0x20>)
 8100ae6:	781b      	ldrb	r3, [r3, #0]
 8100ae8:	461a      	mov	r2, r3
 8100aea:	4b06      	ldr	r3, [pc, #24]	; (8100b04 <HAL_IncTick+0x24>)
 8100aec:	681b      	ldr	r3, [r3, #0]
 8100aee:	4413      	add	r3, r2
 8100af0:	4a04      	ldr	r2, [pc, #16]	; (8100b04 <HAL_IncTick+0x24>)
 8100af2:	6013      	str	r3, [r2, #0]
}
 8100af4:	bf00      	nop
 8100af6:	46bd      	mov	sp, r7
 8100af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100afc:	4770      	bx	lr
 8100afe:	bf00      	nop
 8100b00:	10000014 	.word	0x10000014
 8100b04:	1000003c 	.word	0x1000003c

08100b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100b08:	b480      	push	{r7}
 8100b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8100b0c:	4b03      	ldr	r3, [pc, #12]	; (8100b1c <HAL_GetTick+0x14>)
 8100b0e:	681b      	ldr	r3, [r3, #0]
}
 8100b10:	4618      	mov	r0, r3
 8100b12:	46bd      	mov	sp, r7
 8100b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b18:	4770      	bx	lr
 8100b1a:	bf00      	nop
 8100b1c:	1000003c 	.word	0x1000003c

08100b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100b20:	b580      	push	{r7, lr}
 8100b22:	b084      	sub	sp, #16
 8100b24:	af00      	add	r7, sp, #0
 8100b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100b28:	f7ff ffee 	bl	8100b08 <HAL_GetTick>
 8100b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100b2e:	687b      	ldr	r3, [r7, #4]
 8100b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100b32:	68fb      	ldr	r3, [r7, #12]
 8100b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100b38:	d005      	beq.n	8100b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8100b3a:	4b0a      	ldr	r3, [pc, #40]	; (8100b64 <HAL_Delay+0x44>)
 8100b3c:	781b      	ldrb	r3, [r3, #0]
 8100b3e:	461a      	mov	r2, r3
 8100b40:	68fb      	ldr	r3, [r7, #12]
 8100b42:	4413      	add	r3, r2
 8100b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100b46:	bf00      	nop
 8100b48:	f7ff ffde 	bl	8100b08 <HAL_GetTick>
 8100b4c:	4602      	mov	r2, r0
 8100b4e:	68bb      	ldr	r3, [r7, #8]
 8100b50:	1ad3      	subs	r3, r2, r3
 8100b52:	68fa      	ldr	r2, [r7, #12]
 8100b54:	429a      	cmp	r2, r3
 8100b56:	d8f7      	bhi.n	8100b48 <HAL_Delay+0x28>
  {
  }
}
 8100b58:	bf00      	nop
 8100b5a:	bf00      	nop
 8100b5c:	3710      	adds	r7, #16
 8100b5e:	46bd      	mov	sp, r7
 8100b60:	bd80      	pop	{r7, pc}
 8100b62:	bf00      	nop
 8100b64:	10000014 	.word	0x10000014

08100b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100b68:	b480      	push	{r7}
 8100b6a:	b085      	sub	sp, #20
 8100b6c:	af00      	add	r7, sp, #0
 8100b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100b70:	687b      	ldr	r3, [r7, #4]
 8100b72:	f003 0307 	and.w	r3, r3, #7
 8100b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100b78:	4b0c      	ldr	r3, [pc, #48]	; (8100bac <__NVIC_SetPriorityGrouping+0x44>)
 8100b7a:	68db      	ldr	r3, [r3, #12]
 8100b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100b7e:	68ba      	ldr	r2, [r7, #8]
 8100b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100b84:	4013      	ands	r3, r2
 8100b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100b88:	68fb      	ldr	r3, [r7, #12]
 8100b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100b8c:	68bb      	ldr	r3, [r7, #8]
 8100b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100b9a:	4a04      	ldr	r2, [pc, #16]	; (8100bac <__NVIC_SetPriorityGrouping+0x44>)
 8100b9c:	68bb      	ldr	r3, [r7, #8]
 8100b9e:	60d3      	str	r3, [r2, #12]
}
 8100ba0:	bf00      	nop
 8100ba2:	3714      	adds	r7, #20
 8100ba4:	46bd      	mov	sp, r7
 8100ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100baa:	4770      	bx	lr
 8100bac:	e000ed00 	.word	0xe000ed00

08100bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100bb0:	b480      	push	{r7}
 8100bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100bb4:	4b04      	ldr	r3, [pc, #16]	; (8100bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8100bb6:	68db      	ldr	r3, [r3, #12]
 8100bb8:	0a1b      	lsrs	r3, r3, #8
 8100bba:	f003 0307 	and.w	r3, r3, #7
}
 8100bbe:	4618      	mov	r0, r3
 8100bc0:	46bd      	mov	sp, r7
 8100bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bc6:	4770      	bx	lr
 8100bc8:	e000ed00 	.word	0xe000ed00

08100bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100bcc:	b480      	push	{r7}
 8100bce:	b083      	sub	sp, #12
 8100bd0:	af00      	add	r7, sp, #0
 8100bd2:	4603      	mov	r3, r0
 8100bd4:	6039      	str	r1, [r7, #0]
 8100bd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100bd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100bdc:	2b00      	cmp	r3, #0
 8100bde:	db0a      	blt.n	8100bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100be0:	683b      	ldr	r3, [r7, #0]
 8100be2:	b2da      	uxtb	r2, r3
 8100be4:	490c      	ldr	r1, [pc, #48]	; (8100c18 <__NVIC_SetPriority+0x4c>)
 8100be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100bea:	0112      	lsls	r2, r2, #4
 8100bec:	b2d2      	uxtb	r2, r2
 8100bee:	440b      	add	r3, r1
 8100bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100bf4:	e00a      	b.n	8100c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100bf6:	683b      	ldr	r3, [r7, #0]
 8100bf8:	b2da      	uxtb	r2, r3
 8100bfa:	4908      	ldr	r1, [pc, #32]	; (8100c1c <__NVIC_SetPriority+0x50>)
 8100bfc:	88fb      	ldrh	r3, [r7, #6]
 8100bfe:	f003 030f 	and.w	r3, r3, #15
 8100c02:	3b04      	subs	r3, #4
 8100c04:	0112      	lsls	r2, r2, #4
 8100c06:	b2d2      	uxtb	r2, r2
 8100c08:	440b      	add	r3, r1
 8100c0a:	761a      	strb	r2, [r3, #24]
}
 8100c0c:	bf00      	nop
 8100c0e:	370c      	adds	r7, #12
 8100c10:	46bd      	mov	sp, r7
 8100c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c16:	4770      	bx	lr
 8100c18:	e000e100 	.word	0xe000e100
 8100c1c:	e000ed00 	.word	0xe000ed00

08100c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100c20:	b480      	push	{r7}
 8100c22:	b089      	sub	sp, #36	; 0x24
 8100c24:	af00      	add	r7, sp, #0
 8100c26:	60f8      	str	r0, [r7, #12]
 8100c28:	60b9      	str	r1, [r7, #8]
 8100c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100c2c:	68fb      	ldr	r3, [r7, #12]
 8100c2e:	f003 0307 	and.w	r3, r3, #7
 8100c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100c34:	69fb      	ldr	r3, [r7, #28]
 8100c36:	f1c3 0307 	rsb	r3, r3, #7
 8100c3a:	2b04      	cmp	r3, #4
 8100c3c:	bf28      	it	cs
 8100c3e:	2304      	movcs	r3, #4
 8100c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100c42:	69fb      	ldr	r3, [r7, #28]
 8100c44:	3304      	adds	r3, #4
 8100c46:	2b06      	cmp	r3, #6
 8100c48:	d902      	bls.n	8100c50 <NVIC_EncodePriority+0x30>
 8100c4a:	69fb      	ldr	r3, [r7, #28]
 8100c4c:	3b03      	subs	r3, #3
 8100c4e:	e000      	b.n	8100c52 <NVIC_EncodePriority+0x32>
 8100c50:	2300      	movs	r3, #0
 8100c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c54:	f04f 32ff 	mov.w	r2, #4294967295
 8100c58:	69bb      	ldr	r3, [r7, #24]
 8100c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8100c5e:	43da      	mvns	r2, r3
 8100c60:	68bb      	ldr	r3, [r7, #8]
 8100c62:	401a      	ands	r2, r3
 8100c64:	697b      	ldr	r3, [r7, #20]
 8100c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100c68:	f04f 31ff 	mov.w	r1, #4294967295
 8100c6c:	697b      	ldr	r3, [r7, #20]
 8100c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8100c72:	43d9      	mvns	r1, r3
 8100c74:	687b      	ldr	r3, [r7, #4]
 8100c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c78:	4313      	orrs	r3, r2
         );
}
 8100c7a:	4618      	mov	r0, r3
 8100c7c:	3724      	adds	r7, #36	; 0x24
 8100c7e:	46bd      	mov	sp, r7
 8100c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c84:	4770      	bx	lr
	...

08100c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100c88:	b580      	push	{r7, lr}
 8100c8a:	b082      	sub	sp, #8
 8100c8c:	af00      	add	r7, sp, #0
 8100c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100c90:	687b      	ldr	r3, [r7, #4]
 8100c92:	3b01      	subs	r3, #1
 8100c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100c98:	d301      	bcc.n	8100c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100c9a:	2301      	movs	r3, #1
 8100c9c:	e00f      	b.n	8100cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100c9e:	4a0a      	ldr	r2, [pc, #40]	; (8100cc8 <SysTick_Config+0x40>)
 8100ca0:	687b      	ldr	r3, [r7, #4]
 8100ca2:	3b01      	subs	r3, #1
 8100ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100ca6:	210f      	movs	r1, #15
 8100ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8100cac:	f7ff ff8e 	bl	8100bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100cb0:	4b05      	ldr	r3, [pc, #20]	; (8100cc8 <SysTick_Config+0x40>)
 8100cb2:	2200      	movs	r2, #0
 8100cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100cb6:	4b04      	ldr	r3, [pc, #16]	; (8100cc8 <SysTick_Config+0x40>)
 8100cb8:	2207      	movs	r2, #7
 8100cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100cbc:	2300      	movs	r3, #0
}
 8100cbe:	4618      	mov	r0, r3
 8100cc0:	3708      	adds	r7, #8
 8100cc2:	46bd      	mov	sp, r7
 8100cc4:	bd80      	pop	{r7, pc}
 8100cc6:	bf00      	nop
 8100cc8:	e000e010 	.word	0xe000e010

08100ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100ccc:	b580      	push	{r7, lr}
 8100cce:	b082      	sub	sp, #8
 8100cd0:	af00      	add	r7, sp, #0
 8100cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100cd4:	6878      	ldr	r0, [r7, #4]
 8100cd6:	f7ff ff47 	bl	8100b68 <__NVIC_SetPriorityGrouping>
}
 8100cda:	bf00      	nop
 8100cdc:	3708      	adds	r7, #8
 8100cde:	46bd      	mov	sp, r7
 8100ce0:	bd80      	pop	{r7, pc}

08100ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100ce2:	b580      	push	{r7, lr}
 8100ce4:	b086      	sub	sp, #24
 8100ce6:	af00      	add	r7, sp, #0
 8100ce8:	4603      	mov	r3, r0
 8100cea:	60b9      	str	r1, [r7, #8]
 8100cec:	607a      	str	r2, [r7, #4]
 8100cee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100cf0:	f7ff ff5e 	bl	8100bb0 <__NVIC_GetPriorityGrouping>
 8100cf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100cf6:	687a      	ldr	r2, [r7, #4]
 8100cf8:	68b9      	ldr	r1, [r7, #8]
 8100cfa:	6978      	ldr	r0, [r7, #20]
 8100cfc:	f7ff ff90 	bl	8100c20 <NVIC_EncodePriority>
 8100d00:	4602      	mov	r2, r0
 8100d02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100d06:	4611      	mov	r1, r2
 8100d08:	4618      	mov	r0, r3
 8100d0a:	f7ff ff5f 	bl	8100bcc <__NVIC_SetPriority>
}
 8100d0e:	bf00      	nop
 8100d10:	3718      	adds	r7, #24
 8100d12:	46bd      	mov	sp, r7
 8100d14:	bd80      	pop	{r7, pc}

08100d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100d16:	b580      	push	{r7, lr}
 8100d18:	b082      	sub	sp, #8
 8100d1a:	af00      	add	r7, sp, #0
 8100d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100d1e:	6878      	ldr	r0, [r7, #4]
 8100d20:	f7ff ffb2 	bl	8100c88 <SysTick_Config>
 8100d24:	4603      	mov	r3, r0
}
 8100d26:	4618      	mov	r0, r3
 8100d28:	3708      	adds	r7, #8
 8100d2a:	46bd      	mov	sp, r7
 8100d2c:	bd80      	pop	{r7, pc}
	...

08100d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100d30:	b480      	push	{r7}
 8100d32:	b089      	sub	sp, #36	; 0x24
 8100d34:	af00      	add	r7, sp, #0
 8100d36:	6078      	str	r0, [r7, #4]
 8100d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100d3a:	2300      	movs	r3, #0
 8100d3c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100d3e:	4b89      	ldr	r3, [pc, #548]	; (8100f64 <HAL_GPIO_Init+0x234>)
 8100d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100d42:	e194      	b.n	810106e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100d44:	683b      	ldr	r3, [r7, #0]
 8100d46:	681a      	ldr	r2, [r3, #0]
 8100d48:	2101      	movs	r1, #1
 8100d4a:	69fb      	ldr	r3, [r7, #28]
 8100d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8100d50:	4013      	ands	r3, r2
 8100d52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100d54:	693b      	ldr	r3, [r7, #16]
 8100d56:	2b00      	cmp	r3, #0
 8100d58:	f000 8186 	beq.w	8101068 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100d5c:	683b      	ldr	r3, [r7, #0]
 8100d5e:	685b      	ldr	r3, [r3, #4]
 8100d60:	f003 0303 	and.w	r3, r3, #3
 8100d64:	2b01      	cmp	r3, #1
 8100d66:	d005      	beq.n	8100d74 <HAL_GPIO_Init+0x44>
 8100d68:	683b      	ldr	r3, [r7, #0]
 8100d6a:	685b      	ldr	r3, [r3, #4]
 8100d6c:	f003 0303 	and.w	r3, r3, #3
 8100d70:	2b02      	cmp	r3, #2
 8100d72:	d130      	bne.n	8100dd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100d74:	687b      	ldr	r3, [r7, #4]
 8100d76:	689b      	ldr	r3, [r3, #8]
 8100d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100d7a:	69fb      	ldr	r3, [r7, #28]
 8100d7c:	005b      	lsls	r3, r3, #1
 8100d7e:	2203      	movs	r2, #3
 8100d80:	fa02 f303 	lsl.w	r3, r2, r3
 8100d84:	43db      	mvns	r3, r3
 8100d86:	69ba      	ldr	r2, [r7, #24]
 8100d88:	4013      	ands	r3, r2
 8100d8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100d8c:	683b      	ldr	r3, [r7, #0]
 8100d8e:	68da      	ldr	r2, [r3, #12]
 8100d90:	69fb      	ldr	r3, [r7, #28]
 8100d92:	005b      	lsls	r3, r3, #1
 8100d94:	fa02 f303 	lsl.w	r3, r2, r3
 8100d98:	69ba      	ldr	r2, [r7, #24]
 8100d9a:	4313      	orrs	r3, r2
 8100d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100d9e:	687b      	ldr	r3, [r7, #4]
 8100da0:	69ba      	ldr	r2, [r7, #24]
 8100da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100da4:	687b      	ldr	r3, [r7, #4]
 8100da6:	685b      	ldr	r3, [r3, #4]
 8100da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100daa:	2201      	movs	r2, #1
 8100dac:	69fb      	ldr	r3, [r7, #28]
 8100dae:	fa02 f303 	lsl.w	r3, r2, r3
 8100db2:	43db      	mvns	r3, r3
 8100db4:	69ba      	ldr	r2, [r7, #24]
 8100db6:	4013      	ands	r3, r2
 8100db8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100dba:	683b      	ldr	r3, [r7, #0]
 8100dbc:	685b      	ldr	r3, [r3, #4]
 8100dbe:	091b      	lsrs	r3, r3, #4
 8100dc0:	f003 0201 	and.w	r2, r3, #1
 8100dc4:	69fb      	ldr	r3, [r7, #28]
 8100dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8100dca:	69ba      	ldr	r2, [r7, #24]
 8100dcc:	4313      	orrs	r3, r2
 8100dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100dd0:	687b      	ldr	r3, [r7, #4]
 8100dd2:	69ba      	ldr	r2, [r7, #24]
 8100dd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100dd6:	683b      	ldr	r3, [r7, #0]
 8100dd8:	685b      	ldr	r3, [r3, #4]
 8100dda:	f003 0303 	and.w	r3, r3, #3
 8100dde:	2b03      	cmp	r3, #3
 8100de0:	d017      	beq.n	8100e12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100de2:	687b      	ldr	r3, [r7, #4]
 8100de4:	68db      	ldr	r3, [r3, #12]
 8100de6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100de8:	69fb      	ldr	r3, [r7, #28]
 8100dea:	005b      	lsls	r3, r3, #1
 8100dec:	2203      	movs	r2, #3
 8100dee:	fa02 f303 	lsl.w	r3, r2, r3
 8100df2:	43db      	mvns	r3, r3
 8100df4:	69ba      	ldr	r2, [r7, #24]
 8100df6:	4013      	ands	r3, r2
 8100df8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100dfa:	683b      	ldr	r3, [r7, #0]
 8100dfc:	689a      	ldr	r2, [r3, #8]
 8100dfe:	69fb      	ldr	r3, [r7, #28]
 8100e00:	005b      	lsls	r3, r3, #1
 8100e02:	fa02 f303 	lsl.w	r3, r2, r3
 8100e06:	69ba      	ldr	r2, [r7, #24]
 8100e08:	4313      	orrs	r3, r2
 8100e0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100e0c:	687b      	ldr	r3, [r7, #4]
 8100e0e:	69ba      	ldr	r2, [r7, #24]
 8100e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100e12:	683b      	ldr	r3, [r7, #0]
 8100e14:	685b      	ldr	r3, [r3, #4]
 8100e16:	f003 0303 	and.w	r3, r3, #3
 8100e1a:	2b02      	cmp	r3, #2
 8100e1c:	d123      	bne.n	8100e66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100e1e:	69fb      	ldr	r3, [r7, #28]
 8100e20:	08da      	lsrs	r2, r3, #3
 8100e22:	687b      	ldr	r3, [r7, #4]
 8100e24:	3208      	adds	r2, #8
 8100e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100e2c:	69fb      	ldr	r3, [r7, #28]
 8100e2e:	f003 0307 	and.w	r3, r3, #7
 8100e32:	009b      	lsls	r3, r3, #2
 8100e34:	220f      	movs	r2, #15
 8100e36:	fa02 f303 	lsl.w	r3, r2, r3
 8100e3a:	43db      	mvns	r3, r3
 8100e3c:	69ba      	ldr	r2, [r7, #24]
 8100e3e:	4013      	ands	r3, r2
 8100e40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100e42:	683b      	ldr	r3, [r7, #0]
 8100e44:	691a      	ldr	r2, [r3, #16]
 8100e46:	69fb      	ldr	r3, [r7, #28]
 8100e48:	f003 0307 	and.w	r3, r3, #7
 8100e4c:	009b      	lsls	r3, r3, #2
 8100e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8100e52:	69ba      	ldr	r2, [r7, #24]
 8100e54:	4313      	orrs	r3, r2
 8100e56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100e58:	69fb      	ldr	r3, [r7, #28]
 8100e5a:	08da      	lsrs	r2, r3, #3
 8100e5c:	687b      	ldr	r3, [r7, #4]
 8100e5e:	3208      	adds	r2, #8
 8100e60:	69b9      	ldr	r1, [r7, #24]
 8100e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100e66:	687b      	ldr	r3, [r7, #4]
 8100e68:	681b      	ldr	r3, [r3, #0]
 8100e6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100e6c:	69fb      	ldr	r3, [r7, #28]
 8100e6e:	005b      	lsls	r3, r3, #1
 8100e70:	2203      	movs	r2, #3
 8100e72:	fa02 f303 	lsl.w	r3, r2, r3
 8100e76:	43db      	mvns	r3, r3
 8100e78:	69ba      	ldr	r2, [r7, #24]
 8100e7a:	4013      	ands	r3, r2
 8100e7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100e7e:	683b      	ldr	r3, [r7, #0]
 8100e80:	685b      	ldr	r3, [r3, #4]
 8100e82:	f003 0203 	and.w	r2, r3, #3
 8100e86:	69fb      	ldr	r3, [r7, #28]
 8100e88:	005b      	lsls	r3, r3, #1
 8100e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8100e8e:	69ba      	ldr	r2, [r7, #24]
 8100e90:	4313      	orrs	r3, r2
 8100e92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100e94:	687b      	ldr	r3, [r7, #4]
 8100e96:	69ba      	ldr	r2, [r7, #24]
 8100e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100e9a:	683b      	ldr	r3, [r7, #0]
 8100e9c:	685b      	ldr	r3, [r3, #4]
 8100e9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100ea2:	2b00      	cmp	r3, #0
 8100ea4:	f000 80e0 	beq.w	8101068 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100ea8:	4b2f      	ldr	r3, [pc, #188]	; (8100f68 <HAL_GPIO_Init+0x238>)
 8100eaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100eae:	4a2e      	ldr	r2, [pc, #184]	; (8100f68 <HAL_GPIO_Init+0x238>)
 8100eb0:	f043 0302 	orr.w	r3, r3, #2
 8100eb4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100eb8:	4b2b      	ldr	r3, [pc, #172]	; (8100f68 <HAL_GPIO_Init+0x238>)
 8100eba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100ebe:	f003 0302 	and.w	r3, r3, #2
 8100ec2:	60fb      	str	r3, [r7, #12]
 8100ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100ec6:	4a29      	ldr	r2, [pc, #164]	; (8100f6c <HAL_GPIO_Init+0x23c>)
 8100ec8:	69fb      	ldr	r3, [r7, #28]
 8100eca:	089b      	lsrs	r3, r3, #2
 8100ecc:	3302      	adds	r3, #2
 8100ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100ed4:	69fb      	ldr	r3, [r7, #28]
 8100ed6:	f003 0303 	and.w	r3, r3, #3
 8100eda:	009b      	lsls	r3, r3, #2
 8100edc:	220f      	movs	r2, #15
 8100ede:	fa02 f303 	lsl.w	r3, r2, r3
 8100ee2:	43db      	mvns	r3, r3
 8100ee4:	69ba      	ldr	r2, [r7, #24]
 8100ee6:	4013      	ands	r3, r2
 8100ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100eea:	687b      	ldr	r3, [r7, #4]
 8100eec:	4a20      	ldr	r2, [pc, #128]	; (8100f70 <HAL_GPIO_Init+0x240>)
 8100eee:	4293      	cmp	r3, r2
 8100ef0:	d052      	beq.n	8100f98 <HAL_GPIO_Init+0x268>
 8100ef2:	687b      	ldr	r3, [r7, #4]
 8100ef4:	4a1f      	ldr	r2, [pc, #124]	; (8100f74 <HAL_GPIO_Init+0x244>)
 8100ef6:	4293      	cmp	r3, r2
 8100ef8:	d031      	beq.n	8100f5e <HAL_GPIO_Init+0x22e>
 8100efa:	687b      	ldr	r3, [r7, #4]
 8100efc:	4a1e      	ldr	r2, [pc, #120]	; (8100f78 <HAL_GPIO_Init+0x248>)
 8100efe:	4293      	cmp	r3, r2
 8100f00:	d02b      	beq.n	8100f5a <HAL_GPIO_Init+0x22a>
 8100f02:	687b      	ldr	r3, [r7, #4]
 8100f04:	4a1d      	ldr	r2, [pc, #116]	; (8100f7c <HAL_GPIO_Init+0x24c>)
 8100f06:	4293      	cmp	r3, r2
 8100f08:	d025      	beq.n	8100f56 <HAL_GPIO_Init+0x226>
 8100f0a:	687b      	ldr	r3, [r7, #4]
 8100f0c:	4a1c      	ldr	r2, [pc, #112]	; (8100f80 <HAL_GPIO_Init+0x250>)
 8100f0e:	4293      	cmp	r3, r2
 8100f10:	d01f      	beq.n	8100f52 <HAL_GPIO_Init+0x222>
 8100f12:	687b      	ldr	r3, [r7, #4]
 8100f14:	4a1b      	ldr	r2, [pc, #108]	; (8100f84 <HAL_GPIO_Init+0x254>)
 8100f16:	4293      	cmp	r3, r2
 8100f18:	d019      	beq.n	8100f4e <HAL_GPIO_Init+0x21e>
 8100f1a:	687b      	ldr	r3, [r7, #4]
 8100f1c:	4a1a      	ldr	r2, [pc, #104]	; (8100f88 <HAL_GPIO_Init+0x258>)
 8100f1e:	4293      	cmp	r3, r2
 8100f20:	d013      	beq.n	8100f4a <HAL_GPIO_Init+0x21a>
 8100f22:	687b      	ldr	r3, [r7, #4]
 8100f24:	4a19      	ldr	r2, [pc, #100]	; (8100f8c <HAL_GPIO_Init+0x25c>)
 8100f26:	4293      	cmp	r3, r2
 8100f28:	d00d      	beq.n	8100f46 <HAL_GPIO_Init+0x216>
 8100f2a:	687b      	ldr	r3, [r7, #4]
 8100f2c:	4a18      	ldr	r2, [pc, #96]	; (8100f90 <HAL_GPIO_Init+0x260>)
 8100f2e:	4293      	cmp	r3, r2
 8100f30:	d007      	beq.n	8100f42 <HAL_GPIO_Init+0x212>
 8100f32:	687b      	ldr	r3, [r7, #4]
 8100f34:	4a17      	ldr	r2, [pc, #92]	; (8100f94 <HAL_GPIO_Init+0x264>)
 8100f36:	4293      	cmp	r3, r2
 8100f38:	d101      	bne.n	8100f3e <HAL_GPIO_Init+0x20e>
 8100f3a:	2309      	movs	r3, #9
 8100f3c:	e02d      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f3e:	230a      	movs	r3, #10
 8100f40:	e02b      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f42:	2308      	movs	r3, #8
 8100f44:	e029      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f46:	2307      	movs	r3, #7
 8100f48:	e027      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f4a:	2306      	movs	r3, #6
 8100f4c:	e025      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f4e:	2305      	movs	r3, #5
 8100f50:	e023      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f52:	2304      	movs	r3, #4
 8100f54:	e021      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f56:	2303      	movs	r3, #3
 8100f58:	e01f      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f5a:	2302      	movs	r3, #2
 8100f5c:	e01d      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f5e:	2301      	movs	r3, #1
 8100f60:	e01b      	b.n	8100f9a <HAL_GPIO_Init+0x26a>
 8100f62:	bf00      	nop
 8100f64:	580000c0 	.word	0x580000c0
 8100f68:	58024400 	.word	0x58024400
 8100f6c:	58000400 	.word	0x58000400
 8100f70:	58020000 	.word	0x58020000
 8100f74:	58020400 	.word	0x58020400
 8100f78:	58020800 	.word	0x58020800
 8100f7c:	58020c00 	.word	0x58020c00
 8100f80:	58021000 	.word	0x58021000
 8100f84:	58021400 	.word	0x58021400
 8100f88:	58021800 	.word	0x58021800
 8100f8c:	58021c00 	.word	0x58021c00
 8100f90:	58022000 	.word	0x58022000
 8100f94:	58022400 	.word	0x58022400
 8100f98:	2300      	movs	r3, #0
 8100f9a:	69fa      	ldr	r2, [r7, #28]
 8100f9c:	f002 0203 	and.w	r2, r2, #3
 8100fa0:	0092      	lsls	r2, r2, #2
 8100fa2:	4093      	lsls	r3, r2
 8100fa4:	69ba      	ldr	r2, [r7, #24]
 8100fa6:	4313      	orrs	r3, r2
 8100fa8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100faa:	4938      	ldr	r1, [pc, #224]	; (810108c <HAL_GPIO_Init+0x35c>)
 8100fac:	69fb      	ldr	r3, [r7, #28]
 8100fae:	089b      	lsrs	r3, r3, #2
 8100fb0:	3302      	adds	r3, #2
 8100fb2:	69ba      	ldr	r2, [r7, #24]
 8100fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100fbc:	681b      	ldr	r3, [r3, #0]
 8100fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100fc0:	693b      	ldr	r3, [r7, #16]
 8100fc2:	43db      	mvns	r3, r3
 8100fc4:	69ba      	ldr	r2, [r7, #24]
 8100fc6:	4013      	ands	r3, r2
 8100fc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100fca:	683b      	ldr	r3, [r7, #0]
 8100fcc:	685b      	ldr	r3, [r3, #4]
 8100fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100fd2:	2b00      	cmp	r3, #0
 8100fd4:	d003      	beq.n	8100fde <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100fd6:	69ba      	ldr	r2, [r7, #24]
 8100fd8:	693b      	ldr	r3, [r7, #16]
 8100fda:	4313      	orrs	r3, r2
 8100fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100fe2:	69bb      	ldr	r3, [r7, #24]
 8100fe4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100fea:	685b      	ldr	r3, [r3, #4]
 8100fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100fee:	693b      	ldr	r3, [r7, #16]
 8100ff0:	43db      	mvns	r3, r3
 8100ff2:	69ba      	ldr	r2, [r7, #24]
 8100ff4:	4013      	ands	r3, r2
 8100ff6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100ff8:	683b      	ldr	r3, [r7, #0]
 8100ffa:	685b      	ldr	r3, [r3, #4]
 8100ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101000:	2b00      	cmp	r3, #0
 8101002:	d003      	beq.n	810100c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101004:	69ba      	ldr	r2, [r7, #24]
 8101006:	693b      	ldr	r3, [r7, #16]
 8101008:	4313      	orrs	r3, r2
 810100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810100c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101010:	69bb      	ldr	r3, [r7, #24]
 8101012:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101014:	697b      	ldr	r3, [r7, #20]
 8101016:	685b      	ldr	r3, [r3, #4]
 8101018:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810101a:	693b      	ldr	r3, [r7, #16]
 810101c:	43db      	mvns	r3, r3
 810101e:	69ba      	ldr	r2, [r7, #24]
 8101020:	4013      	ands	r3, r2
 8101022:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101024:	683b      	ldr	r3, [r7, #0]
 8101026:	685b      	ldr	r3, [r3, #4]
 8101028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810102c:	2b00      	cmp	r3, #0
 810102e:	d003      	beq.n	8101038 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101030:	69ba      	ldr	r2, [r7, #24]
 8101032:	693b      	ldr	r3, [r7, #16]
 8101034:	4313      	orrs	r3, r2
 8101036:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101038:	697b      	ldr	r3, [r7, #20]
 810103a:	69ba      	ldr	r2, [r7, #24]
 810103c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810103e:	697b      	ldr	r3, [r7, #20]
 8101040:	681b      	ldr	r3, [r3, #0]
 8101042:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101044:	693b      	ldr	r3, [r7, #16]
 8101046:	43db      	mvns	r3, r3
 8101048:	69ba      	ldr	r2, [r7, #24]
 810104a:	4013      	ands	r3, r2
 810104c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810104e:	683b      	ldr	r3, [r7, #0]
 8101050:	685b      	ldr	r3, [r3, #4]
 8101052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101056:	2b00      	cmp	r3, #0
 8101058:	d003      	beq.n	8101062 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810105a:	69ba      	ldr	r2, [r7, #24]
 810105c:	693b      	ldr	r3, [r7, #16]
 810105e:	4313      	orrs	r3, r2
 8101060:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101062:	697b      	ldr	r3, [r7, #20]
 8101064:	69ba      	ldr	r2, [r7, #24]
 8101066:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101068:	69fb      	ldr	r3, [r7, #28]
 810106a:	3301      	adds	r3, #1
 810106c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810106e:	683b      	ldr	r3, [r7, #0]
 8101070:	681a      	ldr	r2, [r3, #0]
 8101072:	69fb      	ldr	r3, [r7, #28]
 8101074:	fa22 f303 	lsr.w	r3, r2, r3
 8101078:	2b00      	cmp	r3, #0
 810107a:	f47f ae63 	bne.w	8100d44 <HAL_GPIO_Init+0x14>
  }
}
 810107e:	bf00      	nop
 8101080:	bf00      	nop
 8101082:	3724      	adds	r7, #36	; 0x24
 8101084:	46bd      	mov	sp, r7
 8101086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810108a:	4770      	bx	lr
 810108c:	58000400 	.word	0x58000400

08101090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8101090:	b480      	push	{r7}
 8101092:	b085      	sub	sp, #20
 8101094:	af00      	add	r7, sp, #0
 8101096:	6078      	str	r0, [r7, #4]
 8101098:	460b      	mov	r3, r1
 810109a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 810109c:	687b      	ldr	r3, [r7, #4]
 810109e:	691a      	ldr	r2, [r3, #16]
 81010a0:	887b      	ldrh	r3, [r7, #2]
 81010a2:	4013      	ands	r3, r2
 81010a4:	2b00      	cmp	r3, #0
 81010a6:	d002      	beq.n	81010ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 81010a8:	2301      	movs	r3, #1
 81010aa:	73fb      	strb	r3, [r7, #15]
 81010ac:	e001      	b.n	81010b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 81010ae:	2300      	movs	r3, #0
 81010b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 81010b2:	7bfb      	ldrb	r3, [r7, #15]
}
 81010b4:	4618      	mov	r0, r3
 81010b6:	3714      	adds	r7, #20
 81010b8:	46bd      	mov	sp, r7
 81010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010be:	4770      	bx	lr

081010c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81010c0:	b480      	push	{r7}
 81010c2:	b083      	sub	sp, #12
 81010c4:	af00      	add	r7, sp, #0
 81010c6:	6078      	str	r0, [r7, #4]
 81010c8:	460b      	mov	r3, r1
 81010ca:	807b      	strh	r3, [r7, #2]
 81010cc:	4613      	mov	r3, r2
 81010ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81010d0:	787b      	ldrb	r3, [r7, #1]
 81010d2:	2b00      	cmp	r3, #0
 81010d4:	d003      	beq.n	81010de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81010d6:	887a      	ldrh	r2, [r7, #2]
 81010d8:	687b      	ldr	r3, [r7, #4]
 81010da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81010dc:	e003      	b.n	81010e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81010de:	887b      	ldrh	r3, [r7, #2]
 81010e0:	041a      	lsls	r2, r3, #16
 81010e2:	687b      	ldr	r3, [r7, #4]
 81010e4:	619a      	str	r2, [r3, #24]
}
 81010e6:	bf00      	nop
 81010e8:	370c      	adds	r7, #12
 81010ea:	46bd      	mov	sp, r7
 81010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010f0:	4770      	bx	lr

081010f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 81010f2:	b480      	push	{r7}
 81010f4:	b085      	sub	sp, #20
 81010f6:	af00      	add	r7, sp, #0
 81010f8:	6078      	str	r0, [r7, #4]
 81010fa:	460b      	mov	r3, r1
 81010fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 81010fe:	687b      	ldr	r3, [r7, #4]
 8101100:	695b      	ldr	r3, [r3, #20]
 8101102:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8101104:	887a      	ldrh	r2, [r7, #2]
 8101106:	68fb      	ldr	r3, [r7, #12]
 8101108:	4013      	ands	r3, r2
 810110a:	041a      	lsls	r2, r3, #16
 810110c:	68fb      	ldr	r3, [r7, #12]
 810110e:	43d9      	mvns	r1, r3
 8101110:	887b      	ldrh	r3, [r7, #2]
 8101112:	400b      	ands	r3, r1
 8101114:	431a      	orrs	r2, r3
 8101116:	687b      	ldr	r3, [r7, #4]
 8101118:	619a      	str	r2, [r3, #24]
}
 810111a:	bf00      	nop
 810111c:	3714      	adds	r7, #20
 810111e:	46bd      	mov	sp, r7
 8101120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101124:	4770      	bx	lr
	...

08101128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101128:	b480      	push	{r7}
 810112a:	b089      	sub	sp, #36	; 0x24
 810112c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810112e:	4bb3      	ldr	r3, [pc, #716]	; (81013fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101130:	691b      	ldr	r3, [r3, #16]
 8101132:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8101136:	2b18      	cmp	r3, #24
 8101138:	f200 8155 	bhi.w	81013e6 <HAL_RCC_GetSysClockFreq+0x2be>
 810113c:	a201      	add	r2, pc, #4	; (adr r2, 8101144 <HAL_RCC_GetSysClockFreq+0x1c>)
 810113e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101142:	bf00      	nop
 8101144:	081011a9 	.word	0x081011a9
 8101148:	081013e7 	.word	0x081013e7
 810114c:	081013e7 	.word	0x081013e7
 8101150:	081013e7 	.word	0x081013e7
 8101154:	081013e7 	.word	0x081013e7
 8101158:	081013e7 	.word	0x081013e7
 810115c:	081013e7 	.word	0x081013e7
 8101160:	081013e7 	.word	0x081013e7
 8101164:	081011cf 	.word	0x081011cf
 8101168:	081013e7 	.word	0x081013e7
 810116c:	081013e7 	.word	0x081013e7
 8101170:	081013e7 	.word	0x081013e7
 8101174:	081013e7 	.word	0x081013e7
 8101178:	081013e7 	.word	0x081013e7
 810117c:	081013e7 	.word	0x081013e7
 8101180:	081013e7 	.word	0x081013e7
 8101184:	081011d5 	.word	0x081011d5
 8101188:	081013e7 	.word	0x081013e7
 810118c:	081013e7 	.word	0x081013e7
 8101190:	081013e7 	.word	0x081013e7
 8101194:	081013e7 	.word	0x081013e7
 8101198:	081013e7 	.word	0x081013e7
 810119c:	081013e7 	.word	0x081013e7
 81011a0:	081013e7 	.word	0x081013e7
 81011a4:	081011db 	.word	0x081011db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81011a8:	4b94      	ldr	r3, [pc, #592]	; (81013fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011aa:	681b      	ldr	r3, [r3, #0]
 81011ac:	f003 0320 	and.w	r3, r3, #32
 81011b0:	2b00      	cmp	r3, #0
 81011b2:	d009      	beq.n	81011c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81011b4:	4b91      	ldr	r3, [pc, #580]	; (81013fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011b6:	681b      	ldr	r3, [r3, #0]
 81011b8:	08db      	lsrs	r3, r3, #3
 81011ba:	f003 0303 	and.w	r3, r3, #3
 81011be:	4a90      	ldr	r2, [pc, #576]	; (8101400 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81011c0:	fa22 f303 	lsr.w	r3, r2, r3
 81011c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81011c6:	e111      	b.n	81013ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81011c8:	4b8d      	ldr	r3, [pc, #564]	; (8101400 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81011ca:	61bb      	str	r3, [r7, #24]
      break;
 81011cc:	e10e      	b.n	81013ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81011ce:	4b8d      	ldr	r3, [pc, #564]	; (8101404 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81011d0:	61bb      	str	r3, [r7, #24]
      break;
 81011d2:	e10b      	b.n	81013ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81011d4:	4b8c      	ldr	r3, [pc, #560]	; (8101408 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81011d6:	61bb      	str	r3, [r7, #24]
      break;
 81011d8:	e108      	b.n	81013ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81011da:	4b88      	ldr	r3, [pc, #544]	; (81013fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81011de:	f003 0303 	and.w	r3, r3, #3
 81011e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81011e4:	4b85      	ldr	r3, [pc, #532]	; (81013fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81011e8:	091b      	lsrs	r3, r3, #4
 81011ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81011ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81011f0:	4b82      	ldr	r3, [pc, #520]	; (81013fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81011f4:	f003 0301 	and.w	r3, r3, #1
 81011f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81011fa:	4b80      	ldr	r3, [pc, #512]	; (81013fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81011fe:	08db      	lsrs	r3, r3, #3
 8101200:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101204:	68fa      	ldr	r2, [r7, #12]
 8101206:	fb02 f303 	mul.w	r3, r2, r3
 810120a:	ee07 3a90 	vmov	s15, r3
 810120e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101212:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8101216:	693b      	ldr	r3, [r7, #16]
 8101218:	2b00      	cmp	r3, #0
 810121a:	f000 80e1 	beq.w	81013e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 810121e:	697b      	ldr	r3, [r7, #20]
 8101220:	2b02      	cmp	r3, #2
 8101222:	f000 8083 	beq.w	810132c <HAL_RCC_GetSysClockFreq+0x204>
 8101226:	697b      	ldr	r3, [r7, #20]
 8101228:	2b02      	cmp	r3, #2
 810122a:	f200 80a1 	bhi.w	8101370 <HAL_RCC_GetSysClockFreq+0x248>
 810122e:	697b      	ldr	r3, [r7, #20]
 8101230:	2b00      	cmp	r3, #0
 8101232:	d003      	beq.n	810123c <HAL_RCC_GetSysClockFreq+0x114>
 8101234:	697b      	ldr	r3, [r7, #20]
 8101236:	2b01      	cmp	r3, #1
 8101238:	d056      	beq.n	81012e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 810123a:	e099      	b.n	8101370 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810123c:	4b6f      	ldr	r3, [pc, #444]	; (81013fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810123e:	681b      	ldr	r3, [r3, #0]
 8101240:	f003 0320 	and.w	r3, r3, #32
 8101244:	2b00      	cmp	r3, #0
 8101246:	d02d      	beq.n	81012a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101248:	4b6c      	ldr	r3, [pc, #432]	; (81013fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810124a:	681b      	ldr	r3, [r3, #0]
 810124c:	08db      	lsrs	r3, r3, #3
 810124e:	f003 0303 	and.w	r3, r3, #3
 8101252:	4a6b      	ldr	r2, [pc, #428]	; (8101400 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101254:	fa22 f303 	lsr.w	r3, r2, r3
 8101258:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810125a:	687b      	ldr	r3, [r7, #4]
 810125c:	ee07 3a90 	vmov	s15, r3
 8101260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101264:	693b      	ldr	r3, [r7, #16]
 8101266:	ee07 3a90 	vmov	s15, r3
 810126a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810126e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101272:	4b62      	ldr	r3, [pc, #392]	; (81013fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810127a:	ee07 3a90 	vmov	s15, r3
 810127e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101282:	ed97 6a02 	vldr	s12, [r7, #8]
 8101286:	eddf 5a61 	vldr	s11, [pc, #388]	; 810140c <HAL_RCC_GetSysClockFreq+0x2e4>
 810128a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810128e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810129a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810129e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81012a2:	e087      	b.n	81013b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81012a4:	693b      	ldr	r3, [r7, #16]
 81012a6:	ee07 3a90 	vmov	s15, r3
 81012aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81012ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8101410 <HAL_RCC_GetSysClockFreq+0x2e8>
 81012b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81012b6:	4b51      	ldr	r3, [pc, #324]	; (81013fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81012ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81012be:	ee07 3a90 	vmov	s15, r3
 81012c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81012c6:	ed97 6a02 	vldr	s12, [r7, #8]
 81012ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 810140c <HAL_RCC_GetSysClockFreq+0x2e4>
 81012ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81012d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81012d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81012da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81012de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81012e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81012e6:	e065      	b.n	81013b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81012e8:	693b      	ldr	r3, [r7, #16]
 81012ea:	ee07 3a90 	vmov	s15, r3
 81012ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81012f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8101414 <HAL_RCC_GetSysClockFreq+0x2ec>
 81012f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81012fa:	4b40      	ldr	r3, [pc, #256]	; (81013fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81012fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101302:	ee07 3a90 	vmov	s15, r3
 8101306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810130a:	ed97 6a02 	vldr	s12, [r7, #8]
 810130e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810140c <HAL_RCC_GetSysClockFreq+0x2e4>
 8101312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810131a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810131e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101326:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810132a:	e043      	b.n	81013b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810132c:	693b      	ldr	r3, [r7, #16]
 810132e:	ee07 3a90 	vmov	s15, r3
 8101332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101336:	eddf 6a38 	vldr	s13, [pc, #224]	; 8101418 <HAL_RCC_GetSysClockFreq+0x2f0>
 810133a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810133e:	4b2f      	ldr	r3, [pc, #188]	; (81013fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101346:	ee07 3a90 	vmov	s15, r3
 810134a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810134e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101352:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810140c <HAL_RCC_GetSysClockFreq+0x2e4>
 8101356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810135a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810135e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101366:	ee67 7a27 	vmul.f32	s15, s14, s15
 810136a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810136e:	e021      	b.n	81013b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101370:	693b      	ldr	r3, [r7, #16]
 8101372:	ee07 3a90 	vmov	s15, r3
 8101376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810137a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8101414 <HAL_RCC_GetSysClockFreq+0x2ec>
 810137e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101382:	4b1e      	ldr	r3, [pc, #120]	; (81013fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810138a:	ee07 3a90 	vmov	s15, r3
 810138e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101392:	ed97 6a02 	vldr	s12, [r7, #8]
 8101396:	eddf 5a1d 	vldr	s11, [pc, #116]	; 810140c <HAL_RCC_GetSysClockFreq+0x2e4>
 810139a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810139e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81013a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81013a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81013aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81013b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81013b4:	4b11      	ldr	r3, [pc, #68]	; (81013fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81013b8:	0a5b      	lsrs	r3, r3, #9
 81013ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81013be:	3301      	adds	r3, #1
 81013c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81013c2:	683b      	ldr	r3, [r7, #0]
 81013c4:	ee07 3a90 	vmov	s15, r3
 81013c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81013cc:	edd7 6a07 	vldr	s13, [r7, #28]
 81013d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81013d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81013d8:	ee17 3a90 	vmov	r3, s15
 81013dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81013de:	e005      	b.n	81013ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81013e0:	2300      	movs	r3, #0
 81013e2:	61bb      	str	r3, [r7, #24]
      break;
 81013e4:	e002      	b.n	81013ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81013e6:	4b07      	ldr	r3, [pc, #28]	; (8101404 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81013e8:	61bb      	str	r3, [r7, #24]
      break;
 81013ea:	bf00      	nop
  }

  return sysclockfreq;
 81013ec:	69bb      	ldr	r3, [r7, #24]
}
 81013ee:	4618      	mov	r0, r3
 81013f0:	3724      	adds	r7, #36	; 0x24
 81013f2:	46bd      	mov	sp, r7
 81013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013f8:	4770      	bx	lr
 81013fa:	bf00      	nop
 81013fc:	58024400 	.word	0x58024400
 8101400:	03d09000 	.word	0x03d09000
 8101404:	003d0900 	.word	0x003d0900
 8101408:	017d7840 	.word	0x017d7840
 810140c:	46000000 	.word	0x46000000
 8101410:	4c742400 	.word	0x4c742400
 8101414:	4a742400 	.word	0x4a742400
 8101418:	4bbebc20 	.word	0x4bbebc20

0810141c <__libc_init_array>:
 810141c:	b570      	push	{r4, r5, r6, lr}
 810141e:	4d0d      	ldr	r5, [pc, #52]	; (8101454 <__libc_init_array+0x38>)
 8101420:	4c0d      	ldr	r4, [pc, #52]	; (8101458 <__libc_init_array+0x3c>)
 8101422:	1b64      	subs	r4, r4, r5
 8101424:	10a4      	asrs	r4, r4, #2
 8101426:	2600      	movs	r6, #0
 8101428:	42a6      	cmp	r6, r4
 810142a:	d109      	bne.n	8101440 <__libc_init_array+0x24>
 810142c:	4d0b      	ldr	r5, [pc, #44]	; (810145c <__libc_init_array+0x40>)
 810142e:	4c0c      	ldr	r4, [pc, #48]	; (8101460 <__libc_init_array+0x44>)
 8101430:	f000 f826 	bl	8101480 <_init>
 8101434:	1b64      	subs	r4, r4, r5
 8101436:	10a4      	asrs	r4, r4, #2
 8101438:	2600      	movs	r6, #0
 810143a:	42a6      	cmp	r6, r4
 810143c:	d105      	bne.n	810144a <__libc_init_array+0x2e>
 810143e:	bd70      	pop	{r4, r5, r6, pc}
 8101440:	f855 3b04 	ldr.w	r3, [r5], #4
 8101444:	4798      	blx	r3
 8101446:	3601      	adds	r6, #1
 8101448:	e7ee      	b.n	8101428 <__libc_init_array+0xc>
 810144a:	f855 3b04 	ldr.w	r3, [r5], #4
 810144e:	4798      	blx	r3
 8101450:	3601      	adds	r6, #1
 8101452:	e7f2      	b.n	810143a <__libc_init_array+0x1e>
 8101454:	081014d0 	.word	0x081014d0
 8101458:	081014d0 	.word	0x081014d0
 810145c:	081014d0 	.word	0x081014d0
 8101460:	081014d4 	.word	0x081014d4

08101464 <memcpy>:
 8101464:	440a      	add	r2, r1
 8101466:	4291      	cmp	r1, r2
 8101468:	f100 33ff 	add.w	r3, r0, #4294967295
 810146c:	d100      	bne.n	8101470 <memcpy+0xc>
 810146e:	4770      	bx	lr
 8101470:	b510      	push	{r4, lr}
 8101472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8101476:	f803 4f01 	strb.w	r4, [r3, #1]!
 810147a:	4291      	cmp	r1, r2
 810147c:	d1f9      	bne.n	8101472 <memcpy+0xe>
 810147e:	bd10      	pop	{r4, pc}

08101480 <_init>:
 8101480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101482:	bf00      	nop
 8101484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8101486:	bc08      	pop	{r3}
 8101488:	469e      	mov	lr, r3
 810148a:	4770      	bx	lr

0810148c <_fini>:
 810148c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810148e:	bf00      	nop
 8101490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8101492:	bc08      	pop	{r3}
 8101494:	469e      	mov	lr, r3
 8101496:	4770      	bx	lr
