
Core_to_Core_shareMemo_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000644  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  081008dc  081008dc  000108dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08100904  08100904  00010904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08100908  08100908  00010908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  10000000  0810090c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  10000008  08100914  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10000024  08100914  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 10 .debug_info   00000925  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000390  00000000  00000000  000209a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000000e8  00000000  00000000  00020d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000000a9  00000000  00000000  00020e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00001c8c  00000000  00000000  00020ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000011ff  00000000  00000000  00022b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00007d23  00000000  00000000  00023d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00000320  00000000  00000000  0002ba70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000052  00000000  00000000  0002bd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000008 	.word	0x10000008
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081008c4 	.word	0x081008c4

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	1000000c 	.word	0x1000000c
 81002d4:	081008c4 	.word	0x081008c4

081002d8 <main>:
volatile ringbuff_t* rb_cm7_to_cm4 = (void *)BUFF_CM7_TO_CM4_ADDR;
static void led_init(void);


int main(void)
{
 81002d8:	b580      	push	{r7, lr}
 81002da:	b084      	sub	sp, #16
 81002dc:	af00      	add	r7, sp, #0
	 RCC_AHB4ENR |= GPIOBEN;
 81002de:	4b3d      	ldr	r3, [pc, #244]	; (81003d4 <main+0xfc>)
 81002e0:	681b      	ldr	r3, [r3, #0]
 81002e2:	4a3c      	ldr	r2, [pc, #240]	; (81003d4 <main+0xfc>)
 81002e4:	f043 0302 	orr.w	r3, r3, #2
 81002e8:	6013      	str	r3, [r2, #0]

	 GPIOB_MODER |= (1U<<0);
 81002ea:	4b3b      	ldr	r3, [pc, #236]	; (81003d8 <main+0x100>)
 81002ec:	681b      	ldr	r3, [r3, #0]
 81002ee:	4a3a      	ldr	r2, [pc, #232]	; (81003d8 <main+0x100>)
 81002f0:	f043 0301 	orr.w	r3, r3, #1
 81002f4:	6013      	str	r3, [r2, #0]
	 GPIOB_MODER &= ~(1U<<1);
 81002f6:	4b38      	ldr	r3, [pc, #224]	; (81003d8 <main+0x100>)
 81002f8:	681b      	ldr	r3, [r3, #0]
 81002fa:	4a37      	ldr	r2, [pc, #220]	; (81003d8 <main+0x100>)
 81002fc:	f023 0302 	bic.w	r3, r3, #2
 8100300:	6013      	str	r3, [r2, #0]

	 GPIOB_MODER |= (1U<<28);
 8100302:	4b35      	ldr	r3, [pc, #212]	; (81003d8 <main+0x100>)
 8100304:	681b      	ldr	r3, [r3, #0]
 8100306:	4a34      	ldr	r2, [pc, #208]	; (81003d8 <main+0x100>)
 8100308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810030c:	6013      	str	r3, [r2, #0]
	 GPIOB_MODER &= ~(1U<<29);
 810030e:	4b32      	ldr	r3, [pc, #200]	; (81003d8 <main+0x100>)
 8100310:	681b      	ldr	r3, [r3, #0]
 8100312:	4a31      	ldr	r2, [pc, #196]	; (81003d8 <main+0x100>)
 8100314:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8100318:	6013      	str	r3, [r2, #0]

    while (!ringbuff_is_ready(rb_cm4_to_cm7) || !ringbuff_is_ready(rb_cm7_to_cm4)) {}
 810031a:	bf00      	nop
 810031c:	4b2f      	ldr	r3, [pc, #188]	; (81003dc <main+0x104>)
 810031e:	681b      	ldr	r3, [r3, #0]
 8100320:	4618      	mov	r0, r3
 8100322:	f000 f87d 	bl	8100420 <ringbuff_is_ready>
 8100326:	4603      	mov	r3, r0
 8100328:	2b00      	cmp	r3, #0
 810032a:	d0f7      	beq.n	810031c <main+0x44>
 810032c:	4b2c      	ldr	r3, [pc, #176]	; (81003e0 <main+0x108>)
 810032e:	681b      	ldr	r3, [r3, #0]
 8100330:	4618      	mov	r0, r3
 8100332:	f000 f875 	bl	8100420 <ringbuff_is_ready>
 8100336:	4603      	mov	r3, r0
 8100338:	2b00      	cmp	r3, #0
 810033a:	d0ef      	beq.n	810031c <main+0x44>

    /* Write message to buffer */
    ringbuff_write(rb_cm4_to_cm7, "[CM4] Core ready\r\n", 18);
 810033c:	4b27      	ldr	r3, [pc, #156]	; (81003dc <main+0x104>)
 810033e:	681b      	ldr	r3, [r3, #0]
 8100340:	2212      	movs	r2, #18
 8100342:	4928      	ldr	r1, [pc, #160]	; (81003e4 <main+0x10c>)
 8100344:	4618      	mov	r0, r3
 8100346:	f000 f893 	bl	8100470 <ringbuff_write>
        size_t len;
        void* addr;


        /* Send data to CPU1 */
        for(int i=0; i<10; i++)
 810034a:	2300      	movs	r3, #0
 810034c:	60fb      	str	r3, [r7, #12]
 810034e:	e002      	b.n	8100356 <main+0x7e>
 8100350:	68fb      	ldr	r3, [r7, #12]
 8100352:	3301      	adds	r3, #1
 8100354:	60fb      	str	r3, [r7, #12]
 8100356:	68fb      	ldr	r3, [r7, #12]
 8100358:	2b09      	cmp	r3, #9
 810035a:	ddf9      	ble.n	8100350 <main+0x78>
        {

        }
           char c = 1;
 810035c:	2301      	movs	r3, #1
 810035e:	70fb      	strb	r3, [r7, #3]
            /* Write to buffer from CPU2 to CPU1 */
            ringbuff_write(rb_cm4_to_cm7, "[CM4] Number: ", 14);
 8100360:	4b1e      	ldr	r3, [pc, #120]	; (81003dc <main+0x104>)
 8100362:	681b      	ldr	r3, [r3, #0]
 8100364:	220e      	movs	r2, #14
 8100366:	4920      	ldr	r1, [pc, #128]	; (81003e8 <main+0x110>)
 8100368:	4618      	mov	r0, r3
 810036a:	f000 f881 	bl	8100470 <ringbuff_write>
            ringbuff_write(rb_cm4_to_cm7, &c, 1);
 810036e:	4b1b      	ldr	r3, [pc, #108]	; (81003dc <main+0x104>)
 8100370:	681b      	ldr	r3, [r3, #0]
 8100372:	1cf9      	adds	r1, r7, #3
 8100374:	2201      	movs	r2, #1
 8100376:	4618      	mov	r0, r3
 8100378:	f000 f87a 	bl	8100470 <ringbuff_write>
            ringbuff_write(rb_cm4_to_cm7, "\r\n", 2);
 810037c:	4b17      	ldr	r3, [pc, #92]	; (81003dc <main+0x104>)
 810037e:	681b      	ldr	r3, [r3, #0]
 8100380:	2202      	movs	r2, #2
 8100382:	491a      	ldr	r1, [pc, #104]	; (81003ec <main+0x114>)
 8100384:	4618      	mov	r0, r3
 8100386:	f000 f873 	bl	8100470 <ringbuff_write>

            GPIOB_ODR ^= LED_GREEN;	  //PB0
 810038a:	4b19      	ldr	r3, [pc, #100]	; (81003f0 <main+0x118>)
 810038c:	681b      	ldr	r3, [r3, #0]
 810038e:	4a18      	ldr	r2, [pc, #96]	; (81003f0 <main+0x118>)
 8100390:	f083 0301 	eor.w	r3, r3, #1
 8100394:	6013      	str	r3, [r2, #0]
            	GPIOB_ODR ^= LED_RED;
 8100396:	4b16      	ldr	r3, [pc, #88]	; (81003f0 <main+0x118>)
 8100398:	681b      	ldr	r3, [r3, #0]
 810039a:	4a15      	ldr	r2, [pc, #84]	; (81003f0 <main+0x118>)
 810039c:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 81003a0:	6013      	str	r3, [r2, #0]

            	delay_time();
 81003a2:	f000 f827 	bl	81003f4 <delay_time>



        while ((len = ringbuff_get_linear_block_read_length(rb_cm7_to_cm4)) > 0)
 81003a6:	e00b      	b.n	81003c0 <main+0xe8>
        {
            addr = ringbuff_get_linear_block_read_address(rb_cm7_to_cm4);
 81003a8:	4b0d      	ldr	r3, [pc, #52]	; (81003e0 <main+0x108>)
 81003aa:	681b      	ldr	r3, [r3, #0]
 81003ac:	4618      	mov	r0, r3
 81003ae:	f000 f971 	bl	8100694 <ringbuff_get_linear_block_read_address>
 81003b2:	6078      	str	r0, [r7, #4]
            /* Mark buffer as read to allow other writes from CPU1 */
            ringbuff_skip(rb_cm7_to_cm4, len);
 81003b4:	4b0a      	ldr	r3, [pc, #40]	; (81003e0 <main+0x108>)
 81003b6:	681b      	ldr	r3, [r3, #0]
 81003b8:	68b9      	ldr	r1, [r7, #8]
 81003ba:	4618      	mov	r0, r3
 81003bc:	f000 f9d6 	bl	810076c <ringbuff_skip>
        while ((len = ringbuff_get_linear_block_read_length(rb_cm7_to_cm4)) > 0)
 81003c0:	4b07      	ldr	r3, [pc, #28]	; (81003e0 <main+0x108>)
 81003c2:	681b      	ldr	r3, [r3, #0]
 81003c4:	4618      	mov	r0, r3
 81003c6:	f000 f98f 	bl	81006e8 <ringbuff_get_linear_block_read_length>
 81003ca:	60b8      	str	r0, [r7, #8]
 81003cc:	68bb      	ldr	r3, [r7, #8]
 81003ce:	2b00      	cmp	r3, #0
 81003d0:	d1ea      	bne.n	81003a8 <main+0xd0>
    {
 81003d2:	e7ba      	b.n	810034a <main+0x72>
 81003d4:	580244e0 	.word	0x580244e0
 81003d8:	58020400 	.word	0x58020400
 81003dc:	10000000 	.word	0x10000000
 81003e0:	10000004 	.word	0x10000004
 81003e4:	081008dc 	.word	0x081008dc
 81003e8:	081008f0 	.word	0x081008f0
 81003ec:	08100900 	.word	0x08100900
 81003f0:	58020414 	.word	0x58020414

081003f4 <delay_time>:
        }
    }
}

void delay_time()
{
 81003f4:	b480      	push	{r7}
 81003f6:	b083      	sub	sp, #12
 81003f8:	af00      	add	r7, sp, #0
	for(int i = 0; i<500000; i++)
 81003fa:	2300      	movs	r3, #0
 81003fc:	607b      	str	r3, [r7, #4]
 81003fe:	e002      	b.n	8100406 <delay_time+0x12>
 8100400:	687b      	ldr	r3, [r7, #4]
 8100402:	3301      	adds	r3, #1
 8100404:	607b      	str	r3, [r7, #4]
 8100406:	687b      	ldr	r3, [r7, #4]
 8100408:	4a04      	ldr	r2, [pc, #16]	; (810041c <delay_time+0x28>)
 810040a:	4293      	cmp	r3, r2
 810040c:	ddf8      	ble.n	8100400 <delay_time+0xc>
	{

	}

}
 810040e:	bf00      	nop
 8100410:	bf00      	nop
 8100412:	370c      	adds	r7, #12
 8100414:	46bd      	mov	sp, r7
 8100416:	f85d 7b04 	ldr.w	r7, [sp], #4
 810041a:	4770      	bx	lr
 810041c:	0007a11f 	.word	0x0007a11f

08100420 <ringbuff_is_ready>:
 * \brief           Check if ringbuff is initialized and ready to use
 * \param[in]       buff: Buffer handle
 * \return          `1` if ready, `0` otherwise
 */
uint8_t
ringbuff_is_ready(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8100420:	b480      	push	{r7}
 8100422:	b083      	sub	sp, #12
 8100424:	af00      	add	r7, sp, #0
 8100426:	6078      	str	r0, [r7, #4]
    return BUF_IS_VALID(buff);
 8100428:	687b      	ldr	r3, [r7, #4]
 810042a:	2b00      	cmp	r3, #0
 810042c:	d013      	beq.n	8100456 <ringbuff_is_ready+0x36>
 810042e:	687b      	ldr	r3, [r7, #4]
 8100430:	681b      	ldr	r3, [r3, #0]
 8100432:	4a0d      	ldr	r2, [pc, #52]	; (8100468 <ringbuff_is_ready+0x48>)
 8100434:	4293      	cmp	r3, r2
 8100436:	d10e      	bne.n	8100456 <ringbuff_is_ready+0x36>
 8100438:	687b      	ldr	r3, [r7, #4]
 810043a:	699b      	ldr	r3, [r3, #24]
 810043c:	4a0b      	ldr	r2, [pc, #44]	; (810046c <ringbuff_is_ready+0x4c>)
 810043e:	4293      	cmp	r3, r2
 8100440:	d109      	bne.n	8100456 <ringbuff_is_ready+0x36>
 8100442:	687b      	ldr	r3, [r7, #4]
 8100444:	685b      	ldr	r3, [r3, #4]
 8100446:	2b00      	cmp	r3, #0
 8100448:	d005      	beq.n	8100456 <ringbuff_is_ready+0x36>
 810044a:	687b      	ldr	r3, [r7, #4]
 810044c:	689b      	ldr	r3, [r3, #8]
 810044e:	2b00      	cmp	r3, #0
 8100450:	d001      	beq.n	8100456 <ringbuff_is_ready+0x36>
 8100452:	2301      	movs	r3, #1
 8100454:	e000      	b.n	8100458 <ringbuff_is_ready+0x38>
 8100456:	2300      	movs	r3, #0
 8100458:	b2db      	uxtb	r3, r3
}
 810045a:	4618      	mov	r0, r3
 810045c:	370c      	adds	r7, #12
 810045e:	46bd      	mov	sp, r7
 8100460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100464:	4770      	bx	lr
 8100466:	bf00      	nop
 8100468:	deadbeef 	.word	0xdeadbeef
 810046c:	21524110 	.word	0x21524110

08100470 <ringbuff_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
ringbuff_write(RINGBUFF_VOLATILE ringbuff_t* buff, const void* data, size_t btw) {
 8100470:	b580      	push	{r7, lr}
 8100472:	b088      	sub	sp, #32
 8100474:	af00      	add	r7, sp, #0
 8100476:	60f8      	str	r0, [r7, #12]
 8100478:	60b9      	str	r1, [r7, #8]
 810047a:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 810047c:	68bb      	ldr	r3, [r7, #8]
 810047e:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8100480:	68fb      	ldr	r3, [r7, #12]
 8100482:	2b00      	cmp	r3, #0
 8100484:	d017      	beq.n	81004b6 <ringbuff_write+0x46>
 8100486:	68fb      	ldr	r3, [r7, #12]
 8100488:	681b      	ldr	r3, [r3, #0]
 810048a:	4a3b      	ldr	r2, [pc, #236]	; (8100578 <ringbuff_write+0x108>)
 810048c:	4293      	cmp	r3, r2
 810048e:	d112      	bne.n	81004b6 <ringbuff_write+0x46>
 8100490:	68fb      	ldr	r3, [r7, #12]
 8100492:	699b      	ldr	r3, [r3, #24]
 8100494:	4a39      	ldr	r2, [pc, #228]	; (810057c <ringbuff_write+0x10c>)
 8100496:	4293      	cmp	r3, r2
 8100498:	d10d      	bne.n	81004b6 <ringbuff_write+0x46>
 810049a:	68fb      	ldr	r3, [r7, #12]
 810049c:	685b      	ldr	r3, [r3, #4]
 810049e:	2b00      	cmp	r3, #0
 81004a0:	d009      	beq.n	81004b6 <ringbuff_write+0x46>
 81004a2:	68fb      	ldr	r3, [r7, #12]
 81004a4:	689b      	ldr	r3, [r3, #8]
 81004a6:	2b00      	cmp	r3, #0
 81004a8:	d005      	beq.n	81004b6 <ringbuff_write+0x46>
 81004aa:	68bb      	ldr	r3, [r7, #8]
 81004ac:	2b00      	cmp	r3, #0
 81004ae:	d002      	beq.n	81004b6 <ringbuff_write+0x46>
 81004b0:	687b      	ldr	r3, [r7, #4]
 81004b2:	2b00      	cmp	r3, #0
 81004b4:	d101      	bne.n	81004ba <ringbuff_write+0x4a>
        return 0;
 81004b6:	2300      	movs	r3, #0
 81004b8:	e059      	b.n	810056e <ringbuff_write+0xfe>
    }

    /* Calculate maximum number of bytes available to write */
    free = ringbuff_get_free(buff);
 81004ba:	68f8      	ldr	r0, [r7, #12]
 81004bc:	f000 f860 	bl	8100580 <ringbuff_get_free>
 81004c0:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 81004c2:	687a      	ldr	r2, [r7, #4]
 81004c4:	69bb      	ldr	r3, [r7, #24]
 81004c6:	4293      	cmp	r3, r2
 81004c8:	bf28      	it	cs
 81004ca:	4613      	movcs	r3, r2
 81004cc:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 81004ce:	687b      	ldr	r3, [r7, #4]
 81004d0:	2b00      	cmp	r3, #0
 81004d2:	d101      	bne.n	81004d8 <ringbuff_write+0x68>
        return 0;
 81004d4:	2300      	movs	r3, #0
 81004d6:	e04a      	b.n	810056e <ringbuff_write+0xfe>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 81004d8:	68fb      	ldr	r3, [r7, #12]
 81004da:	689a      	ldr	r2, [r3, #8]
 81004dc:	68fb      	ldr	r3, [r7, #12]
 81004de:	691b      	ldr	r3, [r3, #16]
 81004e0:	1ad3      	subs	r3, r2, r3
 81004e2:	687a      	ldr	r2, [r7, #4]
 81004e4:	429a      	cmp	r2, r3
 81004e6:	d905      	bls.n	81004f4 <ringbuff_write+0x84>
 81004e8:	68fb      	ldr	r3, [r7, #12]
 81004ea:	689a      	ldr	r2, [r3, #8]
 81004ec:	68fb      	ldr	r3, [r7, #12]
 81004ee:	691b      	ldr	r3, [r3, #16]
 81004f0:	1ad3      	subs	r3, r2, r3
 81004f2:	e000      	b.n	81004f6 <ringbuff_write+0x86>
 81004f4:	687b      	ldr	r3, [r7, #4]
 81004f6:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 81004f8:	68fb      	ldr	r3, [r7, #12]
 81004fa:	685a      	ldr	r2, [r3, #4]
 81004fc:	68fb      	ldr	r3, [r7, #12]
 81004fe:	691b      	ldr	r3, [r3, #16]
 8100500:	4413      	add	r3, r2
 8100502:	697a      	ldr	r2, [r7, #20]
 8100504:	69f9      	ldr	r1, [r7, #28]
 8100506:	4618      	mov	r0, r3
 8100508:	f000 f9ce 	bl	81008a8 <memcpy>
    buff->w += tocopy;
 810050c:	68fb      	ldr	r3, [r7, #12]
 810050e:	691a      	ldr	r2, [r3, #16]
 8100510:	697b      	ldr	r3, [r7, #20]
 8100512:	441a      	add	r2, r3
 8100514:	68fb      	ldr	r3, [r7, #12]
 8100516:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 8100518:	687a      	ldr	r2, [r7, #4]
 810051a:	697b      	ldr	r3, [r7, #20]
 810051c:	1ad3      	subs	r3, r2, r3
 810051e:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8100520:	687b      	ldr	r3, [r7, #4]
 8100522:	2b00      	cmp	r3, #0
 8100524:	d00b      	beq.n	810053e <ringbuff_write+0xce>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8100526:	68fb      	ldr	r3, [r7, #12]
 8100528:	6858      	ldr	r0, [r3, #4]
 810052a:	69fa      	ldr	r2, [r7, #28]
 810052c:	697b      	ldr	r3, [r7, #20]
 810052e:	4413      	add	r3, r2
 8100530:	687a      	ldr	r2, [r7, #4]
 8100532:	4619      	mov	r1, r3
 8100534:	f000 f9b8 	bl	81008a8 <memcpy>
        buff->w = btw;
 8100538:	68fb      	ldr	r3, [r7, #12]
 810053a:	687a      	ldr	r2, [r7, #4]
 810053c:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 810053e:	68fb      	ldr	r3, [r7, #12]
 8100540:	691a      	ldr	r2, [r3, #16]
 8100542:	68fb      	ldr	r3, [r7, #12]
 8100544:	689b      	ldr	r3, [r3, #8]
 8100546:	429a      	cmp	r2, r3
 8100548:	d302      	bcc.n	8100550 <ringbuff_write+0xe0>
        buff->w = 0;
 810054a:	68fb      	ldr	r3, [r7, #12]
 810054c:	2200      	movs	r2, #0
 810054e:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 8100550:	68fb      	ldr	r3, [r7, #12]
 8100552:	695b      	ldr	r3, [r3, #20]
 8100554:	2b00      	cmp	r3, #0
 8100556:	d007      	beq.n	8100568 <ringbuff_write+0xf8>
 8100558:	68fb      	ldr	r3, [r7, #12]
 810055a:	695b      	ldr	r3, [r3, #20]
 810055c:	6979      	ldr	r1, [r7, #20]
 810055e:	687a      	ldr	r2, [r7, #4]
 8100560:	440a      	add	r2, r1
 8100562:	2101      	movs	r1, #1
 8100564:	68f8      	ldr	r0, [r7, #12]
 8100566:	4798      	blx	r3
    return tocopy + btw;
 8100568:	697a      	ldr	r2, [r7, #20]
 810056a:	687b      	ldr	r3, [r7, #4]
 810056c:	4413      	add	r3, r2
}
 810056e:	4618      	mov	r0, r3
 8100570:	3720      	adds	r7, #32
 8100572:	46bd      	mov	sp, r7
 8100574:	bd80      	pop	{r7, pc}
 8100576:	bf00      	nop
 8100578:	deadbeef 	.word	0xdeadbeef
 810057c:	21524110 	.word	0x21524110

08100580 <ringbuff_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
ringbuff_get_free(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8100580:	b480      	push	{r7}
 8100582:	b087      	sub	sp, #28
 8100584:	af00      	add	r7, sp, #0
 8100586:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8100588:	687b      	ldr	r3, [r7, #4]
 810058a:	2b00      	cmp	r3, #0
 810058c:	d011      	beq.n	81005b2 <ringbuff_get_free+0x32>
 810058e:	687b      	ldr	r3, [r7, #4]
 8100590:	681b      	ldr	r3, [r3, #0]
 8100592:	4a1c      	ldr	r2, [pc, #112]	; (8100604 <ringbuff_get_free+0x84>)
 8100594:	4293      	cmp	r3, r2
 8100596:	d10c      	bne.n	81005b2 <ringbuff_get_free+0x32>
 8100598:	687b      	ldr	r3, [r7, #4]
 810059a:	699b      	ldr	r3, [r3, #24]
 810059c:	4a1a      	ldr	r2, [pc, #104]	; (8100608 <ringbuff_get_free+0x88>)
 810059e:	4293      	cmp	r3, r2
 81005a0:	d107      	bne.n	81005b2 <ringbuff_get_free+0x32>
 81005a2:	687b      	ldr	r3, [r7, #4]
 81005a4:	685b      	ldr	r3, [r3, #4]
 81005a6:	2b00      	cmp	r3, #0
 81005a8:	d003      	beq.n	81005b2 <ringbuff_get_free+0x32>
 81005aa:	687b      	ldr	r3, [r7, #4]
 81005ac:	689b      	ldr	r3, [r3, #8]
 81005ae:	2b00      	cmp	r3, #0
 81005b0:	d101      	bne.n	81005b6 <ringbuff_get_free+0x36>
        return 0;
 81005b2:	2300      	movs	r3, #0
 81005b4:	e01f      	b.n	81005f6 <ringbuff_get_free+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 81005b6:	687b      	ldr	r3, [r7, #4]
 81005b8:	691b      	ldr	r3, [r3, #16]
 81005ba:	613b      	str	r3, [r7, #16]
    r = buff->r;
 81005bc:	687b      	ldr	r3, [r7, #4]
 81005be:	68db      	ldr	r3, [r3, #12]
 81005c0:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 81005c2:	693a      	ldr	r2, [r7, #16]
 81005c4:	68fb      	ldr	r3, [r7, #12]
 81005c6:	429a      	cmp	r2, r3
 81005c8:	d103      	bne.n	81005d2 <ringbuff_get_free+0x52>
        size = buff->size;
 81005ca:	687b      	ldr	r3, [r7, #4]
 81005cc:	689b      	ldr	r3, [r3, #8]
 81005ce:	617b      	str	r3, [r7, #20]
 81005d0:	e00f      	b.n	81005f2 <ringbuff_get_free+0x72>
    } else if (r > w) {
 81005d2:	68fa      	ldr	r2, [r7, #12]
 81005d4:	693b      	ldr	r3, [r7, #16]
 81005d6:	429a      	cmp	r2, r3
 81005d8:	d904      	bls.n	81005e4 <ringbuff_get_free+0x64>
        size = r - w;
 81005da:	68fa      	ldr	r2, [r7, #12]
 81005dc:	693b      	ldr	r3, [r7, #16]
 81005de:	1ad3      	subs	r3, r2, r3
 81005e0:	617b      	str	r3, [r7, #20]
 81005e2:	e006      	b.n	81005f2 <ringbuff_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 81005e4:	687b      	ldr	r3, [r7, #4]
 81005e6:	689a      	ldr	r2, [r3, #8]
 81005e8:	68f9      	ldr	r1, [r7, #12]
 81005ea:	693b      	ldr	r3, [r7, #16]
 81005ec:	1acb      	subs	r3, r1, r3
 81005ee:	4413      	add	r3, r2
 81005f0:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 81005f2:	697b      	ldr	r3, [r7, #20]
 81005f4:	3b01      	subs	r3, #1
}
 81005f6:	4618      	mov	r0, r3
 81005f8:	371c      	adds	r7, #28
 81005fa:	46bd      	mov	sp, r7
 81005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100600:	4770      	bx	lr
 8100602:	bf00      	nop
 8100604:	deadbeef 	.word	0xdeadbeef
 8100608:	21524110 	.word	0x21524110

0810060c <ringbuff_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
ringbuff_get_full(RINGBUFF_VOLATILE ringbuff_t* buff) {
 810060c:	b480      	push	{r7}
 810060e:	b087      	sub	sp, #28
 8100610:	af00      	add	r7, sp, #0
 8100612:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8100614:	687b      	ldr	r3, [r7, #4]
 8100616:	2b00      	cmp	r3, #0
 8100618:	d011      	beq.n	810063e <ringbuff_get_full+0x32>
 810061a:	687b      	ldr	r3, [r7, #4]
 810061c:	681b      	ldr	r3, [r3, #0]
 810061e:	4a1b      	ldr	r2, [pc, #108]	; (810068c <ringbuff_get_full+0x80>)
 8100620:	4293      	cmp	r3, r2
 8100622:	d10c      	bne.n	810063e <ringbuff_get_full+0x32>
 8100624:	687b      	ldr	r3, [r7, #4]
 8100626:	699b      	ldr	r3, [r3, #24]
 8100628:	4a19      	ldr	r2, [pc, #100]	; (8100690 <ringbuff_get_full+0x84>)
 810062a:	4293      	cmp	r3, r2
 810062c:	d107      	bne.n	810063e <ringbuff_get_full+0x32>
 810062e:	687b      	ldr	r3, [r7, #4]
 8100630:	685b      	ldr	r3, [r3, #4]
 8100632:	2b00      	cmp	r3, #0
 8100634:	d003      	beq.n	810063e <ringbuff_get_full+0x32>
 8100636:	687b      	ldr	r3, [r7, #4]
 8100638:	689b      	ldr	r3, [r3, #8]
 810063a:	2b00      	cmp	r3, #0
 810063c:	d101      	bne.n	8100642 <ringbuff_get_full+0x36>
        return 0;
 810063e:	2300      	movs	r3, #0
 8100640:	e01d      	b.n	810067e <ringbuff_get_full+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8100642:	687b      	ldr	r3, [r7, #4]
 8100644:	691b      	ldr	r3, [r3, #16]
 8100646:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8100648:	687b      	ldr	r3, [r7, #4]
 810064a:	68db      	ldr	r3, [r3, #12]
 810064c:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 810064e:	693a      	ldr	r2, [r7, #16]
 8100650:	68fb      	ldr	r3, [r7, #12]
 8100652:	429a      	cmp	r2, r3
 8100654:	d102      	bne.n	810065c <ringbuff_get_full+0x50>
        size = 0;
 8100656:	2300      	movs	r3, #0
 8100658:	617b      	str	r3, [r7, #20]
 810065a:	e00f      	b.n	810067c <ringbuff_get_full+0x70>
    } else if (w > r) {
 810065c:	693a      	ldr	r2, [r7, #16]
 810065e:	68fb      	ldr	r3, [r7, #12]
 8100660:	429a      	cmp	r2, r3
 8100662:	d904      	bls.n	810066e <ringbuff_get_full+0x62>
        size = w - r;
 8100664:	693a      	ldr	r2, [r7, #16]
 8100666:	68fb      	ldr	r3, [r7, #12]
 8100668:	1ad3      	subs	r3, r2, r3
 810066a:	617b      	str	r3, [r7, #20]
 810066c:	e006      	b.n	810067c <ringbuff_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 810066e:	687b      	ldr	r3, [r7, #4]
 8100670:	689a      	ldr	r2, [r3, #8]
 8100672:	6939      	ldr	r1, [r7, #16]
 8100674:	68fb      	ldr	r3, [r7, #12]
 8100676:	1acb      	subs	r3, r1, r3
 8100678:	4413      	add	r3, r2
 810067a:	617b      	str	r3, [r7, #20]
    }
    return size;
 810067c:	697b      	ldr	r3, [r7, #20]
}
 810067e:	4618      	mov	r0, r3
 8100680:	371c      	adds	r7, #28
 8100682:	46bd      	mov	sp, r7
 8100684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100688:	4770      	bx	lr
 810068a:	bf00      	nop
 810068c:	deadbeef 	.word	0xdeadbeef
 8100690:	21524110 	.word	0x21524110

08100694 <ringbuff_get_linear_block_read_address>:
/**
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *ringbuff_get_linear_block_read_address(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8100694:	b480      	push	{r7}
 8100696:	b083      	sub	sp, #12
 8100698:	af00      	add	r7, sp, #0
 810069a:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 810069c:	687b      	ldr	r3, [r7, #4]
 810069e:	2b00      	cmp	r3, #0
 81006a0:	d011      	beq.n	81006c6 <ringbuff_get_linear_block_read_address+0x32>
 81006a2:	687b      	ldr	r3, [r7, #4]
 81006a4:	681b      	ldr	r3, [r3, #0]
 81006a6:	4a0e      	ldr	r2, [pc, #56]	; (81006e0 <ringbuff_get_linear_block_read_address+0x4c>)
 81006a8:	4293      	cmp	r3, r2
 81006aa:	d10c      	bne.n	81006c6 <ringbuff_get_linear_block_read_address+0x32>
 81006ac:	687b      	ldr	r3, [r7, #4]
 81006ae:	699b      	ldr	r3, [r3, #24]
 81006b0:	4a0c      	ldr	r2, [pc, #48]	; (81006e4 <ringbuff_get_linear_block_read_address+0x50>)
 81006b2:	4293      	cmp	r3, r2
 81006b4:	d107      	bne.n	81006c6 <ringbuff_get_linear_block_read_address+0x32>
 81006b6:	687b      	ldr	r3, [r7, #4]
 81006b8:	685b      	ldr	r3, [r3, #4]
 81006ba:	2b00      	cmp	r3, #0
 81006bc:	d003      	beq.n	81006c6 <ringbuff_get_linear_block_read_address+0x32>
 81006be:	687b      	ldr	r3, [r7, #4]
 81006c0:	689b      	ldr	r3, [r3, #8]
 81006c2:	2b00      	cmp	r3, #0
 81006c4:	d101      	bne.n	81006ca <ringbuff_get_linear_block_read_address+0x36>
        return NULL;
 81006c6:	2300      	movs	r3, #0
 81006c8:	e004      	b.n	81006d4 <ringbuff_get_linear_block_read_address+0x40>
    }
    return &buff->buff[buff->r];
 81006ca:	687b      	ldr	r3, [r7, #4]
 81006cc:	685a      	ldr	r2, [r3, #4]
 81006ce:	687b      	ldr	r3, [r7, #4]
 81006d0:	68db      	ldr	r3, [r3, #12]
 81006d2:	4413      	add	r3, r2
}
 81006d4:	4618      	mov	r0, r3
 81006d6:	370c      	adds	r7, #12
 81006d8:	46bd      	mov	sp, r7
 81006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006de:	4770      	bx	lr
 81006e0:	deadbeef 	.word	0xdeadbeef
 81006e4:	21524110 	.word	0x21524110

081006e8 <ringbuff_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
ringbuff_get_linear_block_read_length(RINGBUFF_VOLATILE ringbuff_t* buff) {
 81006e8:	b480      	push	{r7}
 81006ea:	b087      	sub	sp, #28
 81006ec:	af00      	add	r7, sp, #0
 81006ee:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 81006f0:	687b      	ldr	r3, [r7, #4]
 81006f2:	2b00      	cmp	r3, #0
 81006f4:	d011      	beq.n	810071a <ringbuff_get_linear_block_read_length+0x32>
 81006f6:	687b      	ldr	r3, [r7, #4]
 81006f8:	681b      	ldr	r3, [r3, #0]
 81006fa:	4a1a      	ldr	r2, [pc, #104]	; (8100764 <ringbuff_get_linear_block_read_length+0x7c>)
 81006fc:	4293      	cmp	r3, r2
 81006fe:	d10c      	bne.n	810071a <ringbuff_get_linear_block_read_length+0x32>
 8100700:	687b      	ldr	r3, [r7, #4]
 8100702:	699b      	ldr	r3, [r3, #24]
 8100704:	4a18      	ldr	r2, [pc, #96]	; (8100768 <ringbuff_get_linear_block_read_length+0x80>)
 8100706:	4293      	cmp	r3, r2
 8100708:	d107      	bne.n	810071a <ringbuff_get_linear_block_read_length+0x32>
 810070a:	687b      	ldr	r3, [r7, #4]
 810070c:	685b      	ldr	r3, [r3, #4]
 810070e:	2b00      	cmp	r3, #0
 8100710:	d003      	beq.n	810071a <ringbuff_get_linear_block_read_length+0x32>
 8100712:	687b      	ldr	r3, [r7, #4]
 8100714:	689b      	ldr	r3, [r3, #8]
 8100716:	2b00      	cmp	r3, #0
 8100718:	d101      	bne.n	810071e <ringbuff_get_linear_block_read_length+0x36>
        return 0;
 810071a:	2300      	movs	r3, #0
 810071c:	e01b      	b.n	8100756 <ringbuff_get_linear_block_read_length+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 810071e:	687b      	ldr	r3, [r7, #4]
 8100720:	691b      	ldr	r3, [r3, #16]
 8100722:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8100724:	687b      	ldr	r3, [r7, #4]
 8100726:	68db      	ldr	r3, [r3, #12]
 8100728:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 810072a:	693a      	ldr	r2, [r7, #16]
 810072c:	68fb      	ldr	r3, [r7, #12]
 810072e:	429a      	cmp	r2, r3
 8100730:	d904      	bls.n	810073c <ringbuff_get_linear_block_read_length+0x54>
        len = w - r;
 8100732:	693a      	ldr	r2, [r7, #16]
 8100734:	68fb      	ldr	r3, [r7, #12]
 8100736:	1ad3      	subs	r3, r2, r3
 8100738:	617b      	str	r3, [r7, #20]
 810073a:	e00b      	b.n	8100754 <ringbuff_get_linear_block_read_length+0x6c>
    } else if (r > w) {
 810073c:	68fa      	ldr	r2, [r7, #12]
 810073e:	693b      	ldr	r3, [r7, #16]
 8100740:	429a      	cmp	r2, r3
 8100742:	d905      	bls.n	8100750 <ringbuff_get_linear_block_read_length+0x68>
        len = buff->size - r;
 8100744:	687b      	ldr	r3, [r7, #4]
 8100746:	689a      	ldr	r2, [r3, #8]
 8100748:	68fb      	ldr	r3, [r7, #12]
 810074a:	1ad3      	subs	r3, r2, r3
 810074c:	617b      	str	r3, [r7, #20]
 810074e:	e001      	b.n	8100754 <ringbuff_get_linear_block_read_length+0x6c>
    } else {
        len = 0;
 8100750:	2300      	movs	r3, #0
 8100752:	617b      	str	r3, [r7, #20]
    }
    return len;
 8100754:	697b      	ldr	r3, [r7, #20]
}
 8100756:	4618      	mov	r0, r3
 8100758:	371c      	adds	r7, #28
 810075a:	46bd      	mov	sp, r7
 810075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100760:	4770      	bx	lr
 8100762:	bf00      	nop
 8100764:	deadbeef 	.word	0xdeadbeef
 8100768:	21524110 	.word	0x21524110

0810076c <ringbuff_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
ringbuff_skip(RINGBUFF_VOLATILE ringbuff_t* buff, size_t len) {
 810076c:	b580      	push	{r7, lr}
 810076e:	b084      	sub	sp, #16
 8100770:	af00      	add	r7, sp, #0
 8100772:	6078      	str	r0, [r7, #4]
 8100774:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8100776:	687b      	ldr	r3, [r7, #4]
 8100778:	2b00      	cmp	r3, #0
 810077a:	d014      	beq.n	81007a6 <ringbuff_skip+0x3a>
 810077c:	687b      	ldr	r3, [r7, #4]
 810077e:	681b      	ldr	r3, [r3, #0]
 8100780:	4a20      	ldr	r2, [pc, #128]	; (8100804 <ringbuff_skip+0x98>)
 8100782:	4293      	cmp	r3, r2
 8100784:	d10f      	bne.n	81007a6 <ringbuff_skip+0x3a>
 8100786:	687b      	ldr	r3, [r7, #4]
 8100788:	699b      	ldr	r3, [r3, #24]
 810078a:	4a1f      	ldr	r2, [pc, #124]	; (8100808 <ringbuff_skip+0x9c>)
 810078c:	4293      	cmp	r3, r2
 810078e:	d10a      	bne.n	81007a6 <ringbuff_skip+0x3a>
 8100790:	687b      	ldr	r3, [r7, #4]
 8100792:	685b      	ldr	r3, [r3, #4]
 8100794:	2b00      	cmp	r3, #0
 8100796:	d006      	beq.n	81007a6 <ringbuff_skip+0x3a>
 8100798:	687b      	ldr	r3, [r7, #4]
 810079a:	689b      	ldr	r3, [r3, #8]
 810079c:	2b00      	cmp	r3, #0
 810079e:	d002      	beq.n	81007a6 <ringbuff_skip+0x3a>
 81007a0:	683b      	ldr	r3, [r7, #0]
 81007a2:	2b00      	cmp	r3, #0
 81007a4:	d101      	bne.n	81007aa <ringbuff_skip+0x3e>
        return 0;
 81007a6:	2300      	movs	r3, #0
 81007a8:	e027      	b.n	81007fa <ringbuff_skip+0x8e>
    }

    full = ringbuff_get_full(buff);             /* Get buffer used length */
 81007aa:	6878      	ldr	r0, [r7, #4]
 81007ac:	f7ff ff2e 	bl	810060c <ringbuff_get_full>
 81007b0:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 81007b2:	683a      	ldr	r2, [r7, #0]
 81007b4:	68fb      	ldr	r3, [r7, #12]
 81007b6:	4293      	cmp	r3, r2
 81007b8:	bf28      	it	cs
 81007ba:	4613      	movcs	r3, r2
 81007bc:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 81007be:	687b      	ldr	r3, [r7, #4]
 81007c0:	68da      	ldr	r2, [r3, #12]
 81007c2:	683b      	ldr	r3, [r7, #0]
 81007c4:	441a      	add	r2, r3
 81007c6:	687b      	ldr	r3, [r7, #4]
 81007c8:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 81007ca:	687b      	ldr	r3, [r7, #4]
 81007cc:	68da      	ldr	r2, [r3, #12]
 81007ce:	687b      	ldr	r3, [r7, #4]
 81007d0:	689b      	ldr	r3, [r3, #8]
 81007d2:	429a      	cmp	r2, r3
 81007d4:	d306      	bcc.n	81007e4 <ringbuff_skip+0x78>
        buff->r -= buff->size;
 81007d6:	687b      	ldr	r3, [r7, #4]
 81007d8:	689b      	ldr	r3, [r3, #8]
 81007da:	687a      	ldr	r2, [r7, #4]
 81007dc:	68d2      	ldr	r2, [r2, #12]
 81007de:	1ad2      	subs	r2, r2, r3
 81007e0:	687b      	ldr	r3, [r7, #4]
 81007e2:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 81007e4:	687b      	ldr	r3, [r7, #4]
 81007e6:	695b      	ldr	r3, [r3, #20]
 81007e8:	2b00      	cmp	r3, #0
 81007ea:	d005      	beq.n	81007f8 <ringbuff_skip+0x8c>
 81007ec:	687b      	ldr	r3, [r7, #4]
 81007ee:	695b      	ldr	r3, [r3, #20]
 81007f0:	683a      	ldr	r2, [r7, #0]
 81007f2:	2100      	movs	r1, #0
 81007f4:	6878      	ldr	r0, [r7, #4]
 81007f6:	4798      	blx	r3
    return len;
 81007f8:	683b      	ldr	r3, [r7, #0]
}
 81007fa:	4618      	mov	r0, r3
 81007fc:	3710      	adds	r7, #16
 81007fe:	46bd      	mov	sp, r7
 8100800:	bd80      	pop	{r7, pc}
 8100802:	bf00      	nop
 8100804:	deadbeef 	.word	0xdeadbeef
 8100808:	21524110 	.word	0x21524110

0810080c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 810080c:	480d      	ldr	r0, [pc, #52]	; (8100844 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 810080e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8100810:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100814:	480c      	ldr	r0, [pc, #48]	; (8100848 <LoopForever+0x6>)
  ldr r1, =_edata
 8100816:	490d      	ldr	r1, [pc, #52]	; (810084c <LoopForever+0xa>)
  ldr r2, =_sidata
 8100818:	4a0d      	ldr	r2, [pc, #52]	; (8100850 <LoopForever+0xe>)
  movs r3, #0
 810081a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810081c:	e002      	b.n	8100824 <LoopCopyDataInit>

0810081e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810081e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100822:	3304      	adds	r3, #4

08100824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100828:	d3f9      	bcc.n	810081e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810082a:	4a0a      	ldr	r2, [pc, #40]	; (8100854 <LoopForever+0x12>)
  ldr r4, =_ebss
 810082c:	4c0a      	ldr	r4, [pc, #40]	; (8100858 <LoopForever+0x16>)
  movs r3, #0
 810082e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100830:	e001      	b.n	8100836 <LoopFillZerobss>

08100832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100834:	3204      	adds	r2, #4

08100836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100838:	d3fb      	bcc.n	8100832 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 810083a:	f000 f811 	bl	8100860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 810083e:	f7ff fd4b 	bl	81002d8 <main>

08100842 <LoopForever>:

LoopForever:
  b LoopForever
 8100842:	e7fe      	b.n	8100842 <LoopForever>
  ldr   r0, =_estack
 8100844:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100848:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810084c:	10000008 	.word	0x10000008
  ldr r2, =_sidata
 8100850:	0810090c 	.word	0x0810090c
  ldr r2, =_sbss
 8100854:	10000008 	.word	0x10000008
  ldr r4, =_ebss
 8100858:	10000024 	.word	0x10000024

0810085c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 810085c:	e7fe      	b.n	810085c <ADC1_2_IRQHandler>
	...

08100860 <__libc_init_array>:
 8100860:	b570      	push	{r4, r5, r6, lr}
 8100862:	4d0d      	ldr	r5, [pc, #52]	; (8100898 <__libc_init_array+0x38>)
 8100864:	4c0d      	ldr	r4, [pc, #52]	; (810089c <__libc_init_array+0x3c>)
 8100866:	1b64      	subs	r4, r4, r5
 8100868:	10a4      	asrs	r4, r4, #2
 810086a:	2600      	movs	r6, #0
 810086c:	42a6      	cmp	r6, r4
 810086e:	d109      	bne.n	8100884 <__libc_init_array+0x24>
 8100870:	4d0b      	ldr	r5, [pc, #44]	; (81008a0 <__libc_init_array+0x40>)
 8100872:	4c0c      	ldr	r4, [pc, #48]	; (81008a4 <__libc_init_array+0x44>)
 8100874:	f000 f826 	bl	81008c4 <_init>
 8100878:	1b64      	subs	r4, r4, r5
 810087a:	10a4      	asrs	r4, r4, #2
 810087c:	2600      	movs	r6, #0
 810087e:	42a6      	cmp	r6, r4
 8100880:	d105      	bne.n	810088e <__libc_init_array+0x2e>
 8100882:	bd70      	pop	{r4, r5, r6, pc}
 8100884:	f855 3b04 	ldr.w	r3, [r5], #4
 8100888:	4798      	blx	r3
 810088a:	3601      	adds	r6, #1
 810088c:	e7ee      	b.n	810086c <__libc_init_array+0xc>
 810088e:	f855 3b04 	ldr.w	r3, [r5], #4
 8100892:	4798      	blx	r3
 8100894:	3601      	adds	r6, #1
 8100896:	e7f2      	b.n	810087e <__libc_init_array+0x1e>
 8100898:	08100904 	.word	0x08100904
 810089c:	08100904 	.word	0x08100904
 81008a0:	08100904 	.word	0x08100904
 81008a4:	08100908 	.word	0x08100908

081008a8 <memcpy>:
 81008a8:	440a      	add	r2, r1
 81008aa:	4291      	cmp	r1, r2
 81008ac:	f100 33ff 	add.w	r3, r0, #4294967295
 81008b0:	d100      	bne.n	81008b4 <memcpy+0xc>
 81008b2:	4770      	bx	lr
 81008b4:	b510      	push	{r4, lr}
 81008b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 81008ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 81008be:	4291      	cmp	r1, r2
 81008c0:	d1f9      	bne.n	81008b6 <memcpy+0xe>
 81008c2:	bd10      	pop	{r4, pc}

081008c4 <_init>:
 81008c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81008c6:	bf00      	nop
 81008c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81008ca:	bc08      	pop	{r3}
 81008cc:	469e      	mov	lr, r3
 81008ce:	4770      	bx	lr

081008d0 <_fini>:
 81008d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81008d2:	bf00      	nop
 81008d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81008d6:	bc08      	pop	{r3}
 81008d8:	469e      	mov	lr, r3
 81008da:	4770      	bx	lr
