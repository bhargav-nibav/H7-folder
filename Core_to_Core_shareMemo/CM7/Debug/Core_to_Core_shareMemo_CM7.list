
Core_to_Core_shareMemo_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000424  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006bc  080006bc  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006bc  080006bc  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080006bc  080006bc  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006bc  080006bc  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006bc  080006bc  000106bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006c0  080006c0  000106c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  24000000  080006c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  24000008  080006cc  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000024  080006cc  00020024  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020032  2**0
                  CONTENTS, READONLY
 13 .debug_info   000008e3  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000038c  00000000  00000000  00020958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  00020ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a9  00000000  00000000  00020dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001c7a  00000000  00000000  00020e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000011c3  00000000  00000000  00022af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007cd1  00000000  00000000  00023cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000318  00000000  00000000  0002b988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0002bca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000008 	.word	0x24000008
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080006a4 	.word	0x080006a4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400000c 	.word	0x2400000c
 80002d4:	080006a4 	.word	0x080006a4

080002d8 <main>:

void delay_time();


int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
	 RCC_AHB4ENR |= GPIOEEN;
 80002de:	4b20      	ldr	r3, [pc, #128]	; (8000360 <main+0x88>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a1f      	ldr	r2, [pc, #124]	; (8000360 <main+0x88>)
 80002e4:	f043 0310 	orr.w	r3, r3, #16
 80002e8:	6013      	str	r3, [r2, #0]
	  GPIOE_MODER |= (1U<<2);
 80002ea:	4b1e      	ldr	r3, [pc, #120]	; (8000364 <main+0x8c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a1d      	ldr	r2, [pc, #116]	; (8000364 <main+0x8c>)
 80002f0:	f043 0304 	orr.w	r3, r3, #4
 80002f4:	6013      	str	r3, [r2, #0]
	  GPIOE_MODER &= ~(1U<<3);
 80002f6:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <main+0x8c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a1a      	ldr	r2, [pc, #104]	; (8000364 <main+0x8c>)
 80002fc:	f023 0308 	bic.w	r3, r3, #8
 8000300:	6013      	str	r3, [r2, #0]

    /* Initialize buffers that are used as shared memory */
    ringbuff_init(rb_cm7_to_cm4, (void *)BUFFDATA_CM7_TO_CM4_ADDR, BUFFDATA_CM7_TO_CM4_LEN);
 8000302:	4b19      	ldr	r3, [pc, #100]	; (8000368 <main+0x90>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800030a:	4918      	ldr	r1, [pc, #96]	; (800036c <main+0x94>)
 800030c:	4618      	mov	r0, r3
 800030e:	f000 f84b 	bl	80003a8 <ringbuff_init>
    ringbuff_init(rb_cm4_to_cm7, (void *)BUFFDATA_CM4_TO_CM7_ADDR, BUFFDATA_CM4_TO_CM7_LEN);
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <main+0x98>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800031a:	4916      	ldr	r1, [pc, #88]	; (8000374 <main+0x9c>)
 800031c:	4618      	mov	r0, r3
 800031e:	f000 f843 	bl	80003a8 <ringbuff_init>
    while (1)
    {
        size_t len;
        void* addr;

        while ((len = ringbuff_get_linear_block_read_length(rb_cm4_to_cm7)) > 0)
 8000322:	e013      	b.n	800034c <main+0x74>
        {
            addr = ringbuff_get_linear_block_read_address(rb_cm4_to_cm7);
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <main+0x98>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4618      	mov	r0, r3
 800032a:	f000 f8ab 	bl	8000484 <ringbuff_get_linear_block_read_address>
 800032e:	6038      	str	r0, [r7, #0]

            	  //PE1
            GPIOE_ODR ^= LED_YELLOW;
 8000330:	4b11      	ldr	r3, [pc, #68]	; (8000378 <main+0xa0>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a10      	ldr	r2, [pc, #64]	; (8000378 <main+0xa0>)
 8000336:	f083 0302 	eor.w	r3, r3, #2
 800033a:	6013      	str	r3, [r2, #0]
            delay_time();
 800033c:	f000 f81e 	bl	800037c <delay_time>


            ringbuff_skip(rb_cm4_to_cm7, len);
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <main+0x98>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	6879      	ldr	r1, [r7, #4]
 8000346:	4618      	mov	r0, r3
 8000348:	f000 f906 	bl	8000558 <ringbuff_skip>
        while ((len = ringbuff_get_linear_block_read_length(rb_cm4_to_cm7)) > 0)
 800034c:	4b08      	ldr	r3, [pc, #32]	; (8000370 <main+0x98>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4618      	mov	r0, r3
 8000352:	f000 f8c1 	bl	80004d8 <ringbuff_get_linear_block_read_length>
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d1e2      	bne.n	8000324 <main+0x4c>
    {
 800035e:	e7e0      	b.n	8000322 <main+0x4a>
 8000360:	580244e0 	.word	0x580244e0
 8000364:	58021000 	.word	0x58021000
 8000368:	24000004 	.word	0x24000004
 800036c:	38000438 	.word	0x38000438
 8000370:	24000000 	.word	0x24000000
 8000374:	3800001c 	.word	0x3800001c
 8000378:	58021014 	.word	0x58021014

0800037c <delay_time>:
    }
}


void delay_time()
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
	for(int i = 0; i<500000; i++)
 8000382:	2300      	movs	r3, #0
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	e002      	b.n	800038e <delay_time+0x12>
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3301      	adds	r3, #1
 800038c:	607b      	str	r3, [r7, #4]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <delay_time+0x28>)
 8000392:	4293      	cmp	r3, r2
 8000394:	ddf8      	ble.n	8000388 <delay_time+0xc>
	{


	}
}
 8000396:	bf00      	nop
 8000398:	bf00      	nop
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	0007a11f 	.word	0x0007a11f

080003a8 <ringbuff_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
ringbuff_init(RINGBUFF_VOLATILE ringbuff_t* buff, void* buffdata, size_t size) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	60b9      	str	r1, [r7, #8]
 80003b2:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d005      	beq.n	80003c6 <ringbuff_init+0x1e>
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d002      	beq.n	80003c6 <ringbuff_init+0x1e>
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d101      	bne.n	80003ca <ringbuff_init+0x22>
        return 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	e011      	b.n	80003ee <ringbuff_init+0x46>
    }

    BUF_MEMSET((void *)buff, 0x00, sizeof(*buff));
 80003ca:	221c      	movs	r2, #28
 80003cc:	2100      	movs	r1, #0
 80003ce:	68f8      	ldr	r0, [r7, #12]
 80003d0:	f000 f93b 	bl	800064a <memset>

    buff->size = size;
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	609a      	str	r2, [r3, #8]
    buff->buff = buffdata;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	68ba      	ldr	r2, [r7, #8]
 80003de:	605a      	str	r2, [r3, #4]

#if RINGBUFF_USE_MAGIC
    buff->magic1 = 0xDEADBEEF;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	4a05      	ldr	r2, [pc, #20]	; (80003f8 <ringbuff_init+0x50>)
 80003e4:	601a      	str	r2, [r3, #0]
    buff->magic2 = ~0xDEADBEEF;
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <ringbuff_init+0x54>)
 80003ea:	619a      	str	r2, [r3, #24]
#endif /* RINGBUFF_USE_MAGIC */

    return 1;
 80003ec:	2301      	movs	r3, #1
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3710      	adds	r7, #16
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	deadbeef 	.word	0xdeadbeef
 80003fc:	21524110 	.word	0x21524110

08000400 <ringbuff_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
ringbuff_get_full(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8000400:	b480      	push	{r7}
 8000402:	b087      	sub	sp, #28
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d011      	beq.n	8000432 <ringbuff_get_full+0x32>
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a1a      	ldr	r2, [pc, #104]	; (800047c <ringbuff_get_full+0x7c>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d10c      	bne.n	8000432 <ringbuff_get_full+0x32>
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a18      	ldr	r2, [pc, #96]	; (8000480 <ringbuff_get_full+0x80>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d107      	bne.n	8000432 <ringbuff_get_full+0x32>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d003      	beq.n	8000432 <ringbuff_get_full+0x32>
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d101      	bne.n	8000436 <ringbuff_get_full+0x36>
        return 0;
 8000432:	2300      	movs	r3, #0
 8000434:	e01d      	b.n	8000472 <ringbuff_get_full+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	691b      	ldr	r3, [r3, #16]
 800043a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	68db      	ldr	r3, [r3, #12]
 8000440:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8000442:	693a      	ldr	r2, [r7, #16]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	429a      	cmp	r2, r3
 8000448:	d102      	bne.n	8000450 <ringbuff_get_full+0x50>
        size = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
 800044e:	e00f      	b.n	8000470 <ringbuff_get_full+0x70>
    } else if (w > r) {
 8000450:	693a      	ldr	r2, [r7, #16]
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	429a      	cmp	r2, r3
 8000456:	d904      	bls.n	8000462 <ringbuff_get_full+0x62>
        size = w - r;
 8000458:	693a      	ldr	r2, [r7, #16]
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	1ad3      	subs	r3, r2, r3
 800045e:	617b      	str	r3, [r7, #20]
 8000460:	e006      	b.n	8000470 <ringbuff_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	689a      	ldr	r2, [r3, #8]
 8000466:	6939      	ldr	r1, [r7, #16]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	1acb      	subs	r3, r1, r3
 800046c:	4413      	add	r3, r2
 800046e:	617b      	str	r3, [r7, #20]
    }
    return size;
 8000470:	697b      	ldr	r3, [r7, #20]
}
 8000472:	4618      	mov	r0, r3
 8000474:	371c      	adds	r7, #28
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	deadbeef 	.word	0xdeadbeef
 8000480:	21524110 	.word	0x21524110

08000484 <ringbuff_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
ringbuff_get_linear_block_read_address(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d011      	beq.n	80004b6 <ringbuff_get_linear_block_read_address+0x32>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <ringbuff_get_linear_block_read_address+0x4c>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d10c      	bne.n	80004b6 <ringbuff_get_linear_block_read_address+0x32>
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a0c      	ldr	r2, [pc, #48]	; (80004d4 <ringbuff_get_linear_block_read_address+0x50>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d107      	bne.n	80004b6 <ringbuff_get_linear_block_read_address+0x32>
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d003      	beq.n	80004b6 <ringbuff_get_linear_block_read_address+0x32>
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d101      	bne.n	80004ba <ringbuff_get_linear_block_read_address+0x36>
        return NULL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	e004      	b.n	80004c4 <ringbuff_get_linear_block_read_address+0x40>
    }
    return &buff->buff[buff->r];
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	685a      	ldr	r2, [r3, #4]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	4413      	add	r3, r2
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	deadbeef 	.word	0xdeadbeef
 80004d4:	21524110 	.word	0x21524110

080004d8 <ringbuff_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
ringbuff_get_linear_block_read_length(RINGBUFF_VOLATILE ringbuff_t* buff) {
 80004d8:	b480      	push	{r7}
 80004da:	b087      	sub	sp, #28
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d011      	beq.n	800050a <ringbuff_get_linear_block_read_length+0x32>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a19      	ldr	r2, [pc, #100]	; (8000550 <ringbuff_get_linear_block_read_length+0x78>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d10c      	bne.n	800050a <ringbuff_get_linear_block_read_length+0x32>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a17      	ldr	r2, [pc, #92]	; (8000554 <ringbuff_get_linear_block_read_length+0x7c>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d107      	bne.n	800050a <ringbuff_get_linear_block_read_length+0x32>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d003      	beq.n	800050a <ringbuff_get_linear_block_read_length+0x32>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d101      	bne.n	800050e <ringbuff_get_linear_block_read_length+0x36>
        return 0;
 800050a:	2300      	movs	r3, #0
 800050c:	e01b      	b.n	8000546 <ringbuff_get_linear_block_read_length+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	691b      	ldr	r3, [r3, #16]
 8000512:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 800051a:	693a      	ldr	r2, [r7, #16]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	429a      	cmp	r2, r3
 8000520:	d904      	bls.n	800052c <ringbuff_get_linear_block_read_length+0x54>
        len = w - r;
 8000522:	693a      	ldr	r2, [r7, #16]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	e00b      	b.n	8000544 <ringbuff_get_linear_block_read_length+0x6c>
    } else if (r > w) {
 800052c:	68fa      	ldr	r2, [r7, #12]
 800052e:	693b      	ldr	r3, [r7, #16]
 8000530:	429a      	cmp	r2, r3
 8000532:	d905      	bls.n	8000540 <ringbuff_get_linear_block_read_length+0x68>
        len = buff->size - r;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	689a      	ldr	r2, [r3, #8]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	617b      	str	r3, [r7, #20]
 800053e:	e001      	b.n	8000544 <ringbuff_get_linear_block_read_length+0x6c>
    } else {
        len = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
    }
    return len;
 8000544:	697b      	ldr	r3, [r7, #20]
}
 8000546:	4618      	mov	r0, r3
 8000548:	371c      	adds	r7, #28
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	deadbeef 	.word	0xdeadbeef
 8000554:	21524110 	.word	0x21524110

08000558 <ringbuff_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
ringbuff_skip(RINGBUFF_VOLATILE ringbuff_t* buff, size_t len) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d014      	beq.n	8000592 <ringbuff_skip+0x3a>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a20      	ldr	r2, [pc, #128]	; (80005f0 <ringbuff_skip+0x98>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d10f      	bne.n	8000592 <ringbuff_skip+0x3a>
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a1f      	ldr	r2, [pc, #124]	; (80005f4 <ringbuff_skip+0x9c>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d10a      	bne.n	8000592 <ringbuff_skip+0x3a>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d006      	beq.n	8000592 <ringbuff_skip+0x3a>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <ringbuff_skip+0x3a>
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d101      	bne.n	8000596 <ringbuff_skip+0x3e>
        return 0;
 8000592:	2300      	movs	r3, #0
 8000594:	e027      	b.n	80005e6 <ringbuff_skip+0x8e>
    }

    full = ringbuff_get_full(buff);             /* Get buffer used length */
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f7ff ff32 	bl	8000400 <ringbuff_get_full>
 800059c:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 800059e:	683a      	ldr	r2, [r7, #0]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4293      	cmp	r3, r2
 80005a4:	bf28      	it	cs
 80005a6:	4613      	movcs	r3, r2
 80005a8:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	68da      	ldr	r2, [r3, #12]
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	441a      	add	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	68da      	ldr	r2, [r3, #12]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d306      	bcc.n	80005d0 <ringbuff_skip+0x78>
        buff->r -= buff->size;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	68d2      	ldr	r2, [r2, #12]
 80005ca:	1ad2      	subs	r2, r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d005      	beq.n	80005e4 <ringbuff_skip+0x8c>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	2100      	movs	r1, #0
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	4798      	blx	r3
    return len;
 80005e4:	683b      	ldr	r3, [r7, #0]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	deadbeef 	.word	0xdeadbeef
 80005f4:	21524110 	.word	0x21524110

080005f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000600:	480c      	ldr	r0, [pc, #48]	; (8000634 <LoopForever+0x6>)
  ldr r1, =_edata
 8000602:	490d      	ldr	r1, [pc, #52]	; (8000638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000604:	4a0d      	ldr	r2, [pc, #52]	; (800063c <LoopForever+0xe>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000608:	e002      	b.n	8000610 <LoopCopyDataInit>

0800060a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800060c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060e:	3304      	adds	r3, #4

08000610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000614:	d3f9      	bcc.n	800060a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000618:	4c0a      	ldr	r4, [pc, #40]	; (8000644 <LoopForever+0x16>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800061c:	e001      	b.n	8000622 <LoopFillZerobss>

0800061e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000620:	3204      	adds	r2, #4

08000622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000624:	d3fb      	bcc.n	800061e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000626:	f000 f819 	bl	800065c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800062a:	f7ff fe55 	bl	80002d8 <main>

0800062e <LoopForever>:

LoopForever:
  b LoopForever
 800062e:	e7fe      	b.n	800062e <LoopForever>
  ldr   r0, =_estack
 8000630:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000634:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000638:	24000008 	.word	0x24000008
  ldr r2, =_sidata
 800063c:	080006c4 	.word	0x080006c4
  ldr r2, =_sbss
 8000640:	24000008 	.word	0x24000008
  ldr r4, =_ebss
 8000644:	24000024 	.word	0x24000024

08000648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000648:	e7fe      	b.n	8000648 <ADC1_2_IRQHandler>

0800064a <memset>:
 800064a:	4402      	add	r2, r0
 800064c:	4603      	mov	r3, r0
 800064e:	4293      	cmp	r3, r2
 8000650:	d100      	bne.n	8000654 <memset+0xa>
 8000652:	4770      	bx	lr
 8000654:	f803 1b01 	strb.w	r1, [r3], #1
 8000658:	e7f9      	b.n	800064e <memset+0x4>
	...

0800065c <__libc_init_array>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	4d0d      	ldr	r5, [pc, #52]	; (8000694 <__libc_init_array+0x38>)
 8000660:	4c0d      	ldr	r4, [pc, #52]	; (8000698 <__libc_init_array+0x3c>)
 8000662:	1b64      	subs	r4, r4, r5
 8000664:	10a4      	asrs	r4, r4, #2
 8000666:	2600      	movs	r6, #0
 8000668:	42a6      	cmp	r6, r4
 800066a:	d109      	bne.n	8000680 <__libc_init_array+0x24>
 800066c:	4d0b      	ldr	r5, [pc, #44]	; (800069c <__libc_init_array+0x40>)
 800066e:	4c0c      	ldr	r4, [pc, #48]	; (80006a0 <__libc_init_array+0x44>)
 8000670:	f000 f818 	bl	80006a4 <_init>
 8000674:	1b64      	subs	r4, r4, r5
 8000676:	10a4      	asrs	r4, r4, #2
 8000678:	2600      	movs	r6, #0
 800067a:	42a6      	cmp	r6, r4
 800067c:	d105      	bne.n	800068a <__libc_init_array+0x2e>
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f855 3b04 	ldr.w	r3, [r5], #4
 8000684:	4798      	blx	r3
 8000686:	3601      	adds	r6, #1
 8000688:	e7ee      	b.n	8000668 <__libc_init_array+0xc>
 800068a:	f855 3b04 	ldr.w	r3, [r5], #4
 800068e:	4798      	blx	r3
 8000690:	3601      	adds	r6, #1
 8000692:	e7f2      	b.n	800067a <__libc_init_array+0x1e>
 8000694:	080006bc 	.word	0x080006bc
 8000698:	080006bc 	.word	0x080006bc
 800069c:	080006bc 	.word	0x080006bc
 80006a0:	080006c0 	.word	0x080006c0

080006a4 <_init>:
 80006a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a6:	bf00      	nop
 80006a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006aa:	bc08      	pop	{r3}
 80006ac:	469e      	mov	lr, r3
 80006ae:	4770      	bx	lr

080006b0 <_fini>:
 80006b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b2:	bf00      	nop
 80006b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006b6:	bc08      	pop	{r3}
 80006b8:	469e      	mov	lr, r3
 80006ba:	4770      	bx	lr
