
led_urt_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089c4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08008c64  08008c64  00018c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cf0  08008cf0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08008cf0  08008cf0  00018cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cf8  08008cf8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cf8  08008cf8  00018cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cfc  08008cfc  00018cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  08008d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  24000060  08008d60  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400041c  08008d60  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001255e  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000275a  00000000  00000000  0003262f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  00034d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000967  00000000  00000000  000359e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039a02  00000000  00000000  0003634f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014057  00000000  00000000  0006fd51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00177ff6  00000000  00000000  00083da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003648  00000000  00000000  001fbda0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  001ff3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008c4c 	.word	0x08008c4c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	08008c4c 	.word	0x08008c4c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000680:	4b3d      	ldr	r3, [pc, #244]	; (8000778 <SystemInit+0xfc>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000686:	4a3c      	ldr	r2, [pc, #240]	; (8000778 <SystemInit+0xfc>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000690:	4b39      	ldr	r3, [pc, #228]	; (8000778 <SystemInit+0xfc>)
 8000692:	691b      	ldr	r3, [r3, #16]
 8000694:	4a38      	ldr	r2, [pc, #224]	; (8000778 <SystemInit+0xfc>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800069c:	4b37      	ldr	r3, [pc, #220]	; (800077c <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	2b06      	cmp	r3, #6
 80006a6:	d807      	bhi.n	80006b8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a8:	4b34      	ldr	r3, [pc, #208]	; (800077c <SystemInit+0x100>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f023 030f 	bic.w	r3, r3, #15
 80006b0:	4a32      	ldr	r2, [pc, #200]	; (800077c <SystemInit+0x100>)
 80006b2:	f043 0307 	orr.w	r3, r3, #7
 80006b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b8:	4b31      	ldr	r3, [pc, #196]	; (8000780 <SystemInit+0x104>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a30      	ldr	r2, [pc, #192]	; (8000780 <SystemInit+0x104>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c4:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <SystemInit+0x104>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ca:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <SystemInit+0x104>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	492c      	ldr	r1, [pc, #176]	; (8000780 <SystemInit+0x104>)
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <SystemInit+0x108>)
 80006d2:	4013      	ands	r3, r2
 80006d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d007      	beq.n	80006f2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <SystemInit+0x100>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f023 030f 	bic.w	r3, r3, #15
 80006ea:	4a24      	ldr	r2, [pc, #144]	; (800077c <SystemInit+0x100>)
 80006ec:	f043 0307 	orr.w	r3, r3, #7
 80006f0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <SystemInit+0x104>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <SystemInit+0x104>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <SystemInit+0x104>)
 8000706:	4a20      	ldr	r2, [pc, #128]	; (8000788 <SystemInit+0x10c>)
 8000708:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <SystemInit+0x104>)
 800070c:	4a1f      	ldr	r2, [pc, #124]	; (800078c <SystemInit+0x110>)
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <SystemInit+0x104>)
 8000712:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <SystemInit+0x114>)
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <SystemInit+0x104>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <SystemInit+0x114>)
 8000720:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <SystemInit+0x104>)
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <SystemInit+0x114>)
 800072c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <SystemInit+0x104>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a11      	ldr	r2, [pc, #68]	; (8000780 <SystemInit+0x104>)
 800073a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <SystemInit+0x104>)
 8000742:	2200      	movs	r2, #0
 8000744:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <SystemInit+0x118>)
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <SystemInit+0x118>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <SystemInit+0x11c>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x120>)
 8000758:	4013      	ands	r3, r2
 800075a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075e:	d202      	bcs.n	8000766 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <SystemInit+0x124>)
 8000762:	2201      	movs	r2, #1
 8000764:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <SystemInit+0x128>)
 8000768:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800076c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00
 800077c:	52002000 	.word	0x52002000
 8000780:	58024400 	.word	0x58024400
 8000784:	eaf6ed7f 	.word	0xeaf6ed7f
 8000788:	02020200 	.word	0x02020200
 800078c:	01ff0000 	.word	0x01ff0000
 8000790:	01010280 	.word	0x01010280
 8000794:	580000c0 	.word	0x580000c0
 8000798:	5c001000 	.word	0x5c001000
 800079c:	ffff0000 	.word	0xffff0000
 80007a0:	51008108 	.word	0x51008108
 80007a4:	52004000 	.word	0x52004000

080007a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_DMA_Init+0x4c>)
 80007b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007b4:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <MX_DMA_Init+0x4c>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <MX_DMA_Init+0x4c>)
 80007c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2100      	movs	r1, #0
 80007d0:	200b      	movs	r0, #11
 80007d2:	f000 fd42 	bl	800125a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80007d6:	200b      	movs	r0, #11
 80007d8:	f000 fd59 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	200c      	movs	r0, #12
 80007e2:	f000 fd3a 	bl	800125a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007e6:	200c      	movs	r0, #12
 80007e8:	f000 fd51 	bl	800128e <HAL_NVIC_EnableIRQ>

}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	58024400 	.word	0x58024400

080007f8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_GPIO_Init+0x50>)
 8000800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000804:	4a10      	ldr	r2, [pc, #64]	; (8000848 <MX_GPIO_Init+0x50>)
 8000806:	f043 0302 	orr.w	r3, r3, #2
 800080a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_GPIO_Init+0x50>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	f003 0302 	and.w	r3, r3, #2
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_GPIO_Init+0x50>)
 800081e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000822:	4a09      	ldr	r2, [pc, #36]	; (8000848 <MX_GPIO_Init+0x50>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_GPIO_Init+0x50>)
 800082e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000832:	f003 0308 	and.w	r3, r3, #8
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	58024400 	.word	0x58024400

0800084c <getDistance>:
//  HAL_UART_Transmit(&huart3, (uint8_t *) buff, len, 1000);
}


uint16_t getDistance()
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
	int len = snprintf(buff, sizeof(buff), "Lider Distance = %d\n\r", distance);
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <getDistance+0x34>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <getDistance+0x38>)
 8000858:	2132      	movs	r1, #50	; 0x32
 800085a:	480b      	ldr	r0, [pc, #44]	; (8000888 <getDistance+0x3c>)
 800085c:	f007 fd3e 	bl	80082dc <sniprintf>
 8000860:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart3, (uint8_t *) buff, len, 1000);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	b29a      	uxth	r2, r3
 8000866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086a:	4907      	ldr	r1, [pc, #28]	; (8000888 <getDistance+0x3c>)
 800086c:	4807      	ldr	r0, [pc, #28]	; (800088c <getDistance+0x40>)
 800086e:	f005 ffe9 	bl	8006844 <HAL_UART_Transmit>
	return distance;
 8000872:	4b03      	ldr	r3, [pc, #12]	; (8000880 <getDistance+0x34>)
 8000874:	881b      	ldrh	r3, [r3, #0]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2400007c 	.word	0x2400007c
 8000884:	08008c64 	.word	0x08008c64
 8000888:	24000080 	.word	0x24000080
 800088c:	2400014c 	.word	0x2400014c

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000896:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800089a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800089c:	bf00      	nop
 800089e:	4b26      	ldr	r3, [pc, #152]	; (8000938 <main+0xa8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d004      	beq.n	80008b4 <main+0x24>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	607a      	str	r2, [r7, #4]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	dcf4      	bgt.n	800089e <main+0xe>
  if ( timeout < 0 )
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	da01      	bge.n	80008be <main+0x2e>
  {
  Error_Handler();
 80008ba:	f000 f8a9 	bl	8000a10 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f000 fb2f 	bl	8000f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 f83b 	bl	800093c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <main+0xa8>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	4a1a      	ldr	r2, [pc, #104]	; (8000938 <main+0xa8>)
 80008ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <main+0xa8>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f003 f8c3 	bl	8003a70 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008ea:	2100      	movs	r1, #0
 80008ec:	2000      	movs	r0, #0
 80008ee:	f003 f8d9 	bl	8003aa4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008f8:	bf00      	nop
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <main+0xa8>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d104      	bne.n	8000910 <main+0x80>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	1e5a      	subs	r2, r3, #1
 800090a:	607a      	str	r2, [r7, #4]
 800090c:	2b00      	cmp	r3, #0
 800090e:	dcf4      	bgt.n	80008fa <main+0x6a>
if ( timeout < 0 )
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	da01      	bge.n	800091a <main+0x8a>
{
Error_Handler();
 8000916:	f000 f87b 	bl	8000a10 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091a:	f7ff ff6d 	bl	80007f8 <MX_GPIO_Init>
  MX_DMA_Init();
 800091e:	f7ff ff43 	bl	80007a8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000922:	f000 f95f 	bl	8000be4 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8000926:	f000 f911 	bl	8000b4c <MX_UART5_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(500);
 800092a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800092e:	f000 fb89 	bl	8001044 <HAL_Delay>

	  getDistance();
 8000932:	f7ff ff8b 	bl	800084c <getDistance>
	  HAL_Delay(500);
 8000936:	e7f8      	b.n	800092a <main+0x9a>
 8000938:	58024400 	.word	0x58024400

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b09c      	sub	sp, #112	; 0x70
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000946:	224c      	movs	r2, #76	; 0x4c
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f007 fcfa 	bl	8008344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2220      	movs	r2, #32
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f007 fcf4 	bl	8008344 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800095c:	2004      	movs	r0, #4
 800095e:	f003 f8b5 	bl	8003acc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <SystemClock_Config+0xcc>)
 8000968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096a:	4a27      	ldr	r2, [pc, #156]	; (8000a08 <SystemClock_Config+0xcc>)
 800096c:	f023 0301 	bic.w	r3, r3, #1
 8000970:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000972:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <SystemClock_Config+0xcc>)
 8000974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <SystemClock_Config+0xd0>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000984:	4a21      	ldr	r2, [pc, #132]	; (8000a0c <SystemClock_Config+0xd0>)
 8000986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <SystemClock_Config+0xd0>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000998:	bf00      	nop
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <SystemClock_Config+0xd0>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009a6:	d1f8      	bne.n	800099a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a8:	2302      	movs	r3, #2
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009ac:	2301      	movs	r3, #1
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b0:	2340      	movs	r3, #64	; 0x40
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 f8df 	bl	8003b80 <HAL_RCC_OscConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009c8:	f000 f822 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009cc:	233f      	movs	r3, #63	; 0x3f
 80009ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009e0:	2340      	movs	r3, #64	; 0x40
 80009e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2101      	movs	r1, #1
 80009f0:	4618      	mov	r0, r3
 80009f2:	f003 fd1f 	bl	8004434 <HAL_RCC_ClockConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009fc:	f000 f808 	bl	8000a10 <Error_Handler>
  }
}
 8000a00:	bf00      	nop
 8000a02:	3770      	adds	r7, #112	; 0x70
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	58000400 	.word	0x58000400
 8000a0c:	58024800 	.word	0x58024800

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <HAL_MspInit+0x30>)
 8000a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a28:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <HAL_MspInit+0x30>)
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_MspInit+0x30>)
 8000a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a38:	f003 0302 	and.w	r3, r3, #2
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	58024400 	.word	0x58024400

08000a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <NMI_Handler+0x4>

08000a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <HardFault_Handler+0x4>

08000a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <MemManage_Handler+0x4>

08000a62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <BusFault_Handler+0x4>

08000a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <UsageFault_Handler+0x4>

08000a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9c:	f000 fab2 	bl	8001004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000aa8:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <DMA1_Stream0_IRQHandler+0x10>)
 8000aaa:	f001 fccb 	bl	8002444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	240001e0 	.word	0x240001e0

08000ab8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <DMA1_Stream1_IRQHandler+0x10>)
 8000abe:	f001 fcc1 	bl	8002444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	24000258 	.word	0x24000258

08000acc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <UART5_IRQHandler+0x10>)
 8000ad2:	f005 ff45 	bl	8006960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	240000b8 	.word	0x240000b8

08000ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae8:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <_sbrk+0x5c>)
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <_sbrk+0x60>)
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <_sbrk+0x64>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <_sbrk+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d207      	bcs.n	8000b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b10:	f007 fc20 	bl	8008354 <__errno>
 8000b14:	4603      	mov	r3, r0
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	e009      	b.n	8000b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <_sbrk+0x64>)
 8000b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	24080000 	.word	0x24080000
 8000b40:	00000400 	.word	0x00000400
 8000b44:	240000b4 	.word	0x240000b4
 8000b48:	24000420 	.word	0x24000420

08000b4c <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b50:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <MX_UART5_Init+0x90>)
 8000b52:	4a23      	ldr	r2, [pc, #140]	; (8000be0 <MX_UART5_Init+0x94>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b56:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <MX_UART5_Init+0x90>)
 8000b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b5c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <MX_UART5_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_UART5_Init+0x90>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <MX_UART5_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_UART5_Init+0x90>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_UART5_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_UART5_Init+0x90>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <MX_UART5_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_UART5_Init+0x90>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_UART5_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b94:	4811      	ldr	r0, [pc, #68]	; (8000bdc <MX_UART5_Init+0x90>)
 8000b96:	f005 fe05 	bl	80067a4 <HAL_UART_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000ba0:	f7ff ff36 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	480d      	ldr	r0, [pc, #52]	; (8000bdc <MX_UART5_Init+0x90>)
 8000ba8:	f007 face 	bl	8008148 <HAL_UARTEx_SetTxFifoThreshold>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000bb2:	f7ff ff2d 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4808      	ldr	r0, [pc, #32]	; (8000bdc <MX_UART5_Init+0x90>)
 8000bba:	f007 fb03 	bl	80081c4 <HAL_UARTEx_SetRxFifoThreshold>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000bc4:	f7ff ff24 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_UART5_Init+0x90>)
 8000bca:	f007 fa84 	bl	80080d6 <HAL_UARTEx_DisableFifoMode>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000bd4:	f7ff ff1c 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	240000b8 	.word	0x240000b8
 8000be0:	40005000 	.word	0x40005000

08000be4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000bea:	4a23      	ldr	r2, [pc, #140]	; (8000c78 <MX_USART3_UART_Init+0x94>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c2c:	4811      	ldr	r0, [pc, #68]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c2e:	f005 fdb9 	bl	80067a4 <HAL_UART_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c38:	f7ff feea 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	480d      	ldr	r0, [pc, #52]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c40:	f007 fa82 	bl	8008148 <HAL_UARTEx_SetTxFifoThreshold>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c4a:	f7ff fee1 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4808      	ldr	r0, [pc, #32]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c52:	f007 fab7 	bl	80081c4 <HAL_UARTEx_SetRxFifoThreshold>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c5c:	f7ff fed8 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_USART3_UART_Init+0x90>)
 8000c62:	f007 fa38 	bl	80080d6 <HAL_UARTEx_DisableFifoMode>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c6c:	f7ff fed0 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	2400014c 	.word	0x2400014c
 8000c78:	40004800 	.word	0x40004800

08000c7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0bc      	sub	sp, #240	; 0xf0
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c94:	f107 0318 	add.w	r3, r7, #24
 8000c98:	22c0      	movs	r2, #192	; 0xc0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f007 fb51 	bl	8008344 <memset>
  if(uartHandle->Instance==UART5)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a80      	ldr	r2, [pc, #512]	; (8000ea8 <HAL_UART_MspInit+0x22c>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	f040 80ad 	bne.w	8000e08 <HAL_UART_MspInit+0x18c>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000cae:	f04f 0202 	mov.w	r2, #2
 8000cb2:	f04f 0300 	mov.w	r3, #0
 8000cb6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc0:	f107 0318 	add.w	r3, r7, #24
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f003 ff41 	bl	8004b4c <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000cd0:	f7ff fe9e 	bl	8000a10 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000cd4:	4b75      	ldr	r3, [pc, #468]	; (8000eac <HAL_UART_MspInit+0x230>)
 8000cd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cda:	4a74      	ldr	r2, [pc, #464]	; (8000eac <HAL_UART_MspInit+0x230>)
 8000cdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ce0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ce4:	4b71      	ldr	r3, [pc, #452]	; (8000eac <HAL_UART_MspInit+0x230>)
 8000ce6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b6e      	ldr	r3, [pc, #440]	; (8000eac <HAL_UART_MspInit+0x230>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	4a6c      	ldr	r2, [pc, #432]	; (8000eac <HAL_UART_MspInit+0x230>)
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d02:	4b6a      	ldr	r3, [pc, #424]	; (8000eac <HAL_UART_MspInit+0x230>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d10:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8000d2a:	230e      	movs	r3, #14
 8000d2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d34:	4619      	mov	r1, r3
 8000d36:	485e      	ldr	r0, [pc, #376]	; (8000eb0 <HAL_UART_MspInit+0x234>)
 8000d38:	f002 fcea 	bl	8003710 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8000d3c:	4b5d      	ldr	r3, [pc, #372]	; (8000eb4 <HAL_UART_MspInit+0x238>)
 8000d3e:	4a5e      	ldr	r2, [pc, #376]	; (8000eb8 <HAL_UART_MspInit+0x23c>)
 8000d40:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8000d42:	4b5c      	ldr	r3, [pc, #368]	; (8000eb4 <HAL_UART_MspInit+0x238>)
 8000d44:	2241      	movs	r2, #65	; 0x41
 8000d46:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d48:	4b5a      	ldr	r3, [pc, #360]	; (8000eb4 <HAL_UART_MspInit+0x238>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4e:	4b59      	ldr	r3, [pc, #356]	; (8000eb4 <HAL_UART_MspInit+0x238>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d54:	4b57      	ldr	r3, [pc, #348]	; (8000eb4 <HAL_UART_MspInit+0x238>)
 8000d56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d5a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d5c:	4b55      	ldr	r3, [pc, #340]	; (8000eb4 <HAL_UART_MspInit+0x238>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d62:	4b54      	ldr	r3, [pc, #336]	; (8000eb4 <HAL_UART_MspInit+0x238>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8000d68:	4b52      	ldr	r3, [pc, #328]	; (8000eb4 <HAL_UART_MspInit+0x238>)
 8000d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d6e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d70:	4b50      	ldr	r3, [pc, #320]	; (8000eb4 <HAL_UART_MspInit+0x238>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d76:	4b4f      	ldr	r3, [pc, #316]	; (8000eb4 <HAL_UART_MspInit+0x238>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000d7c:	484d      	ldr	r0, [pc, #308]	; (8000eb4 <HAL_UART_MspInit+0x238>)
 8000d7e:	f000 faa1 	bl	80012c4 <HAL_DMA_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000d88:	f7ff fe42 	bl	8000a10 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a49      	ldr	r2, [pc, #292]	; (8000eb4 <HAL_UART_MspInit+0x238>)
 8000d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000d94:	4a47      	ldr	r2, [pc, #284]	; (8000eb4 <HAL_UART_MspInit+0x238>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream1;
 8000d9a:	4b48      	ldr	r3, [pc, #288]	; (8000ebc <HAL_UART_MspInit+0x240>)
 8000d9c:	4a48      	ldr	r2, [pc, #288]	; (8000ec0 <HAL_UART_MspInit+0x244>)
 8000d9e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8000da0:	4b46      	ldr	r3, [pc, #280]	; (8000ebc <HAL_UART_MspInit+0x240>)
 8000da2:	2242      	movs	r2, #66	; 0x42
 8000da4:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da6:	4b45      	ldr	r3, [pc, #276]	; (8000ebc <HAL_UART_MspInit+0x240>)
 8000da8:	2240      	movs	r2, #64	; 0x40
 8000daa:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dac:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <HAL_UART_MspInit+0x240>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000db2:	4b42      	ldr	r3, [pc, #264]	; (8000ebc <HAL_UART_MspInit+0x240>)
 8000db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db8:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dba:	4b40      	ldr	r3, [pc, #256]	; (8000ebc <HAL_UART_MspInit+0x240>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc0:	4b3e      	ldr	r3, [pc, #248]	; (8000ebc <HAL_UART_MspInit+0x240>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;
 8000dc6:	4b3d      	ldr	r3, [pc, #244]	; (8000ebc <HAL_UART_MspInit+0x240>)
 8000dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dcc:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dce:	4b3b      	ldr	r3, [pc, #236]	; (8000ebc <HAL_UART_MspInit+0x240>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd4:	4b39      	ldr	r3, [pc, #228]	; (8000ebc <HAL_UART_MspInit+0x240>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8000dda:	4838      	ldr	r0, [pc, #224]	; (8000ebc <HAL_UART_MspInit+0x240>)
 8000ddc:	f000 fa72 	bl	80012c4 <HAL_DMA_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 8000de6:	f7ff fe13 	bl	8000a10 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a33      	ldr	r2, [pc, #204]	; (8000ebc <HAL_UART_MspInit+0x240>)
 8000dee:	67da      	str	r2, [r3, #124]	; 0x7c
 8000df0:	4a32      	ldr	r2, [pc, #200]	; (8000ebc <HAL_UART_MspInit+0x240>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2035      	movs	r0, #53	; 0x35
 8000dfc:	f000 fa2d 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000e00:	2035      	movs	r0, #53	; 0x35
 8000e02:	f000 fa44 	bl	800128e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e06:	e04b      	b.n	8000ea0 <HAL_UART_MspInit+0x224>
  else if(uartHandle->Instance==USART3)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a2d      	ldr	r2, [pc, #180]	; (8000ec4 <HAL_UART_MspInit+0x248>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d146      	bne.n	8000ea0 <HAL_UART_MspInit+0x224>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e12:	f04f 0202 	mov.w	r2, #2
 8000e16:	f04f 0300 	mov.w	r3, #0
 8000e1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e24:	f107 0318 	add.w	r3, r7, #24
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 fe8f 	bl	8004b4c <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8000e34:	f7ff fdec 	bl	8000a10 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <HAL_UART_MspInit+0x230>)
 8000e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e3e:	4a1b      	ldr	r2, [pc, #108]	; (8000eac <HAL_UART_MspInit+0x230>)
 8000e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <HAL_UART_MspInit+0x230>)
 8000e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <HAL_UART_MspInit+0x230>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5c:	4a13      	ldr	r2, [pc, #76]	; (8000eac <HAL_UART_MspInit+0x230>)
 8000e5e:	f043 0308 	orr.w	r3, r3, #8
 8000e62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_UART_MspInit+0x230>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6c:	f003 0308 	and.w	r3, r3, #8
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e8e:	2307      	movs	r3, #7
 8000e90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e94:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <HAL_UART_MspInit+0x24c>)
 8000e9c:	f002 fc38 	bl	8003710 <HAL_GPIO_Init>
}
 8000ea0:	bf00      	nop
 8000ea2:	37f0      	adds	r7, #240	; 0xf0
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40005000 	.word	0x40005000
 8000eac:	58024400 	.word	0x58024400
 8000eb0:	58020400 	.word	0x58020400
 8000eb4:	240001e0 	.word	0x240001e0
 8000eb8:	40020010 	.word	0x40020010
 8000ebc:	24000258 	.word	0x24000258
 8000ec0:	40020028 	.word	0x40020028
 8000ec4:	40004800 	.word	0x40004800
 8000ec8:	58020c00 	.word	0x58020c00

08000ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ed0:	f7ff fbd4 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed4:	480c      	ldr	r0, [pc, #48]	; (8000f08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ed6:	490d      	ldr	r1, [pc, #52]	; (8000f0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000edc:	e002      	b.n	8000ee4 <LoopCopyDataInit>

08000ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee2:	3304      	adds	r3, #4

08000ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee8:	d3f9      	bcc.n	8000ede <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eec:	4c0a      	ldr	r4, [pc, #40]	; (8000f18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef0:	e001      	b.n	8000ef6 <LoopFillZerobss>

08000ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef4:	3204      	adds	r2, #4

08000ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000efa:	f007 fa31 	bl	8008360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efe:	f7ff fcc7 	bl	8000890 <main>
  bx  lr
 8000f02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f04:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f0c:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000f10:	08008d00 	.word	0x08008d00
  ldr r2, =_sbss
 8000f14:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8000f18:	2400041c 	.word	0x2400041c

08000f1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC3_IRQHandler>
	...

08000f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f26:	2003      	movs	r0, #3
 8000f28:	f000 f98c 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f2c:	f003 fc38 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 8000f30:	4602      	mov	r2, r0
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_Init+0x68>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	0a1b      	lsrs	r3, r3, #8
 8000f38:	f003 030f 	and.w	r3, r3, #15
 8000f3c:	4913      	ldr	r1, [pc, #76]	; (8000f8c <HAL_Init+0x6c>)
 8000f3e:	5ccb      	ldrb	r3, [r1, r3]
 8000f40:	f003 031f 	and.w	r3, r3, #31
 8000f44:	fa22 f303 	lsr.w	r3, r2, r3
 8000f48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_Init+0x68>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_Init+0x6c>)
 8000f54:	5cd3      	ldrb	r3, [r2, r3]
 8000f56:	f003 031f 	and.w	r3, r3, #31
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f60:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <HAL_Init+0x70>)
 8000f62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f64:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <HAL_Init+0x74>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f6a:	200f      	movs	r0, #15
 8000f6c:	f000 f814 	bl	8000f98 <HAL_InitTick>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e002      	b.n	8000f80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7a:	f7ff fd4f 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	08008c7c 	.word	0x08008c7c
 8000f90:	24000004 	.word	0x24000004
 8000f94:	24000000 	.word	0x24000000

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_InitTick+0x60>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e021      	b.n	8000ff0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <HAL_InitTick+0x64>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_InitTick+0x60>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f971 	bl	80012aa <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00e      	b.n	8000ff0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d80a      	bhi.n	8000fee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 f93b 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <HAL_InitTick+0x68>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2400000c 	.word	0x2400000c
 8000ffc:	24000000 	.word	0x24000000
 8001000:	24000008 	.word	0x24000008

08001004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x20>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x24>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <HAL_IncTick+0x24>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	2400000c 	.word	0x2400000c
 8001028:	240002d0 	.word	0x240002d0

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <HAL_GetTick+0x14>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	240002d0 	.word	0x240002d0

08001044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800104c:	f7ff ffee 	bl	800102c <HAL_GetTick>
 8001050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105c:	d005      	beq.n	800106a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_Delay+0x44>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800106a:	bf00      	nop
 800106c:	f7ff ffde 	bl	800102c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	429a      	cmp	r2, r3
 800107a:	d8f7      	bhi.n	800106c <HAL_Delay+0x28>
  {
  }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2400000c 	.word	0x2400000c

0800108c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <HAL_GetREVID+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	0c1b      	lsrs	r3, r3, #16
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	5c001000 	.word	0x5c001000

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <__NVIC_SetPriorityGrouping+0x40>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d2:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <__NVIC_SetPriorityGrouping+0x40>)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	60d3      	str	r3, [r2, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00
 80010e8:	05fa0000 	.word	0x05fa0000

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4907      	ldr	r1, [pc, #28]	; (8001140 <__NVIC_EnableIRQ+0x38>)
 8001122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff29 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001268:	f7ff ff40 	bl	80010ec <__NVIC_GetPriorityGrouping>
 800126c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff ff90 	bl	8001198 <NVIC_EncodePriority>
 8001278:	4602      	mov	r2, r0
 800127a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff5f 	bl	8001144 <__NVIC_SetPriority>
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001298:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff33 	bl	8001108 <__NVIC_EnableIRQ>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffa4 	bl	8001200 <SysTick_Config>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff feae 	bl	800102c <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e316      	b.n	800190a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a66      	ldr	r2, [pc, #408]	; (800147c <HAL_DMA_Init+0x1b8>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d04a      	beq.n	800137c <HAL_DMA_Init+0xb8>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a65      	ldr	r2, [pc, #404]	; (8001480 <HAL_DMA_Init+0x1bc>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d045      	beq.n	800137c <HAL_DMA_Init+0xb8>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a63      	ldr	r2, [pc, #396]	; (8001484 <HAL_DMA_Init+0x1c0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d040      	beq.n	800137c <HAL_DMA_Init+0xb8>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a62      	ldr	r2, [pc, #392]	; (8001488 <HAL_DMA_Init+0x1c4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d03b      	beq.n	800137c <HAL_DMA_Init+0xb8>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a60      	ldr	r2, [pc, #384]	; (800148c <HAL_DMA_Init+0x1c8>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d036      	beq.n	800137c <HAL_DMA_Init+0xb8>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a5f      	ldr	r2, [pc, #380]	; (8001490 <HAL_DMA_Init+0x1cc>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d031      	beq.n	800137c <HAL_DMA_Init+0xb8>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a5d      	ldr	r2, [pc, #372]	; (8001494 <HAL_DMA_Init+0x1d0>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d02c      	beq.n	800137c <HAL_DMA_Init+0xb8>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a5c      	ldr	r2, [pc, #368]	; (8001498 <HAL_DMA_Init+0x1d4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d027      	beq.n	800137c <HAL_DMA_Init+0xb8>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a5a      	ldr	r2, [pc, #360]	; (800149c <HAL_DMA_Init+0x1d8>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d022      	beq.n	800137c <HAL_DMA_Init+0xb8>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a59      	ldr	r2, [pc, #356]	; (80014a0 <HAL_DMA_Init+0x1dc>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d01d      	beq.n	800137c <HAL_DMA_Init+0xb8>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a57      	ldr	r2, [pc, #348]	; (80014a4 <HAL_DMA_Init+0x1e0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d018      	beq.n	800137c <HAL_DMA_Init+0xb8>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a56      	ldr	r2, [pc, #344]	; (80014a8 <HAL_DMA_Init+0x1e4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d013      	beq.n	800137c <HAL_DMA_Init+0xb8>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a54      	ldr	r2, [pc, #336]	; (80014ac <HAL_DMA_Init+0x1e8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d00e      	beq.n	800137c <HAL_DMA_Init+0xb8>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a53      	ldr	r2, [pc, #332]	; (80014b0 <HAL_DMA_Init+0x1ec>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d009      	beq.n	800137c <HAL_DMA_Init+0xb8>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a51      	ldr	r2, [pc, #324]	; (80014b4 <HAL_DMA_Init+0x1f0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d004      	beq.n	800137c <HAL_DMA_Init+0xb8>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a50      	ldr	r2, [pc, #320]	; (80014b8 <HAL_DMA_Init+0x1f4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d101      	bne.n	8001380 <HAL_DMA_Init+0xbc>
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <HAL_DMA_Init+0xbe>
 8001380:	2300      	movs	r3, #0
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 813b 	beq.w	80015fe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2202      	movs	r2, #2
 800138c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a37      	ldr	r2, [pc, #220]	; (800147c <HAL_DMA_Init+0x1b8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d04a      	beq.n	8001438 <HAL_DMA_Init+0x174>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a36      	ldr	r2, [pc, #216]	; (8001480 <HAL_DMA_Init+0x1bc>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d045      	beq.n	8001438 <HAL_DMA_Init+0x174>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a34      	ldr	r2, [pc, #208]	; (8001484 <HAL_DMA_Init+0x1c0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d040      	beq.n	8001438 <HAL_DMA_Init+0x174>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a33      	ldr	r2, [pc, #204]	; (8001488 <HAL_DMA_Init+0x1c4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d03b      	beq.n	8001438 <HAL_DMA_Init+0x174>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a31      	ldr	r2, [pc, #196]	; (800148c <HAL_DMA_Init+0x1c8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d036      	beq.n	8001438 <HAL_DMA_Init+0x174>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a30      	ldr	r2, [pc, #192]	; (8001490 <HAL_DMA_Init+0x1cc>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d031      	beq.n	8001438 <HAL_DMA_Init+0x174>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a2e      	ldr	r2, [pc, #184]	; (8001494 <HAL_DMA_Init+0x1d0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d02c      	beq.n	8001438 <HAL_DMA_Init+0x174>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a2d      	ldr	r2, [pc, #180]	; (8001498 <HAL_DMA_Init+0x1d4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d027      	beq.n	8001438 <HAL_DMA_Init+0x174>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a2b      	ldr	r2, [pc, #172]	; (800149c <HAL_DMA_Init+0x1d8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d022      	beq.n	8001438 <HAL_DMA_Init+0x174>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a2a      	ldr	r2, [pc, #168]	; (80014a0 <HAL_DMA_Init+0x1dc>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d01d      	beq.n	8001438 <HAL_DMA_Init+0x174>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a28      	ldr	r2, [pc, #160]	; (80014a4 <HAL_DMA_Init+0x1e0>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d018      	beq.n	8001438 <HAL_DMA_Init+0x174>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a27      	ldr	r2, [pc, #156]	; (80014a8 <HAL_DMA_Init+0x1e4>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d013      	beq.n	8001438 <HAL_DMA_Init+0x174>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a25      	ldr	r2, [pc, #148]	; (80014ac <HAL_DMA_Init+0x1e8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00e      	beq.n	8001438 <HAL_DMA_Init+0x174>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a24      	ldr	r2, [pc, #144]	; (80014b0 <HAL_DMA_Init+0x1ec>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d009      	beq.n	8001438 <HAL_DMA_Init+0x174>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a22      	ldr	r2, [pc, #136]	; (80014b4 <HAL_DMA_Init+0x1f0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d004      	beq.n	8001438 <HAL_DMA_Init+0x174>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a21      	ldr	r2, [pc, #132]	; (80014b8 <HAL_DMA_Init+0x1f4>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d108      	bne.n	800144a <HAL_DMA_Init+0x186>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0201 	bic.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	e007      	b.n	800145a <HAL_DMA_Init+0x196>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0201 	bic.w	r2, r2, #1
 8001458:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800145a:	e02f      	b.n	80014bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800145c:	f7ff fde6 	bl	800102c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b05      	cmp	r3, #5
 8001468:	d928      	bls.n	80014bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2220      	movs	r2, #32
 800146e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2203      	movs	r2, #3
 8001474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e246      	b.n	800190a <HAL_DMA_Init+0x646>
 800147c:	40020010 	.word	0x40020010
 8001480:	40020028 	.word	0x40020028
 8001484:	40020040 	.word	0x40020040
 8001488:	40020058 	.word	0x40020058
 800148c:	40020070 	.word	0x40020070
 8001490:	40020088 	.word	0x40020088
 8001494:	400200a0 	.word	0x400200a0
 8001498:	400200b8 	.word	0x400200b8
 800149c:	40020410 	.word	0x40020410
 80014a0:	40020428 	.word	0x40020428
 80014a4:	40020440 	.word	0x40020440
 80014a8:	40020458 	.word	0x40020458
 80014ac:	40020470 	.word	0x40020470
 80014b0:	40020488 	.word	0x40020488
 80014b4:	400204a0 	.word	0x400204a0
 80014b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1c8      	bne.n	800145c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	4b83      	ldr	r3, [pc, #524]	; (80016e4 <HAL_DMA_Init+0x420>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80014e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4313      	orrs	r3, r2
 8001506:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	2b04      	cmp	r3, #4
 800150e:	d107      	bne.n	8001520 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	4313      	orrs	r3, r2
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	4313      	orrs	r3, r2
 800151e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001520:	4b71      	ldr	r3, [pc, #452]	; (80016e8 <HAL_DMA_Init+0x424>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b71      	ldr	r3, [pc, #452]	; (80016ec <HAL_DMA_Init+0x428>)
 8001526:	4013      	ands	r3, r2
 8001528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800152c:	d328      	bcc.n	8001580 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b28      	cmp	r3, #40	; 0x28
 8001534:	d903      	bls.n	800153e <HAL_DMA_Init+0x27a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b2e      	cmp	r3, #46	; 0x2e
 800153c:	d917      	bls.n	800156e <HAL_DMA_Init+0x2aa>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b3e      	cmp	r3, #62	; 0x3e
 8001544:	d903      	bls.n	800154e <HAL_DMA_Init+0x28a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b42      	cmp	r3, #66	; 0x42
 800154c:	d90f      	bls.n	800156e <HAL_DMA_Init+0x2aa>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b46      	cmp	r3, #70	; 0x46
 8001554:	d903      	bls.n	800155e <HAL_DMA_Init+0x29a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b48      	cmp	r3, #72	; 0x48
 800155c:	d907      	bls.n	800156e <HAL_DMA_Init+0x2aa>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b4e      	cmp	r3, #78	; 0x4e
 8001564:	d905      	bls.n	8001572 <HAL_DMA_Init+0x2ae>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b52      	cmp	r3, #82	; 0x52
 800156c:	d801      	bhi.n	8001572 <HAL_DMA_Init+0x2ae>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_DMA_Init+0x2b0>
 8001572:	2300      	movs	r3, #0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800157e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f023 0307 	bic.w	r3, r3, #7
 8001596:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	4313      	orrs	r3, r2
 80015a0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d117      	bne.n	80015da <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00e      	beq.n	80015da <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f001 ff1d 	bl	80033fc <DMA_CheckFifoParam>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e197      	b.n	800190a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f001 fe58 	bl	8003298 <DMA_CalcBaseAndBitshift>
 80015e8:	4603      	mov	r3, r0
 80015ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f0:	f003 031f 	and.w	r3, r3, #31
 80015f4:	223f      	movs	r2, #63	; 0x3f
 80015f6:	409a      	lsls	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	e0cd      	b.n	800179a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a3b      	ldr	r2, [pc, #236]	; (80016f0 <HAL_DMA_Init+0x42c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d022      	beq.n	800164e <HAL_DMA_Init+0x38a>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a39      	ldr	r2, [pc, #228]	; (80016f4 <HAL_DMA_Init+0x430>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d01d      	beq.n	800164e <HAL_DMA_Init+0x38a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a38      	ldr	r2, [pc, #224]	; (80016f8 <HAL_DMA_Init+0x434>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d018      	beq.n	800164e <HAL_DMA_Init+0x38a>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a36      	ldr	r2, [pc, #216]	; (80016fc <HAL_DMA_Init+0x438>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d013      	beq.n	800164e <HAL_DMA_Init+0x38a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a35      	ldr	r2, [pc, #212]	; (8001700 <HAL_DMA_Init+0x43c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d00e      	beq.n	800164e <HAL_DMA_Init+0x38a>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a33      	ldr	r2, [pc, #204]	; (8001704 <HAL_DMA_Init+0x440>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d009      	beq.n	800164e <HAL_DMA_Init+0x38a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a32      	ldr	r2, [pc, #200]	; (8001708 <HAL_DMA_Init+0x444>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d004      	beq.n	800164e <HAL_DMA_Init+0x38a>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a30      	ldr	r2, [pc, #192]	; (800170c <HAL_DMA_Init+0x448>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d101      	bne.n	8001652 <HAL_DMA_Init+0x38e>
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <HAL_DMA_Init+0x390>
 8001652:	2300      	movs	r3, #0
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 8097 	beq.w	8001788 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a24      	ldr	r2, [pc, #144]	; (80016f0 <HAL_DMA_Init+0x42c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d021      	beq.n	80016a8 <HAL_DMA_Init+0x3e4>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a22      	ldr	r2, [pc, #136]	; (80016f4 <HAL_DMA_Init+0x430>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d01c      	beq.n	80016a8 <HAL_DMA_Init+0x3e4>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a21      	ldr	r2, [pc, #132]	; (80016f8 <HAL_DMA_Init+0x434>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d017      	beq.n	80016a8 <HAL_DMA_Init+0x3e4>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1f      	ldr	r2, [pc, #124]	; (80016fc <HAL_DMA_Init+0x438>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d012      	beq.n	80016a8 <HAL_DMA_Init+0x3e4>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1e      	ldr	r2, [pc, #120]	; (8001700 <HAL_DMA_Init+0x43c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d00d      	beq.n	80016a8 <HAL_DMA_Init+0x3e4>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <HAL_DMA_Init+0x440>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d008      	beq.n	80016a8 <HAL_DMA_Init+0x3e4>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <HAL_DMA_Init+0x444>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d003      	beq.n	80016a8 <HAL_DMA_Init+0x3e4>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a19      	ldr	r2, [pc, #100]	; (800170c <HAL_DMA_Init+0x448>)
 80016a6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_DMA_Init+0x44c>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b40      	cmp	r3, #64	; 0x40
 80016ce:	d021      	beq.n	8001714 <HAL_DMA_Init+0x450>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b80      	cmp	r3, #128	; 0x80
 80016d6:	d102      	bne.n	80016de <HAL_DMA_Init+0x41a>
 80016d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016dc:	e01b      	b.n	8001716 <HAL_DMA_Init+0x452>
 80016de:	2300      	movs	r3, #0
 80016e0:	e019      	b.n	8001716 <HAL_DMA_Init+0x452>
 80016e2:	bf00      	nop
 80016e4:	fe10803f 	.word	0xfe10803f
 80016e8:	5c001000 	.word	0x5c001000
 80016ec:	ffff0000 	.word	0xffff0000
 80016f0:	58025408 	.word	0x58025408
 80016f4:	5802541c 	.word	0x5802541c
 80016f8:	58025430 	.word	0x58025430
 80016fc:	58025444 	.word	0x58025444
 8001700:	58025458 	.word	0x58025458
 8001704:	5802546c 	.word	0x5802546c
 8001708:	58025480 	.word	0x58025480
 800170c:	58025494 	.word	0x58025494
 8001710:	fffe000f 	.word	0xfffe000f
 8001714:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68d2      	ldr	r2, [r2, #12]
 800171a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800171c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001724:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800172c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001734:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800173c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001744:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4313      	orrs	r3, r2
 800174a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b6e      	ldr	r3, [pc, #440]	; (8001914 <HAL_DMA_Init+0x650>)
 800175c:	4413      	add	r3, r2
 800175e:	4a6e      	ldr	r2, [pc, #440]	; (8001918 <HAL_DMA_Init+0x654>)
 8001760:	fba2 2303 	umull	r2, r3, r2, r3
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	009a      	lsls	r2, r3, #2
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f001 fd93 	bl	8003298 <DMA_CalcBaseAndBitshift>
 8001772:	4603      	mov	r3, r0
 8001774:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177a:	f003 031f 	and.w	r3, r3, #31
 800177e:	2201      	movs	r2, #1
 8001780:	409a      	lsls	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	e008      	b.n	800179a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2240      	movs	r2, #64	; 0x40
 800178c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2203      	movs	r2, #3
 8001792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e0b7      	b.n	800190a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a5f      	ldr	r2, [pc, #380]	; (800191c <HAL_DMA_Init+0x658>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d072      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a5d      	ldr	r2, [pc, #372]	; (8001920 <HAL_DMA_Init+0x65c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d06d      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a5c      	ldr	r2, [pc, #368]	; (8001924 <HAL_DMA_Init+0x660>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d068      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a5a      	ldr	r2, [pc, #360]	; (8001928 <HAL_DMA_Init+0x664>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d063      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a59      	ldr	r2, [pc, #356]	; (800192c <HAL_DMA_Init+0x668>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d05e      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a57      	ldr	r2, [pc, #348]	; (8001930 <HAL_DMA_Init+0x66c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d059      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a56      	ldr	r2, [pc, #344]	; (8001934 <HAL_DMA_Init+0x670>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d054      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a54      	ldr	r2, [pc, #336]	; (8001938 <HAL_DMA_Init+0x674>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d04f      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a53      	ldr	r2, [pc, #332]	; (800193c <HAL_DMA_Init+0x678>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d04a      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a51      	ldr	r2, [pc, #324]	; (8001940 <HAL_DMA_Init+0x67c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d045      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a50      	ldr	r2, [pc, #320]	; (8001944 <HAL_DMA_Init+0x680>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d040      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a4e      	ldr	r2, [pc, #312]	; (8001948 <HAL_DMA_Init+0x684>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d03b      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a4d      	ldr	r2, [pc, #308]	; (800194c <HAL_DMA_Init+0x688>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d036      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a4b      	ldr	r2, [pc, #300]	; (8001950 <HAL_DMA_Init+0x68c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d031      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <HAL_DMA_Init+0x690>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d02c      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a48      	ldr	r2, [pc, #288]	; (8001958 <HAL_DMA_Init+0x694>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d027      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a47      	ldr	r2, [pc, #284]	; (800195c <HAL_DMA_Init+0x698>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d022      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a45      	ldr	r2, [pc, #276]	; (8001960 <HAL_DMA_Init+0x69c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d01d      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a44      	ldr	r2, [pc, #272]	; (8001964 <HAL_DMA_Init+0x6a0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d018      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a42      	ldr	r2, [pc, #264]	; (8001968 <HAL_DMA_Init+0x6a4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a41      	ldr	r2, [pc, #260]	; (800196c <HAL_DMA_Init+0x6a8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d00e      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a3f      	ldr	r2, [pc, #252]	; (8001970 <HAL_DMA_Init+0x6ac>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d009      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a3e      	ldr	r2, [pc, #248]	; (8001974 <HAL_DMA_Init+0x6b0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d004      	beq.n	800188a <HAL_DMA_Init+0x5c6>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a3c      	ldr	r2, [pc, #240]	; (8001978 <HAL_DMA_Init+0x6b4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_DMA_Init+0x5ca>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_DMA_Init+0x5cc>
 800188e:	2300      	movs	r3, #0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d032      	beq.n	80018fa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f001 fe2d 	bl	80034f4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b80      	cmp	r3, #128	; 0x80
 80018a0:	d102      	bne.n	80018a8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80018bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d010      	beq.n	80018e8 <HAL_DMA_Init+0x624>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d80c      	bhi.n	80018e8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f001 feaa 	bl	8003628 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	e008      	b.n	80018fa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	a7fdabf8 	.word	0xa7fdabf8
 8001918:	cccccccd 	.word	0xcccccccd
 800191c:	40020010 	.word	0x40020010
 8001920:	40020028 	.word	0x40020028
 8001924:	40020040 	.word	0x40020040
 8001928:	40020058 	.word	0x40020058
 800192c:	40020070 	.word	0x40020070
 8001930:	40020088 	.word	0x40020088
 8001934:	400200a0 	.word	0x400200a0
 8001938:	400200b8 	.word	0x400200b8
 800193c:	40020410 	.word	0x40020410
 8001940:	40020428 	.word	0x40020428
 8001944:	40020440 	.word	0x40020440
 8001948:	40020458 	.word	0x40020458
 800194c:	40020470 	.word	0x40020470
 8001950:	40020488 	.word	0x40020488
 8001954:	400204a0 	.word	0x400204a0
 8001958:	400204b8 	.word	0x400204b8
 800195c:	58025408 	.word	0x58025408
 8001960:	5802541c 	.word	0x5802541c
 8001964:	58025430 	.word	0x58025430
 8001968:	58025444 	.word	0x58025444
 800196c:	58025458 	.word	0x58025458
 8001970:	5802546c 	.word	0x5802546c
 8001974:	58025480 	.word	0x58025480
 8001978:	58025494 	.word	0x58025494

0800197c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001984:	f7ff fb52 	bl	800102c <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e2dc      	b.n	8001f4e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d008      	beq.n	80019b2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2280      	movs	r2, #128	; 0x80
 80019a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e2cd      	b.n	8001f4e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a76      	ldr	r2, [pc, #472]	; (8001b90 <HAL_DMA_Abort+0x214>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d04a      	beq.n	8001a52 <HAL_DMA_Abort+0xd6>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a74      	ldr	r2, [pc, #464]	; (8001b94 <HAL_DMA_Abort+0x218>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d045      	beq.n	8001a52 <HAL_DMA_Abort+0xd6>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a73      	ldr	r2, [pc, #460]	; (8001b98 <HAL_DMA_Abort+0x21c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d040      	beq.n	8001a52 <HAL_DMA_Abort+0xd6>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a71      	ldr	r2, [pc, #452]	; (8001b9c <HAL_DMA_Abort+0x220>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d03b      	beq.n	8001a52 <HAL_DMA_Abort+0xd6>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a70      	ldr	r2, [pc, #448]	; (8001ba0 <HAL_DMA_Abort+0x224>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d036      	beq.n	8001a52 <HAL_DMA_Abort+0xd6>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a6e      	ldr	r2, [pc, #440]	; (8001ba4 <HAL_DMA_Abort+0x228>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d031      	beq.n	8001a52 <HAL_DMA_Abort+0xd6>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a6d      	ldr	r2, [pc, #436]	; (8001ba8 <HAL_DMA_Abort+0x22c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d02c      	beq.n	8001a52 <HAL_DMA_Abort+0xd6>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a6b      	ldr	r2, [pc, #428]	; (8001bac <HAL_DMA_Abort+0x230>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d027      	beq.n	8001a52 <HAL_DMA_Abort+0xd6>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a6a      	ldr	r2, [pc, #424]	; (8001bb0 <HAL_DMA_Abort+0x234>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d022      	beq.n	8001a52 <HAL_DMA_Abort+0xd6>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a68      	ldr	r2, [pc, #416]	; (8001bb4 <HAL_DMA_Abort+0x238>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d01d      	beq.n	8001a52 <HAL_DMA_Abort+0xd6>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a67      	ldr	r2, [pc, #412]	; (8001bb8 <HAL_DMA_Abort+0x23c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d018      	beq.n	8001a52 <HAL_DMA_Abort+0xd6>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a65      	ldr	r2, [pc, #404]	; (8001bbc <HAL_DMA_Abort+0x240>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d013      	beq.n	8001a52 <HAL_DMA_Abort+0xd6>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a64      	ldr	r2, [pc, #400]	; (8001bc0 <HAL_DMA_Abort+0x244>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d00e      	beq.n	8001a52 <HAL_DMA_Abort+0xd6>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a62      	ldr	r2, [pc, #392]	; (8001bc4 <HAL_DMA_Abort+0x248>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d009      	beq.n	8001a52 <HAL_DMA_Abort+0xd6>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a61      	ldr	r2, [pc, #388]	; (8001bc8 <HAL_DMA_Abort+0x24c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d004      	beq.n	8001a52 <HAL_DMA_Abort+0xd6>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a5f      	ldr	r2, [pc, #380]	; (8001bcc <HAL_DMA_Abort+0x250>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d101      	bne.n	8001a56 <HAL_DMA_Abort+0xda>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_DMA_Abort+0xdc>
 8001a56:	2300      	movs	r3, #0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 021e 	bic.w	r2, r2, #30
 8001a6a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a7a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	e00a      	b.n	8001a9a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 020e 	bic.w	r2, r2, #14
 8001a92:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a3c      	ldr	r2, [pc, #240]	; (8001b90 <HAL_DMA_Abort+0x214>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d072      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a3a      	ldr	r2, [pc, #232]	; (8001b94 <HAL_DMA_Abort+0x218>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d06d      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a39      	ldr	r2, [pc, #228]	; (8001b98 <HAL_DMA_Abort+0x21c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d068      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a37      	ldr	r2, [pc, #220]	; (8001b9c <HAL_DMA_Abort+0x220>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d063      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a36      	ldr	r2, [pc, #216]	; (8001ba0 <HAL_DMA_Abort+0x224>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d05e      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a34      	ldr	r2, [pc, #208]	; (8001ba4 <HAL_DMA_Abort+0x228>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d059      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a33      	ldr	r2, [pc, #204]	; (8001ba8 <HAL_DMA_Abort+0x22c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d054      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a31      	ldr	r2, [pc, #196]	; (8001bac <HAL_DMA_Abort+0x230>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d04f      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a30      	ldr	r2, [pc, #192]	; (8001bb0 <HAL_DMA_Abort+0x234>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d04a      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a2e      	ldr	r2, [pc, #184]	; (8001bb4 <HAL_DMA_Abort+0x238>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d045      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a2d      	ldr	r2, [pc, #180]	; (8001bb8 <HAL_DMA_Abort+0x23c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d040      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a2b      	ldr	r2, [pc, #172]	; (8001bbc <HAL_DMA_Abort+0x240>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d03b      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a2a      	ldr	r2, [pc, #168]	; (8001bc0 <HAL_DMA_Abort+0x244>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d036      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a28      	ldr	r2, [pc, #160]	; (8001bc4 <HAL_DMA_Abort+0x248>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d031      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a27      	ldr	r2, [pc, #156]	; (8001bc8 <HAL_DMA_Abort+0x24c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d02c      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a25      	ldr	r2, [pc, #148]	; (8001bcc <HAL_DMA_Abort+0x250>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d027      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a24      	ldr	r2, [pc, #144]	; (8001bd0 <HAL_DMA_Abort+0x254>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d022      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a22      	ldr	r2, [pc, #136]	; (8001bd4 <HAL_DMA_Abort+0x258>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d01d      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a21      	ldr	r2, [pc, #132]	; (8001bd8 <HAL_DMA_Abort+0x25c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d018      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <HAL_DMA_Abort+0x260>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d013      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a1e      	ldr	r2, [pc, #120]	; (8001be0 <HAL_DMA_Abort+0x264>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d00e      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <HAL_DMA_Abort+0x268>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d009      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <HAL_DMA_Abort+0x26c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d004      	beq.n	8001b8a <HAL_DMA_Abort+0x20e>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a19      	ldr	r2, [pc, #100]	; (8001bec <HAL_DMA_Abort+0x270>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d132      	bne.n	8001bf0 <HAL_DMA_Abort+0x274>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e031      	b.n	8001bf2 <HAL_DMA_Abort+0x276>
 8001b8e:	bf00      	nop
 8001b90:	40020010 	.word	0x40020010
 8001b94:	40020028 	.word	0x40020028
 8001b98:	40020040 	.word	0x40020040
 8001b9c:	40020058 	.word	0x40020058
 8001ba0:	40020070 	.word	0x40020070
 8001ba4:	40020088 	.word	0x40020088
 8001ba8:	400200a0 	.word	0x400200a0
 8001bac:	400200b8 	.word	0x400200b8
 8001bb0:	40020410 	.word	0x40020410
 8001bb4:	40020428 	.word	0x40020428
 8001bb8:	40020440 	.word	0x40020440
 8001bbc:	40020458 	.word	0x40020458
 8001bc0:	40020470 	.word	0x40020470
 8001bc4:	40020488 	.word	0x40020488
 8001bc8:	400204a0 	.word	0x400204a0
 8001bcc:	400204b8 	.word	0x400204b8
 8001bd0:	58025408 	.word	0x58025408
 8001bd4:	5802541c 	.word	0x5802541c
 8001bd8:	58025430 	.word	0x58025430
 8001bdc:	58025444 	.word	0x58025444
 8001be0:	58025458 	.word	0x58025458
 8001be4:	5802546c 	.word	0x5802546c
 8001be8:	58025480 	.word	0x58025480
 8001bec:	58025494 	.word	0x58025494
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c04:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a6d      	ldr	r2, [pc, #436]	; (8001dc0 <HAL_DMA_Abort+0x444>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d04a      	beq.n	8001ca6 <HAL_DMA_Abort+0x32a>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a6b      	ldr	r2, [pc, #428]	; (8001dc4 <HAL_DMA_Abort+0x448>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d045      	beq.n	8001ca6 <HAL_DMA_Abort+0x32a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a6a      	ldr	r2, [pc, #424]	; (8001dc8 <HAL_DMA_Abort+0x44c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d040      	beq.n	8001ca6 <HAL_DMA_Abort+0x32a>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a68      	ldr	r2, [pc, #416]	; (8001dcc <HAL_DMA_Abort+0x450>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d03b      	beq.n	8001ca6 <HAL_DMA_Abort+0x32a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a67      	ldr	r2, [pc, #412]	; (8001dd0 <HAL_DMA_Abort+0x454>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d036      	beq.n	8001ca6 <HAL_DMA_Abort+0x32a>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a65      	ldr	r2, [pc, #404]	; (8001dd4 <HAL_DMA_Abort+0x458>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d031      	beq.n	8001ca6 <HAL_DMA_Abort+0x32a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a64      	ldr	r2, [pc, #400]	; (8001dd8 <HAL_DMA_Abort+0x45c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d02c      	beq.n	8001ca6 <HAL_DMA_Abort+0x32a>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a62      	ldr	r2, [pc, #392]	; (8001ddc <HAL_DMA_Abort+0x460>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d027      	beq.n	8001ca6 <HAL_DMA_Abort+0x32a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a61      	ldr	r2, [pc, #388]	; (8001de0 <HAL_DMA_Abort+0x464>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d022      	beq.n	8001ca6 <HAL_DMA_Abort+0x32a>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a5f      	ldr	r2, [pc, #380]	; (8001de4 <HAL_DMA_Abort+0x468>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01d      	beq.n	8001ca6 <HAL_DMA_Abort+0x32a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a5e      	ldr	r2, [pc, #376]	; (8001de8 <HAL_DMA_Abort+0x46c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d018      	beq.n	8001ca6 <HAL_DMA_Abort+0x32a>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a5c      	ldr	r2, [pc, #368]	; (8001dec <HAL_DMA_Abort+0x470>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d013      	beq.n	8001ca6 <HAL_DMA_Abort+0x32a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a5b      	ldr	r2, [pc, #364]	; (8001df0 <HAL_DMA_Abort+0x474>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d00e      	beq.n	8001ca6 <HAL_DMA_Abort+0x32a>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a59      	ldr	r2, [pc, #356]	; (8001df4 <HAL_DMA_Abort+0x478>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d009      	beq.n	8001ca6 <HAL_DMA_Abort+0x32a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a58      	ldr	r2, [pc, #352]	; (8001df8 <HAL_DMA_Abort+0x47c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d004      	beq.n	8001ca6 <HAL_DMA_Abort+0x32a>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a56      	ldr	r2, [pc, #344]	; (8001dfc <HAL_DMA_Abort+0x480>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d108      	bne.n	8001cb8 <HAL_DMA_Abort+0x33c>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0201 	bic.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	e007      	b.n	8001cc8 <HAL_DMA_Abort+0x34c>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0201 	bic.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001cc8:	e013      	b.n	8001cf2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cca:	f7ff f9af 	bl	800102c <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d90c      	bls.n	8001cf2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e12d      	b.n	8001f4e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1e5      	bne.n	8001cca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a2f      	ldr	r2, [pc, #188]	; (8001dc0 <HAL_DMA_Abort+0x444>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d04a      	beq.n	8001d9e <HAL_DMA_Abort+0x422>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a2d      	ldr	r2, [pc, #180]	; (8001dc4 <HAL_DMA_Abort+0x448>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d045      	beq.n	8001d9e <HAL_DMA_Abort+0x422>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a2c      	ldr	r2, [pc, #176]	; (8001dc8 <HAL_DMA_Abort+0x44c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d040      	beq.n	8001d9e <HAL_DMA_Abort+0x422>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a2a      	ldr	r2, [pc, #168]	; (8001dcc <HAL_DMA_Abort+0x450>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d03b      	beq.n	8001d9e <HAL_DMA_Abort+0x422>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a29      	ldr	r2, [pc, #164]	; (8001dd0 <HAL_DMA_Abort+0x454>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d036      	beq.n	8001d9e <HAL_DMA_Abort+0x422>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a27      	ldr	r2, [pc, #156]	; (8001dd4 <HAL_DMA_Abort+0x458>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d031      	beq.n	8001d9e <HAL_DMA_Abort+0x422>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a26      	ldr	r2, [pc, #152]	; (8001dd8 <HAL_DMA_Abort+0x45c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d02c      	beq.n	8001d9e <HAL_DMA_Abort+0x422>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a24      	ldr	r2, [pc, #144]	; (8001ddc <HAL_DMA_Abort+0x460>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d027      	beq.n	8001d9e <HAL_DMA_Abort+0x422>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a23      	ldr	r2, [pc, #140]	; (8001de0 <HAL_DMA_Abort+0x464>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d022      	beq.n	8001d9e <HAL_DMA_Abort+0x422>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a21      	ldr	r2, [pc, #132]	; (8001de4 <HAL_DMA_Abort+0x468>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d01d      	beq.n	8001d9e <HAL_DMA_Abort+0x422>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a20      	ldr	r2, [pc, #128]	; (8001de8 <HAL_DMA_Abort+0x46c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d018      	beq.n	8001d9e <HAL_DMA_Abort+0x422>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a1e      	ldr	r2, [pc, #120]	; (8001dec <HAL_DMA_Abort+0x470>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d013      	beq.n	8001d9e <HAL_DMA_Abort+0x422>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <HAL_DMA_Abort+0x474>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d00e      	beq.n	8001d9e <HAL_DMA_Abort+0x422>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <HAL_DMA_Abort+0x478>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d009      	beq.n	8001d9e <HAL_DMA_Abort+0x422>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1a      	ldr	r2, [pc, #104]	; (8001df8 <HAL_DMA_Abort+0x47c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d004      	beq.n	8001d9e <HAL_DMA_Abort+0x422>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <HAL_DMA_Abort+0x480>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d101      	bne.n	8001da2 <HAL_DMA_Abort+0x426>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_DMA_Abort+0x428>
 8001da2:	2300      	movs	r3, #0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d02b      	beq.n	8001e00 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	223f      	movs	r2, #63	; 0x3f
 8001db8:	409a      	lsls	r2, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	e02a      	b.n	8001e16 <HAL_DMA_Abort+0x49a>
 8001dc0:	40020010 	.word	0x40020010
 8001dc4:	40020028 	.word	0x40020028
 8001dc8:	40020040 	.word	0x40020040
 8001dcc:	40020058 	.word	0x40020058
 8001dd0:	40020070 	.word	0x40020070
 8001dd4:	40020088 	.word	0x40020088
 8001dd8:	400200a0 	.word	0x400200a0
 8001ddc:	400200b8 	.word	0x400200b8
 8001de0:	40020410 	.word	0x40020410
 8001de4:	40020428 	.word	0x40020428
 8001de8:	40020440 	.word	0x40020440
 8001dec:	40020458 	.word	0x40020458
 8001df0:	40020470 	.word	0x40020470
 8001df4:	40020488 	.word	0x40020488
 8001df8:	400204a0 	.word	0x400204a0
 8001dfc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e04:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	2201      	movs	r2, #1
 8001e10:	409a      	lsls	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a4f      	ldr	r2, [pc, #316]	; (8001f58 <HAL_DMA_Abort+0x5dc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d072      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a4d      	ldr	r2, [pc, #308]	; (8001f5c <HAL_DMA_Abort+0x5e0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d06d      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a4c      	ldr	r2, [pc, #304]	; (8001f60 <HAL_DMA_Abort+0x5e4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d068      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a4a      	ldr	r2, [pc, #296]	; (8001f64 <HAL_DMA_Abort+0x5e8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d063      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a49      	ldr	r2, [pc, #292]	; (8001f68 <HAL_DMA_Abort+0x5ec>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d05e      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a47      	ldr	r2, [pc, #284]	; (8001f6c <HAL_DMA_Abort+0x5f0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d059      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a46      	ldr	r2, [pc, #280]	; (8001f70 <HAL_DMA_Abort+0x5f4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d054      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a44      	ldr	r2, [pc, #272]	; (8001f74 <HAL_DMA_Abort+0x5f8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d04f      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a43      	ldr	r2, [pc, #268]	; (8001f78 <HAL_DMA_Abort+0x5fc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d04a      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a41      	ldr	r2, [pc, #260]	; (8001f7c <HAL_DMA_Abort+0x600>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d045      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a40      	ldr	r2, [pc, #256]	; (8001f80 <HAL_DMA_Abort+0x604>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d040      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a3e      	ldr	r2, [pc, #248]	; (8001f84 <HAL_DMA_Abort+0x608>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d03b      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a3d      	ldr	r2, [pc, #244]	; (8001f88 <HAL_DMA_Abort+0x60c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d036      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a3b      	ldr	r2, [pc, #236]	; (8001f8c <HAL_DMA_Abort+0x610>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d031      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a3a      	ldr	r2, [pc, #232]	; (8001f90 <HAL_DMA_Abort+0x614>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d02c      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a38      	ldr	r2, [pc, #224]	; (8001f94 <HAL_DMA_Abort+0x618>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d027      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a37      	ldr	r2, [pc, #220]	; (8001f98 <HAL_DMA_Abort+0x61c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d022      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a35      	ldr	r2, [pc, #212]	; (8001f9c <HAL_DMA_Abort+0x620>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d01d      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a34      	ldr	r2, [pc, #208]	; (8001fa0 <HAL_DMA_Abort+0x624>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d018      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a32      	ldr	r2, [pc, #200]	; (8001fa4 <HAL_DMA_Abort+0x628>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d013      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a31      	ldr	r2, [pc, #196]	; (8001fa8 <HAL_DMA_Abort+0x62c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d00e      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a2f      	ldr	r2, [pc, #188]	; (8001fac <HAL_DMA_Abort+0x630>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d009      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a2e      	ldr	r2, [pc, #184]	; (8001fb0 <HAL_DMA_Abort+0x634>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d004      	beq.n	8001f06 <HAL_DMA_Abort+0x58a>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a2c      	ldr	r2, [pc, #176]	; (8001fb4 <HAL_DMA_Abort+0x638>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d101      	bne.n	8001f0a <HAL_DMA_Abort+0x58e>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <HAL_DMA_Abort+0x590>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d015      	beq.n	8001f3c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f18:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f30:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f3a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40020010 	.word	0x40020010
 8001f5c:	40020028 	.word	0x40020028
 8001f60:	40020040 	.word	0x40020040
 8001f64:	40020058 	.word	0x40020058
 8001f68:	40020070 	.word	0x40020070
 8001f6c:	40020088 	.word	0x40020088
 8001f70:	400200a0 	.word	0x400200a0
 8001f74:	400200b8 	.word	0x400200b8
 8001f78:	40020410 	.word	0x40020410
 8001f7c:	40020428 	.word	0x40020428
 8001f80:	40020440 	.word	0x40020440
 8001f84:	40020458 	.word	0x40020458
 8001f88:	40020470 	.word	0x40020470
 8001f8c:	40020488 	.word	0x40020488
 8001f90:	400204a0 	.word	0x400204a0
 8001f94:	400204b8 	.word	0x400204b8
 8001f98:	58025408 	.word	0x58025408
 8001f9c:	5802541c 	.word	0x5802541c
 8001fa0:	58025430 	.word	0x58025430
 8001fa4:	58025444 	.word	0x58025444
 8001fa8:	58025458 	.word	0x58025458
 8001fac:	5802546c 	.word	0x5802546c
 8001fb0:	58025480 	.word	0x58025480
 8001fb4:	58025494 	.word	0x58025494

08001fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e237      	b.n	800243a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d004      	beq.n	8001fe0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2280      	movs	r2, #128	; 0x80
 8001fda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e22c      	b.n	800243a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a5c      	ldr	r2, [pc, #368]	; (8002158 <HAL_DMA_Abort_IT+0x1a0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d04a      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a5b      	ldr	r2, [pc, #364]	; (800215c <HAL_DMA_Abort_IT+0x1a4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d045      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a59      	ldr	r2, [pc, #356]	; (8002160 <HAL_DMA_Abort_IT+0x1a8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d040      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a58      	ldr	r2, [pc, #352]	; (8002164 <HAL_DMA_Abort_IT+0x1ac>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d03b      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a56      	ldr	r2, [pc, #344]	; (8002168 <HAL_DMA_Abort_IT+0x1b0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d036      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a55      	ldr	r2, [pc, #340]	; (800216c <HAL_DMA_Abort_IT+0x1b4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d031      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a53      	ldr	r2, [pc, #332]	; (8002170 <HAL_DMA_Abort_IT+0x1b8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d02c      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a52      	ldr	r2, [pc, #328]	; (8002174 <HAL_DMA_Abort_IT+0x1bc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d027      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a50      	ldr	r2, [pc, #320]	; (8002178 <HAL_DMA_Abort_IT+0x1c0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d022      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a4f      	ldr	r2, [pc, #316]	; (800217c <HAL_DMA_Abort_IT+0x1c4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d01d      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a4d      	ldr	r2, [pc, #308]	; (8002180 <HAL_DMA_Abort_IT+0x1c8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d018      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a4c      	ldr	r2, [pc, #304]	; (8002184 <HAL_DMA_Abort_IT+0x1cc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d013      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a4a      	ldr	r2, [pc, #296]	; (8002188 <HAL_DMA_Abort_IT+0x1d0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00e      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a49      	ldr	r2, [pc, #292]	; (800218c <HAL_DMA_Abort_IT+0x1d4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d009      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a47      	ldr	r2, [pc, #284]	; (8002190 <HAL_DMA_Abort_IT+0x1d8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d004      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a46      	ldr	r2, [pc, #280]	; (8002194 <HAL_DMA_Abort_IT+0x1dc>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d101      	bne.n	8002084 <HAL_DMA_Abort_IT+0xcc>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <HAL_DMA_Abort_IT+0xce>
 8002084:	2300      	movs	r3, #0
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8086 	beq.w	8002198 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2204      	movs	r2, #4
 8002090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2f      	ldr	r2, [pc, #188]	; (8002158 <HAL_DMA_Abort_IT+0x1a0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d04a      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a2e      	ldr	r2, [pc, #184]	; (800215c <HAL_DMA_Abort_IT+0x1a4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d045      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a2c      	ldr	r2, [pc, #176]	; (8002160 <HAL_DMA_Abort_IT+0x1a8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d040      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a2b      	ldr	r2, [pc, #172]	; (8002164 <HAL_DMA_Abort_IT+0x1ac>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d03b      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a29      	ldr	r2, [pc, #164]	; (8002168 <HAL_DMA_Abort_IT+0x1b0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d036      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a28      	ldr	r2, [pc, #160]	; (800216c <HAL_DMA_Abort_IT+0x1b4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d031      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a26      	ldr	r2, [pc, #152]	; (8002170 <HAL_DMA_Abort_IT+0x1b8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d02c      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a25      	ldr	r2, [pc, #148]	; (8002174 <HAL_DMA_Abort_IT+0x1bc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d027      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a23      	ldr	r2, [pc, #140]	; (8002178 <HAL_DMA_Abort_IT+0x1c0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d022      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a22      	ldr	r2, [pc, #136]	; (800217c <HAL_DMA_Abort_IT+0x1c4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d01d      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a20      	ldr	r2, [pc, #128]	; (8002180 <HAL_DMA_Abort_IT+0x1c8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d018      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <HAL_DMA_Abort_IT+0x1cc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d013      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <HAL_DMA_Abort_IT+0x1d0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00e      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1c      	ldr	r2, [pc, #112]	; (800218c <HAL_DMA_Abort_IT+0x1d4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d009      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1a      	ldr	r2, [pc, #104]	; (8002190 <HAL_DMA_Abort_IT+0x1d8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d004      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a19      	ldr	r2, [pc, #100]	; (8002194 <HAL_DMA_Abort_IT+0x1dc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d108      	bne.n	8002146 <HAL_DMA_Abort_IT+0x18e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0201 	bic.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	e178      	b.n	8002438 <HAL_DMA_Abort_IT+0x480>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0201 	bic.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	e16f      	b.n	8002438 <HAL_DMA_Abort_IT+0x480>
 8002158:	40020010 	.word	0x40020010
 800215c:	40020028 	.word	0x40020028
 8002160:	40020040 	.word	0x40020040
 8002164:	40020058 	.word	0x40020058
 8002168:	40020070 	.word	0x40020070
 800216c:	40020088 	.word	0x40020088
 8002170:	400200a0 	.word	0x400200a0
 8002174:	400200b8 	.word	0x400200b8
 8002178:	40020410 	.word	0x40020410
 800217c:	40020428 	.word	0x40020428
 8002180:	40020440 	.word	0x40020440
 8002184:	40020458 	.word	0x40020458
 8002188:	40020470 	.word	0x40020470
 800218c:	40020488 	.word	0x40020488
 8002190:	400204a0 	.word	0x400204a0
 8002194:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 020e 	bic.w	r2, r2, #14
 80021a6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a6c      	ldr	r2, [pc, #432]	; (8002360 <HAL_DMA_Abort_IT+0x3a8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d04a      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a6b      	ldr	r2, [pc, #428]	; (8002364 <HAL_DMA_Abort_IT+0x3ac>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d045      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a69      	ldr	r2, [pc, #420]	; (8002368 <HAL_DMA_Abort_IT+0x3b0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d040      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a68      	ldr	r2, [pc, #416]	; (800236c <HAL_DMA_Abort_IT+0x3b4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d03b      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a66      	ldr	r2, [pc, #408]	; (8002370 <HAL_DMA_Abort_IT+0x3b8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d036      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a65      	ldr	r2, [pc, #404]	; (8002374 <HAL_DMA_Abort_IT+0x3bc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d031      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a63      	ldr	r2, [pc, #396]	; (8002378 <HAL_DMA_Abort_IT+0x3c0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d02c      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a62      	ldr	r2, [pc, #392]	; (800237c <HAL_DMA_Abort_IT+0x3c4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d027      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a60      	ldr	r2, [pc, #384]	; (8002380 <HAL_DMA_Abort_IT+0x3c8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d022      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a5f      	ldr	r2, [pc, #380]	; (8002384 <HAL_DMA_Abort_IT+0x3cc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d01d      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a5d      	ldr	r2, [pc, #372]	; (8002388 <HAL_DMA_Abort_IT+0x3d0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d018      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a5c      	ldr	r2, [pc, #368]	; (800238c <HAL_DMA_Abort_IT+0x3d4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d013      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a5a      	ldr	r2, [pc, #360]	; (8002390 <HAL_DMA_Abort_IT+0x3d8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00e      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a59      	ldr	r2, [pc, #356]	; (8002394 <HAL_DMA_Abort_IT+0x3dc>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d009      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a57      	ldr	r2, [pc, #348]	; (8002398 <HAL_DMA_Abort_IT+0x3e0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d004      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a56      	ldr	r2, [pc, #344]	; (800239c <HAL_DMA_Abort_IT+0x3e4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d108      	bne.n	800225a <HAL_DMA_Abort_IT+0x2a2>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	e007      	b.n	800226a <HAL_DMA_Abort_IT+0x2b2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0201 	bic.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a3c      	ldr	r2, [pc, #240]	; (8002360 <HAL_DMA_Abort_IT+0x3a8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d072      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a3a      	ldr	r2, [pc, #232]	; (8002364 <HAL_DMA_Abort_IT+0x3ac>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d06d      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a39      	ldr	r2, [pc, #228]	; (8002368 <HAL_DMA_Abort_IT+0x3b0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d068      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a37      	ldr	r2, [pc, #220]	; (800236c <HAL_DMA_Abort_IT+0x3b4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d063      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a36      	ldr	r2, [pc, #216]	; (8002370 <HAL_DMA_Abort_IT+0x3b8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d05e      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a34      	ldr	r2, [pc, #208]	; (8002374 <HAL_DMA_Abort_IT+0x3bc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d059      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a33      	ldr	r2, [pc, #204]	; (8002378 <HAL_DMA_Abort_IT+0x3c0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d054      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a31      	ldr	r2, [pc, #196]	; (800237c <HAL_DMA_Abort_IT+0x3c4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d04f      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a30      	ldr	r2, [pc, #192]	; (8002380 <HAL_DMA_Abort_IT+0x3c8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d04a      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2e      	ldr	r2, [pc, #184]	; (8002384 <HAL_DMA_Abort_IT+0x3cc>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d045      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a2d      	ldr	r2, [pc, #180]	; (8002388 <HAL_DMA_Abort_IT+0x3d0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d040      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a2b      	ldr	r2, [pc, #172]	; (800238c <HAL_DMA_Abort_IT+0x3d4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d03b      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a2a      	ldr	r2, [pc, #168]	; (8002390 <HAL_DMA_Abort_IT+0x3d8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d036      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a28      	ldr	r2, [pc, #160]	; (8002394 <HAL_DMA_Abort_IT+0x3dc>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d031      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a27      	ldr	r2, [pc, #156]	; (8002398 <HAL_DMA_Abort_IT+0x3e0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d02c      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a25      	ldr	r2, [pc, #148]	; (800239c <HAL_DMA_Abort_IT+0x3e4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d027      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a24      	ldr	r2, [pc, #144]	; (80023a0 <HAL_DMA_Abort_IT+0x3e8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d022      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a22      	ldr	r2, [pc, #136]	; (80023a4 <HAL_DMA_Abort_IT+0x3ec>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d01d      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a21      	ldr	r2, [pc, #132]	; (80023a8 <HAL_DMA_Abort_IT+0x3f0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d018      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1f      	ldr	r2, [pc, #124]	; (80023ac <HAL_DMA_Abort_IT+0x3f4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d013      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <HAL_DMA_Abort_IT+0x3f8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00e      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <HAL_DMA_Abort_IT+0x3fc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d009      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <HAL_DMA_Abort_IT+0x400>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d004      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a19      	ldr	r2, [pc, #100]	; (80023bc <HAL_DMA_Abort_IT+0x404>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d132      	bne.n	80023c0 <HAL_DMA_Abort_IT+0x408>
 800235a:	2301      	movs	r3, #1
 800235c:	e031      	b.n	80023c2 <HAL_DMA_Abort_IT+0x40a>
 800235e:	bf00      	nop
 8002360:	40020010 	.word	0x40020010
 8002364:	40020028 	.word	0x40020028
 8002368:	40020040 	.word	0x40020040
 800236c:	40020058 	.word	0x40020058
 8002370:	40020070 	.word	0x40020070
 8002374:	40020088 	.word	0x40020088
 8002378:	400200a0 	.word	0x400200a0
 800237c:	400200b8 	.word	0x400200b8
 8002380:	40020410 	.word	0x40020410
 8002384:	40020428 	.word	0x40020428
 8002388:	40020440 	.word	0x40020440
 800238c:	40020458 	.word	0x40020458
 8002390:	40020470 	.word	0x40020470
 8002394:	40020488 	.word	0x40020488
 8002398:	400204a0 	.word	0x400204a0
 800239c:	400204b8 	.word	0x400204b8
 80023a0:	58025408 	.word	0x58025408
 80023a4:	5802541c 	.word	0x5802541c
 80023a8:	58025430 	.word	0x58025430
 80023ac:	58025444 	.word	0x58025444
 80023b0:	58025458 	.word	0x58025458
 80023b4:	5802546c 	.word	0x5802546c
 80023b8:	58025480 	.word	0x58025480
 80023bc:	58025494 	.word	0x58025494
 80023c0:	2300      	movs	r3, #0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d028      	beq.n	8002418 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023d4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	2201      	movs	r2, #1
 80023e6:	409a      	lsls	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023f4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00c      	beq.n	8002418 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800240c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002416:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop

08002444 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002450:	4b67      	ldr	r3, [pc, #412]	; (80025f0 <HAL_DMA_IRQHandler+0x1ac>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a67      	ldr	r2, [pc, #412]	; (80025f4 <HAL_DMA_IRQHandler+0x1b0>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	0a9b      	lsrs	r3, r3, #10
 800245c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a5f      	ldr	r2, [pc, #380]	; (80025f8 <HAL_DMA_IRQHandler+0x1b4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d04a      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a5d      	ldr	r2, [pc, #372]	; (80025fc <HAL_DMA_IRQHandler+0x1b8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d045      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a5c      	ldr	r2, [pc, #368]	; (8002600 <HAL_DMA_IRQHandler+0x1bc>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d040      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a5a      	ldr	r2, [pc, #360]	; (8002604 <HAL_DMA_IRQHandler+0x1c0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d03b      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a59      	ldr	r2, [pc, #356]	; (8002608 <HAL_DMA_IRQHandler+0x1c4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d036      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a57      	ldr	r2, [pc, #348]	; (800260c <HAL_DMA_IRQHandler+0x1c8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d031      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a56      	ldr	r2, [pc, #344]	; (8002610 <HAL_DMA_IRQHandler+0x1cc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d02c      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a54      	ldr	r2, [pc, #336]	; (8002614 <HAL_DMA_IRQHandler+0x1d0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d027      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a53      	ldr	r2, [pc, #332]	; (8002618 <HAL_DMA_IRQHandler+0x1d4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d022      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a51      	ldr	r2, [pc, #324]	; (800261c <HAL_DMA_IRQHandler+0x1d8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d01d      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a50      	ldr	r2, [pc, #320]	; (8002620 <HAL_DMA_IRQHandler+0x1dc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d018      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a4e      	ldr	r2, [pc, #312]	; (8002624 <HAL_DMA_IRQHandler+0x1e0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d013      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a4d      	ldr	r2, [pc, #308]	; (8002628 <HAL_DMA_IRQHandler+0x1e4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00e      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a4b      	ldr	r2, [pc, #300]	; (800262c <HAL_DMA_IRQHandler+0x1e8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d009      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a4a      	ldr	r2, [pc, #296]	; (8002630 <HAL_DMA_IRQHandler+0x1ec>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d004      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a48      	ldr	r2, [pc, #288]	; (8002634 <HAL_DMA_IRQHandler+0x1f0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d101      	bne.n	800251a <HAL_DMA_IRQHandler+0xd6>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_DMA_IRQHandler+0xd8>
 800251a:	2300      	movs	r3, #0
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 842b 	beq.w	8002d78 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	2208      	movs	r2, #8
 800252c:	409a      	lsls	r2, r3
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80a2 	beq.w	800267c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a2e      	ldr	r2, [pc, #184]	; (80025f8 <HAL_DMA_IRQHandler+0x1b4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d04a      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a2d      	ldr	r2, [pc, #180]	; (80025fc <HAL_DMA_IRQHandler+0x1b8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d045      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a2b      	ldr	r2, [pc, #172]	; (8002600 <HAL_DMA_IRQHandler+0x1bc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d040      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a2a      	ldr	r2, [pc, #168]	; (8002604 <HAL_DMA_IRQHandler+0x1c0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d03b      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a28      	ldr	r2, [pc, #160]	; (8002608 <HAL_DMA_IRQHandler+0x1c4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d036      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a27      	ldr	r2, [pc, #156]	; (800260c <HAL_DMA_IRQHandler+0x1c8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d031      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a25      	ldr	r2, [pc, #148]	; (8002610 <HAL_DMA_IRQHandler+0x1cc>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d02c      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <HAL_DMA_IRQHandler+0x1d0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d027      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a22      	ldr	r2, [pc, #136]	; (8002618 <HAL_DMA_IRQHandler+0x1d4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d022      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a21      	ldr	r2, [pc, #132]	; (800261c <HAL_DMA_IRQHandler+0x1d8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d01d      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a1f      	ldr	r2, [pc, #124]	; (8002620 <HAL_DMA_IRQHandler+0x1dc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d018      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a1e      	ldr	r2, [pc, #120]	; (8002624 <HAL_DMA_IRQHandler+0x1e0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d013      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a1c      	ldr	r2, [pc, #112]	; (8002628 <HAL_DMA_IRQHandler+0x1e4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00e      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1b      	ldr	r2, [pc, #108]	; (800262c <HAL_DMA_IRQHandler+0x1e8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d009      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a19      	ldr	r2, [pc, #100]	; (8002630 <HAL_DMA_IRQHandler+0x1ec>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d004      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a18      	ldr	r2, [pc, #96]	; (8002634 <HAL_DMA_IRQHandler+0x1f0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d12f      	bne.n	8002638 <HAL_DMA_IRQHandler+0x1f4>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	bf14      	ite	ne
 80025e6:	2301      	movne	r3, #1
 80025e8:	2300      	moveq	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	e02e      	b.n	800264c <HAL_DMA_IRQHandler+0x208>
 80025ee:	bf00      	nop
 80025f0:	24000000 	.word	0x24000000
 80025f4:	1b4e81b5 	.word	0x1b4e81b5
 80025f8:	40020010 	.word	0x40020010
 80025fc:	40020028 	.word	0x40020028
 8002600:	40020040 	.word	0x40020040
 8002604:	40020058 	.word	0x40020058
 8002608:	40020070 	.word	0x40020070
 800260c:	40020088 	.word	0x40020088
 8002610:	400200a0 	.word	0x400200a0
 8002614:	400200b8 	.word	0x400200b8
 8002618:	40020410 	.word	0x40020410
 800261c:	40020428 	.word	0x40020428
 8002620:	40020440 	.word	0x40020440
 8002624:	40020458 	.word	0x40020458
 8002628:	40020470 	.word	0x40020470
 800262c:	40020488 	.word	0x40020488
 8002630:	400204a0 	.word	0x400204a0
 8002634:	400204b8 	.word	0x400204b8
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	bf14      	ite	ne
 8002646:	2301      	movne	r3, #1
 8002648:	2300      	moveq	r3, #0
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d015      	beq.n	800267c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0204 	bic.w	r2, r2, #4
 800265e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	2208      	movs	r2, #8
 800266a:	409a      	lsls	r2, r3
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002674:	f043 0201 	orr.w	r2, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	fa22 f303 	lsr.w	r3, r2, r3
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d06e      	beq.n	8002770 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a69      	ldr	r2, [pc, #420]	; (800283c <HAL_DMA_IRQHandler+0x3f8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d04a      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a67      	ldr	r2, [pc, #412]	; (8002840 <HAL_DMA_IRQHandler+0x3fc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d045      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a66      	ldr	r2, [pc, #408]	; (8002844 <HAL_DMA_IRQHandler+0x400>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d040      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a64      	ldr	r2, [pc, #400]	; (8002848 <HAL_DMA_IRQHandler+0x404>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d03b      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a63      	ldr	r2, [pc, #396]	; (800284c <HAL_DMA_IRQHandler+0x408>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d036      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a61      	ldr	r2, [pc, #388]	; (8002850 <HAL_DMA_IRQHandler+0x40c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d031      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a60      	ldr	r2, [pc, #384]	; (8002854 <HAL_DMA_IRQHandler+0x410>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d02c      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a5e      	ldr	r2, [pc, #376]	; (8002858 <HAL_DMA_IRQHandler+0x414>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d027      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a5d      	ldr	r2, [pc, #372]	; (800285c <HAL_DMA_IRQHandler+0x418>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d022      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a5b      	ldr	r2, [pc, #364]	; (8002860 <HAL_DMA_IRQHandler+0x41c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01d      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a5a      	ldr	r2, [pc, #360]	; (8002864 <HAL_DMA_IRQHandler+0x420>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d018      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a58      	ldr	r2, [pc, #352]	; (8002868 <HAL_DMA_IRQHandler+0x424>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d013      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a57      	ldr	r2, [pc, #348]	; (800286c <HAL_DMA_IRQHandler+0x428>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00e      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a55      	ldr	r2, [pc, #340]	; (8002870 <HAL_DMA_IRQHandler+0x42c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d009      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a54      	ldr	r2, [pc, #336]	; (8002874 <HAL_DMA_IRQHandler+0x430>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d004      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a52      	ldr	r2, [pc, #328]	; (8002878 <HAL_DMA_IRQHandler+0x434>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d10a      	bne.n	8002748 <HAL_DMA_IRQHandler+0x304>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273c:	2b00      	cmp	r3, #0
 800273e:	bf14      	ite	ne
 8002740:	2301      	movne	r3, #1
 8002742:	2300      	moveq	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	e003      	b.n	8002750 <HAL_DMA_IRQHandler+0x30c>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2300      	movs	r3, #0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00d      	beq.n	8002770 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	2201      	movs	r2, #1
 800275e:	409a      	lsls	r2, r3
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002768:	f043 0202 	orr.w	r2, r3, #2
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2204      	movs	r2, #4
 800277a:	409a      	lsls	r2, r3
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 808f 	beq.w	80028a4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a2c      	ldr	r2, [pc, #176]	; (800283c <HAL_DMA_IRQHandler+0x3f8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d04a      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a2a      	ldr	r2, [pc, #168]	; (8002840 <HAL_DMA_IRQHandler+0x3fc>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d045      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a29      	ldr	r2, [pc, #164]	; (8002844 <HAL_DMA_IRQHandler+0x400>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d040      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a27      	ldr	r2, [pc, #156]	; (8002848 <HAL_DMA_IRQHandler+0x404>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d03b      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a26      	ldr	r2, [pc, #152]	; (800284c <HAL_DMA_IRQHandler+0x408>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d036      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a24      	ldr	r2, [pc, #144]	; (8002850 <HAL_DMA_IRQHandler+0x40c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d031      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a23      	ldr	r2, [pc, #140]	; (8002854 <HAL_DMA_IRQHandler+0x410>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d02c      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a21      	ldr	r2, [pc, #132]	; (8002858 <HAL_DMA_IRQHandler+0x414>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d027      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a20      	ldr	r2, [pc, #128]	; (800285c <HAL_DMA_IRQHandler+0x418>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d022      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1e      	ldr	r2, [pc, #120]	; (8002860 <HAL_DMA_IRQHandler+0x41c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01d      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <HAL_DMA_IRQHandler+0x420>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d018      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1b      	ldr	r2, [pc, #108]	; (8002868 <HAL_DMA_IRQHandler+0x424>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1a      	ldr	r2, [pc, #104]	; (800286c <HAL_DMA_IRQHandler+0x428>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a18      	ldr	r2, [pc, #96]	; (8002870 <HAL_DMA_IRQHandler+0x42c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a17      	ldr	r2, [pc, #92]	; (8002874 <HAL_DMA_IRQHandler+0x430>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a15      	ldr	r2, [pc, #84]	; (8002878 <HAL_DMA_IRQHandler+0x434>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d12a      	bne.n	800287c <HAL_DMA_IRQHandler+0x438>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf14      	ite	ne
 8002834:	2301      	movne	r3, #1
 8002836:	2300      	moveq	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	e023      	b.n	8002884 <HAL_DMA_IRQHandler+0x440>
 800283c:	40020010 	.word	0x40020010
 8002840:	40020028 	.word	0x40020028
 8002844:	40020040 	.word	0x40020040
 8002848:	40020058 	.word	0x40020058
 800284c:	40020070 	.word	0x40020070
 8002850:	40020088 	.word	0x40020088
 8002854:	400200a0 	.word	0x400200a0
 8002858:	400200b8 	.word	0x400200b8
 800285c:	40020410 	.word	0x40020410
 8002860:	40020428 	.word	0x40020428
 8002864:	40020440 	.word	0x40020440
 8002868:	40020458 	.word	0x40020458
 800286c:	40020470 	.word	0x40020470
 8002870:	40020488 	.word	0x40020488
 8002874:	400204a0 	.word	0x400204a0
 8002878:	400204b8 	.word	0x400204b8
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2300      	movs	r3, #0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00d      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	2204      	movs	r2, #4
 8002892:	409a      	lsls	r2, r3
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289c:	f043 0204 	orr.w	r2, r3, #4
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	2210      	movs	r2, #16
 80028ae:	409a      	lsls	r2, r3
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80a6 	beq.w	8002a06 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a85      	ldr	r2, [pc, #532]	; (8002ad4 <HAL_DMA_IRQHandler+0x690>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d04a      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a83      	ldr	r2, [pc, #524]	; (8002ad8 <HAL_DMA_IRQHandler+0x694>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d045      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a82      	ldr	r2, [pc, #520]	; (8002adc <HAL_DMA_IRQHandler+0x698>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d040      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a80      	ldr	r2, [pc, #512]	; (8002ae0 <HAL_DMA_IRQHandler+0x69c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d03b      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a7f      	ldr	r2, [pc, #508]	; (8002ae4 <HAL_DMA_IRQHandler+0x6a0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d036      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a7d      	ldr	r2, [pc, #500]	; (8002ae8 <HAL_DMA_IRQHandler+0x6a4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d031      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a7c      	ldr	r2, [pc, #496]	; (8002aec <HAL_DMA_IRQHandler+0x6a8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d02c      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a7a      	ldr	r2, [pc, #488]	; (8002af0 <HAL_DMA_IRQHandler+0x6ac>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d027      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a79      	ldr	r2, [pc, #484]	; (8002af4 <HAL_DMA_IRQHandler+0x6b0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d022      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a77      	ldr	r2, [pc, #476]	; (8002af8 <HAL_DMA_IRQHandler+0x6b4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d01d      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a76      	ldr	r2, [pc, #472]	; (8002afc <HAL_DMA_IRQHandler+0x6b8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d018      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a74      	ldr	r2, [pc, #464]	; (8002b00 <HAL_DMA_IRQHandler+0x6bc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a73      	ldr	r2, [pc, #460]	; (8002b04 <HAL_DMA_IRQHandler+0x6c0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00e      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a71      	ldr	r2, [pc, #452]	; (8002b08 <HAL_DMA_IRQHandler+0x6c4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d009      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a70      	ldr	r2, [pc, #448]	; (8002b0c <HAL_DMA_IRQHandler+0x6c8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d004      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a6e      	ldr	r2, [pc, #440]	; (8002b10 <HAL_DMA_IRQHandler+0x6cc>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d10a      	bne.n	8002970 <HAL_DMA_IRQHandler+0x52c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf14      	ite	ne
 8002968:	2301      	movne	r3, #1
 800296a:	2300      	moveq	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	e009      	b.n	8002984 <HAL_DMA_IRQHandler+0x540>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	bf14      	ite	ne
 800297e:	2301      	movne	r3, #1
 8002980:	2300      	moveq	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d03e      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	2210      	movs	r2, #16
 8002992:	409a      	lsls	r2, r3
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d018      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d108      	bne.n	80029c6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d024      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	4798      	blx	r3
 80029c4:	e01f      	b.n	8002a06 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d01b      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
 80029d6:	e016      	b.n	8002a06 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d107      	bne.n	80029f6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0208 	bic.w	r2, r2, #8
 80029f4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	2220      	movs	r2, #32
 8002a10:	409a      	lsls	r2, r3
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8110 	beq.w	8002c3c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a2c      	ldr	r2, [pc, #176]	; (8002ad4 <HAL_DMA_IRQHandler+0x690>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d04a      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a2b      	ldr	r2, [pc, #172]	; (8002ad8 <HAL_DMA_IRQHandler+0x694>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d045      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a29      	ldr	r2, [pc, #164]	; (8002adc <HAL_DMA_IRQHandler+0x698>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d040      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a28      	ldr	r2, [pc, #160]	; (8002ae0 <HAL_DMA_IRQHandler+0x69c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d03b      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a26      	ldr	r2, [pc, #152]	; (8002ae4 <HAL_DMA_IRQHandler+0x6a0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d036      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a25      	ldr	r2, [pc, #148]	; (8002ae8 <HAL_DMA_IRQHandler+0x6a4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d031      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a23      	ldr	r2, [pc, #140]	; (8002aec <HAL_DMA_IRQHandler+0x6a8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d02c      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <HAL_DMA_IRQHandler+0x6ac>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d027      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a20      	ldr	r2, [pc, #128]	; (8002af4 <HAL_DMA_IRQHandler+0x6b0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d022      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1f      	ldr	r2, [pc, #124]	; (8002af8 <HAL_DMA_IRQHandler+0x6b4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d01d      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1d      	ldr	r2, [pc, #116]	; (8002afc <HAL_DMA_IRQHandler+0x6b8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d018      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <HAL_DMA_IRQHandler+0x6bc>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d013      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1a      	ldr	r2, [pc, #104]	; (8002b04 <HAL_DMA_IRQHandler+0x6c0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00e      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a19      	ldr	r2, [pc, #100]	; (8002b08 <HAL_DMA_IRQHandler+0x6c4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d009      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a17      	ldr	r2, [pc, #92]	; (8002b0c <HAL_DMA_IRQHandler+0x6c8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d004      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <HAL_DMA_IRQHandler+0x6cc>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d12b      	bne.n	8002b14 <HAL_DMA_IRQHandler+0x6d0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	bf14      	ite	ne
 8002aca:	2301      	movne	r3, #1
 8002acc:	2300      	moveq	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	e02a      	b.n	8002b28 <HAL_DMA_IRQHandler+0x6e4>
 8002ad2:	bf00      	nop
 8002ad4:	40020010 	.word	0x40020010
 8002ad8:	40020028 	.word	0x40020028
 8002adc:	40020040 	.word	0x40020040
 8002ae0:	40020058 	.word	0x40020058
 8002ae4:	40020070 	.word	0x40020070
 8002ae8:	40020088 	.word	0x40020088
 8002aec:	400200a0 	.word	0x400200a0
 8002af0:	400200b8 	.word	0x400200b8
 8002af4:	40020410 	.word	0x40020410
 8002af8:	40020428 	.word	0x40020428
 8002afc:	40020440 	.word	0x40020440
 8002b00:	40020458 	.word	0x40020458
 8002b04:	40020470 	.word	0x40020470
 8002b08:	40020488 	.word	0x40020488
 8002b0c:	400204a0 	.word	0x400204a0
 8002b10:	400204b8 	.word	0x400204b8
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	bf14      	ite	ne
 8002b22:	2301      	movne	r3, #1
 8002b24:	2300      	moveq	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8087 	beq.w	8002c3c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	2220      	movs	r2, #32
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d139      	bne.n	8002bbe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0216 	bic.w	r2, r2, #22
 8002b58:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b68:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d103      	bne.n	8002b7a <HAL_DMA_IRQHandler+0x736>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0208 	bic.w	r2, r2, #8
 8002b88:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	223f      	movs	r2, #63	; 0x3f
 8002b94:	409a      	lsls	r2, r3
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 834a 	beq.w	8003248 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	4798      	blx	r3
          }
          return;
 8002bbc:	e344      	b.n	8003248 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d018      	beq.n	8002bfe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d108      	bne.n	8002bec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d02c      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	4798      	blx	r3
 8002bea:	e027      	b.n	8002c3c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d023      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4798      	blx	r3
 8002bfc:	e01e      	b.n	8002c3c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10f      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0210 	bic.w	r2, r2, #16
 8002c1a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8306 	beq.w	8003252 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 8088 	beq.w	8002d64 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2204      	movs	r2, #4
 8002c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a7a      	ldr	r2, [pc, #488]	; (8002e4c <HAL_DMA_IRQHandler+0xa08>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d04a      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a79      	ldr	r2, [pc, #484]	; (8002e50 <HAL_DMA_IRQHandler+0xa0c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d045      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a77      	ldr	r2, [pc, #476]	; (8002e54 <HAL_DMA_IRQHandler+0xa10>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d040      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a76      	ldr	r2, [pc, #472]	; (8002e58 <HAL_DMA_IRQHandler+0xa14>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d03b      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a74      	ldr	r2, [pc, #464]	; (8002e5c <HAL_DMA_IRQHandler+0xa18>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d036      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a73      	ldr	r2, [pc, #460]	; (8002e60 <HAL_DMA_IRQHandler+0xa1c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d031      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a71      	ldr	r2, [pc, #452]	; (8002e64 <HAL_DMA_IRQHandler+0xa20>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d02c      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a70      	ldr	r2, [pc, #448]	; (8002e68 <HAL_DMA_IRQHandler+0xa24>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d027      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a6e      	ldr	r2, [pc, #440]	; (8002e6c <HAL_DMA_IRQHandler+0xa28>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d022      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a6d      	ldr	r2, [pc, #436]	; (8002e70 <HAL_DMA_IRQHandler+0xa2c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d01d      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a6b      	ldr	r2, [pc, #428]	; (8002e74 <HAL_DMA_IRQHandler+0xa30>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d018      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a6a      	ldr	r2, [pc, #424]	; (8002e78 <HAL_DMA_IRQHandler+0xa34>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d013      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a68      	ldr	r2, [pc, #416]	; (8002e7c <HAL_DMA_IRQHandler+0xa38>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00e      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a67      	ldr	r2, [pc, #412]	; (8002e80 <HAL_DMA_IRQHandler+0xa3c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d009      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a65      	ldr	r2, [pc, #404]	; (8002e84 <HAL_DMA_IRQHandler+0xa40>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d004      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a64      	ldr	r2, [pc, #400]	; (8002e88 <HAL_DMA_IRQHandler+0xa44>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d108      	bne.n	8002d0e <HAL_DMA_IRQHandler+0x8ca>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e007      	b.n	8002d1e <HAL_DMA_IRQHandler+0x8da>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0201 	bic.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3301      	adds	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d307      	bcc.n	8002d3a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f2      	bne.n	8002d1e <HAL_DMA_IRQHandler+0x8da>
 8002d38:	e000      	b.n	8002d3c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002d3a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002d52:	e003      	b.n	8002d5c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 8272 	beq.w	8003252 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4798      	blx	r3
 8002d76:	e26c      	b.n	8003252 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a43      	ldr	r2, [pc, #268]	; (8002e8c <HAL_DMA_IRQHandler+0xa48>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d022      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x984>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a42      	ldr	r2, [pc, #264]	; (8002e90 <HAL_DMA_IRQHandler+0xa4c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d01d      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x984>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a40      	ldr	r2, [pc, #256]	; (8002e94 <HAL_DMA_IRQHandler+0xa50>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d018      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x984>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a3f      	ldr	r2, [pc, #252]	; (8002e98 <HAL_DMA_IRQHandler+0xa54>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d013      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x984>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a3d      	ldr	r2, [pc, #244]	; (8002e9c <HAL_DMA_IRQHandler+0xa58>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00e      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x984>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a3c      	ldr	r2, [pc, #240]	; (8002ea0 <HAL_DMA_IRQHandler+0xa5c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d009      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x984>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a3a      	ldr	r2, [pc, #232]	; (8002ea4 <HAL_DMA_IRQHandler+0xa60>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d004      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x984>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a39      	ldr	r2, [pc, #228]	; (8002ea8 <HAL_DMA_IRQHandler+0xa64>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d101      	bne.n	8002dcc <HAL_DMA_IRQHandler+0x988>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <HAL_DMA_IRQHandler+0x98a>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 823f 	beq.w	8003252 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	2204      	movs	r2, #4
 8002de6:	409a      	lsls	r2, r3
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80cd 	beq.w	8002f8c <HAL_DMA_IRQHandler+0xb48>
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80c7 	beq.w	8002f8c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e02:	f003 031f 	and.w	r3, r3, #31
 8002e06:	2204      	movs	r2, #4
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d049      	beq.n	8002eac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 8210 	beq.w	800324c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e34:	e20a      	b.n	800324c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 8206 	beq.w	800324c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e48:	e200      	b.n	800324c <HAL_DMA_IRQHandler+0xe08>
 8002e4a:	bf00      	nop
 8002e4c:	40020010 	.word	0x40020010
 8002e50:	40020028 	.word	0x40020028
 8002e54:	40020040 	.word	0x40020040
 8002e58:	40020058 	.word	0x40020058
 8002e5c:	40020070 	.word	0x40020070
 8002e60:	40020088 	.word	0x40020088
 8002e64:	400200a0 	.word	0x400200a0
 8002e68:	400200b8 	.word	0x400200b8
 8002e6c:	40020410 	.word	0x40020410
 8002e70:	40020428 	.word	0x40020428
 8002e74:	40020440 	.word	0x40020440
 8002e78:	40020458 	.word	0x40020458
 8002e7c:	40020470 	.word	0x40020470
 8002e80:	40020488 	.word	0x40020488
 8002e84:	400204a0 	.word	0x400204a0
 8002e88:	400204b8 	.word	0x400204b8
 8002e8c:	58025408 	.word	0x58025408
 8002e90:	5802541c 	.word	0x5802541c
 8002e94:	58025430 	.word	0x58025430
 8002e98:	58025444 	.word	0x58025444
 8002e9c:	58025458 	.word	0x58025458
 8002ea0:	5802546c 	.word	0x5802546c
 8002ea4:	58025480 	.word	0x58025480
 8002ea8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d160      	bne.n	8002f78 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a7f      	ldr	r2, [pc, #508]	; (80030b8 <HAL_DMA_IRQHandler+0xc74>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d04a      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a7d      	ldr	r2, [pc, #500]	; (80030bc <HAL_DMA_IRQHandler+0xc78>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d045      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a7c      	ldr	r2, [pc, #496]	; (80030c0 <HAL_DMA_IRQHandler+0xc7c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d040      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a7a      	ldr	r2, [pc, #488]	; (80030c4 <HAL_DMA_IRQHandler+0xc80>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d03b      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a79      	ldr	r2, [pc, #484]	; (80030c8 <HAL_DMA_IRQHandler+0xc84>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d036      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a77      	ldr	r2, [pc, #476]	; (80030cc <HAL_DMA_IRQHandler+0xc88>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d031      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a76      	ldr	r2, [pc, #472]	; (80030d0 <HAL_DMA_IRQHandler+0xc8c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d02c      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a74      	ldr	r2, [pc, #464]	; (80030d4 <HAL_DMA_IRQHandler+0xc90>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d027      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a73      	ldr	r2, [pc, #460]	; (80030d8 <HAL_DMA_IRQHandler+0xc94>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d022      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a71      	ldr	r2, [pc, #452]	; (80030dc <HAL_DMA_IRQHandler+0xc98>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01d      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a70      	ldr	r2, [pc, #448]	; (80030e0 <HAL_DMA_IRQHandler+0xc9c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d018      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a6e      	ldr	r2, [pc, #440]	; (80030e4 <HAL_DMA_IRQHandler+0xca0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a6d      	ldr	r2, [pc, #436]	; (80030e8 <HAL_DMA_IRQHandler+0xca4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00e      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a6b      	ldr	r2, [pc, #428]	; (80030ec <HAL_DMA_IRQHandler+0xca8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d009      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a6a      	ldr	r2, [pc, #424]	; (80030f0 <HAL_DMA_IRQHandler+0xcac>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d004      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a68      	ldr	r2, [pc, #416]	; (80030f4 <HAL_DMA_IRQHandler+0xcb0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d108      	bne.n	8002f68 <HAL_DMA_IRQHandler+0xb24>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0208 	bic.w	r2, r2, #8
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	e007      	b.n	8002f78 <HAL_DMA_IRQHandler+0xb34>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0204 	bic.w	r2, r2, #4
 8002f76:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8165 	beq.w	800324c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f8a:	e15f      	b.n	800324c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	2202      	movs	r2, #2
 8002f96:	409a      	lsls	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 80c5 	beq.w	800312c <HAL_DMA_IRQHandler+0xce8>
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80bf 	beq.w	800312c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d018      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 813a 	beq.w	8003250 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fe4:	e134      	b.n	8003250 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8130 	beq.w	8003250 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ff8:	e12a      	b.n	8003250 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b00      	cmp	r3, #0
 8003002:	f040 8089 	bne.w	8003118 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a2b      	ldr	r2, [pc, #172]	; (80030b8 <HAL_DMA_IRQHandler+0xc74>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d04a      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a29      	ldr	r2, [pc, #164]	; (80030bc <HAL_DMA_IRQHandler+0xc78>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d045      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a28      	ldr	r2, [pc, #160]	; (80030c0 <HAL_DMA_IRQHandler+0xc7c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d040      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a26      	ldr	r2, [pc, #152]	; (80030c4 <HAL_DMA_IRQHandler+0xc80>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d03b      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a25      	ldr	r2, [pc, #148]	; (80030c8 <HAL_DMA_IRQHandler+0xc84>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d036      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a23      	ldr	r2, [pc, #140]	; (80030cc <HAL_DMA_IRQHandler+0xc88>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d031      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a22      	ldr	r2, [pc, #136]	; (80030d0 <HAL_DMA_IRQHandler+0xc8c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d02c      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a20      	ldr	r2, [pc, #128]	; (80030d4 <HAL_DMA_IRQHandler+0xc90>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d027      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <HAL_DMA_IRQHandler+0xc94>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d022      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <HAL_DMA_IRQHandler+0xc98>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d01d      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1c      	ldr	r2, [pc, #112]	; (80030e0 <HAL_DMA_IRQHandler+0xc9c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d018      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <HAL_DMA_IRQHandler+0xca0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d013      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a19      	ldr	r2, [pc, #100]	; (80030e8 <HAL_DMA_IRQHandler+0xca4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00e      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a17      	ldr	r2, [pc, #92]	; (80030ec <HAL_DMA_IRQHandler+0xca8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d009      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a16      	ldr	r2, [pc, #88]	; (80030f0 <HAL_DMA_IRQHandler+0xcac>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d004      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a14      	ldr	r2, [pc, #80]	; (80030f4 <HAL_DMA_IRQHandler+0xcb0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d128      	bne.n	80030f8 <HAL_DMA_IRQHandler+0xcb4>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0214 	bic.w	r2, r2, #20
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e027      	b.n	8003108 <HAL_DMA_IRQHandler+0xcc4>
 80030b8:	40020010 	.word	0x40020010
 80030bc:	40020028 	.word	0x40020028
 80030c0:	40020040 	.word	0x40020040
 80030c4:	40020058 	.word	0x40020058
 80030c8:	40020070 	.word	0x40020070
 80030cc:	40020088 	.word	0x40020088
 80030d0:	400200a0 	.word	0x400200a0
 80030d4:	400200b8 	.word	0x400200b8
 80030d8:	40020410 	.word	0x40020410
 80030dc:	40020428 	.word	0x40020428
 80030e0:	40020440 	.word	0x40020440
 80030e4:	40020458 	.word	0x40020458
 80030e8:	40020470 	.word	0x40020470
 80030ec:	40020488 	.word	0x40020488
 80030f0:	400204a0 	.word	0x400204a0
 80030f4:	400204b8 	.word	0x400204b8
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 020a 	bic.w	r2, r2, #10
 8003106:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8097 	beq.w	8003250 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800312a:	e091      	b.n	8003250 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	2208      	movs	r2, #8
 8003136:	409a      	lsls	r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8088 	beq.w	8003252 <HAL_DMA_IRQHandler+0xe0e>
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 8082 	beq.w	8003252 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a41      	ldr	r2, [pc, #260]	; (8003258 <HAL_DMA_IRQHandler+0xe14>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d04a      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a3f      	ldr	r2, [pc, #252]	; (800325c <HAL_DMA_IRQHandler+0xe18>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d045      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a3e      	ldr	r2, [pc, #248]	; (8003260 <HAL_DMA_IRQHandler+0xe1c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d040      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a3c      	ldr	r2, [pc, #240]	; (8003264 <HAL_DMA_IRQHandler+0xe20>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d03b      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a3b      	ldr	r2, [pc, #236]	; (8003268 <HAL_DMA_IRQHandler+0xe24>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d036      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a39      	ldr	r2, [pc, #228]	; (800326c <HAL_DMA_IRQHandler+0xe28>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d031      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a38      	ldr	r2, [pc, #224]	; (8003270 <HAL_DMA_IRQHandler+0xe2c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d02c      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a36      	ldr	r2, [pc, #216]	; (8003274 <HAL_DMA_IRQHandler+0xe30>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d027      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a35      	ldr	r2, [pc, #212]	; (8003278 <HAL_DMA_IRQHandler+0xe34>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d022      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a33      	ldr	r2, [pc, #204]	; (800327c <HAL_DMA_IRQHandler+0xe38>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01d      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a32      	ldr	r2, [pc, #200]	; (8003280 <HAL_DMA_IRQHandler+0xe3c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d018      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a30      	ldr	r2, [pc, #192]	; (8003284 <HAL_DMA_IRQHandler+0xe40>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2f      	ldr	r2, [pc, #188]	; (8003288 <HAL_DMA_IRQHandler+0xe44>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00e      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a2d      	ldr	r2, [pc, #180]	; (800328c <HAL_DMA_IRQHandler+0xe48>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a2c      	ldr	r2, [pc, #176]	; (8003290 <HAL_DMA_IRQHandler+0xe4c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d004      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a2a      	ldr	r2, [pc, #168]	; (8003294 <HAL_DMA_IRQHandler+0xe50>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d108      	bne.n	8003200 <HAL_DMA_IRQHandler+0xdbc>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 021c 	bic.w	r2, r2, #28
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	e007      	b.n	8003210 <HAL_DMA_IRQHandler+0xdcc>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 020e 	bic.w	r2, r2, #14
 800320e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	2201      	movs	r2, #1
 800321a:	409a      	lsls	r2, r3
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	4798      	blx	r3
 8003246:	e004      	b.n	8003252 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003248:	bf00      	nop
 800324a:	e002      	b.n	8003252 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800324c:	bf00      	nop
 800324e:	e000      	b.n	8003252 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003250:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003252:	3728      	adds	r7, #40	; 0x28
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40020010 	.word	0x40020010
 800325c:	40020028 	.word	0x40020028
 8003260:	40020040 	.word	0x40020040
 8003264:	40020058 	.word	0x40020058
 8003268:	40020070 	.word	0x40020070
 800326c:	40020088 	.word	0x40020088
 8003270:	400200a0 	.word	0x400200a0
 8003274:	400200b8 	.word	0x400200b8
 8003278:	40020410 	.word	0x40020410
 800327c:	40020428 	.word	0x40020428
 8003280:	40020440 	.word	0x40020440
 8003284:	40020458 	.word	0x40020458
 8003288:	40020470 	.word	0x40020470
 800328c:	40020488 	.word	0x40020488
 8003290:	400204a0 	.word	0x400204a0
 8003294:	400204b8 	.word	0x400204b8

08003298 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a42      	ldr	r2, [pc, #264]	; (80033b0 <DMA_CalcBaseAndBitshift+0x118>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d04a      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a41      	ldr	r2, [pc, #260]	; (80033b4 <DMA_CalcBaseAndBitshift+0x11c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d045      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a3f      	ldr	r2, [pc, #252]	; (80033b8 <DMA_CalcBaseAndBitshift+0x120>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d040      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a3e      	ldr	r2, [pc, #248]	; (80033bc <DMA_CalcBaseAndBitshift+0x124>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d03b      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a3c      	ldr	r2, [pc, #240]	; (80033c0 <DMA_CalcBaseAndBitshift+0x128>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d036      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a3b      	ldr	r2, [pc, #236]	; (80033c4 <DMA_CalcBaseAndBitshift+0x12c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d031      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a39      	ldr	r2, [pc, #228]	; (80033c8 <DMA_CalcBaseAndBitshift+0x130>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d02c      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a38      	ldr	r2, [pc, #224]	; (80033cc <DMA_CalcBaseAndBitshift+0x134>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d027      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a36      	ldr	r2, [pc, #216]	; (80033d0 <DMA_CalcBaseAndBitshift+0x138>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d022      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a35      	ldr	r2, [pc, #212]	; (80033d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d01d      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a33      	ldr	r2, [pc, #204]	; (80033d8 <DMA_CalcBaseAndBitshift+0x140>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d018      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a32      	ldr	r2, [pc, #200]	; (80033dc <DMA_CalcBaseAndBitshift+0x144>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d013      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a30      	ldr	r2, [pc, #192]	; (80033e0 <DMA_CalcBaseAndBitshift+0x148>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00e      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2f      	ldr	r2, [pc, #188]	; (80033e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d009      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a2d      	ldr	r2, [pc, #180]	; (80033e8 <DMA_CalcBaseAndBitshift+0x150>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a2c      	ldr	r2, [pc, #176]	; (80033ec <DMA_CalcBaseAndBitshift+0x154>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d101      	bne.n	8003344 <DMA_CalcBaseAndBitshift+0xac>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <DMA_CalcBaseAndBitshift+0xae>
 8003344:	2300      	movs	r3, #0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d024      	beq.n	8003394 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	3b10      	subs	r3, #16
 8003352:	4a27      	ldr	r2, [pc, #156]	; (80033f0 <DMA_CalcBaseAndBitshift+0x158>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	4a24      	ldr	r2, [pc, #144]	; (80033f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003364:	5cd3      	ldrb	r3, [r2, r3]
 8003366:	461a      	mov	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b03      	cmp	r3, #3
 8003370:	d908      	bls.n	8003384 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	4b1f      	ldr	r3, [pc, #124]	; (80033f8 <DMA_CalcBaseAndBitshift+0x160>)
 800337a:	4013      	ands	r3, r2
 800337c:	1d1a      	adds	r2, r3, #4
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	659a      	str	r2, [r3, #88]	; 0x58
 8003382:	e00d      	b.n	80033a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <DMA_CalcBaseAndBitshift+0x160>)
 800338c:	4013      	ands	r3, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6593      	str	r3, [r2, #88]	; 0x58
 8003392:	e005      	b.n	80033a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	40020010 	.word	0x40020010
 80033b4:	40020028 	.word	0x40020028
 80033b8:	40020040 	.word	0x40020040
 80033bc:	40020058 	.word	0x40020058
 80033c0:	40020070 	.word	0x40020070
 80033c4:	40020088 	.word	0x40020088
 80033c8:	400200a0 	.word	0x400200a0
 80033cc:	400200b8 	.word	0x400200b8
 80033d0:	40020410 	.word	0x40020410
 80033d4:	40020428 	.word	0x40020428
 80033d8:	40020440 	.word	0x40020440
 80033dc:	40020458 	.word	0x40020458
 80033e0:	40020470 	.word	0x40020470
 80033e4:	40020488 	.word	0x40020488
 80033e8:	400204a0 	.word	0x400204a0
 80033ec:	400204b8 	.word	0x400204b8
 80033f0:	aaaaaaab 	.word	0xaaaaaaab
 80033f4:	08008c8c 	.word	0x08008c8c
 80033f8:	fffffc00 	.word	0xfffffc00

080033fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d120      	bne.n	8003452 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	2b03      	cmp	r3, #3
 8003416:	d858      	bhi.n	80034ca <DMA_CheckFifoParam+0xce>
 8003418:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <DMA_CheckFifoParam+0x24>)
 800341a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341e:	bf00      	nop
 8003420:	08003431 	.word	0x08003431
 8003424:	08003443 	.word	0x08003443
 8003428:	08003431 	.word	0x08003431
 800342c:	080034cb 	.word	0x080034cb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d048      	beq.n	80034ce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003440:	e045      	b.n	80034ce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800344a:	d142      	bne.n	80034d2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003450:	e03f      	b.n	80034d2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800345a:	d123      	bne.n	80034a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	2b03      	cmp	r3, #3
 8003462:	d838      	bhi.n	80034d6 <DMA_CheckFifoParam+0xda>
 8003464:	a201      	add	r2, pc, #4	; (adr r2, 800346c <DMA_CheckFifoParam+0x70>)
 8003466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346a:	bf00      	nop
 800346c:	0800347d 	.word	0x0800347d
 8003470:	08003483 	.word	0x08003483
 8003474:	0800347d 	.word	0x0800347d
 8003478:	08003495 	.word	0x08003495
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
        break;
 8003480:	e030      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d025      	beq.n	80034da <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003492:	e022      	b.n	80034da <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800349c:	d11f      	bne.n	80034de <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80034a2:	e01c      	b.n	80034de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d902      	bls.n	80034b2 <DMA_CheckFifoParam+0xb6>
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d003      	beq.n	80034b8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80034b0:	e018      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
        break;
 80034b6:	e015      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00e      	beq.n	80034e2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
    break;
 80034c8:	e00b      	b.n	80034e2 <DMA_CheckFifoParam+0xe6>
        break;
 80034ca:	bf00      	nop
 80034cc:	e00a      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
        break;
 80034ce:	bf00      	nop
 80034d0:	e008      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
        break;
 80034d2:	bf00      	nop
 80034d4:	e006      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
        break;
 80034d6:	bf00      	nop
 80034d8:	e004      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
        break;
 80034da:	bf00      	nop
 80034dc:	e002      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
        break;
 80034de:	bf00      	nop
 80034e0:	e000      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
    break;
 80034e2:	bf00      	nop
    }
  }

  return status;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop

080034f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a38      	ldr	r2, [pc, #224]	; (80035e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d022      	beq.n	8003552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a36      	ldr	r2, [pc, #216]	; (80035ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01d      	beq.n	8003552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a35      	ldr	r2, [pc, #212]	; (80035f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d018      	beq.n	8003552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a33      	ldr	r2, [pc, #204]	; (80035f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a32      	ldr	r2, [pc, #200]	; (80035f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00e      	beq.n	8003552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a30      	ldr	r2, [pc, #192]	; (80035fc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d009      	beq.n	8003552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2f      	ldr	r2, [pc, #188]	; (8003600 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d004      	beq.n	8003552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2d      	ldr	r2, [pc, #180]	; (8003604 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d101      	bne.n	8003556 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003556:	2300      	movs	r3, #0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01a      	beq.n	8003592 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	3b08      	subs	r3, #8
 8003564:	4a28      	ldr	r2, [pc, #160]	; (8003608 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4b26      	ldr	r3, [pc, #152]	; (800360c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	461a      	mov	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a24      	ldr	r2, [pc, #144]	; (8003610 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003580:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	2201      	movs	r2, #1
 800358a:	409a      	lsls	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003590:	e024      	b.n	80035dc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	3b10      	subs	r3, #16
 800359a:	4a1e      	ldr	r2, [pc, #120]	; (8003614 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d806      	bhi.n	80035ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4a1b      	ldr	r2, [pc, #108]	; (800361c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d902      	bls.n	80035ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	3308      	adds	r3, #8
 80035b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4b18      	ldr	r3, [pc, #96]	; (8003620 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	461a      	mov	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a16      	ldr	r2, [pc, #88]	; (8003624 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80035cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	2201      	movs	r2, #1
 80035d6:	409a      	lsls	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	669a      	str	r2, [r3, #104]	; 0x68
}
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	58025408 	.word	0x58025408
 80035ec:	5802541c 	.word	0x5802541c
 80035f0:	58025430 	.word	0x58025430
 80035f4:	58025444 	.word	0x58025444
 80035f8:	58025458 	.word	0x58025458
 80035fc:	5802546c 	.word	0x5802546c
 8003600:	58025480 	.word	0x58025480
 8003604:	58025494 	.word	0x58025494
 8003608:	cccccccd 	.word	0xcccccccd
 800360c:	16009600 	.word	0x16009600
 8003610:	58025880 	.word	0x58025880
 8003614:	aaaaaaab 	.word	0xaaaaaaab
 8003618:	400204b8 	.word	0x400204b8
 800361c:	4002040f 	.word	0x4002040f
 8003620:	10008200 	.word	0x10008200
 8003624:	40020880 	.word	0x40020880

08003628 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d04a      	beq.n	80036d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b08      	cmp	r3, #8
 8003642:	d847      	bhi.n	80036d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a25      	ldr	r2, [pc, #148]	; (80036e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d022      	beq.n	8003694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a24      	ldr	r2, [pc, #144]	; (80036e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d01d      	beq.n	8003694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a22      	ldr	r2, [pc, #136]	; (80036e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d018      	beq.n	8003694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a21      	ldr	r2, [pc, #132]	; (80036ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d013      	beq.n	8003694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1f      	ldr	r2, [pc, #124]	; (80036f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00e      	beq.n	8003694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1e      	ldr	r2, [pc, #120]	; (80036f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d009      	beq.n	8003694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1c      	ldr	r2, [pc, #112]	; (80036f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d004      	beq.n	8003694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1b      	ldr	r2, [pc, #108]	; (80036fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d101      	bne.n	8003698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003698:	2300      	movs	r3, #0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4b17      	ldr	r3, [pc, #92]	; (8003700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	461a      	mov	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a15      	ldr	r2, [pc, #84]	; (8003704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80036b0:	671a      	str	r2, [r3, #112]	; 0x70
 80036b2:	e009      	b.n	80036c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4b14      	ldr	r3, [pc, #80]	; (8003708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80036b8:	4413      	add	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	461a      	mov	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a11      	ldr	r2, [pc, #68]	; (800370c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80036c6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	2201      	movs	r2, #1
 80036ce:	409a      	lsls	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80036d4:	bf00      	nop
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	58025408 	.word	0x58025408
 80036e4:	5802541c 	.word	0x5802541c
 80036e8:	58025430 	.word	0x58025430
 80036ec:	58025444 	.word	0x58025444
 80036f0:	58025458 	.word	0x58025458
 80036f4:	5802546c 	.word	0x5802546c
 80036f8:	58025480 	.word	0x58025480
 80036fc:	58025494 	.word	0x58025494
 8003700:	1600963f 	.word	0x1600963f
 8003704:	58025940 	.word	0x58025940
 8003708:	1000823f 	.word	0x1000823f
 800370c:	40020940 	.word	0x40020940

08003710 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003710:	b480      	push	{r7}
 8003712:	b089      	sub	sp, #36	; 0x24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800371e:	4b89      	ldr	r3, [pc, #548]	; (8003944 <HAL_GPIO_Init+0x234>)
 8003720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003722:	e194      	b.n	8003a4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	2101      	movs	r1, #1
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	fa01 f303 	lsl.w	r3, r1, r3
 8003730:	4013      	ands	r3, r2
 8003732:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8186 	beq.w	8003a48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	2b01      	cmp	r3, #1
 8003746:	d005      	beq.n	8003754 <HAL_GPIO_Init+0x44>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d130      	bne.n	80037b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	2203      	movs	r2, #3
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800378a:	2201      	movs	r2, #1
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4013      	ands	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	f003 0201 	and.w	r2, r3, #1
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d017      	beq.n	80037f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	2203      	movs	r2, #3
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4013      	ands	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d123      	bne.n	8003846 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	08da      	lsrs	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3208      	adds	r2, #8
 8003806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800380a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	220f      	movs	r2, #15
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4013      	ands	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4313      	orrs	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	08da      	lsrs	r2, r3, #3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3208      	adds	r2, #8
 8003840:	69b9      	ldr	r1, [r7, #24]
 8003842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	2203      	movs	r2, #3
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43db      	mvns	r3, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4013      	ands	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f003 0203 	and.w	r2, r3, #3
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 80e0 	beq.w	8003a48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003888:	4b2f      	ldr	r3, [pc, #188]	; (8003948 <HAL_GPIO_Init+0x238>)
 800388a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800388e:	4a2e      	ldr	r2, [pc, #184]	; (8003948 <HAL_GPIO_Init+0x238>)
 8003890:	f043 0302 	orr.w	r3, r3, #2
 8003894:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003898:	4b2b      	ldr	r3, [pc, #172]	; (8003948 <HAL_GPIO_Init+0x238>)
 800389a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038a6:	4a29      	ldr	r2, [pc, #164]	; (800394c <HAL_GPIO_Init+0x23c>)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	089b      	lsrs	r3, r3, #2
 80038ac:	3302      	adds	r3, #2
 80038ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	220f      	movs	r2, #15
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a20      	ldr	r2, [pc, #128]	; (8003950 <HAL_GPIO_Init+0x240>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d052      	beq.n	8003978 <HAL_GPIO_Init+0x268>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1f      	ldr	r2, [pc, #124]	; (8003954 <HAL_GPIO_Init+0x244>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d031      	beq.n	800393e <HAL_GPIO_Init+0x22e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a1e      	ldr	r2, [pc, #120]	; (8003958 <HAL_GPIO_Init+0x248>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d02b      	beq.n	800393a <HAL_GPIO_Init+0x22a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1d      	ldr	r2, [pc, #116]	; (800395c <HAL_GPIO_Init+0x24c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d025      	beq.n	8003936 <HAL_GPIO_Init+0x226>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a1c      	ldr	r2, [pc, #112]	; (8003960 <HAL_GPIO_Init+0x250>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01f      	beq.n	8003932 <HAL_GPIO_Init+0x222>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <HAL_GPIO_Init+0x254>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d019      	beq.n	800392e <HAL_GPIO_Init+0x21e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a1a      	ldr	r2, [pc, #104]	; (8003968 <HAL_GPIO_Init+0x258>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_GPIO_Init+0x21a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a19      	ldr	r2, [pc, #100]	; (800396c <HAL_GPIO_Init+0x25c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00d      	beq.n	8003926 <HAL_GPIO_Init+0x216>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a18      	ldr	r2, [pc, #96]	; (8003970 <HAL_GPIO_Init+0x260>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <HAL_GPIO_Init+0x212>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a17      	ldr	r2, [pc, #92]	; (8003974 <HAL_GPIO_Init+0x264>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d101      	bne.n	800391e <HAL_GPIO_Init+0x20e>
 800391a:	2309      	movs	r3, #9
 800391c:	e02d      	b.n	800397a <HAL_GPIO_Init+0x26a>
 800391e:	230a      	movs	r3, #10
 8003920:	e02b      	b.n	800397a <HAL_GPIO_Init+0x26a>
 8003922:	2308      	movs	r3, #8
 8003924:	e029      	b.n	800397a <HAL_GPIO_Init+0x26a>
 8003926:	2307      	movs	r3, #7
 8003928:	e027      	b.n	800397a <HAL_GPIO_Init+0x26a>
 800392a:	2306      	movs	r3, #6
 800392c:	e025      	b.n	800397a <HAL_GPIO_Init+0x26a>
 800392e:	2305      	movs	r3, #5
 8003930:	e023      	b.n	800397a <HAL_GPIO_Init+0x26a>
 8003932:	2304      	movs	r3, #4
 8003934:	e021      	b.n	800397a <HAL_GPIO_Init+0x26a>
 8003936:	2303      	movs	r3, #3
 8003938:	e01f      	b.n	800397a <HAL_GPIO_Init+0x26a>
 800393a:	2302      	movs	r3, #2
 800393c:	e01d      	b.n	800397a <HAL_GPIO_Init+0x26a>
 800393e:	2301      	movs	r3, #1
 8003940:	e01b      	b.n	800397a <HAL_GPIO_Init+0x26a>
 8003942:	bf00      	nop
 8003944:	58000080 	.word	0x58000080
 8003948:	58024400 	.word	0x58024400
 800394c:	58000400 	.word	0x58000400
 8003950:	58020000 	.word	0x58020000
 8003954:	58020400 	.word	0x58020400
 8003958:	58020800 	.word	0x58020800
 800395c:	58020c00 	.word	0x58020c00
 8003960:	58021000 	.word	0x58021000
 8003964:	58021400 	.word	0x58021400
 8003968:	58021800 	.word	0x58021800
 800396c:	58021c00 	.word	0x58021c00
 8003970:	58022000 	.word	0x58022000
 8003974:	58022400 	.word	0x58022400
 8003978:	2300      	movs	r3, #0
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	f002 0203 	and.w	r2, r2, #3
 8003980:	0092      	lsls	r2, r2, #2
 8003982:	4093      	lsls	r3, r2
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4313      	orrs	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800398a:	4938      	ldr	r1, [pc, #224]	; (8003a6c <HAL_GPIO_Init+0x35c>)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	3302      	adds	r3, #2
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80039be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80039ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	43db      	mvns	r3, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4013      	ands	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	43db      	mvns	r3, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f47f ae63 	bne.w	8003724 <HAL_GPIO_Init+0x14>
  }
}
 8003a5e:	bf00      	nop
 8003a60:	bf00      	nop
 8003a62:	3724      	adds	r7, #36	; 0x24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	58000400 	.word	0x58000400

08003a70 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003a78:	4a08      	ldr	r2, [pc, #32]	; (8003a9c <HAL_HSEM_FastTake+0x2c>)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3320      	adds	r3, #32
 8003a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a82:	4a07      	ldr	r2, [pc, #28]	; (8003aa0 <HAL_HSEM_FastTake+0x30>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d101      	bne.n	8003a8c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	58026400 	.word	0x58026400
 8003aa0:	80000300 	.word	0x80000300

08003aa4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003aae:	4906      	ldr	r1, [pc, #24]	; (8003ac8 <HAL_HSEM_Release+0x24>)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	58026400 	.word	0x58026400

08003acc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003ad4:	4b29      	ldr	r3, [pc, #164]	; (8003b7c <HAL_PWREx_ConfigSupply+0xb0>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	2b06      	cmp	r3, #6
 8003ade:	d00a      	beq.n	8003af6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003ae0:	4b26      	ldr	r3, [pc, #152]	; (8003b7c <HAL_PWREx_ConfigSupply+0xb0>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d001      	beq.n	8003af2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e040      	b.n	8003b74 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	e03e      	b.n	8003b74 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003af6:	4b21      	ldr	r3, [pc, #132]	; (8003b7c <HAL_PWREx_ConfigSupply+0xb0>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003afe:	491f      	ldr	r1, [pc, #124]	; (8003b7c <HAL_PWREx_ConfigSupply+0xb0>)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003b06:	f7fd fa91 	bl	800102c <HAL_GetTick>
 8003b0a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b0c:	e009      	b.n	8003b22 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b0e:	f7fd fa8d 	bl	800102c <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b1c:	d901      	bls.n	8003b22 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e028      	b.n	8003b74 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b22:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <HAL_PWREx_ConfigSupply+0xb0>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b2e:	d1ee      	bne.n	8003b0e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b1e      	cmp	r3, #30
 8003b34:	d008      	beq.n	8003b48 <HAL_PWREx_ConfigSupply+0x7c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b2e      	cmp	r3, #46	; 0x2e
 8003b3a:	d005      	beq.n	8003b48 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b1d      	cmp	r3, #29
 8003b40:	d002      	beq.n	8003b48 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b2d      	cmp	r3, #45	; 0x2d
 8003b46:	d114      	bne.n	8003b72 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003b48:	f7fd fa70 	bl	800102c <HAL_GetTick>
 8003b4c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003b4e:	e009      	b.n	8003b64 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b50:	f7fd fa6c 	bl	800102c <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b5e:	d901      	bls.n	8003b64 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e007      	b.n	8003b74 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_PWREx_ConfigSupply+0xb0>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b70:	d1ee      	bne.n	8003b50 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	58024800 	.word	0x58024800

08003b80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08c      	sub	sp, #48	; 0x30
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d102      	bne.n	8003b94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f000 bc48 	b.w	8004424 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8088 	beq.w	8003cb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ba2:	4b99      	ldr	r3, [pc, #612]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bac:	4b96      	ldr	r3, [pc, #600]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d007      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x48>
 8003bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bba:	2b18      	cmp	r3, #24
 8003bbc:	d111      	bne.n	8003be2 <HAL_RCC_OscConfig+0x62>
 8003bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d10c      	bne.n	8003be2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc8:	4b8f      	ldr	r3, [pc, #572]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d06d      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x130>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d169      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f000 bc21 	b.w	8004424 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_OscConfig+0x7a>
 8003bec:	4b86      	ldr	r3, [pc, #536]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a85      	ldr	r2, [pc, #532]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	e02e      	b.n	8003c58 <HAL_RCC_OscConfig+0xd8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x9c>
 8003c02:	4b81      	ldr	r3, [pc, #516]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a80      	ldr	r2, [pc, #512]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4b7e      	ldr	r3, [pc, #504]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a7d      	ldr	r2, [pc, #500]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e01d      	b.n	8003c58 <HAL_RCC_OscConfig+0xd8>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c24:	d10c      	bne.n	8003c40 <HAL_RCC_OscConfig+0xc0>
 8003c26:	4b78      	ldr	r3, [pc, #480]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a77      	ldr	r2, [pc, #476]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	4b75      	ldr	r3, [pc, #468]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a74      	ldr	r2, [pc, #464]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e00b      	b.n	8003c58 <HAL_RCC_OscConfig+0xd8>
 8003c40:	4b71      	ldr	r3, [pc, #452]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a70      	ldr	r2, [pc, #448]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	4b6e      	ldr	r3, [pc, #440]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a6d      	ldr	r2, [pc, #436]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d013      	beq.n	8003c88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c60:	f7fd f9e4 	bl	800102c <HAL_GetTick>
 8003c64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c68:	f7fd f9e0 	bl	800102c <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b64      	cmp	r3, #100	; 0x64
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e3d4      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c7a:	4b63      	ldr	r3, [pc, #396]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0xe8>
 8003c86:	e014      	b.n	8003cb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fd f9d0 	bl	800102c <HAL_GetTick>
 8003c8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c90:	f7fd f9cc 	bl	800102c <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	; 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e3c0      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ca2:	4b59      	ldr	r3, [pc, #356]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f0      	bne.n	8003c90 <HAL_RCC_OscConfig+0x110>
 8003cae:	e000      	b.n	8003cb2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 80ca 	beq.w	8003e54 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc0:	4b51      	ldr	r3, [pc, #324]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cc8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cca:	4b4f      	ldr	r3, [pc, #316]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d007      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x166>
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	2b18      	cmp	r3, #24
 8003cda:	d156      	bne.n	8003d8a <HAL_RCC_OscConfig+0x20a>
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d151      	bne.n	8003d8a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ce6:	4b48      	ldr	r3, [pc, #288]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_RCC_OscConfig+0x17e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e392      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cfe:	4b42      	ldr	r3, [pc, #264]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f023 0219 	bic.w	r2, r3, #25
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	493f      	ldr	r1, [pc, #252]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d10:	f7fd f98c 	bl	800102c <HAL_GetTick>
 8003d14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d18:	f7fd f988 	bl	800102c <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e37c      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d2a:	4b37      	ldr	r3, [pc, #220]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d36:	f7fd f9a9 	bl	800108c <HAL_GetREVID>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d817      	bhi.n	8003d74 <HAL_RCC_OscConfig+0x1f4>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	2b40      	cmp	r3, #64	; 0x40
 8003d4a:	d108      	bne.n	8003d5e <HAL_RCC_OscConfig+0x1de>
 8003d4c:	4b2e      	ldr	r3, [pc, #184]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003d54:	4a2c      	ldr	r2, [pc, #176]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d5a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d5c:	e07a      	b.n	8003e54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d5e:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	031b      	lsls	r3, r3, #12
 8003d6c:	4926      	ldr	r1, [pc, #152]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d72:	e06f      	b.n	8003e54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d74:	4b24      	ldr	r3, [pc, #144]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	061b      	lsls	r3, r3, #24
 8003d82:	4921      	ldr	r1, [pc, #132]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d88:	e064      	b.n	8003e54 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d047      	beq.n	8003e22 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d92:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 0219 	bic.w	r2, r3, #25
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	491a      	ldr	r1, [pc, #104]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fd f942 	bl	800102c <HAL_GetTick>
 8003da8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dac:	f7fd f93e 	bl	800102c <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e332      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dbe:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dca:	f7fd f95f 	bl	800108c <HAL_GetREVID>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d819      	bhi.n	8003e0c <HAL_RCC_OscConfig+0x28c>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	2b40      	cmp	r3, #64	; 0x40
 8003dde:	d108      	bne.n	8003df2 <HAL_RCC_OscConfig+0x272>
 8003de0:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003de8:	4a07      	ldr	r2, [pc, #28]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dee:	6053      	str	r3, [r2, #4]
 8003df0:	e030      	b.n	8003e54 <HAL_RCC_OscConfig+0x2d4>
 8003df2:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	031b      	lsls	r3, r3, #12
 8003e00:	4901      	ldr	r1, [pc, #4]	; (8003e08 <HAL_RCC_OscConfig+0x288>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	604b      	str	r3, [r1, #4]
 8003e06:	e025      	b.n	8003e54 <HAL_RCC_OscConfig+0x2d4>
 8003e08:	58024400 	.word	0x58024400
 8003e0c:	4b9a      	ldr	r3, [pc, #616]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	061b      	lsls	r3, r3, #24
 8003e1a:	4997      	ldr	r1, [pc, #604]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]
 8003e20:	e018      	b.n	8003e54 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e22:	4b95      	ldr	r3, [pc, #596]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a94      	ldr	r2, [pc, #592]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2e:	f7fd f8fd 	bl	800102c <HAL_GetTick>
 8003e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e36:	f7fd f8f9 	bl	800102c <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e2ed      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e48:	4b8b      	ldr	r3, [pc, #556]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f0      	bne.n	8003e36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80a9 	beq.w	8003fb4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e62:	4b85      	ldr	r3, [pc, #532]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e6c:	4b82      	ldr	r3, [pc, #520]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d007      	beq.n	8003e88 <HAL_RCC_OscConfig+0x308>
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	2b18      	cmp	r3, #24
 8003e7c:	d13a      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x374>
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f003 0303 	and.w	r3, r3, #3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d135      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e88:	4b7b      	ldr	r3, [pc, #492]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x320>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	2b80      	cmp	r3, #128	; 0x80
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e2c1      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ea0:	f7fd f8f4 	bl	800108c <HAL_GetREVID>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f241 0203 	movw	r2, #4099	; 0x1003
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d817      	bhi.n	8003ede <HAL_RCC_OscConfig+0x35e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d108      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x348>
 8003eb6:	4b70      	ldr	r3, [pc, #448]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003ebe:	4a6e      	ldr	r2, [pc, #440]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003ec0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ec4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ec6:	e075      	b.n	8003fb4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ec8:	4b6b      	ldr	r3, [pc, #428]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	069b      	lsls	r3, r3, #26
 8003ed6:	4968      	ldr	r1, [pc, #416]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003edc:	e06a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ede:	4b66      	ldr	r3, [pc, #408]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	061b      	lsls	r3, r3, #24
 8003eec:	4962      	ldr	r1, [pc, #392]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ef2:	e05f      	b.n	8003fb4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d042      	beq.n	8003f82 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003efc:	4b5e      	ldr	r3, [pc, #376]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a5d      	ldr	r2, [pc, #372]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fd f890 	bl	800102c <HAL_GetTick>
 8003f0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003f10:	f7fd f88c 	bl	800102c <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e280      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f22:	4b55      	ldr	r3, [pc, #340]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f2e:	f7fd f8ad 	bl	800108c <HAL_GetREVID>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d817      	bhi.n	8003f6c <HAL_RCC_OscConfig+0x3ec>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d108      	bne.n	8003f56 <HAL_RCC_OscConfig+0x3d6>
 8003f44:	4b4c      	ldr	r3, [pc, #304]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003f4c:	4a4a      	ldr	r2, [pc, #296]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003f4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f52:	6053      	str	r3, [r2, #4]
 8003f54:	e02e      	b.n	8003fb4 <HAL_RCC_OscConfig+0x434>
 8003f56:	4b48      	ldr	r3, [pc, #288]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	069b      	lsls	r3, r3, #26
 8003f64:	4944      	ldr	r1, [pc, #272]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	604b      	str	r3, [r1, #4]
 8003f6a:	e023      	b.n	8003fb4 <HAL_RCC_OscConfig+0x434>
 8003f6c:	4b42      	ldr	r3, [pc, #264]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	061b      	lsls	r3, r3, #24
 8003f7a:	493f      	ldr	r1, [pc, #252]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60cb      	str	r3, [r1, #12]
 8003f80:	e018      	b.n	8003fb4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003f82:	4b3d      	ldr	r3, [pc, #244]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a3c      	ldr	r2, [pc, #240]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003f88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8e:	f7fd f84d 	bl	800102c <HAL_GetTick>
 8003f92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003f96:	f7fd f849 	bl	800102c <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e23d      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003fa8:	4b33      	ldr	r3, [pc, #204]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f0      	bne.n	8003f96 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d036      	beq.n	800402e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d019      	beq.n	8003ffc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc8:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fcc:	4a2a      	ldr	r2, [pc, #168]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd4:	f7fd f82a 	bl	800102c <HAL_GetTick>
 8003fd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fdc:	f7fd f826 	bl	800102c <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e21a      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fee:	4b22      	ldr	r3, [pc, #136]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0x45c>
 8003ffa:	e018      	b.n	800402e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ffc:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8003ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004000:	4a1d      	ldr	r2, [pc, #116]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8004002:	f023 0301 	bic.w	r3, r3, #1
 8004006:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004008:	f7fd f810 	bl	800102c <HAL_GetTick>
 800400c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004010:	f7fd f80c 	bl	800102c <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e200      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004022:	4b15      	ldr	r3, [pc, #84]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8004024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d039      	beq.n	80040ae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01c      	beq.n	800407c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004042:	4b0d      	ldr	r3, [pc, #52]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a0c      	ldr	r2, [pc, #48]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 8004048:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800404c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800404e:	f7fc ffed 	bl	800102c <HAL_GetTick>
 8004052:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004056:	f7fc ffe9 	bl	800102c <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e1dd      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <HAL_RCC_OscConfig+0x4f8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0x4d6>
 8004074:	e01b      	b.n	80040ae <HAL_RCC_OscConfig+0x52e>
 8004076:	bf00      	nop
 8004078:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800407c:	4b9b      	ldr	r3, [pc, #620]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a9a      	ldr	r2, [pc, #616]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 8004082:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004086:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004088:	f7fc ffd0 	bl	800102c <HAL_GetTick>
 800408c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004090:	f7fc ffcc 	bl	800102c <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e1c0      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80040a2:	4b92      	ldr	r3, [pc, #584]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 8081 	beq.w	80041be <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040bc:	4b8c      	ldr	r3, [pc, #560]	; (80042f0 <HAL_RCC_OscConfig+0x770>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a8b      	ldr	r2, [pc, #556]	; (80042f0 <HAL_RCC_OscConfig+0x770>)
 80040c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040c8:	f7fc ffb0 	bl	800102c <HAL_GetTick>
 80040cc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d0:	f7fc ffac 	bl	800102c <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b64      	cmp	r3, #100	; 0x64
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e1a0      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040e2:	4b83      	ldr	r3, [pc, #524]	; (80042f0 <HAL_RCC_OscConfig+0x770>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d106      	bne.n	8004104 <HAL_RCC_OscConfig+0x584>
 80040f6:	4b7d      	ldr	r3, [pc, #500]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 80040f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fa:	4a7c      	ldr	r2, [pc, #496]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	6713      	str	r3, [r2, #112]	; 0x70
 8004102:	e02d      	b.n	8004160 <HAL_RCC_OscConfig+0x5e0>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10c      	bne.n	8004126 <HAL_RCC_OscConfig+0x5a6>
 800410c:	4b77      	ldr	r3, [pc, #476]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 800410e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004110:	4a76      	ldr	r2, [pc, #472]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 8004112:	f023 0301 	bic.w	r3, r3, #1
 8004116:	6713      	str	r3, [r2, #112]	; 0x70
 8004118:	4b74      	ldr	r3, [pc, #464]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411c:	4a73      	ldr	r2, [pc, #460]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 800411e:	f023 0304 	bic.w	r3, r3, #4
 8004122:	6713      	str	r3, [r2, #112]	; 0x70
 8004124:	e01c      	b.n	8004160 <HAL_RCC_OscConfig+0x5e0>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b05      	cmp	r3, #5
 800412c:	d10c      	bne.n	8004148 <HAL_RCC_OscConfig+0x5c8>
 800412e:	4b6f      	ldr	r3, [pc, #444]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	4a6e      	ldr	r2, [pc, #440]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 8004134:	f043 0304 	orr.w	r3, r3, #4
 8004138:	6713      	str	r3, [r2, #112]	; 0x70
 800413a:	4b6c      	ldr	r3, [pc, #432]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 800413c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413e:	4a6b      	ldr	r2, [pc, #428]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	6713      	str	r3, [r2, #112]	; 0x70
 8004146:	e00b      	b.n	8004160 <HAL_RCC_OscConfig+0x5e0>
 8004148:	4b68      	ldr	r3, [pc, #416]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	4a67      	ldr	r2, [pc, #412]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 800414e:	f023 0301 	bic.w	r3, r3, #1
 8004152:	6713      	str	r3, [r2, #112]	; 0x70
 8004154:	4b65      	ldr	r3, [pc, #404]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 8004156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004158:	4a64      	ldr	r2, [pc, #400]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 800415a:	f023 0304 	bic.w	r3, r3, #4
 800415e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d015      	beq.n	8004194 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004168:	f7fc ff60 	bl	800102c <HAL_GetTick>
 800416c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800416e:	e00a      	b.n	8004186 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004170:	f7fc ff5c 	bl	800102c <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f241 3288 	movw	r2, #5000	; 0x1388
 800417e:	4293      	cmp	r3, r2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e14e      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004186:	4b59      	ldr	r3, [pc, #356]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0ee      	beq.n	8004170 <HAL_RCC_OscConfig+0x5f0>
 8004192:	e014      	b.n	80041be <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004194:	f7fc ff4a 	bl	800102c <HAL_GetTick>
 8004198:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800419a:	e00a      	b.n	80041b2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419c:	f7fc ff46 	bl	800102c <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e138      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041b2:	4b4e      	ldr	r3, [pc, #312]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 80041b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1ee      	bne.n	800419c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 812d 	beq.w	8004422 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80041c8:	4b48      	ldr	r3, [pc, #288]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041d0:	2b18      	cmp	r3, #24
 80041d2:	f000 80bd 	beq.w	8004350 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	2b02      	cmp	r3, #2
 80041dc:	f040 809e 	bne.w	800431c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e0:	4b42      	ldr	r3, [pc, #264]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a41      	ldr	r2, [pc, #260]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 80041e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7fc ff1e 	bl	800102c <HAL_GetTick>
 80041f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f4:	f7fc ff1a 	bl	800102c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e10e      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004206:	4b39      	ldr	r3, [pc, #228]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004212:	4b36      	ldr	r3, [pc, #216]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 8004214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004216:	4b37      	ldr	r3, [pc, #220]	; (80042f4 <HAL_RCC_OscConfig+0x774>)
 8004218:	4013      	ands	r3, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004222:	0112      	lsls	r2, r2, #4
 8004224:	430a      	orrs	r2, r1
 8004226:	4931      	ldr	r1, [pc, #196]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 8004228:	4313      	orrs	r3, r2
 800422a:	628b      	str	r3, [r1, #40]	; 0x28
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	3b01      	subs	r3, #1
 8004232:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423a:	3b01      	subs	r3, #1
 800423c:	025b      	lsls	r3, r3, #9
 800423e:	b29b      	uxth	r3, r3
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	3b01      	subs	r3, #1
 8004248:	041b      	lsls	r3, r3, #16
 800424a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004254:	3b01      	subs	r3, #1
 8004256:	061b      	lsls	r3, r3, #24
 8004258:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800425c:	4923      	ldr	r1, [pc, #140]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 800425e:	4313      	orrs	r3, r2
 8004260:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004262:	4b22      	ldr	r3, [pc, #136]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	4a21      	ldr	r2, [pc, #132]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 8004268:	f023 0301 	bic.w	r3, r3, #1
 800426c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800426e:	4b1f      	ldr	r3, [pc, #124]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 8004270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004272:	4b21      	ldr	r3, [pc, #132]	; (80042f8 <HAL_RCC_OscConfig+0x778>)
 8004274:	4013      	ands	r3, r2
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800427a:	00d2      	lsls	r2, r2, #3
 800427c:	491b      	ldr	r1, [pc, #108]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 800427e:	4313      	orrs	r3, r2
 8004280:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004282:	4b1a      	ldr	r3, [pc, #104]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	f023 020c 	bic.w	r2, r3, #12
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	4917      	ldr	r1, [pc, #92]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 8004290:	4313      	orrs	r3, r2
 8004292:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004294:	4b15      	ldr	r3, [pc, #84]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	f023 0202 	bic.w	r2, r3, #2
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a0:	4912      	ldr	r1, [pc, #72]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042a6:	4b11      	ldr	r3, [pc, #68]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	4a10      	ldr	r2, [pc, #64]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 80042ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b2:	4b0e      	ldr	r3, [pc, #56]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	4a0d      	ldr	r2, [pc, #52]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 80042b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80042be:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 80042c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80042ca:	4b08      	ldr	r3, [pc, #32]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	4a07      	ldr	r2, [pc, #28]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042d6:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a04      	ldr	r2, [pc, #16]	; (80042ec <HAL_RCC_OscConfig+0x76c>)
 80042dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e2:	f7fc fea3 	bl	800102c <HAL_GetTick>
 80042e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042e8:	e011      	b.n	800430e <HAL_RCC_OscConfig+0x78e>
 80042ea:	bf00      	nop
 80042ec:	58024400 	.word	0x58024400
 80042f0:	58024800 	.word	0x58024800
 80042f4:	fffffc0c 	.word	0xfffffc0c
 80042f8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042fc:	f7fc fe96 	bl	800102c <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e08a      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800430e:	4b47      	ldr	r3, [pc, #284]	; (800442c <HAL_RCC_OscConfig+0x8ac>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0f0      	beq.n	80042fc <HAL_RCC_OscConfig+0x77c>
 800431a:	e082      	b.n	8004422 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431c:	4b43      	ldr	r3, [pc, #268]	; (800442c <HAL_RCC_OscConfig+0x8ac>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a42      	ldr	r2, [pc, #264]	; (800442c <HAL_RCC_OscConfig+0x8ac>)
 8004322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fc fe80 	bl	800102c <HAL_GetTick>
 800432c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004330:	f7fc fe7c 	bl	800102c <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e070      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004342:	4b3a      	ldr	r3, [pc, #232]	; (800442c <HAL_RCC_OscConfig+0x8ac>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_OscConfig+0x7b0>
 800434e:	e068      	b.n	8004422 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004350:	4b36      	ldr	r3, [pc, #216]	; (800442c <HAL_RCC_OscConfig+0x8ac>)
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004356:	4b35      	ldr	r3, [pc, #212]	; (800442c <HAL_RCC_OscConfig+0x8ac>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	2b01      	cmp	r3, #1
 8004362:	d031      	beq.n	80043c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f003 0203 	and.w	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800436e:	429a      	cmp	r2, r3
 8004370:	d12a      	bne.n	80043c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437e:	429a      	cmp	r2, r3
 8004380:	d122      	bne.n	80043c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800438e:	429a      	cmp	r2, r3
 8004390:	d11a      	bne.n	80043c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	0a5b      	lsrs	r3, r3, #9
 8004396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d111      	bne.n	80043c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	0c1b      	lsrs	r3, r3, #16
 80043a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d108      	bne.n	80043c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	0e1b      	lsrs	r3, r3, #24
 80043ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e02b      	b.n	8004424 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80043cc:	4b17      	ldr	r3, [pc, #92]	; (800442c <HAL_RCC_OscConfig+0x8ac>)
 80043ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d0:	08db      	lsrs	r3, r3, #3
 80043d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d01f      	beq.n	8004422 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80043e2:	4b12      	ldr	r3, [pc, #72]	; (800442c <HAL_RCC_OscConfig+0x8ac>)
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e6:	4a11      	ldr	r2, [pc, #68]	; (800442c <HAL_RCC_OscConfig+0x8ac>)
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043ee:	f7fc fe1d 	bl	800102c <HAL_GetTick>
 80043f2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80043f4:	bf00      	nop
 80043f6:	f7fc fe19 	bl	800102c <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	4293      	cmp	r3, r2
 8004400:	d0f9      	beq.n	80043f6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004402:	4b0a      	ldr	r3, [pc, #40]	; (800442c <HAL_RCC_OscConfig+0x8ac>)
 8004404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004406:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <HAL_RCC_OscConfig+0x8b0>)
 8004408:	4013      	ands	r3, r2
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800440e:	00d2      	lsls	r2, r2, #3
 8004410:	4906      	ldr	r1, [pc, #24]	; (800442c <HAL_RCC_OscConfig+0x8ac>)
 8004412:	4313      	orrs	r3, r2
 8004414:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004416:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_RCC_OscConfig+0x8ac>)
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	4a04      	ldr	r2, [pc, #16]	; (800442c <HAL_RCC_OscConfig+0x8ac>)
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3730      	adds	r7, #48	; 0x30
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	58024400 	.word	0x58024400
 8004430:	ffff0007 	.word	0xffff0007

08004434 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e19c      	b.n	8004782 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004448:	4b8a      	ldr	r3, [pc, #552]	; (8004674 <HAL_RCC_ClockConfig+0x240>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d910      	bls.n	8004478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004456:	4b87      	ldr	r3, [pc, #540]	; (8004674 <HAL_RCC_ClockConfig+0x240>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 020f 	bic.w	r2, r3, #15
 800445e:	4985      	ldr	r1, [pc, #532]	; (8004674 <HAL_RCC_ClockConfig+0x240>)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	4313      	orrs	r3, r2
 8004464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	4b83      	ldr	r3, [pc, #524]	; (8004674 <HAL_RCC_ClockConfig+0x240>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e184      	b.n	8004782 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d010      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	4b7b      	ldr	r3, [pc, #492]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004490:	429a      	cmp	r2, r3
 8004492:	d908      	bls.n	80044a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004494:	4b78      	ldr	r3, [pc, #480]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	4975      	ldr	r1, [pc, #468]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d010      	beq.n	80044d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695a      	ldr	r2, [r3, #20]
 80044b6:	4b70      	ldr	r3, [pc, #448]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044be:	429a      	cmp	r2, r3
 80044c0:	d908      	bls.n	80044d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80044c2:	4b6d      	ldr	r3, [pc, #436]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	496a      	ldr	r1, [pc, #424]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d010      	beq.n	8004502 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699a      	ldr	r2, [r3, #24]
 80044e4:	4b64      	ldr	r3, [pc, #400]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d908      	bls.n	8004502 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044f0:	4b61      	ldr	r3, [pc, #388]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	495e      	ldr	r1, [pc, #376]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b00      	cmp	r3, #0
 800450c:	d010      	beq.n	8004530 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69da      	ldr	r2, [r3, #28]
 8004512:	4b59      	ldr	r3, [pc, #356]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800451a:	429a      	cmp	r2, r3
 800451c:	d908      	bls.n	8004530 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800451e:	4b56      	ldr	r3, [pc, #344]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	4953      	ldr	r1, [pc, #332]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 800452c:	4313      	orrs	r3, r2
 800452e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d010      	beq.n	800455e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	4b4d      	ldr	r3, [pc, #308]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	429a      	cmp	r2, r3
 800454a:	d908      	bls.n	800455e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800454c:	4b4a      	ldr	r3, [pc, #296]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	f023 020f 	bic.w	r2, r3, #15
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4947      	ldr	r1, [pc, #284]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 800455a:	4313      	orrs	r3, r2
 800455c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d055      	beq.n	8004616 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800456a:	4b43      	ldr	r3, [pc, #268]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	4940      	ldr	r1, [pc, #256]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 8004578:	4313      	orrs	r3, r2
 800457a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b02      	cmp	r3, #2
 8004582:	d107      	bne.n	8004594 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004584:	4b3c      	ldr	r3, [pc, #240]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d121      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0f6      	b.n	8004782 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d107      	bne.n	80045ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800459c:	4b36      	ldr	r3, [pc, #216]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d115      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0ea      	b.n	8004782 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d107      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045b4:	4b30      	ldr	r3, [pc, #192]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d109      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0de      	b.n	8004782 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045c4:	4b2c      	ldr	r3, [pc, #176]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0d6      	b.n	8004782 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045d4:	4b28      	ldr	r3, [pc, #160]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f023 0207 	bic.w	r2, r3, #7
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4925      	ldr	r1, [pc, #148]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e6:	f7fc fd21 	bl	800102c <HAL_GetTick>
 80045ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ec:	e00a      	b.n	8004604 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ee:	f7fc fd1d 	bl	800102c <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e0be      	b.n	8004782 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004604:	4b1c      	ldr	r3, [pc, #112]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	429a      	cmp	r2, r3
 8004614:	d1eb      	bne.n	80045ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d010      	beq.n	8004644 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	4b14      	ldr	r3, [pc, #80]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	429a      	cmp	r2, r3
 8004630:	d208      	bcs.n	8004644 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004632:	4b11      	ldr	r3, [pc, #68]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	f023 020f 	bic.w	r2, r3, #15
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	490e      	ldr	r1, [pc, #56]	; (8004678 <HAL_RCC_ClockConfig+0x244>)
 8004640:	4313      	orrs	r3, r2
 8004642:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004644:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <HAL_RCC_ClockConfig+0x240>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 030f 	and.w	r3, r3, #15
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d214      	bcs.n	800467c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004652:	4b08      	ldr	r3, [pc, #32]	; (8004674 <HAL_RCC_ClockConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 020f 	bic.w	r2, r3, #15
 800465a:	4906      	ldr	r1, [pc, #24]	; (8004674 <HAL_RCC_ClockConfig+0x240>)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	4313      	orrs	r3, r2
 8004660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	4b04      	ldr	r3, [pc, #16]	; (8004674 <HAL_RCC_ClockConfig+0x240>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d005      	beq.n	800467c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e086      	b.n	8004782 <HAL_RCC_ClockConfig+0x34e>
 8004674:	52002000 	.word	0x52002000
 8004678:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d010      	beq.n	80046aa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	4b3f      	ldr	r3, [pc, #252]	; (800478c <HAL_RCC_ClockConfig+0x358>)
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004694:	429a      	cmp	r2, r3
 8004696:	d208      	bcs.n	80046aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004698:	4b3c      	ldr	r3, [pc, #240]	; (800478c <HAL_RCC_ClockConfig+0x358>)
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	4939      	ldr	r1, [pc, #228]	; (800478c <HAL_RCC_ClockConfig+0x358>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d010      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695a      	ldr	r2, [r3, #20]
 80046ba:	4b34      	ldr	r3, [pc, #208]	; (800478c <HAL_RCC_ClockConfig+0x358>)
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d208      	bcs.n	80046d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046c6:	4b31      	ldr	r3, [pc, #196]	; (800478c <HAL_RCC_ClockConfig+0x358>)
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	492e      	ldr	r1, [pc, #184]	; (800478c <HAL_RCC_ClockConfig+0x358>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d010      	beq.n	8004706 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699a      	ldr	r2, [r3, #24]
 80046e8:	4b28      	ldr	r3, [pc, #160]	; (800478c <HAL_RCC_ClockConfig+0x358>)
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d208      	bcs.n	8004706 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046f4:	4b25      	ldr	r3, [pc, #148]	; (800478c <HAL_RCC_ClockConfig+0x358>)
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	4922      	ldr	r1, [pc, #136]	; (800478c <HAL_RCC_ClockConfig+0x358>)
 8004702:	4313      	orrs	r3, r2
 8004704:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	d010      	beq.n	8004734 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	4b1d      	ldr	r3, [pc, #116]	; (800478c <HAL_RCC_ClockConfig+0x358>)
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800471e:	429a      	cmp	r2, r3
 8004720:	d208      	bcs.n	8004734 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004722:	4b1a      	ldr	r3, [pc, #104]	; (800478c <HAL_RCC_ClockConfig+0x358>)
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	4917      	ldr	r1, [pc, #92]	; (800478c <HAL_RCC_ClockConfig+0x358>)
 8004730:	4313      	orrs	r3, r2
 8004732:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004734:	f000 f834 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 8004738:	4602      	mov	r2, r0
 800473a:	4b14      	ldr	r3, [pc, #80]	; (800478c <HAL_RCC_ClockConfig+0x358>)
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	0a1b      	lsrs	r3, r3, #8
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	4912      	ldr	r1, [pc, #72]	; (8004790 <HAL_RCC_ClockConfig+0x35c>)
 8004746:	5ccb      	ldrb	r3, [r1, r3]
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	fa22 f303 	lsr.w	r3, r2, r3
 8004750:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004752:	4b0e      	ldr	r3, [pc, #56]	; (800478c <HAL_RCC_ClockConfig+0x358>)
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	4a0d      	ldr	r2, [pc, #52]	; (8004790 <HAL_RCC_ClockConfig+0x35c>)
 800475c:	5cd3      	ldrb	r3, [r2, r3]
 800475e:	f003 031f 	and.w	r3, r3, #31
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	fa22 f303 	lsr.w	r3, r2, r3
 8004768:	4a0a      	ldr	r2, [pc, #40]	; (8004794 <HAL_RCC_ClockConfig+0x360>)
 800476a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800476c:	4a0a      	ldr	r2, [pc, #40]	; (8004798 <HAL_RCC_ClockConfig+0x364>)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <HAL_RCC_ClockConfig+0x368>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7fc fc0e 	bl	8000f98 <HAL_InitTick>
 800477c:	4603      	mov	r3, r0
 800477e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004780:	7bfb      	ldrb	r3, [r7, #15]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	58024400 	.word	0x58024400
 8004790:	08008c7c 	.word	0x08008c7c
 8004794:	24000004 	.word	0x24000004
 8004798:	24000000 	.word	0x24000000
 800479c:	24000008 	.word	0x24000008

080047a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b089      	sub	sp, #36	; 0x24
 80047a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047a6:	4bb3      	ldr	r3, [pc, #716]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047ae:	2b18      	cmp	r3, #24
 80047b0:	f200 8155 	bhi.w	8004a5e <HAL_RCC_GetSysClockFreq+0x2be>
 80047b4:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80047b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ba:	bf00      	nop
 80047bc:	08004821 	.word	0x08004821
 80047c0:	08004a5f 	.word	0x08004a5f
 80047c4:	08004a5f 	.word	0x08004a5f
 80047c8:	08004a5f 	.word	0x08004a5f
 80047cc:	08004a5f 	.word	0x08004a5f
 80047d0:	08004a5f 	.word	0x08004a5f
 80047d4:	08004a5f 	.word	0x08004a5f
 80047d8:	08004a5f 	.word	0x08004a5f
 80047dc:	08004847 	.word	0x08004847
 80047e0:	08004a5f 	.word	0x08004a5f
 80047e4:	08004a5f 	.word	0x08004a5f
 80047e8:	08004a5f 	.word	0x08004a5f
 80047ec:	08004a5f 	.word	0x08004a5f
 80047f0:	08004a5f 	.word	0x08004a5f
 80047f4:	08004a5f 	.word	0x08004a5f
 80047f8:	08004a5f 	.word	0x08004a5f
 80047fc:	0800484d 	.word	0x0800484d
 8004800:	08004a5f 	.word	0x08004a5f
 8004804:	08004a5f 	.word	0x08004a5f
 8004808:	08004a5f 	.word	0x08004a5f
 800480c:	08004a5f 	.word	0x08004a5f
 8004810:	08004a5f 	.word	0x08004a5f
 8004814:	08004a5f 	.word	0x08004a5f
 8004818:	08004a5f 	.word	0x08004a5f
 800481c:	08004853 	.word	0x08004853
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004820:	4b94      	ldr	r3, [pc, #592]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800482c:	4b91      	ldr	r3, [pc, #580]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	08db      	lsrs	r3, r3, #3
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	4a90      	ldr	r2, [pc, #576]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
 800483c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800483e:	e111      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004840:	4b8d      	ldr	r3, [pc, #564]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004842:	61bb      	str	r3, [r7, #24]
      break;
 8004844:	e10e      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004846:	4b8d      	ldr	r3, [pc, #564]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004848:	61bb      	str	r3, [r7, #24]
      break;
 800484a:	e10b      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800484c:	4b8c      	ldr	r3, [pc, #560]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800484e:	61bb      	str	r3, [r7, #24]
      break;
 8004850:	e108      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004852:	4b88      	ldr	r3, [pc, #544]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800485c:	4b85      	ldr	r3, [pc, #532]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004866:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004868:	4b82      	ldr	r3, [pc, #520]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004872:	4b80      	ldr	r3, [pc, #512]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004876:	08db      	lsrs	r3, r3, #3
 8004878:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	fb02 f303 	mul.w	r3, r2, r3
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80e1 	beq.w	8004a58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b02      	cmp	r3, #2
 800489a:	f000 8083 	beq.w	80049a4 <HAL_RCC_GetSysClockFreq+0x204>
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	f200 80a1 	bhi.w	80049e8 <HAL_RCC_GetSysClockFreq+0x248>
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_RCC_GetSysClockFreq+0x114>
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d056      	beq.n	8004960 <HAL_RCC_GetSysClockFreq+0x1c0>
 80048b2:	e099      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048b4:	4b6f      	ldr	r3, [pc, #444]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0320 	and.w	r3, r3, #32
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d02d      	beq.n	800491c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048c0:	4b6c      	ldr	r3, [pc, #432]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	08db      	lsrs	r3, r3, #3
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	4a6b      	ldr	r2, [pc, #428]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
 80048d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	ee07 3a90 	vmov	s15, r3
 80048d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ea:	4b62      	ldr	r3, [pc, #392]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80048fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004a84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800490a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800490e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004916:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800491a:	e087      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004926:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004a88 <HAL_RCC_GetSysClockFreq+0x2e8>
 800492a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800492e:	4b51      	ldr	r3, [pc, #324]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800493e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004942:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004a84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800494a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800494e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800495e:	e065      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004a8c <HAL_RCC_GetSysClockFreq+0x2ec>
 800496e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004972:	4b40      	ldr	r3, [pc, #256]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497a:	ee07 3a90 	vmov	s15, r3
 800497e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004982:	ed97 6a02 	vldr	s12, [r7, #8]
 8004986:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004a84 <HAL_RCC_GetSysClockFreq+0x2e4>
 800498a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800498e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800499a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049a2:	e043      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004a90 <HAL_RCC_GetSysClockFreq+0x2f0>
 80049b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049b6:	4b2f      	ldr	r3, [pc, #188]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80049ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004a84 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049e6:	e021      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004a8c <HAL_RCC_GetSysClockFreq+0x2ec>
 80049f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049fa:	4b1e      	ldr	r3, [pc, #120]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a0e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004a84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a2a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004a2c:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	0a5b      	lsrs	r3, r3, #9
 8004a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a36:	3301      	adds	r3, #1
 8004a38:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	ee07 3a90 	vmov	s15, r3
 8004a40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a44:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a50:	ee17 3a90 	vmov	r3, s15
 8004a54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004a56:	e005      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	61bb      	str	r3, [r7, #24]
      break;
 8004a5c:	e002      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004a5e:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a60:	61bb      	str	r3, [r7, #24]
      break;
 8004a62:	bf00      	nop
  }

  return sysclockfreq;
 8004a64:	69bb      	ldr	r3, [r7, #24]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3724      	adds	r7, #36	; 0x24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	58024400 	.word	0x58024400
 8004a78:	03d09000 	.word	0x03d09000
 8004a7c:	003d0900 	.word	0x003d0900
 8004a80:	017d7840 	.word	0x017d7840
 8004a84:	46000000 	.word	0x46000000
 8004a88:	4c742400 	.word	0x4c742400
 8004a8c:	4a742400 	.word	0x4a742400
 8004a90:	4bbebc20 	.word	0x4bbebc20

08004a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004a9a:	f7ff fe81 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	0a1b      	lsrs	r3, r3, #8
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	490f      	ldr	r1, [pc, #60]	; (8004ae8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004aac:	5ccb      	ldrb	r3, [r1, r3]
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	4a09      	ldr	r2, [pc, #36]	; (8004ae8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004ac2:	5cd3      	ldrb	r3, [r2, r3]
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	fa22 f303 	lsr.w	r3, r2, r3
 8004ace:	4a07      	ldr	r2, [pc, #28]	; (8004aec <HAL_RCC_GetHCLKFreq+0x58>)
 8004ad0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ad2:	4a07      	ldr	r2, [pc, #28]	; (8004af0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004ad8:	4b04      	ldr	r3, [pc, #16]	; (8004aec <HAL_RCC_GetHCLKFreq+0x58>)
 8004ada:	681b      	ldr	r3, [r3, #0]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	58024400 	.word	0x58024400
 8004ae8:	08008c7c 	.word	0x08008c7c
 8004aec:	24000004 	.word	0x24000004
 8004af0:	24000000 	.word	0x24000000

08004af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004af8:	f7ff ffcc 	bl	8004a94 <HAL_RCC_GetHCLKFreq>
 8004afc:	4602      	mov	r2, r0
 8004afe:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	091b      	lsrs	r3, r3, #4
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	4904      	ldr	r1, [pc, #16]	; (8004b1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b0a:	5ccb      	ldrb	r3, [r1, r3]
 8004b0c:	f003 031f 	and.w	r3, r3, #31
 8004b10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	58024400 	.word	0x58024400
 8004b1c:	08008c7c 	.word	0x08008c7c

08004b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004b24:	f7ff ffb6 	bl	8004a94 <HAL_RCC_GetHCLKFreq>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	0a1b      	lsrs	r3, r3, #8
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	4904      	ldr	r1, [pc, #16]	; (8004b48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b36:	5ccb      	ldrb	r3, [r1, r3]
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	58024400 	.word	0x58024400
 8004b48:	08008c7c 	.word	0x08008c7c

08004b4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b50:	b0ca      	sub	sp, #296	; 0x128
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004b70:	2500      	movs	r5, #0
 8004b72:	ea54 0305 	orrs.w	r3, r4, r5
 8004b76:	d049      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b82:	d02f      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004b84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b88:	d828      	bhi.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004b8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b8e:	d01a      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004b90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b94:	d822      	bhi.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b9e:	d007      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ba0:	e01c      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba2:	4bb8      	ldr	r3, [pc, #736]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	4ab7      	ldr	r2, [pc, #732]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004bae:	e01a      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f001 fc8f 	bl	80064dc <RCCEx_PLL2_Config>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004bc4:	e00f      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bca:	3328      	adds	r3, #40	; 0x28
 8004bcc:	2102      	movs	r1, #2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f001 fd36 	bl	8006640 <RCCEx_PLL3_Config>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004bda:	e004      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004be2:	e000      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004bee:	4ba5      	ldr	r3, [pc, #660]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bfc:	4aa1      	ldr	r2, [pc, #644]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bfe:	430b      	orrs	r3, r1
 8004c00:	6513      	str	r3, [r2, #80]	; 0x50
 8004c02:	e003      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004c18:	f04f 0900 	mov.w	r9, #0
 8004c1c:	ea58 0309 	orrs.w	r3, r8, r9
 8004c20:	d047      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d82a      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004c2c:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c49 	.word	0x08004c49
 8004c38:	08004c57 	.word	0x08004c57
 8004c3c:	08004c6d 	.word	0x08004c6d
 8004c40:	08004c8b 	.word	0x08004c8b
 8004c44:	08004c8b 	.word	0x08004c8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c48:	4b8e      	ldr	r3, [pc, #568]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	4a8d      	ldr	r2, [pc, #564]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c54:	e01a      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c5a:	3308      	adds	r3, #8
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f001 fc3c 	bl	80064dc <RCCEx_PLL2_Config>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c6a:	e00f      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c70:	3328      	adds	r3, #40	; 0x28
 8004c72:	2100      	movs	r1, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 fce3 	bl	8006640 <RCCEx_PLL3_Config>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c80:	e004      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c88:	e000      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10a      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c94:	4b7b      	ldr	r3, [pc, #492]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c98:	f023 0107 	bic.w	r1, r3, #7
 8004c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca2:	4a78      	ldr	r2, [pc, #480]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	6513      	str	r3, [r2, #80]	; 0x50
 8004ca8:	e003      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004caa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004cbe:	f04f 0b00 	mov.w	fp, #0
 8004cc2:	ea5a 030b 	orrs.w	r3, sl, fp
 8004cc6:	d04c      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd2:	d030      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd8:	d829      	bhi.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004cda:	2bc0      	cmp	r3, #192	; 0xc0
 8004cdc:	d02d      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004cde:	2bc0      	cmp	r3, #192	; 0xc0
 8004ce0:	d825      	bhi.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ce2:	2b80      	cmp	r3, #128	; 0x80
 8004ce4:	d018      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004ce6:	2b80      	cmp	r3, #128	; 0x80
 8004ce8:	d821      	bhi.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d007      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004cf2:	e01c      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf4:	4b63      	ldr	r3, [pc, #396]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	4a62      	ldr	r2, [pc, #392]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d00:	e01c      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d06:	3308      	adds	r3, #8
 8004d08:	2100      	movs	r1, #0
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f001 fbe6 	bl	80064dc <RCCEx_PLL2_Config>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d16:	e011      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d1c:	3328      	adds	r3, #40	; 0x28
 8004d1e:	2100      	movs	r1, #0
 8004d20:	4618      	mov	r0, r3
 8004d22:	f001 fc8d 	bl	8006640 <RCCEx_PLL3_Config>
 8004d26:	4603      	mov	r3, r0
 8004d28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d2c:	e006      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d34:	e002      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004d36:	bf00      	nop
 8004d38:	e000      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004d44:	4b4f      	ldr	r3, [pc, #316]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d48:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d52:	4a4c      	ldr	r2, [pc, #304]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d54:	430b      	orrs	r3, r1
 8004d56:	6513      	str	r3, [r2, #80]	; 0x50
 8004d58:	e003      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004d6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004d72:	2300      	movs	r3, #0
 8004d74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004d78:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	d053      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d8e:	d035      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004d90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d94:	d82e      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004d96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d9a:	d031      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004d9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004da0:	d828      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004da6:	d01a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dac:	d822      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004db2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004db6:	d007      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004db8:	e01c      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dba:	4b32      	ldr	r3, [pc, #200]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	4a31      	ldr	r2, [pc, #196]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004dc6:	e01c      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dcc:	3308      	adds	r3, #8
 8004dce:	2100      	movs	r1, #0
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f001 fb83 	bl	80064dc <RCCEx_PLL2_Config>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004ddc:	e011      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004de2:	3328      	adds	r3, #40	; 0x28
 8004de4:	2100      	movs	r1, #0
 8004de6:	4618      	mov	r0, r3
 8004de8:	f001 fc2a 	bl	8006640 <RCCEx_PLL3_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004df2:	e006      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004dfa:	e002      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004dfc:	bf00      	nop
 8004dfe:	e000      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10b      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e0a:	4b1e      	ldr	r3, [pc, #120]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e1a:	4a1a      	ldr	r2, [pc, #104]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8004e20:	e003      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e32:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004e36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e40:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004e44:	460b      	mov	r3, r1
 8004e46:	4313      	orrs	r3, r2
 8004e48:	d056      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e56:	d038      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004e58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e5c:	d831      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e62:	d034      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004e64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e68:	d82b      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e6e:	d01d      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004e70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e74:	d825      	bhi.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d006      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004e7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e7e:	d00a      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004e80:	e01f      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e82:	bf00      	nop
 8004e84:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e88:	4ba2      	ldr	r3, [pc, #648]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	4aa1      	ldr	r2, [pc, #644]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e94:	e01c      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f001 fb1c 	bl	80064dc <RCCEx_PLL2_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004eaa:	e011      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb0:	3328      	adds	r3, #40	; 0x28
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f001 fbc3 	bl	8006640 <RCCEx_PLL3_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ec0:	e006      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ec8:	e002      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004eca:	bf00      	nop
 8004ecc:	e000      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10b      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ed8:	4b8e      	ldr	r3, [pc, #568]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004edc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ee4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ee8:	4a8a      	ldr	r2, [pc, #552]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eea:	430b      	orrs	r3, r1
 8004eec:	6593      	str	r3, [r2, #88]	; 0x58
 8004eee:	e003      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ef4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004f04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f0e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004f12:	460b      	mov	r3, r1
 8004f14:	4313      	orrs	r3, r2
 8004f16:	d03a      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	2b30      	cmp	r3, #48	; 0x30
 8004f20:	d01f      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004f22:	2b30      	cmp	r3, #48	; 0x30
 8004f24:	d819      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004f26:	2b20      	cmp	r3, #32
 8004f28:	d00c      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d815      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d019      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004f32:	2b10      	cmp	r3, #16
 8004f34:	d111      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f36:	4b77      	ldr	r3, [pc, #476]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	4a76      	ldr	r2, [pc, #472]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004f42:	e011      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f48:	3308      	adds	r3, #8
 8004f4a:	2102      	movs	r1, #2
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f001 fac5 	bl	80064dc <RCCEx_PLL2_Config>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004f58:	e006      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f60:	e002      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004f62:	bf00      	nop
 8004f64:	e000      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10a      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f70:	4b68      	ldr	r3, [pc, #416]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f74:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7e:	4a65      	ldr	r2, [pc, #404]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f80:	430b      	orrs	r3, r1
 8004f82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f84:	e003      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f96:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004f9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004fa4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4313      	orrs	r3, r2
 8004fac:	d051      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fb8:	d035      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004fba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fbe:	d82e      	bhi.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004fc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fc4:	d031      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004fc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fca:	d828      	bhi.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd0:	d01a      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd6:	d822      	bhi.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe0:	d007      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004fe2:	e01c      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fe4:	4b4b      	ldr	r3, [pc, #300]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	4a4a      	ldr	r2, [pc, #296]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ff0:	e01c      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ff6:	3308      	adds	r3, #8
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f001 fa6e 	bl	80064dc <RCCEx_PLL2_Config>
 8005000:	4603      	mov	r3, r0
 8005002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005006:	e011      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800500c:	3328      	adds	r3, #40	; 0x28
 800500e:	2100      	movs	r1, #0
 8005010:	4618      	mov	r0, r3
 8005012:	f001 fb15 	bl	8006640 <RCCEx_PLL3_Config>
 8005016:	4603      	mov	r3, r0
 8005018:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800501c:	e006      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005024:	e002      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005026:	bf00      	nop
 8005028:	e000      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800502a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800502c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005034:	4b37      	ldr	r3, [pc, #220]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005038:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800503c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005042:	4a34      	ldr	r2, [pc, #208]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005044:	430b      	orrs	r3, r1
 8005046:	6513      	str	r3, [r2, #80]	; 0x50
 8005048:	e003      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800504e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800505e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005062:	2300      	movs	r3, #0
 8005064:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005068:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800506c:	460b      	mov	r3, r1
 800506e:	4313      	orrs	r3, r2
 8005070:	d056      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800507c:	d033      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800507e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005082:	d82c      	bhi.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005084:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005088:	d02f      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800508a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800508e:	d826      	bhi.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005090:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005094:	d02b      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005096:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800509a:	d820      	bhi.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800509c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050a0:	d012      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80050a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050a6:	d81a      	bhi.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d022      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80050ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b0:	d115      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b6:	3308      	adds	r3, #8
 80050b8:	2101      	movs	r1, #1
 80050ba:	4618      	mov	r0, r3
 80050bc:	f001 fa0e 	bl	80064dc <RCCEx_PLL2_Config>
 80050c0:	4603      	mov	r3, r0
 80050c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80050c6:	e015      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050cc:	3328      	adds	r3, #40	; 0x28
 80050ce:	2101      	movs	r1, #1
 80050d0:	4618      	mov	r0, r3
 80050d2:	f001 fab5 	bl	8006640 <RCCEx_PLL3_Config>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80050dc:	e00a      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050e4:	e006      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80050e6:	bf00      	nop
 80050e8:	e004      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80050ea:	bf00      	nop
 80050ec:	e002      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80050ee:	bf00      	nop
 80050f0:	e000      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80050f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10d      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80050fc:	4b05      	ldr	r3, [pc, #20]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005100:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800510a:	4a02      	ldr	r2, [pc, #8]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800510c:	430b      	orrs	r3, r1
 800510e:	6513      	str	r3, [r2, #80]	; 0x50
 8005110:	e006      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005112:	bf00      	nop
 8005114:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005118:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800511c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800512c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005130:	2300      	movs	r3, #0
 8005132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005136:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800513a:	460b      	mov	r3, r1
 800513c:	4313      	orrs	r3, r2
 800513e:	d055      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005144:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800514c:	d033      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800514e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005152:	d82c      	bhi.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d02f      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800515a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515e:	d826      	bhi.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005160:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005164:	d02b      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005166:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800516a:	d820      	bhi.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800516c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005170:	d012      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005176:	d81a      	bhi.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005178:	2b00      	cmp	r3, #0
 800517a:	d022      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800517c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005180:	d115      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005186:	3308      	adds	r3, #8
 8005188:	2101      	movs	r1, #1
 800518a:	4618      	mov	r0, r3
 800518c:	f001 f9a6 	bl	80064dc <RCCEx_PLL2_Config>
 8005190:	4603      	mov	r3, r0
 8005192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005196:	e015      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800519c:	3328      	adds	r3, #40	; 0x28
 800519e:	2101      	movs	r1, #1
 80051a0:	4618      	mov	r0, r3
 80051a2:	f001 fa4d 	bl	8006640 <RCCEx_PLL3_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80051ac:	e00a      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051b4:	e006      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051b6:	bf00      	nop
 80051b8:	e004      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051ba:	bf00      	nop
 80051bc:	e002      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051be:	bf00      	nop
 80051c0:	e000      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10b      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80051cc:	4ba3      	ldr	r3, [pc, #652]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80051d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051dc:	4a9f      	ldr	r2, [pc, #636]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051de:	430b      	orrs	r3, r1
 80051e0:	6593      	str	r3, [r2, #88]	; 0x58
 80051e2:	e003      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80051f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051fc:	2300      	movs	r3, #0
 80051fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005206:	460b      	mov	r3, r1
 8005208:	4313      	orrs	r3, r2
 800520a:	d037      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800520c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005212:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005216:	d00e      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800521c:	d816      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d018      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005222:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005226:	d111      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005228:	4b8c      	ldr	r3, [pc, #560]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	4a8b      	ldr	r2, [pc, #556]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800522e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005232:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005234:	e00f      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800523a:	3308      	adds	r3, #8
 800523c:	2101      	movs	r1, #1
 800523e:	4618      	mov	r0, r3
 8005240:	f001 f94c 	bl	80064dc <RCCEx_PLL2_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800524a:	e004      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005252:	e000      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005256:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10a      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800525e:	4b7f      	ldr	r3, [pc, #508]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005262:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800526a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526c:	4a7b      	ldr	r2, [pc, #492]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800526e:	430b      	orrs	r3, r1
 8005270:	6513      	str	r3, [r2, #80]	; 0x50
 8005272:	e003      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005274:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005278:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800527c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005288:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800528c:	2300      	movs	r3, #0
 800528e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005292:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005296:	460b      	mov	r3, r1
 8005298:	4313      	orrs	r3, r2
 800529a:	d039      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800529c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d81c      	bhi.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80052a6:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80052a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ac:	080052e9 	.word	0x080052e9
 80052b0:	080052bd 	.word	0x080052bd
 80052b4:	080052cb 	.word	0x080052cb
 80052b8:	080052e9 	.word	0x080052e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052bc:	4b67      	ldr	r3, [pc, #412]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	4a66      	ldr	r2, [pc, #408]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80052c8:	e00f      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ce:	3308      	adds	r3, #8
 80052d0:	2102      	movs	r1, #2
 80052d2:	4618      	mov	r0, r3
 80052d4:	f001 f902 	bl	80064dc <RCCEx_PLL2_Config>
 80052d8:	4603      	mov	r3, r0
 80052da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80052de:	e004      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052e6:	e000      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80052e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10a      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80052f2:	4b5a      	ldr	r3, [pc, #360]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f6:	f023 0103 	bic.w	r1, r3, #3
 80052fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005300:	4a56      	ldr	r2, [pc, #344]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005302:	430b      	orrs	r3, r1
 8005304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005306:	e003      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005308:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800530c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005318:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800531c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005320:	2300      	movs	r3, #0
 8005322:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005326:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800532a:	460b      	mov	r3, r1
 800532c:	4313      	orrs	r3, r2
 800532e:	f000 809f 	beq.w	8005470 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005332:	4b4b      	ldr	r3, [pc, #300]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a4a      	ldr	r2, [pc, #296]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800533c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800533e:	f7fb fe75 	bl	800102c <HAL_GetTick>
 8005342:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005346:	e00b      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005348:	f7fb fe70 	bl	800102c <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b64      	cmp	r3, #100	; 0x64
 8005356:	d903      	bls.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800535e:	e005      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005360:	4b3f      	ldr	r3, [pc, #252]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0ed      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800536c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005370:	2b00      	cmp	r3, #0
 8005372:	d179      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005374:	4b39      	ldr	r3, [pc, #228]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005376:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800537c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005380:	4053      	eors	r3, r2
 8005382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005386:	2b00      	cmp	r3, #0
 8005388:	d015      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800538a:	4b34      	ldr	r3, [pc, #208]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005392:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005396:	4b31      	ldr	r3, [pc, #196]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539a:	4a30      	ldr	r2, [pc, #192]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800539c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053a2:	4b2e      	ldr	r3, [pc, #184]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a6:	4a2d      	ldr	r2, [pc, #180]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80053ae:	4a2b      	ldr	r2, [pc, #172]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80053b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80053be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c2:	d118      	bne.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c4:	f7fb fe32 	bl	800102c <HAL_GetTick>
 80053c8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053cc:	e00d      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	f7fb fe2d 	bl	800102c <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053d8:	1ad2      	subs	r2, r2, r3
 80053da:	f241 3388 	movw	r3, #5000	; 0x1388
 80053de:	429a      	cmp	r2, r3
 80053e0:	d903      	bls.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80053e8:	e005      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053ea:	4b1c      	ldr	r3, [pc, #112]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0eb      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80053f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d129      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005402:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800540e:	d10e      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005410:	4b12      	ldr	r3, [pc, #72]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800541c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005420:	091a      	lsrs	r2, r3, #4
 8005422:	4b10      	ldr	r3, [pc, #64]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005424:	4013      	ands	r3, r2
 8005426:	4a0d      	ldr	r2, [pc, #52]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005428:	430b      	orrs	r3, r1
 800542a:	6113      	str	r3, [r2, #16]
 800542c:	e005      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800542e:	4b0b      	ldr	r3, [pc, #44]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	4a0a      	ldr	r2, [pc, #40]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005434:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005438:	6113      	str	r3, [r2, #16]
 800543a:	4b08      	ldr	r3, [pc, #32]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800543c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005442:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800544a:	4a04      	ldr	r2, [pc, #16]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800544c:	430b      	orrs	r3, r1
 800544e:	6713      	str	r3, [r2, #112]	; 0x70
 8005450:	e00e      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005456:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800545a:	e009      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800545c:	58024400 	.word	0x58024400
 8005460:	58024800 	.word	0x58024800
 8005464:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005468:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800546c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	f002 0301 	and.w	r3, r2, #1
 800547c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005480:	2300      	movs	r3, #0
 8005482:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005486:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800548a:	460b      	mov	r3, r1
 800548c:	4313      	orrs	r3, r2
 800548e:	f000 8089 	beq.w	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005498:	2b28      	cmp	r3, #40	; 0x28
 800549a:	d86b      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800549c:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	0800557d 	.word	0x0800557d
 80054a8:	08005575 	.word	0x08005575
 80054ac:	08005575 	.word	0x08005575
 80054b0:	08005575 	.word	0x08005575
 80054b4:	08005575 	.word	0x08005575
 80054b8:	08005575 	.word	0x08005575
 80054bc:	08005575 	.word	0x08005575
 80054c0:	08005575 	.word	0x08005575
 80054c4:	08005549 	.word	0x08005549
 80054c8:	08005575 	.word	0x08005575
 80054cc:	08005575 	.word	0x08005575
 80054d0:	08005575 	.word	0x08005575
 80054d4:	08005575 	.word	0x08005575
 80054d8:	08005575 	.word	0x08005575
 80054dc:	08005575 	.word	0x08005575
 80054e0:	08005575 	.word	0x08005575
 80054e4:	0800555f 	.word	0x0800555f
 80054e8:	08005575 	.word	0x08005575
 80054ec:	08005575 	.word	0x08005575
 80054f0:	08005575 	.word	0x08005575
 80054f4:	08005575 	.word	0x08005575
 80054f8:	08005575 	.word	0x08005575
 80054fc:	08005575 	.word	0x08005575
 8005500:	08005575 	.word	0x08005575
 8005504:	0800557d 	.word	0x0800557d
 8005508:	08005575 	.word	0x08005575
 800550c:	08005575 	.word	0x08005575
 8005510:	08005575 	.word	0x08005575
 8005514:	08005575 	.word	0x08005575
 8005518:	08005575 	.word	0x08005575
 800551c:	08005575 	.word	0x08005575
 8005520:	08005575 	.word	0x08005575
 8005524:	0800557d 	.word	0x0800557d
 8005528:	08005575 	.word	0x08005575
 800552c:	08005575 	.word	0x08005575
 8005530:	08005575 	.word	0x08005575
 8005534:	08005575 	.word	0x08005575
 8005538:	08005575 	.word	0x08005575
 800553c:	08005575 	.word	0x08005575
 8005540:	08005575 	.word	0x08005575
 8005544:	0800557d 	.word	0x0800557d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800554c:	3308      	adds	r3, #8
 800554e:	2101      	movs	r1, #1
 8005550:	4618      	mov	r0, r3
 8005552:	f000 ffc3 	bl	80064dc <RCCEx_PLL2_Config>
 8005556:	4603      	mov	r3, r0
 8005558:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800555c:	e00f      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800555e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005562:	3328      	adds	r3, #40	; 0x28
 8005564:	2101      	movs	r1, #1
 8005566:	4618      	mov	r0, r3
 8005568:	f001 f86a 	bl	8006640 <RCCEx_PLL3_Config>
 800556c:	4603      	mov	r3, r0
 800556e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005572:	e004      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800557a:	e000      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800557c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800557e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005586:	4bbf      	ldr	r3, [pc, #764]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800558e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005594:	4abb      	ldr	r2, [pc, #748]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005596:	430b      	orrs	r3, r1
 8005598:	6553      	str	r3, [r2, #84]	; 0x54
 800559a:	e003      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800559c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80055a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	f002 0302 	and.w	r3, r2, #2
 80055b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055b4:	2300      	movs	r3, #0
 80055b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80055ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80055be:	460b      	mov	r3, r1
 80055c0:	4313      	orrs	r3, r2
 80055c2:	d041      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80055c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ca:	2b05      	cmp	r3, #5
 80055cc:	d824      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80055ce:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80055d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d4:	08005621 	.word	0x08005621
 80055d8:	080055ed 	.word	0x080055ed
 80055dc:	08005603 	.word	0x08005603
 80055e0:	08005621 	.word	0x08005621
 80055e4:	08005621 	.word	0x08005621
 80055e8:	08005621 	.word	0x08005621
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f0:	3308      	adds	r3, #8
 80055f2:	2101      	movs	r1, #1
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 ff71 	bl	80064dc <RCCEx_PLL2_Config>
 80055fa:	4603      	mov	r3, r0
 80055fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005600:	e00f      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005606:	3328      	adds	r3, #40	; 0x28
 8005608:	2101      	movs	r1, #1
 800560a:	4618      	mov	r0, r3
 800560c:	f001 f818 	bl	8006640 <RCCEx_PLL3_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005616:	e004      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800561e:	e000      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005622:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10a      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800562a:	4b96      	ldr	r3, [pc, #600]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800562c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562e:	f023 0107 	bic.w	r1, r3, #7
 8005632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005636:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005638:	4a92      	ldr	r2, [pc, #584]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800563a:	430b      	orrs	r3, r1
 800563c:	6553      	str	r3, [r2, #84]	; 0x54
 800563e:	e003      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005640:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005644:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005650:	f002 0304 	and.w	r3, r2, #4
 8005654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005658:	2300      	movs	r3, #0
 800565a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800565e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005662:	460b      	mov	r3, r1
 8005664:	4313      	orrs	r3, r2
 8005666:	d044      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800566c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005670:	2b05      	cmp	r3, #5
 8005672:	d825      	bhi.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005674:	a201      	add	r2, pc, #4	; (adr r2, 800567c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567a:	bf00      	nop
 800567c:	080056c9 	.word	0x080056c9
 8005680:	08005695 	.word	0x08005695
 8005684:	080056ab 	.word	0x080056ab
 8005688:	080056c9 	.word	0x080056c9
 800568c:	080056c9 	.word	0x080056c9
 8005690:	080056c9 	.word	0x080056c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005698:	3308      	adds	r3, #8
 800569a:	2101      	movs	r1, #1
 800569c:	4618      	mov	r0, r3
 800569e:	f000 ff1d 	bl	80064dc <RCCEx_PLL2_Config>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80056a8:	e00f      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ae:	3328      	adds	r3, #40	; 0x28
 80056b0:	2101      	movs	r1, #1
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 ffc4 	bl	8006640 <RCCEx_PLL3_Config>
 80056b8:	4603      	mov	r3, r0
 80056ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80056be:	e004      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056c6:	e000      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80056c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10b      	bne.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056d2:	4b6c      	ldr	r3, [pc, #432]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d6:	f023 0107 	bic.w	r1, r3, #7
 80056da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056e2:	4a68      	ldr	r2, [pc, #416]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056e4:	430b      	orrs	r3, r1
 80056e6:	6593      	str	r3, [r2, #88]	; 0x58
 80056e8:	e003      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fa:	f002 0320 	and.w	r3, r2, #32
 80056fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005702:	2300      	movs	r3, #0
 8005704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005708:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800570c:	460b      	mov	r3, r1
 800570e:	4313      	orrs	r3, r2
 8005710:	d055      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800571e:	d033      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005720:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005724:	d82c      	bhi.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572a:	d02f      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800572c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005730:	d826      	bhi.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005732:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005736:	d02b      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005738:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800573c:	d820      	bhi.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800573e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005742:	d012      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005748:	d81a      	bhi.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d022      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800574e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005752:	d115      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005758:	3308      	adds	r3, #8
 800575a:	2100      	movs	r1, #0
 800575c:	4618      	mov	r0, r3
 800575e:	f000 febd 	bl	80064dc <RCCEx_PLL2_Config>
 8005762:	4603      	mov	r3, r0
 8005764:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005768:	e015      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800576a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800576e:	3328      	adds	r3, #40	; 0x28
 8005770:	2102      	movs	r1, #2
 8005772:	4618      	mov	r0, r3
 8005774:	f000 ff64 	bl	8006640 <RCCEx_PLL3_Config>
 8005778:	4603      	mov	r3, r0
 800577a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800577e:	e00a      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005786:	e006      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005788:	bf00      	nop
 800578a:	e004      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800578c:	bf00      	nop
 800578e:	e002      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005790:	bf00      	nop
 8005792:	e000      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005796:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10b      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800579e:	4b39      	ldr	r3, [pc, #228]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ae:	4a35      	ldr	r2, [pc, #212]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057b0:	430b      	orrs	r3, r1
 80057b2:	6553      	str	r3, [r2, #84]	; 0x54
 80057b4:	e003      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80057be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80057ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057ce:	2300      	movs	r3, #0
 80057d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80057d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80057d8:	460b      	mov	r3, r1
 80057da:	4313      	orrs	r3, r2
 80057dc:	d058      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80057de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80057ea:	d033      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80057ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80057f0:	d82c      	bhi.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80057f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f6:	d02f      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80057f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057fc:	d826      	bhi.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80057fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005802:	d02b      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005804:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005808:	d820      	bhi.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800580a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800580e:	d012      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005814:	d81a      	bhi.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005816:	2b00      	cmp	r3, #0
 8005818:	d022      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800581a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800581e:	d115      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005824:	3308      	adds	r3, #8
 8005826:	2100      	movs	r1, #0
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fe57 	bl	80064dc <RCCEx_PLL2_Config>
 800582e:	4603      	mov	r3, r0
 8005830:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005834:	e015      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800583a:	3328      	adds	r3, #40	; 0x28
 800583c:	2102      	movs	r1, #2
 800583e:	4618      	mov	r0, r3
 8005840:	f000 fefe 	bl	8006640 <RCCEx_PLL3_Config>
 8005844:	4603      	mov	r3, r0
 8005846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800584a:	e00a      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005852:	e006      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005854:	bf00      	nop
 8005856:	e004      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005858:	bf00      	nop
 800585a:	e002      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800585c:	bf00      	nop
 800585e:	e000      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005862:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10e      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800586a:	4b06      	ldr	r3, [pc, #24]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800586c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800586e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005876:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800587a:	4a02      	ldr	r2, [pc, #8]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800587c:	430b      	orrs	r3, r1
 800587e:	6593      	str	r3, [r2, #88]	; 0x58
 8005880:	e006      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005882:	bf00      	nop
 8005884:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005888:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800588c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800589c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058a0:	2300      	movs	r3, #0
 80058a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80058aa:	460b      	mov	r3, r1
 80058ac:	4313      	orrs	r3, r2
 80058ae:	d055      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80058b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80058b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80058bc:	d033      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80058be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80058c2:	d82c      	bhi.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80058c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c8:	d02f      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80058ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ce:	d826      	bhi.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80058d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80058d4:	d02b      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80058d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80058da:	d820      	bhi.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80058dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058e0:	d012      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80058e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058e6:	d81a      	bhi.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d022      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80058ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f0:	d115      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f6:	3308      	adds	r3, #8
 80058f8:	2100      	movs	r1, #0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fdee 	bl	80064dc <RCCEx_PLL2_Config>
 8005900:	4603      	mov	r3, r0
 8005902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005906:	e015      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800590c:	3328      	adds	r3, #40	; 0x28
 800590e:	2102      	movs	r1, #2
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fe95 	bl	8006640 <RCCEx_PLL3_Config>
 8005916:	4603      	mov	r3, r0
 8005918:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800591c:	e00a      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005924:	e006      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005926:	bf00      	nop
 8005928:	e004      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800592a:	bf00      	nop
 800592c:	e002      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800592e:	bf00      	nop
 8005930:	e000      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005932:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005934:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10b      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800593c:	4ba1      	ldr	r3, [pc, #644]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800593e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005940:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005948:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800594c:	4a9d      	ldr	r2, [pc, #628]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800594e:	430b      	orrs	r3, r1
 8005950:	6593      	str	r3, [r2, #88]	; 0x58
 8005952:	e003      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005954:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005958:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800595c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005964:	f002 0308 	and.w	r3, r2, #8
 8005968:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800596c:	2300      	movs	r3, #0
 800596e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005972:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005976:	460b      	mov	r3, r1
 8005978:	4313      	orrs	r3, r2
 800597a:	d01e      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800597c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005988:	d10c      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800598a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800598e:	3328      	adds	r3, #40	; 0x28
 8005990:	2102      	movs	r1, #2
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fe54 	bl	8006640 <RCCEx_PLL3_Config>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80059a4:	4b87      	ldr	r3, [pc, #540]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b4:	4a83      	ldr	r2, [pc, #524]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059b6:	430b      	orrs	r3, r1
 80059b8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	f002 0310 	and.w	r3, r2, #16
 80059c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059ca:	2300      	movs	r3, #0
 80059cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80059d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80059d4:	460b      	mov	r3, r1
 80059d6:	4313      	orrs	r3, r2
 80059d8:	d01e      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80059da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059e6:	d10c      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80059e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ec:	3328      	adds	r3, #40	; 0x28
 80059ee:	2102      	movs	r1, #2
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 fe25 	bl	8006640 <RCCEx_PLL3_Config>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a02:	4b70      	ldr	r3, [pc, #448]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a12:	4a6c      	ldr	r2, [pc, #432]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a14:	430b      	orrs	r3, r1
 8005a16:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a20:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005a24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a2e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005a32:	460b      	mov	r3, r1
 8005a34:	4313      	orrs	r3, r2
 8005a36:	d03e      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a44:	d022      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005a46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a4a:	d81b      	bhi.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a54:	d00b      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005a56:	e015      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	2100      	movs	r1, #0
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fd3b 	bl	80064dc <RCCEx_PLL2_Config>
 8005a66:	4603      	mov	r3, r0
 8005a68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005a6c:	e00f      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a72:	3328      	adds	r3, #40	; 0x28
 8005a74:	2102      	movs	r1, #2
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fde2 	bl	8006640 <RCCEx_PLL3_Config>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005a82:	e004      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a8a:	e000      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10b      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a96:	4b4b      	ldr	r3, [pc, #300]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005aa6:	4a47      	ldr	r2, [pc, #284]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005aa8:	430b      	orrs	r3, r1
 8005aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8005aac:	e003      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ab2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005ac2:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ac8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005acc:	460b      	mov	r3, r1
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	d03b      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ada:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ade:	d01f      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005ae0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ae4:	d818      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aea:	d003      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005aec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005af0:	d007      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005af2:	e011      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005af4:	4b33      	ldr	r3, [pc, #204]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	4a32      	ldr	r2, [pc, #200]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b00:	e00f      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b06:	3328      	adds	r3, #40	; 0x28
 8005b08:	2101      	movs	r1, #1
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fd98 	bl	8006640 <RCCEx_PLL3_Config>
 8005b10:	4603      	mov	r3, r0
 8005b12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b16:	e004      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b1e:	e000      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10b      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b2a:	4b26      	ldr	r3, [pc, #152]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3a:	4a22      	ldr	r2, [pc, #136]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	6553      	str	r3, [r2, #84]	; 0x54
 8005b40:	e003      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005b56:	673b      	str	r3, [r7, #112]	; 0x70
 8005b58:	2300      	movs	r3, #0
 8005b5a:	677b      	str	r3, [r7, #116]	; 0x74
 8005b5c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005b60:	460b      	mov	r3, r1
 8005b62:	4313      	orrs	r3, r2
 8005b64:	d034      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b74:	d007      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005b76:	e011      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b78:	4b12      	ldr	r3, [pc, #72]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	4a11      	ldr	r2, [pc, #68]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005b84:	e00e      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	2102      	movs	r1, #2
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fca4 	bl	80064dc <RCCEx_PLL2_Config>
 8005b94:	4603      	mov	r3, r0
 8005b96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005b9a:	e003      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10d      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005bac:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bba:	4a02      	ldr	r2, [pc, #8]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bc0:	e006      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005bc2:	bf00      	nop
 8005bc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005bdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bde:	2300      	movs	r3, #0
 8005be0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005be2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005be6:	460b      	mov	r3, r1
 8005be8:	4313      	orrs	r3, r2
 8005bea:	d00c      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf0:	3328      	adds	r3, #40	; 0x28
 8005bf2:	2102      	movs	r1, #2
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 fd23 	bl	8006640 <RCCEx_PLL3_Config>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005c12:	663b      	str	r3, [r7, #96]	; 0x60
 8005c14:	2300      	movs	r3, #0
 8005c16:	667b      	str	r3, [r7, #100]	; 0x64
 8005c18:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	d038      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c2e:	d018      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005c30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c34:	d811      	bhi.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c3a:	d014      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c40:	d80b      	bhi.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d011      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c4a:	d106      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c4c:	4bc3      	ldr	r3, [pc, #780]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	4ac2      	ldr	r2, [pc, #776]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005c58:	e008      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c60:	e004      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005c62:	bf00      	nop
 8005c64:	e002      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005c66:	bf00      	nop
 8005c68:	e000      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10b      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c74:	4bb9      	ldr	r3, [pc, #740]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c84:	4ab5      	ldr	r2, [pc, #724]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c86:	430b      	orrs	r3, r1
 8005c88:	6553      	str	r3, [r2, #84]	; 0x54
 8005c8a:	e003      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005ca0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ca6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005caa:	460b      	mov	r3, r1
 8005cac:	4313      	orrs	r3, r2
 8005cae:	d009      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005cb0:	4baa      	ldr	r3, [pc, #680]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cbe:	4aa7      	ldr	r2, [pc, #668]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ccc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005cd0:	653b      	str	r3, [r7, #80]	; 0x50
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	657b      	str	r3, [r7, #84]	; 0x54
 8005cd6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	d00a      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005ce0:	4b9e      	ldr	r3, [pc, #632]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005cf0:	4a9a      	ldr	r2, [pc, #616]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cf2:	430b      	orrs	r3, r1
 8005cf4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005d02:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d04:	2300      	movs	r3, #0
 8005d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d08:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	d009      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d12:	4b92      	ldr	r3, [pc, #584]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d16:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d20:	4a8e      	ldr	r2, [pc, #568]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d22:	430b      	orrs	r3, r1
 8005d24:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005d32:	643b      	str	r3, [r7, #64]	; 0x40
 8005d34:	2300      	movs	r3, #0
 8005d36:	647b      	str	r3, [r7, #68]	; 0x44
 8005d38:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	d00e      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d42:	4b86      	ldr	r3, [pc, #536]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	4a85      	ldr	r2, [pc, #532]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d4c:	6113      	str	r3, [r2, #16]
 8005d4e:	4b83      	ldr	r3, [pc, #524]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d50:	6919      	ldr	r1, [r3, #16]
 8005d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005d5a:	4a80      	ldr	r2, [pc, #512]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d68:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005d6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d6e:	2300      	movs	r3, #0
 8005d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d72:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005d76:	460b      	mov	r3, r1
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	d009      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005d7c:	4b77      	ldr	r3, [pc, #476]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d80:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8a:	4a74      	ldr	r2, [pc, #464]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d9e:	2300      	movs	r3, #0
 8005da0:	637b      	str	r3, [r7, #52]	; 0x34
 8005da2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005da6:	460b      	mov	r3, r1
 8005da8:	4313      	orrs	r3, r2
 8005daa:	d00a      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005dac:	4b6b      	ldr	r3, [pc, #428]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dbc:	4a67      	ldr	r2, [pc, #412]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	2100      	movs	r1, #0
 8005dcc:	62b9      	str	r1, [r7, #40]	; 0x28
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dd4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	d011      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005de2:	3308      	adds	r3, #8
 8005de4:	2100      	movs	r1, #0
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fb78 	bl	80064dc <RCCEx_PLL2_Config>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005df2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	6239      	str	r1, [r7, #32]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
 8005e14:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	d011      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e22:	3308      	adds	r3, #8
 8005e24:	2101      	movs	r1, #1
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fb58 	bl	80064dc <RCCEx_PLL2_Config>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005e32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	61b9      	str	r1, [r7, #24]
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	61fb      	str	r3, [r7, #28]
 8005e54:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	d011      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e62:	3308      	adds	r3, #8
 8005e64:	2102      	movs	r1, #2
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fb38 	bl	80064dc <RCCEx_PLL2_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005e72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	6139      	str	r1, [r7, #16]
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	d011      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea2:	3328      	adds	r3, #40	; 0x28
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fbca 	bl	8006640 <RCCEx_PLL3_Config>
 8005eac:	4603      	mov	r3, r0
 8005eae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ebe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	2100      	movs	r1, #0
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	f003 0310 	and.w	r3, r3, #16
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4313      	orrs	r3, r2
 8005edc:	d011      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ee2:	3328      	adds	r3, #40	; 0x28
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 fbaa 	bl	8006640 <RCCEx_PLL3_Config>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005efa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005efe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	6039      	str	r1, [r7, #0]
 8005f0e:	f003 0320 	and.w	r3, r3, #32
 8005f12:	607b      	str	r3, [r7, #4]
 8005f14:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	d011      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f22:	3328      	adds	r3, #40	; 0x28
 8005f24:	2102      	movs	r1, #2
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fb8a 	bl	8006640 <RCCEx_PLL3_Config>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005f32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005f42:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e000      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005f56:	46bd      	mov	sp, r7
 8005f58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f5c:	58024400 	.word	0x58024400

08005f60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005f64:	f7fe fd96 	bl	8004a94 <HAL_RCC_GetHCLKFreq>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	091b      	lsrs	r3, r3, #4
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	4904      	ldr	r1, [pc, #16]	; (8005f88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005f76:	5ccb      	ldrb	r3, [r1, r3]
 8005f78:	f003 031f 	and.w	r3, r3, #31
 8005f7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	58024400 	.word	0x58024400
 8005f88:	08008c7c 	.word	0x08008c7c

08005f8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b089      	sub	sp, #36	; 0x24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f94:	4ba1      	ldr	r3, [pc, #644]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f98:	f003 0303 	and.w	r3, r3, #3
 8005f9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005f9e:	4b9f      	ldr	r3, [pc, #636]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa2:	0b1b      	lsrs	r3, r3, #12
 8005fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fa8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005faa:	4b9c      	ldr	r3, [pc, #624]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fae:	091b      	lsrs	r3, r3, #4
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005fb6:	4b99      	ldr	r3, [pc, #612]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fba:	08db      	lsrs	r3, r3, #3
 8005fbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	fb02 f303 	mul.w	r3, r2, r3
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 8111 	beq.w	80061fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	f000 8083 	beq.w	80060e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	f200 80a1 	bhi.w	800612c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d056      	beq.n	80060a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005ff6:	e099      	b.n	800612c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ff8:	4b88      	ldr	r3, [pc, #544]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b00      	cmp	r3, #0
 8006002:	d02d      	beq.n	8006060 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006004:	4b85      	ldr	r3, [pc, #532]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	08db      	lsrs	r3, r3, #3
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	4a84      	ldr	r2, [pc, #528]	; (8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006010:	fa22 f303 	lsr.w	r3, r2, r3
 8006014:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	ee07 3a90 	vmov	s15, r3
 800601c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800602e:	4b7b      	ldr	r3, [pc, #492]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800603e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006042:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800604a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800604e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800605e:	e087      	b.n	8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800606e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006072:	4b6a      	ldr	r3, [pc, #424]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607a:	ee07 3a90 	vmov	s15, r3
 800607e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006082:	ed97 6a03 	vldr	s12, [r7, #12]
 8006086:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800608a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800608e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800609a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060a2:	e065      	b.n	8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800622c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80060b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b6:	4b59      	ldr	r3, [pc, #356]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060be:	ee07 3a90 	vmov	s15, r3
 80060c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060e6:	e043      	b.n	8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	ee07 3a90 	vmov	s15, r3
 80060ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006230 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80060f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060fa:	4b48      	ldr	r3, [pc, #288]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610a:	ed97 6a03 	vldr	s12, [r7, #12]
 800610e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800611a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800611e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800612a:	e021      	b.n	8006170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006136:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800622c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800613a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800613e:	4b37      	ldr	r3, [pc, #220]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006146:	ee07 3a90 	vmov	s15, r3
 800614a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800614e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006152:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800615a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800615e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800616e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006170:	4b2a      	ldr	r3, [pc, #168]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	0a5b      	lsrs	r3, r3, #9
 8006176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006182:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006186:	ee37 7a87 	vadd.f32	s14, s15, s14
 800618a:	edd7 6a07 	vldr	s13, [r7, #28]
 800618e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006196:	ee17 2a90 	vmov	r2, s15
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800619e:	4b1f      	ldr	r3, [pc, #124]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a2:	0c1b      	lsrs	r3, r3, #16
 80061a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a8:	ee07 3a90 	vmov	s15, r3
 80061ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80061bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061c4:	ee17 2a90 	vmov	r2, s15
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80061cc:	4b13      	ldr	r3, [pc, #76]	; (800621c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	0e1b      	lsrs	r3, r3, #24
 80061d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061d6:	ee07 3a90 	vmov	s15, r3
 80061da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80061ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061f2:	ee17 2a90 	vmov	r2, s15
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80061fa:	e008      	b.n	800620e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	609a      	str	r2, [r3, #8]
}
 800620e:	bf00      	nop
 8006210:	3724      	adds	r7, #36	; 0x24
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	58024400 	.word	0x58024400
 8006220:	03d09000 	.word	0x03d09000
 8006224:	46000000 	.word	0x46000000
 8006228:	4c742400 	.word	0x4c742400
 800622c:	4a742400 	.word	0x4a742400
 8006230:	4bbebc20 	.word	0x4bbebc20

08006234 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006234:	b480      	push	{r7}
 8006236:	b089      	sub	sp, #36	; 0x24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800623c:	4ba1      	ldr	r3, [pc, #644]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	f003 0303 	and.w	r3, r3, #3
 8006244:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006246:	4b9f      	ldr	r3, [pc, #636]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624a:	0d1b      	lsrs	r3, r3, #20
 800624c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006250:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006252:	4b9c      	ldr	r3, [pc, #624]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006256:	0a1b      	lsrs	r3, r3, #8
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800625e:	4b99      	ldr	r3, [pc, #612]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006262:	08db      	lsrs	r3, r3, #3
 8006264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	fb02 f303 	mul.w	r3, r2, r3
 800626e:	ee07 3a90 	vmov	s15, r3
 8006272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006276:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8111 	beq.w	80064a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b02      	cmp	r3, #2
 8006286:	f000 8083 	beq.w	8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	2b02      	cmp	r3, #2
 800628e:	f200 80a1 	bhi.w	80063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d056      	beq.n	800634c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800629e:	e099      	b.n	80063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062a0:	4b88      	ldr	r3, [pc, #544]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0320 	and.w	r3, r3, #32
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d02d      	beq.n	8006308 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062ac:	4b85      	ldr	r3, [pc, #532]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	08db      	lsrs	r3, r3, #3
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	4a84      	ldr	r2, [pc, #528]	; (80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80062b8:	fa22 f303 	lsr.w	r3, r2, r3
 80062bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	ee07 3a90 	vmov	s15, r3
 80062c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	ee07 3a90 	vmov	s15, r3
 80062ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d6:	4b7b      	ldr	r3, [pc, #492]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80064cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006302:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006306:	e087      	b.n	8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	ee07 3a90 	vmov	s15, r3
 800630e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006312:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800631a:	4b6a      	ldr	r3, [pc, #424]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632a:	ed97 6a03 	vldr	s12, [r7, #12]
 800632e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80064cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800633a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800633e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800634a:	e065      	b.n	8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	ee07 3a90 	vmov	s15, r3
 8006352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006356:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80064d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800635a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800635e:	4b59      	ldr	r3, [pc, #356]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006366:	ee07 3a90 	vmov	s15, r3
 800636a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800636e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006372:	eddf 5a56 	vldr	s11, [pc, #344]	; 80064cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800637a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800637e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800638e:	e043      	b.n	8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	ee07 3a90 	vmov	s15, r3
 8006396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80064d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800639e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063a2:	4b48      	ldr	r3, [pc, #288]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80064cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063d2:	e021      	b.n	8006418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80064d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063e6:	4b37      	ldr	r3, [pc, #220]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80063fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80064cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800640a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800640e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006416:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006418:	4b2a      	ldr	r3, [pc, #168]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800641a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641c:	0a5b      	lsrs	r3, r3, #9
 800641e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800642e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006432:	edd7 6a07 	vldr	s13, [r7, #28]
 8006436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800643a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800643e:	ee17 2a90 	vmov	r2, s15
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006446:	4b1f      	ldr	r3, [pc, #124]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	0c1b      	lsrs	r3, r3, #16
 800644c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006450:	ee07 3a90 	vmov	s15, r3
 8006454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800645c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006460:	edd7 6a07 	vldr	s13, [r7, #28]
 8006464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800646c:	ee17 2a90 	vmov	r2, s15
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006474:	4b13      	ldr	r3, [pc, #76]	; (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	0e1b      	lsrs	r3, r3, #24
 800647a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800648a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800648e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800649a:	ee17 2a90 	vmov	r2, s15
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80064a2:	e008      	b.n	80064b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	609a      	str	r2, [r3, #8]
}
 80064b6:	bf00      	nop
 80064b8:	3724      	adds	r7, #36	; 0x24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	58024400 	.word	0x58024400
 80064c8:	03d09000 	.word	0x03d09000
 80064cc:	46000000 	.word	0x46000000
 80064d0:	4c742400 	.word	0x4c742400
 80064d4:	4a742400 	.word	0x4a742400
 80064d8:	4bbebc20 	.word	0x4bbebc20

080064dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064ea:	4b53      	ldr	r3, [pc, #332]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 80064ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ee:	f003 0303 	and.w	r3, r3, #3
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d101      	bne.n	80064fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e099      	b.n	800662e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80064fa:	4b4f      	ldr	r3, [pc, #316]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a4e      	ldr	r2, [pc, #312]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 8006500:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006506:	f7fa fd91 	bl	800102c <HAL_GetTick>
 800650a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800650c:	e008      	b.n	8006520 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800650e:	f7fa fd8d 	bl	800102c <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	2b02      	cmp	r3, #2
 800651a:	d901      	bls.n	8006520 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e086      	b.n	800662e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006520:	4b45      	ldr	r3, [pc, #276]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1f0      	bne.n	800650e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800652c:	4b42      	ldr	r3, [pc, #264]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 800652e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006530:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	031b      	lsls	r3, r3, #12
 800653a:	493f      	ldr	r1, [pc, #252]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 800653c:	4313      	orrs	r3, r2
 800653e:	628b      	str	r3, [r1, #40]	; 0x28
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	3b01      	subs	r3, #1
 8006546:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	3b01      	subs	r3, #1
 8006550:	025b      	lsls	r3, r3, #9
 8006552:	b29b      	uxth	r3, r3
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	3b01      	subs	r3, #1
 800655c:	041b      	lsls	r3, r3, #16
 800655e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	3b01      	subs	r3, #1
 800656a:	061b      	lsls	r3, r3, #24
 800656c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006570:	4931      	ldr	r1, [pc, #196]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 8006572:	4313      	orrs	r3, r2
 8006574:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006576:	4b30      	ldr	r3, [pc, #192]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	492d      	ldr	r1, [pc, #180]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 8006584:	4313      	orrs	r3, r2
 8006586:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006588:	4b2b      	ldr	r3, [pc, #172]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	f023 0220 	bic.w	r2, r3, #32
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	4928      	ldr	r1, [pc, #160]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 8006596:	4313      	orrs	r3, r2
 8006598:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800659a:	4b27      	ldr	r3, [pc, #156]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	4a26      	ldr	r2, [pc, #152]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 80065a0:	f023 0310 	bic.w	r3, r3, #16
 80065a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80065a6:	4b24      	ldr	r3, [pc, #144]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 80065a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065aa:	4b24      	ldr	r3, [pc, #144]	; (800663c <RCCEx_PLL2_Config+0x160>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	69d2      	ldr	r2, [r2, #28]
 80065b2:	00d2      	lsls	r2, r2, #3
 80065b4:	4920      	ldr	r1, [pc, #128]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80065ba:	4b1f      	ldr	r3, [pc, #124]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	4a1e      	ldr	r2, [pc, #120]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 80065c0:	f043 0310 	orr.w	r3, r3, #16
 80065c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d106      	bne.n	80065da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80065cc:	4b1a      	ldr	r3, [pc, #104]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	4a19      	ldr	r2, [pc, #100]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 80065d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065d8:	e00f      	b.n	80065fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d106      	bne.n	80065ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80065e0:	4b15      	ldr	r3, [pc, #84]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	4a14      	ldr	r2, [pc, #80]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 80065e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065ec:	e005      	b.n	80065fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80065ee:	4b12      	ldr	r3, [pc, #72]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 80065f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f2:	4a11      	ldr	r2, [pc, #68]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 80065f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80065fa:	4b0f      	ldr	r3, [pc, #60]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a0e      	ldr	r2, [pc, #56]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 8006600:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006606:	f7fa fd11 	bl	800102c <HAL_GetTick>
 800660a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800660c:	e008      	b.n	8006620 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800660e:	f7fa fd0d 	bl	800102c <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e006      	b.n	800662e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006620:	4b05      	ldr	r3, [pc, #20]	; (8006638 <RCCEx_PLL2_Config+0x15c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0f0      	beq.n	800660e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800662c:	7bfb      	ldrb	r3, [r7, #15]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	58024400 	.word	0x58024400
 800663c:	ffff0007 	.word	0xffff0007

08006640 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800664e:	4b53      	ldr	r3, [pc, #332]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 8006650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	2b03      	cmp	r3, #3
 8006658:	d101      	bne.n	800665e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e099      	b.n	8006792 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800665e:	4b4f      	ldr	r3, [pc, #316]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a4e      	ldr	r2, [pc, #312]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 8006664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800666a:	f7fa fcdf 	bl	800102c <HAL_GetTick>
 800666e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006670:	e008      	b.n	8006684 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006672:	f7fa fcdb 	bl	800102c <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d901      	bls.n	8006684 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e086      	b.n	8006792 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006684:	4b45      	ldr	r3, [pc, #276]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1f0      	bne.n	8006672 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006690:	4b42      	ldr	r3, [pc, #264]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 8006692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006694:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	051b      	lsls	r3, r3, #20
 800669e:	493f      	ldr	r1, [pc, #252]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	628b      	str	r3, [r1, #40]	; 0x28
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	3b01      	subs	r3, #1
 80066aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	025b      	lsls	r3, r3, #9
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	431a      	orrs	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	3b01      	subs	r3, #1
 80066c0:	041b      	lsls	r3, r3, #16
 80066c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	061b      	lsls	r3, r3, #24
 80066d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066d4:	4931      	ldr	r1, [pc, #196]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80066da:	4b30      	ldr	r3, [pc, #192]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 80066dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	492d      	ldr	r1, [pc, #180]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80066ec:	4b2b      	ldr	r3, [pc, #172]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	4928      	ldr	r1, [pc, #160]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80066fe:	4b27      	ldr	r3, [pc, #156]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 8006700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006702:	4a26      	ldr	r2, [pc, #152]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 8006704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006708:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800670a:	4b24      	ldr	r3, [pc, #144]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 800670c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800670e:	4b24      	ldr	r3, [pc, #144]	; (80067a0 <RCCEx_PLL3_Config+0x160>)
 8006710:	4013      	ands	r3, r2
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	69d2      	ldr	r2, [r2, #28]
 8006716:	00d2      	lsls	r2, r2, #3
 8006718:	4920      	ldr	r1, [pc, #128]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 800671a:	4313      	orrs	r3, r2
 800671c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800671e:	4b1f      	ldr	r3, [pc, #124]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 8006720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006722:	4a1e      	ldr	r2, [pc, #120]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 8006724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006728:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d106      	bne.n	800673e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006730:	4b1a      	ldr	r3, [pc, #104]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	4a19      	ldr	r2, [pc, #100]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 8006736:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800673a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800673c:	e00f      	b.n	800675e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d106      	bne.n	8006752 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006744:	4b15      	ldr	r3, [pc, #84]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	4a14      	ldr	r2, [pc, #80]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 800674a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800674e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006750:	e005      	b.n	800675e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006752:	4b12      	ldr	r3, [pc, #72]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 8006754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006756:	4a11      	ldr	r2, [pc, #68]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 8006758:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800675c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800675e:	4b0f      	ldr	r3, [pc, #60]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a0e      	ldr	r2, [pc, #56]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 8006764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800676a:	f7fa fc5f 	bl	800102c <HAL_GetTick>
 800676e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006770:	e008      	b.n	8006784 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006772:	f7fa fc5b 	bl	800102c <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d901      	bls.n	8006784 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e006      	b.n	8006792 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006784:	4b05      	ldr	r3, [pc, #20]	; (800679c <RCCEx_PLL3_Config+0x15c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d0f0      	beq.n	8006772 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006790:	7bfb      	ldrb	r3, [r7, #15]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	58024400 	.word	0x58024400
 80067a0:	ffff0007 	.word	0xffff0007

080067a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e042      	b.n	800683c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d106      	bne.n	80067ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7fa fa57 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2224      	movs	r2, #36	; 0x24
 80067d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0201 	bic.w	r2, r2, #1
 80067e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fc94 	bl	8007114 <UART_SetConfig>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e022      	b.n	800683c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 f9f0 	bl	8007be4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006812:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689a      	ldr	r2, [r3, #8]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006822:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 fa77 	bl	8007d28 <UART_CheckIdleState>
 800683a:	4603      	mov	r3, r0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b08a      	sub	sp, #40	; 0x28
 8006848:	af02      	add	r7, sp, #8
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	603b      	str	r3, [r7, #0]
 8006850:	4613      	mov	r3, r2
 8006852:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685a:	2b20      	cmp	r3, #32
 800685c:	d17b      	bne.n	8006956 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <HAL_UART_Transmit+0x26>
 8006864:	88fb      	ldrh	r3, [r7, #6]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e074      	b.n	8006958 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2221      	movs	r2, #33	; 0x21
 800687a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800687e:	f7fa fbd5 	bl	800102c <HAL_GetTick>
 8006882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	88fa      	ldrh	r2, [r7, #6]
 8006888:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	88fa      	ldrh	r2, [r7, #6]
 8006890:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689c:	d108      	bne.n	80068b0 <HAL_UART_Transmit+0x6c>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d104      	bne.n	80068b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	e003      	b.n	80068b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068b4:	2300      	movs	r3, #0
 80068b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068b8:	e030      	b.n	800691c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2200      	movs	r2, #0
 80068c2:	2180      	movs	r1, #128	; 0x80
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f001 fad9 	bl	8007e7c <UART_WaitOnFlagUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e03d      	b.n	8006958 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10b      	bne.n	80068fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	3302      	adds	r3, #2
 80068f6:	61bb      	str	r3, [r7, #24]
 80068f8:	e007      	b.n	800690a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	781a      	ldrb	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	3301      	adds	r3, #1
 8006908:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006910:	b29b      	uxth	r3, r3
 8006912:	3b01      	subs	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1c8      	bne.n	80068ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2200      	movs	r2, #0
 8006930:	2140      	movs	r1, #64	; 0x40
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f001 faa2 	bl	8007e7c <UART_WaitOnFlagUntilTimeout>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e006      	b.n	8006958 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2220      	movs	r2, #32
 800694e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	e000      	b.n	8006958 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006956:	2302      	movs	r3, #2
  }
}
 8006958:	4618      	mov	r0, r3
 800695a:	3720      	adds	r7, #32
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b0ba      	sub	sp, #232	; 0xe8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006986:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800698a:	f640 030f 	movw	r3, #2063	; 0x80f
 800698e:	4013      	ands	r3, r2
 8006990:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006998:	2b00      	cmp	r3, #0
 800699a:	d11b      	bne.n	80069d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800699c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d015      	beq.n	80069d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80069a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d105      	bne.n	80069c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80069b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d009      	beq.n	80069d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8377 	beq.w	80070b8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	4798      	blx	r3
      }
      return;
 80069d2:	e371      	b.n	80070b8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80069d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 8123 	beq.w	8006c24 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80069de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80069e2:	4b8d      	ldr	r3, [pc, #564]	; (8006c18 <HAL_UART_IRQHandler+0x2b8>)
 80069e4:	4013      	ands	r3, r2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d106      	bne.n	80069f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80069ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80069ee:	4b8b      	ldr	r3, [pc, #556]	; (8006c1c <HAL_UART_IRQHandler+0x2bc>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 8116 	beq.w	8006c24 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d011      	beq.n	8006a28 <HAL_UART_IRQHandler+0xc8>
 8006a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00b      	beq.n	8006a28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2201      	movs	r2, #1
 8006a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a1e:	f043 0201 	orr.w	r2, r3, #1
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d011      	beq.n	8006a58 <HAL_UART_IRQHandler+0xf8>
 8006a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00b      	beq.n	8006a58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2202      	movs	r2, #2
 8006a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4e:	f043 0204 	orr.w	r2, r3, #4
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d011      	beq.n	8006a88 <HAL_UART_IRQHandler+0x128>
 8006a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2204      	movs	r2, #4
 8006a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7e:	f043 0202 	orr.w	r2, r3, #2
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8c:	f003 0308 	and.w	r3, r3, #8
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d017      	beq.n	8006ac4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a98:	f003 0320 	and.w	r3, r3, #32
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d105      	bne.n	8006aac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006aa0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006aa4:	4b5c      	ldr	r3, [pc, #368]	; (8006c18 <HAL_UART_IRQHandler+0x2b8>)
 8006aa6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00b      	beq.n	8006ac4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2208      	movs	r2, #8
 8006ab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aba:	f043 0208 	orr.w	r2, r3, #8
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d012      	beq.n	8006af6 <HAL_UART_IRQHandler+0x196>
 8006ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00c      	beq.n	8006af6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ae4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aec:	f043 0220 	orr.w	r2, r3, #32
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 82dd 	beq.w	80070bc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d013      	beq.n	8006b36 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b12:	f003 0320 	and.w	r3, r3, #32
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d105      	bne.n	8006b26 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d007      	beq.n	8006b36 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4a:	2b40      	cmp	r3, #64	; 0x40
 8006b4c:	d005      	beq.n	8006b5a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d054      	beq.n	8006c04 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 f9f6 	bl	8007f4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6a:	2b40      	cmp	r3, #64	; 0x40
 8006b6c:	d146      	bne.n	8006bfc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3308      	adds	r3, #8
 8006b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3308      	adds	r3, #8
 8006b96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ba6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006bb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1d9      	bne.n	8006b6e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d017      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bca:	4a15      	ldr	r2, [pc, #84]	; (8006c20 <HAL_UART_IRQHandler+0x2c0>)
 8006bcc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7fb f9ef 	bl	8001fb8 <HAL_DMA_Abort_IT>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d019      	beq.n	8006c14 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006bee:	4610      	mov	r0, r2
 8006bf0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf2:	e00f      	b.n	8006c14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fa77 	bl	80070e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bfa:	e00b      	b.n	8006c14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fa73 	bl	80070e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c02:	e007      	b.n	8006c14 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fa6f 	bl	80070e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006c12:	e253      	b.n	80070bc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c14:	bf00      	nop
    return;
 8006c16:	e251      	b.n	80070bc <HAL_UART_IRQHandler+0x75c>
 8006c18:	10000001 	.word	0x10000001
 8006c1c:	04000120 	.word	0x04000120
 8006c20:	08008019 	.word	0x08008019

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	f040 81e7 	bne.w	8006ffc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c32:	f003 0310 	and.w	r3, r3, #16
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 81e0 	beq.w	8006ffc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c40:	f003 0310 	and.w	r3, r3, #16
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 81d9 	beq.w	8006ffc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2210      	movs	r2, #16
 8006c50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5c:	2b40      	cmp	r3, #64	; 0x40
 8006c5e:	f040 8151 	bne.w	8006f04 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a96      	ldr	r2, [pc, #600]	; (8006ec4 <HAL_UART_IRQHandler+0x564>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d068      	beq.n	8006d42 <HAL_UART_IRQHandler+0x3e2>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a93      	ldr	r2, [pc, #588]	; (8006ec8 <HAL_UART_IRQHandler+0x568>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d061      	beq.n	8006d42 <HAL_UART_IRQHandler+0x3e2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a91      	ldr	r2, [pc, #580]	; (8006ecc <HAL_UART_IRQHandler+0x56c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d05a      	beq.n	8006d42 <HAL_UART_IRQHandler+0x3e2>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a8e      	ldr	r2, [pc, #568]	; (8006ed0 <HAL_UART_IRQHandler+0x570>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d053      	beq.n	8006d42 <HAL_UART_IRQHandler+0x3e2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a8c      	ldr	r2, [pc, #560]	; (8006ed4 <HAL_UART_IRQHandler+0x574>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d04c      	beq.n	8006d42 <HAL_UART_IRQHandler+0x3e2>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a89      	ldr	r2, [pc, #548]	; (8006ed8 <HAL_UART_IRQHandler+0x578>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d045      	beq.n	8006d42 <HAL_UART_IRQHandler+0x3e2>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a87      	ldr	r2, [pc, #540]	; (8006edc <HAL_UART_IRQHandler+0x57c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d03e      	beq.n	8006d42 <HAL_UART_IRQHandler+0x3e2>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a84      	ldr	r2, [pc, #528]	; (8006ee0 <HAL_UART_IRQHandler+0x580>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d037      	beq.n	8006d42 <HAL_UART_IRQHandler+0x3e2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a82      	ldr	r2, [pc, #520]	; (8006ee4 <HAL_UART_IRQHandler+0x584>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d030      	beq.n	8006d42 <HAL_UART_IRQHandler+0x3e2>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a7f      	ldr	r2, [pc, #508]	; (8006ee8 <HAL_UART_IRQHandler+0x588>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d029      	beq.n	8006d42 <HAL_UART_IRQHandler+0x3e2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a7d      	ldr	r2, [pc, #500]	; (8006eec <HAL_UART_IRQHandler+0x58c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d022      	beq.n	8006d42 <HAL_UART_IRQHandler+0x3e2>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a7a      	ldr	r2, [pc, #488]	; (8006ef0 <HAL_UART_IRQHandler+0x590>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d01b      	beq.n	8006d42 <HAL_UART_IRQHandler+0x3e2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a78      	ldr	r2, [pc, #480]	; (8006ef4 <HAL_UART_IRQHandler+0x594>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d014      	beq.n	8006d42 <HAL_UART_IRQHandler+0x3e2>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a75      	ldr	r2, [pc, #468]	; (8006ef8 <HAL_UART_IRQHandler+0x598>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d00d      	beq.n	8006d42 <HAL_UART_IRQHandler+0x3e2>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a73      	ldr	r2, [pc, #460]	; (8006efc <HAL_UART_IRQHandler+0x59c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d006      	beq.n	8006d42 <HAL_UART_IRQHandler+0x3e2>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a70      	ldr	r2, [pc, #448]	; (8006f00 <HAL_UART_IRQHandler+0x5a0>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d106      	bne.n	8006d50 <HAL_UART_IRQHandler+0x3f0>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	e005      	b.n	8006d5c <HAL_UART_IRQHandler+0x3fc>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 81ab 	beq.w	80070c0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d74:	429a      	cmp	r2, r3
 8006d76:	f080 81a3 	bcs.w	80070c0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d90:	f000 8087 	beq.w	8006ea2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006da8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006db0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	461a      	mov	r2, r3
 8006dba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006dbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dc2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006dca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1da      	bne.n	8006d94 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3308      	adds	r3, #8
 8006de4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006de8:	e853 3f00 	ldrex	r3, [r3]
 8006dec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006dee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006df0:	f023 0301 	bic.w	r3, r3, #1
 8006df4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e0e:	e841 2300 	strex	r3, r2, [r1]
 8006e12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1e1      	bne.n	8006dde <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3308      	adds	r3, #8
 8006e20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3308      	adds	r3, #8
 8006e3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1e3      	bne.n	8006e1a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2220      	movs	r2, #32
 8006e56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e70:	f023 0310 	bic.w	r3, r3, #16
 8006e74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e82:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e84:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e4      	bne.n	8006e60 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fa fd6d 	bl	800197c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f91d 	bl	80070fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ec2:	e0fd      	b.n	80070c0 <HAL_UART_IRQHandler+0x760>
 8006ec4:	40020010 	.word	0x40020010
 8006ec8:	40020028 	.word	0x40020028
 8006ecc:	40020040 	.word	0x40020040
 8006ed0:	40020058 	.word	0x40020058
 8006ed4:	40020070 	.word	0x40020070
 8006ed8:	40020088 	.word	0x40020088
 8006edc:	400200a0 	.word	0x400200a0
 8006ee0:	400200b8 	.word	0x400200b8
 8006ee4:	40020410 	.word	0x40020410
 8006ee8:	40020428 	.word	0x40020428
 8006eec:	40020440 	.word	0x40020440
 8006ef0:	40020458 	.word	0x40020458
 8006ef4:	40020470 	.word	0x40020470
 8006ef8:	40020488 	.word	0x40020488
 8006efc:	400204a0 	.word	0x400204a0
 8006f00:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 80cf 	beq.w	80070c4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006f26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 80ca 	beq.w	80070c4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f52:	647b      	str	r3, [r7, #68]	; 0x44
 8006f54:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e4      	bne.n	8006f30 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	623b      	str	r3, [r7, #32]
   return(result);
 8006f76:	6a3a      	ldr	r2, [r7, #32]
 8006f78:	4b55      	ldr	r3, [pc, #340]	; (80070d0 <HAL_UART_IRQHandler+0x770>)
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3308      	adds	r3, #8
 8006f86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f8a:	633a      	str	r2, [r7, #48]	; 0x30
 8006f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e3      	bne.n	8006f66 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	e853 3f00 	ldrex	r3, [r3]
 8006fbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f023 0310 	bic.w	r3, r3, #16
 8006fc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fd4:	61fb      	str	r3, [r7, #28]
 8006fd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd8:	69b9      	ldr	r1, [r7, #24]
 8006fda:	69fa      	ldr	r2, [r7, #28]
 8006fdc:	e841 2300 	strex	r3, r2, [r1]
 8006fe0:	617b      	str	r3, [r7, #20]
   return(result);
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1e4      	bne.n	8006fb2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f881 	bl	80070fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ffa:	e063      	b.n	80070c4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00e      	beq.n	8007026 <HAL_UART_IRQHandler+0x6c6>
 8007008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800700c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d008      	beq.n	8007026 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800701c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 f83b 	bl	800809a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007024:	e051      	b.n	80070ca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800702a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702e:	2b00      	cmp	r3, #0
 8007030:	d014      	beq.n	800705c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703a:	2b00      	cmp	r3, #0
 800703c:	d105      	bne.n	800704a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800703e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d008      	beq.n	800705c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800704e:	2b00      	cmp	r3, #0
 8007050:	d03a      	beq.n	80070c8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	4798      	blx	r3
    }
    return;
 800705a:	e035      	b.n	80070c8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800705c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007064:	2b00      	cmp	r3, #0
 8007066:	d009      	beq.n	800707c <HAL_UART_IRQHandler+0x71c>
 8007068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 ffe5 	bl	8008044 <UART_EndTransmit_IT>
    return;
 800707a:	e026      	b.n	80070ca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800707c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007080:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d009      	beq.n	800709c <HAL_UART_IRQHandler+0x73c>
 8007088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800708c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d003      	beq.n	800709c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f001 f814 	bl	80080c2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800709a:	e016      	b.n	80070ca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800709c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d010      	beq.n	80070ca <HAL_UART_IRQHandler+0x76a>
 80070a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	da0c      	bge.n	80070ca <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fffc 	bl	80080ae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070b6:	e008      	b.n	80070ca <HAL_UART_IRQHandler+0x76a>
      return;
 80070b8:	bf00      	nop
 80070ba:	e006      	b.n	80070ca <HAL_UART_IRQHandler+0x76a>
    return;
 80070bc:	bf00      	nop
 80070be:	e004      	b.n	80070ca <HAL_UART_IRQHandler+0x76a>
      return;
 80070c0:	bf00      	nop
 80070c2:	e002      	b.n	80070ca <HAL_UART_IRQHandler+0x76a>
      return;
 80070c4:	bf00      	nop
 80070c6:	e000      	b.n	80070ca <HAL_UART_IRQHandler+0x76a>
    return;
 80070c8:	bf00      	nop
  }
}
 80070ca:	37e8      	adds	r7, #232	; 0xe8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	effffffe 	.word	0xeffffffe

080070d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007118:	b092      	sub	sp, #72	; 0x48
 800711a:	af00      	add	r7, sp, #0
 800711c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	431a      	orrs	r2, r3
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	431a      	orrs	r2, r3
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	4313      	orrs	r3, r2
 800713a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	4bbe      	ldr	r3, [pc, #760]	; (800743c <UART_SetConfig+0x328>)
 8007144:	4013      	ands	r3, r2
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	6812      	ldr	r2, [r2, #0]
 800714a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800714c:	430b      	orrs	r3, r1
 800714e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4ab3      	ldr	r2, [pc, #716]	; (8007440 <UART_SetConfig+0x32c>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d004      	beq.n	8007180 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800717c:	4313      	orrs	r3, r2
 800717e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	4baf      	ldr	r3, [pc, #700]	; (8007444 <UART_SetConfig+0x330>)
 8007188:	4013      	ands	r3, r2
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	6812      	ldr	r2, [r2, #0]
 800718e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007190:	430b      	orrs	r3, r1
 8007192:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719a:	f023 010f 	bic.w	r1, r3, #15
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4aa6      	ldr	r2, [pc, #664]	; (8007448 <UART_SetConfig+0x334>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d177      	bne.n	80072a4 <UART_SetConfig+0x190>
 80071b4:	4ba5      	ldr	r3, [pc, #660]	; (800744c <UART_SetConfig+0x338>)
 80071b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071bc:	2b28      	cmp	r3, #40	; 0x28
 80071be:	d86d      	bhi.n	800729c <UART_SetConfig+0x188>
 80071c0:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <UART_SetConfig+0xb4>)
 80071c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c6:	bf00      	nop
 80071c8:	0800726d 	.word	0x0800726d
 80071cc:	0800729d 	.word	0x0800729d
 80071d0:	0800729d 	.word	0x0800729d
 80071d4:	0800729d 	.word	0x0800729d
 80071d8:	0800729d 	.word	0x0800729d
 80071dc:	0800729d 	.word	0x0800729d
 80071e0:	0800729d 	.word	0x0800729d
 80071e4:	0800729d 	.word	0x0800729d
 80071e8:	08007275 	.word	0x08007275
 80071ec:	0800729d 	.word	0x0800729d
 80071f0:	0800729d 	.word	0x0800729d
 80071f4:	0800729d 	.word	0x0800729d
 80071f8:	0800729d 	.word	0x0800729d
 80071fc:	0800729d 	.word	0x0800729d
 8007200:	0800729d 	.word	0x0800729d
 8007204:	0800729d 	.word	0x0800729d
 8007208:	0800727d 	.word	0x0800727d
 800720c:	0800729d 	.word	0x0800729d
 8007210:	0800729d 	.word	0x0800729d
 8007214:	0800729d 	.word	0x0800729d
 8007218:	0800729d 	.word	0x0800729d
 800721c:	0800729d 	.word	0x0800729d
 8007220:	0800729d 	.word	0x0800729d
 8007224:	0800729d 	.word	0x0800729d
 8007228:	08007285 	.word	0x08007285
 800722c:	0800729d 	.word	0x0800729d
 8007230:	0800729d 	.word	0x0800729d
 8007234:	0800729d 	.word	0x0800729d
 8007238:	0800729d 	.word	0x0800729d
 800723c:	0800729d 	.word	0x0800729d
 8007240:	0800729d 	.word	0x0800729d
 8007244:	0800729d 	.word	0x0800729d
 8007248:	0800728d 	.word	0x0800728d
 800724c:	0800729d 	.word	0x0800729d
 8007250:	0800729d 	.word	0x0800729d
 8007254:	0800729d 	.word	0x0800729d
 8007258:	0800729d 	.word	0x0800729d
 800725c:	0800729d 	.word	0x0800729d
 8007260:	0800729d 	.word	0x0800729d
 8007264:	0800729d 	.word	0x0800729d
 8007268:	08007295 	.word	0x08007295
 800726c:	2301      	movs	r3, #1
 800726e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007272:	e222      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007274:	2304      	movs	r3, #4
 8007276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800727a:	e21e      	b.n	80076ba <UART_SetConfig+0x5a6>
 800727c:	2308      	movs	r3, #8
 800727e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007282:	e21a      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007284:	2310      	movs	r3, #16
 8007286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800728a:	e216      	b.n	80076ba <UART_SetConfig+0x5a6>
 800728c:	2320      	movs	r3, #32
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007292:	e212      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007294:	2340      	movs	r3, #64	; 0x40
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800729a:	e20e      	b.n	80076ba <UART_SetConfig+0x5a6>
 800729c:	2380      	movs	r3, #128	; 0x80
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072a2:	e20a      	b.n	80076ba <UART_SetConfig+0x5a6>
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a69      	ldr	r2, [pc, #420]	; (8007450 <UART_SetConfig+0x33c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d130      	bne.n	8007310 <UART_SetConfig+0x1fc>
 80072ae:	4b67      	ldr	r3, [pc, #412]	; (800744c <UART_SetConfig+0x338>)
 80072b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b2:	f003 0307 	and.w	r3, r3, #7
 80072b6:	2b05      	cmp	r3, #5
 80072b8:	d826      	bhi.n	8007308 <UART_SetConfig+0x1f4>
 80072ba:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <UART_SetConfig+0x1ac>)
 80072bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c0:	080072d9 	.word	0x080072d9
 80072c4:	080072e1 	.word	0x080072e1
 80072c8:	080072e9 	.word	0x080072e9
 80072cc:	080072f1 	.word	0x080072f1
 80072d0:	080072f9 	.word	0x080072f9
 80072d4:	08007301 	.word	0x08007301
 80072d8:	2300      	movs	r3, #0
 80072da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072de:	e1ec      	b.n	80076ba <UART_SetConfig+0x5a6>
 80072e0:	2304      	movs	r3, #4
 80072e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072e6:	e1e8      	b.n	80076ba <UART_SetConfig+0x5a6>
 80072e8:	2308      	movs	r3, #8
 80072ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ee:	e1e4      	b.n	80076ba <UART_SetConfig+0x5a6>
 80072f0:	2310      	movs	r3, #16
 80072f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072f6:	e1e0      	b.n	80076ba <UART_SetConfig+0x5a6>
 80072f8:	2320      	movs	r3, #32
 80072fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072fe:	e1dc      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007300:	2340      	movs	r3, #64	; 0x40
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007306:	e1d8      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007308:	2380      	movs	r3, #128	; 0x80
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800730e:	e1d4      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a4f      	ldr	r2, [pc, #316]	; (8007454 <UART_SetConfig+0x340>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d130      	bne.n	800737c <UART_SetConfig+0x268>
 800731a:	4b4c      	ldr	r3, [pc, #304]	; (800744c <UART_SetConfig+0x338>)
 800731c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	2b05      	cmp	r3, #5
 8007324:	d826      	bhi.n	8007374 <UART_SetConfig+0x260>
 8007326:	a201      	add	r2, pc, #4	; (adr r2, 800732c <UART_SetConfig+0x218>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	08007345 	.word	0x08007345
 8007330:	0800734d 	.word	0x0800734d
 8007334:	08007355 	.word	0x08007355
 8007338:	0800735d 	.word	0x0800735d
 800733c:	08007365 	.word	0x08007365
 8007340:	0800736d 	.word	0x0800736d
 8007344:	2300      	movs	r3, #0
 8007346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800734a:	e1b6      	b.n	80076ba <UART_SetConfig+0x5a6>
 800734c:	2304      	movs	r3, #4
 800734e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007352:	e1b2      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007354:	2308      	movs	r3, #8
 8007356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800735a:	e1ae      	b.n	80076ba <UART_SetConfig+0x5a6>
 800735c:	2310      	movs	r3, #16
 800735e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007362:	e1aa      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007364:	2320      	movs	r3, #32
 8007366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800736a:	e1a6      	b.n	80076ba <UART_SetConfig+0x5a6>
 800736c:	2340      	movs	r3, #64	; 0x40
 800736e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007372:	e1a2      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007374:	2380      	movs	r3, #128	; 0x80
 8007376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800737a:	e19e      	b.n	80076ba <UART_SetConfig+0x5a6>
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a35      	ldr	r2, [pc, #212]	; (8007458 <UART_SetConfig+0x344>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d130      	bne.n	80073e8 <UART_SetConfig+0x2d4>
 8007386:	4b31      	ldr	r3, [pc, #196]	; (800744c <UART_SetConfig+0x338>)
 8007388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738a:	f003 0307 	and.w	r3, r3, #7
 800738e:	2b05      	cmp	r3, #5
 8007390:	d826      	bhi.n	80073e0 <UART_SetConfig+0x2cc>
 8007392:	a201      	add	r2, pc, #4	; (adr r2, 8007398 <UART_SetConfig+0x284>)
 8007394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007398:	080073b1 	.word	0x080073b1
 800739c:	080073b9 	.word	0x080073b9
 80073a0:	080073c1 	.word	0x080073c1
 80073a4:	080073c9 	.word	0x080073c9
 80073a8:	080073d1 	.word	0x080073d1
 80073ac:	080073d9 	.word	0x080073d9
 80073b0:	2300      	movs	r3, #0
 80073b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073b6:	e180      	b.n	80076ba <UART_SetConfig+0x5a6>
 80073b8:	2304      	movs	r3, #4
 80073ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073be:	e17c      	b.n	80076ba <UART_SetConfig+0x5a6>
 80073c0:	2308      	movs	r3, #8
 80073c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073c6:	e178      	b.n	80076ba <UART_SetConfig+0x5a6>
 80073c8:	2310      	movs	r3, #16
 80073ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ce:	e174      	b.n	80076ba <UART_SetConfig+0x5a6>
 80073d0:	2320      	movs	r3, #32
 80073d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073d6:	e170      	b.n	80076ba <UART_SetConfig+0x5a6>
 80073d8:	2340      	movs	r3, #64	; 0x40
 80073da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073de:	e16c      	b.n	80076ba <UART_SetConfig+0x5a6>
 80073e0:	2380      	movs	r3, #128	; 0x80
 80073e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073e6:	e168      	b.n	80076ba <UART_SetConfig+0x5a6>
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a1b      	ldr	r2, [pc, #108]	; (800745c <UART_SetConfig+0x348>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d142      	bne.n	8007478 <UART_SetConfig+0x364>
 80073f2:	4b16      	ldr	r3, [pc, #88]	; (800744c <UART_SetConfig+0x338>)
 80073f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f6:	f003 0307 	and.w	r3, r3, #7
 80073fa:	2b05      	cmp	r3, #5
 80073fc:	d838      	bhi.n	8007470 <UART_SetConfig+0x35c>
 80073fe:	a201      	add	r2, pc, #4	; (adr r2, 8007404 <UART_SetConfig+0x2f0>)
 8007400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007404:	0800741d 	.word	0x0800741d
 8007408:	08007425 	.word	0x08007425
 800740c:	0800742d 	.word	0x0800742d
 8007410:	08007435 	.word	0x08007435
 8007414:	08007461 	.word	0x08007461
 8007418:	08007469 	.word	0x08007469
 800741c:	2300      	movs	r3, #0
 800741e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007422:	e14a      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007424:	2304      	movs	r3, #4
 8007426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800742a:	e146      	b.n	80076ba <UART_SetConfig+0x5a6>
 800742c:	2308      	movs	r3, #8
 800742e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007432:	e142      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007434:	2310      	movs	r3, #16
 8007436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800743a:	e13e      	b.n	80076ba <UART_SetConfig+0x5a6>
 800743c:	cfff69f3 	.word	0xcfff69f3
 8007440:	58000c00 	.word	0x58000c00
 8007444:	11fff4ff 	.word	0x11fff4ff
 8007448:	40011000 	.word	0x40011000
 800744c:	58024400 	.word	0x58024400
 8007450:	40004400 	.word	0x40004400
 8007454:	40004800 	.word	0x40004800
 8007458:	40004c00 	.word	0x40004c00
 800745c:	40005000 	.word	0x40005000
 8007460:	2320      	movs	r3, #32
 8007462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007466:	e128      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007468:	2340      	movs	r3, #64	; 0x40
 800746a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800746e:	e124      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007470:	2380      	movs	r3, #128	; 0x80
 8007472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007476:	e120      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4acb      	ldr	r2, [pc, #812]	; (80077ac <UART_SetConfig+0x698>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d176      	bne.n	8007570 <UART_SetConfig+0x45c>
 8007482:	4bcb      	ldr	r3, [pc, #812]	; (80077b0 <UART_SetConfig+0x69c>)
 8007484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007486:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800748a:	2b28      	cmp	r3, #40	; 0x28
 800748c:	d86c      	bhi.n	8007568 <UART_SetConfig+0x454>
 800748e:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <UART_SetConfig+0x380>)
 8007490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007494:	08007539 	.word	0x08007539
 8007498:	08007569 	.word	0x08007569
 800749c:	08007569 	.word	0x08007569
 80074a0:	08007569 	.word	0x08007569
 80074a4:	08007569 	.word	0x08007569
 80074a8:	08007569 	.word	0x08007569
 80074ac:	08007569 	.word	0x08007569
 80074b0:	08007569 	.word	0x08007569
 80074b4:	08007541 	.word	0x08007541
 80074b8:	08007569 	.word	0x08007569
 80074bc:	08007569 	.word	0x08007569
 80074c0:	08007569 	.word	0x08007569
 80074c4:	08007569 	.word	0x08007569
 80074c8:	08007569 	.word	0x08007569
 80074cc:	08007569 	.word	0x08007569
 80074d0:	08007569 	.word	0x08007569
 80074d4:	08007549 	.word	0x08007549
 80074d8:	08007569 	.word	0x08007569
 80074dc:	08007569 	.word	0x08007569
 80074e0:	08007569 	.word	0x08007569
 80074e4:	08007569 	.word	0x08007569
 80074e8:	08007569 	.word	0x08007569
 80074ec:	08007569 	.word	0x08007569
 80074f0:	08007569 	.word	0x08007569
 80074f4:	08007551 	.word	0x08007551
 80074f8:	08007569 	.word	0x08007569
 80074fc:	08007569 	.word	0x08007569
 8007500:	08007569 	.word	0x08007569
 8007504:	08007569 	.word	0x08007569
 8007508:	08007569 	.word	0x08007569
 800750c:	08007569 	.word	0x08007569
 8007510:	08007569 	.word	0x08007569
 8007514:	08007559 	.word	0x08007559
 8007518:	08007569 	.word	0x08007569
 800751c:	08007569 	.word	0x08007569
 8007520:	08007569 	.word	0x08007569
 8007524:	08007569 	.word	0x08007569
 8007528:	08007569 	.word	0x08007569
 800752c:	08007569 	.word	0x08007569
 8007530:	08007569 	.word	0x08007569
 8007534:	08007561 	.word	0x08007561
 8007538:	2301      	movs	r3, #1
 800753a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800753e:	e0bc      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007540:	2304      	movs	r3, #4
 8007542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007546:	e0b8      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007548:	2308      	movs	r3, #8
 800754a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800754e:	e0b4      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007550:	2310      	movs	r3, #16
 8007552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007556:	e0b0      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007558:	2320      	movs	r3, #32
 800755a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800755e:	e0ac      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007560:	2340      	movs	r3, #64	; 0x40
 8007562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007566:	e0a8      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007568:	2380      	movs	r3, #128	; 0x80
 800756a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800756e:	e0a4      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a8f      	ldr	r2, [pc, #572]	; (80077b4 <UART_SetConfig+0x6a0>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d130      	bne.n	80075dc <UART_SetConfig+0x4c8>
 800757a:	4b8d      	ldr	r3, [pc, #564]	; (80077b0 <UART_SetConfig+0x69c>)
 800757c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757e:	f003 0307 	and.w	r3, r3, #7
 8007582:	2b05      	cmp	r3, #5
 8007584:	d826      	bhi.n	80075d4 <UART_SetConfig+0x4c0>
 8007586:	a201      	add	r2, pc, #4	; (adr r2, 800758c <UART_SetConfig+0x478>)
 8007588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758c:	080075a5 	.word	0x080075a5
 8007590:	080075ad 	.word	0x080075ad
 8007594:	080075b5 	.word	0x080075b5
 8007598:	080075bd 	.word	0x080075bd
 800759c:	080075c5 	.word	0x080075c5
 80075a0:	080075cd 	.word	0x080075cd
 80075a4:	2300      	movs	r3, #0
 80075a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075aa:	e086      	b.n	80076ba <UART_SetConfig+0x5a6>
 80075ac:	2304      	movs	r3, #4
 80075ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075b2:	e082      	b.n	80076ba <UART_SetConfig+0x5a6>
 80075b4:	2308      	movs	r3, #8
 80075b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ba:	e07e      	b.n	80076ba <UART_SetConfig+0x5a6>
 80075bc:	2310      	movs	r3, #16
 80075be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075c2:	e07a      	b.n	80076ba <UART_SetConfig+0x5a6>
 80075c4:	2320      	movs	r3, #32
 80075c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ca:	e076      	b.n	80076ba <UART_SetConfig+0x5a6>
 80075cc:	2340      	movs	r3, #64	; 0x40
 80075ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075d2:	e072      	b.n	80076ba <UART_SetConfig+0x5a6>
 80075d4:	2380      	movs	r3, #128	; 0x80
 80075d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075da:	e06e      	b.n	80076ba <UART_SetConfig+0x5a6>
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a75      	ldr	r2, [pc, #468]	; (80077b8 <UART_SetConfig+0x6a4>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d130      	bne.n	8007648 <UART_SetConfig+0x534>
 80075e6:	4b72      	ldr	r3, [pc, #456]	; (80077b0 <UART_SetConfig+0x69c>)
 80075e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ea:	f003 0307 	and.w	r3, r3, #7
 80075ee:	2b05      	cmp	r3, #5
 80075f0:	d826      	bhi.n	8007640 <UART_SetConfig+0x52c>
 80075f2:	a201      	add	r2, pc, #4	; (adr r2, 80075f8 <UART_SetConfig+0x4e4>)
 80075f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f8:	08007611 	.word	0x08007611
 80075fc:	08007619 	.word	0x08007619
 8007600:	08007621 	.word	0x08007621
 8007604:	08007629 	.word	0x08007629
 8007608:	08007631 	.word	0x08007631
 800760c:	08007639 	.word	0x08007639
 8007610:	2300      	movs	r3, #0
 8007612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007616:	e050      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007618:	2304      	movs	r3, #4
 800761a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800761e:	e04c      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007620:	2308      	movs	r3, #8
 8007622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007626:	e048      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007628:	2310      	movs	r3, #16
 800762a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800762e:	e044      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007630:	2320      	movs	r3, #32
 8007632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007636:	e040      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007638:	2340      	movs	r3, #64	; 0x40
 800763a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800763e:	e03c      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007640:	2380      	movs	r3, #128	; 0x80
 8007642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007646:	e038      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a5b      	ldr	r2, [pc, #364]	; (80077bc <UART_SetConfig+0x6a8>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d130      	bne.n	80076b4 <UART_SetConfig+0x5a0>
 8007652:	4b57      	ldr	r3, [pc, #348]	; (80077b0 <UART_SetConfig+0x69c>)
 8007654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007656:	f003 0307 	and.w	r3, r3, #7
 800765a:	2b05      	cmp	r3, #5
 800765c:	d826      	bhi.n	80076ac <UART_SetConfig+0x598>
 800765e:	a201      	add	r2, pc, #4	; (adr r2, 8007664 <UART_SetConfig+0x550>)
 8007660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007664:	0800767d 	.word	0x0800767d
 8007668:	08007685 	.word	0x08007685
 800766c:	0800768d 	.word	0x0800768d
 8007670:	08007695 	.word	0x08007695
 8007674:	0800769d 	.word	0x0800769d
 8007678:	080076a5 	.word	0x080076a5
 800767c:	2302      	movs	r3, #2
 800767e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007682:	e01a      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007684:	2304      	movs	r3, #4
 8007686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800768a:	e016      	b.n	80076ba <UART_SetConfig+0x5a6>
 800768c:	2308      	movs	r3, #8
 800768e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007692:	e012      	b.n	80076ba <UART_SetConfig+0x5a6>
 8007694:	2310      	movs	r3, #16
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800769a:	e00e      	b.n	80076ba <UART_SetConfig+0x5a6>
 800769c:	2320      	movs	r3, #32
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076a2:	e00a      	b.n	80076ba <UART_SetConfig+0x5a6>
 80076a4:	2340      	movs	r3, #64	; 0x40
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076aa:	e006      	b.n	80076ba <UART_SetConfig+0x5a6>
 80076ac:	2380      	movs	r3, #128	; 0x80
 80076ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076b2:	e002      	b.n	80076ba <UART_SetConfig+0x5a6>
 80076b4:	2380      	movs	r3, #128	; 0x80
 80076b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a3f      	ldr	r2, [pc, #252]	; (80077bc <UART_SetConfig+0x6a8>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	f040 80f8 	bne.w	80078b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	dc46      	bgt.n	800775c <UART_SetConfig+0x648>
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	f2c0 8082 	blt.w	80077d8 <UART_SetConfig+0x6c4>
 80076d4:	3b02      	subs	r3, #2
 80076d6:	2b1e      	cmp	r3, #30
 80076d8:	d87e      	bhi.n	80077d8 <UART_SetConfig+0x6c4>
 80076da:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <UART_SetConfig+0x5cc>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	08007763 	.word	0x08007763
 80076e4:	080077d9 	.word	0x080077d9
 80076e8:	0800776b 	.word	0x0800776b
 80076ec:	080077d9 	.word	0x080077d9
 80076f0:	080077d9 	.word	0x080077d9
 80076f4:	080077d9 	.word	0x080077d9
 80076f8:	0800777b 	.word	0x0800777b
 80076fc:	080077d9 	.word	0x080077d9
 8007700:	080077d9 	.word	0x080077d9
 8007704:	080077d9 	.word	0x080077d9
 8007708:	080077d9 	.word	0x080077d9
 800770c:	080077d9 	.word	0x080077d9
 8007710:	080077d9 	.word	0x080077d9
 8007714:	080077d9 	.word	0x080077d9
 8007718:	0800778b 	.word	0x0800778b
 800771c:	080077d9 	.word	0x080077d9
 8007720:	080077d9 	.word	0x080077d9
 8007724:	080077d9 	.word	0x080077d9
 8007728:	080077d9 	.word	0x080077d9
 800772c:	080077d9 	.word	0x080077d9
 8007730:	080077d9 	.word	0x080077d9
 8007734:	080077d9 	.word	0x080077d9
 8007738:	080077d9 	.word	0x080077d9
 800773c:	080077d9 	.word	0x080077d9
 8007740:	080077d9 	.word	0x080077d9
 8007744:	080077d9 	.word	0x080077d9
 8007748:	080077d9 	.word	0x080077d9
 800774c:	080077d9 	.word	0x080077d9
 8007750:	080077d9 	.word	0x080077d9
 8007754:	080077d9 	.word	0x080077d9
 8007758:	080077cb 	.word	0x080077cb
 800775c:	2b40      	cmp	r3, #64	; 0x40
 800775e:	d037      	beq.n	80077d0 <UART_SetConfig+0x6bc>
 8007760:	e03a      	b.n	80077d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007762:	f7fe fbfd 	bl	8005f60 <HAL_RCCEx_GetD3PCLK1Freq>
 8007766:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007768:	e03c      	b.n	80077e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800776a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe fc0c 	bl	8005f8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007778:	e034      	b.n	80077e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800777a:	f107 0318 	add.w	r3, r7, #24
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe fd58 	bl	8006234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007788:	e02c      	b.n	80077e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800778a:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <UART_SetConfig+0x69c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0320 	and.w	r3, r3, #32
 8007792:	2b00      	cmp	r3, #0
 8007794:	d016      	beq.n	80077c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007796:	4b06      	ldr	r3, [pc, #24]	; (80077b0 <UART_SetConfig+0x69c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	08db      	lsrs	r3, r3, #3
 800779c:	f003 0303 	and.w	r3, r3, #3
 80077a0:	4a07      	ldr	r2, [pc, #28]	; (80077c0 <UART_SetConfig+0x6ac>)
 80077a2:	fa22 f303 	lsr.w	r3, r2, r3
 80077a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077a8:	e01c      	b.n	80077e4 <UART_SetConfig+0x6d0>
 80077aa:	bf00      	nop
 80077ac:	40011400 	.word	0x40011400
 80077b0:	58024400 	.word	0x58024400
 80077b4:	40007800 	.word	0x40007800
 80077b8:	40007c00 	.word	0x40007c00
 80077bc:	58000c00 	.word	0x58000c00
 80077c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80077c4:	4b9d      	ldr	r3, [pc, #628]	; (8007a3c <UART_SetConfig+0x928>)
 80077c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077c8:	e00c      	b.n	80077e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077ca:	4b9d      	ldr	r3, [pc, #628]	; (8007a40 <UART_SetConfig+0x92c>)
 80077cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077ce:	e009      	b.n	80077e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077d6:	e005      	b.n	80077e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80077e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 81de 	beq.w	8007ba8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f0:	4a94      	ldr	r2, [pc, #592]	; (8007a44 <UART_SetConfig+0x930>)
 80077f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077f6:	461a      	mov	r2, r3
 80077f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80077fe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	4613      	mov	r3, r2
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	4413      	add	r3, r2
 800780a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800780c:	429a      	cmp	r2, r3
 800780e:	d305      	bcc.n	800781c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007818:	429a      	cmp	r2, r3
 800781a:	d903      	bls.n	8007824 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007822:	e1c1      	b.n	8007ba8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007826:	2200      	movs	r2, #0
 8007828:	60bb      	str	r3, [r7, #8]
 800782a:	60fa      	str	r2, [r7, #12]
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	4a84      	ldr	r2, [pc, #528]	; (8007a44 <UART_SetConfig+0x930>)
 8007832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007836:	b29b      	uxth	r3, r3
 8007838:	2200      	movs	r2, #0
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	607a      	str	r2, [r7, #4]
 800783e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007842:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007846:	f7f8 fd9b 	bl	8000380 <__aeabi_uldivmod>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	4610      	mov	r0, r2
 8007850:	4619      	mov	r1, r3
 8007852:	f04f 0200 	mov.w	r2, #0
 8007856:	f04f 0300 	mov.w	r3, #0
 800785a:	020b      	lsls	r3, r1, #8
 800785c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007860:	0202      	lsls	r2, r0, #8
 8007862:	6979      	ldr	r1, [r7, #20]
 8007864:	6849      	ldr	r1, [r1, #4]
 8007866:	0849      	lsrs	r1, r1, #1
 8007868:	2000      	movs	r0, #0
 800786a:	460c      	mov	r4, r1
 800786c:	4605      	mov	r5, r0
 800786e:	eb12 0804 	adds.w	r8, r2, r4
 8007872:	eb43 0905 	adc.w	r9, r3, r5
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	469a      	mov	sl, r3
 800787e:	4693      	mov	fp, r2
 8007880:	4652      	mov	r2, sl
 8007882:	465b      	mov	r3, fp
 8007884:	4640      	mov	r0, r8
 8007886:	4649      	mov	r1, r9
 8007888:	f7f8 fd7a 	bl	8000380 <__aeabi_uldivmod>
 800788c:	4602      	mov	r2, r0
 800788e:	460b      	mov	r3, r1
 8007890:	4613      	mov	r3, r2
 8007892:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007896:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800789a:	d308      	bcc.n	80078ae <UART_SetConfig+0x79a>
 800789c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078a2:	d204      	bcs.n	80078ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078aa:	60da      	str	r2, [r3, #12]
 80078ac:	e17c      	b.n	8007ba8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80078b4:	e178      	b.n	8007ba8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078be:	f040 80c5 	bne.w	8007a4c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80078c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80078c6:	2b20      	cmp	r3, #32
 80078c8:	dc48      	bgt.n	800795c <UART_SetConfig+0x848>
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	db7b      	blt.n	80079c6 <UART_SetConfig+0x8b2>
 80078ce:	2b20      	cmp	r3, #32
 80078d0:	d879      	bhi.n	80079c6 <UART_SetConfig+0x8b2>
 80078d2:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <UART_SetConfig+0x7c4>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	08007963 	.word	0x08007963
 80078dc:	0800796b 	.word	0x0800796b
 80078e0:	080079c7 	.word	0x080079c7
 80078e4:	080079c7 	.word	0x080079c7
 80078e8:	08007973 	.word	0x08007973
 80078ec:	080079c7 	.word	0x080079c7
 80078f0:	080079c7 	.word	0x080079c7
 80078f4:	080079c7 	.word	0x080079c7
 80078f8:	08007983 	.word	0x08007983
 80078fc:	080079c7 	.word	0x080079c7
 8007900:	080079c7 	.word	0x080079c7
 8007904:	080079c7 	.word	0x080079c7
 8007908:	080079c7 	.word	0x080079c7
 800790c:	080079c7 	.word	0x080079c7
 8007910:	080079c7 	.word	0x080079c7
 8007914:	080079c7 	.word	0x080079c7
 8007918:	08007993 	.word	0x08007993
 800791c:	080079c7 	.word	0x080079c7
 8007920:	080079c7 	.word	0x080079c7
 8007924:	080079c7 	.word	0x080079c7
 8007928:	080079c7 	.word	0x080079c7
 800792c:	080079c7 	.word	0x080079c7
 8007930:	080079c7 	.word	0x080079c7
 8007934:	080079c7 	.word	0x080079c7
 8007938:	080079c7 	.word	0x080079c7
 800793c:	080079c7 	.word	0x080079c7
 8007940:	080079c7 	.word	0x080079c7
 8007944:	080079c7 	.word	0x080079c7
 8007948:	080079c7 	.word	0x080079c7
 800794c:	080079c7 	.word	0x080079c7
 8007950:	080079c7 	.word	0x080079c7
 8007954:	080079c7 	.word	0x080079c7
 8007958:	080079b9 	.word	0x080079b9
 800795c:	2b40      	cmp	r3, #64	; 0x40
 800795e:	d02e      	beq.n	80079be <UART_SetConfig+0x8aa>
 8007960:	e031      	b.n	80079c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007962:	f7fd f8c7 	bl	8004af4 <HAL_RCC_GetPCLK1Freq>
 8007966:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007968:	e033      	b.n	80079d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800796a:	f7fd f8d9 	bl	8004b20 <HAL_RCC_GetPCLK2Freq>
 800796e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007970:	e02f      	b.n	80079d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe fb08 	bl	8005f8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007980:	e027      	b.n	80079d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007982:	f107 0318 	add.w	r3, r7, #24
 8007986:	4618      	mov	r0, r3
 8007988:	f7fe fc54 	bl	8006234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007990:	e01f      	b.n	80079d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007992:	4b2d      	ldr	r3, [pc, #180]	; (8007a48 <UART_SetConfig+0x934>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0320 	and.w	r3, r3, #32
 800799a:	2b00      	cmp	r3, #0
 800799c:	d009      	beq.n	80079b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800799e:	4b2a      	ldr	r3, [pc, #168]	; (8007a48 <UART_SetConfig+0x934>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	08db      	lsrs	r3, r3, #3
 80079a4:	f003 0303 	and.w	r3, r3, #3
 80079a8:	4a24      	ldr	r2, [pc, #144]	; (8007a3c <UART_SetConfig+0x928>)
 80079aa:	fa22 f303 	lsr.w	r3, r2, r3
 80079ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079b0:	e00f      	b.n	80079d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80079b2:	4b22      	ldr	r3, [pc, #136]	; (8007a3c <UART_SetConfig+0x928>)
 80079b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079b6:	e00c      	b.n	80079d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80079b8:	4b21      	ldr	r3, [pc, #132]	; (8007a40 <UART_SetConfig+0x92c>)
 80079ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079bc:	e009      	b.n	80079d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079c4:	e005      	b.n	80079d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80079d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 80e7 	beq.w	8007ba8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079de:	4a19      	ldr	r2, [pc, #100]	; (8007a44 <UART_SetConfig+0x930>)
 80079e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079e4:	461a      	mov	r2, r3
 80079e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80079ec:	005a      	lsls	r2, r3, #1
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	085b      	lsrs	r3, r3, #1
 80079f4:	441a      	add	r2, r3
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80079fe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a02:	2b0f      	cmp	r3, #15
 8007a04:	d916      	bls.n	8007a34 <UART_SetConfig+0x920>
 8007a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a0c:	d212      	bcs.n	8007a34 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	f023 030f 	bic.w	r3, r3, #15
 8007a16:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	f003 0307 	and.w	r3, r3, #7
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a26:	4313      	orrs	r3, r2
 8007a28:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007a30:	60da      	str	r2, [r3, #12]
 8007a32:	e0b9      	b.n	8007ba8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007a3a:	e0b5      	b.n	8007ba8 <UART_SetConfig+0xa94>
 8007a3c:	03d09000 	.word	0x03d09000
 8007a40:	003d0900 	.word	0x003d0900
 8007a44:	08008c94 	.word	0x08008c94
 8007a48:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a50:	2b20      	cmp	r3, #32
 8007a52:	dc49      	bgt.n	8007ae8 <UART_SetConfig+0x9d4>
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	db7c      	blt.n	8007b52 <UART_SetConfig+0xa3e>
 8007a58:	2b20      	cmp	r3, #32
 8007a5a:	d87a      	bhi.n	8007b52 <UART_SetConfig+0xa3e>
 8007a5c:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <UART_SetConfig+0x950>)
 8007a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a62:	bf00      	nop
 8007a64:	08007aef 	.word	0x08007aef
 8007a68:	08007af7 	.word	0x08007af7
 8007a6c:	08007b53 	.word	0x08007b53
 8007a70:	08007b53 	.word	0x08007b53
 8007a74:	08007aff 	.word	0x08007aff
 8007a78:	08007b53 	.word	0x08007b53
 8007a7c:	08007b53 	.word	0x08007b53
 8007a80:	08007b53 	.word	0x08007b53
 8007a84:	08007b0f 	.word	0x08007b0f
 8007a88:	08007b53 	.word	0x08007b53
 8007a8c:	08007b53 	.word	0x08007b53
 8007a90:	08007b53 	.word	0x08007b53
 8007a94:	08007b53 	.word	0x08007b53
 8007a98:	08007b53 	.word	0x08007b53
 8007a9c:	08007b53 	.word	0x08007b53
 8007aa0:	08007b53 	.word	0x08007b53
 8007aa4:	08007b1f 	.word	0x08007b1f
 8007aa8:	08007b53 	.word	0x08007b53
 8007aac:	08007b53 	.word	0x08007b53
 8007ab0:	08007b53 	.word	0x08007b53
 8007ab4:	08007b53 	.word	0x08007b53
 8007ab8:	08007b53 	.word	0x08007b53
 8007abc:	08007b53 	.word	0x08007b53
 8007ac0:	08007b53 	.word	0x08007b53
 8007ac4:	08007b53 	.word	0x08007b53
 8007ac8:	08007b53 	.word	0x08007b53
 8007acc:	08007b53 	.word	0x08007b53
 8007ad0:	08007b53 	.word	0x08007b53
 8007ad4:	08007b53 	.word	0x08007b53
 8007ad8:	08007b53 	.word	0x08007b53
 8007adc:	08007b53 	.word	0x08007b53
 8007ae0:	08007b53 	.word	0x08007b53
 8007ae4:	08007b45 	.word	0x08007b45
 8007ae8:	2b40      	cmp	r3, #64	; 0x40
 8007aea:	d02e      	beq.n	8007b4a <UART_SetConfig+0xa36>
 8007aec:	e031      	b.n	8007b52 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aee:	f7fd f801 	bl	8004af4 <HAL_RCC_GetPCLK1Freq>
 8007af2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007af4:	e033      	b.n	8007b5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007af6:	f7fd f813 	bl	8004b20 <HAL_RCC_GetPCLK2Freq>
 8007afa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007afc:	e02f      	b.n	8007b5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fe fa42 	bl	8005f8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b0c:	e027      	b.n	8007b5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b0e:	f107 0318 	add.w	r3, r7, #24
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe fb8e 	bl	8006234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b1c:	e01f      	b.n	8007b5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b1e:	4b2d      	ldr	r3, [pc, #180]	; (8007bd4 <UART_SetConfig+0xac0>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0320 	and.w	r3, r3, #32
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b2a:	4b2a      	ldr	r3, [pc, #168]	; (8007bd4 <UART_SetConfig+0xac0>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	08db      	lsrs	r3, r3, #3
 8007b30:	f003 0303 	and.w	r3, r3, #3
 8007b34:	4a28      	ldr	r2, [pc, #160]	; (8007bd8 <UART_SetConfig+0xac4>)
 8007b36:	fa22 f303 	lsr.w	r3, r2, r3
 8007b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b3c:	e00f      	b.n	8007b5e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007b3e:	4b26      	ldr	r3, [pc, #152]	; (8007bd8 <UART_SetConfig+0xac4>)
 8007b40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b42:	e00c      	b.n	8007b5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b44:	4b25      	ldr	r3, [pc, #148]	; (8007bdc <UART_SetConfig+0xac8>)
 8007b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b48:	e009      	b.n	8007b5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b50:	e005      	b.n	8007b5e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007b5c:	bf00      	nop
    }

    if (pclk != 0U)
 8007b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d021      	beq.n	8007ba8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	4a1d      	ldr	r2, [pc, #116]	; (8007be0 <UART_SetConfig+0xacc>)
 8007b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b72:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	085b      	lsrs	r3, r3, #1
 8007b7c:	441a      	add	r2, r3
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b86:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8a:	2b0f      	cmp	r3, #15
 8007b8c:	d909      	bls.n	8007ba2 <UART_SetConfig+0xa8e>
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b94:	d205      	bcs.n	8007ba2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	60da      	str	r2, [r3, #12]
 8007ba0:	e002      	b.n	8007ba8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007bc4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3748      	adds	r7, #72	; 0x48
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bd2:	bf00      	nop
 8007bd4:	58024400 	.word	0x58024400
 8007bd8:	03d09000 	.word	0x03d09000
 8007bdc:	003d0900 	.word	0x003d0900
 8007be0:	08008c94 	.word	0x08008c94

08007be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00a      	beq.n	8007c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c34:	f003 0304 	and.w	r3, r3, #4
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00a      	beq.n	8007c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c56:	f003 0308 	and.w	r3, r3, #8
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00a      	beq.n	8007c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c78:	f003 0310 	and.w	r3, r3, #16
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00a      	beq.n	8007c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	430a      	orrs	r2, r1
 8007c94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9a:	f003 0320 	and.w	r3, r3, #32
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d01a      	beq.n	8007cfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ce2:	d10a      	bne.n	8007cfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	605a      	str	r2, [r3, #4]
  }
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b098      	sub	sp, #96	; 0x60
 8007d2c:	af02      	add	r7, sp, #8
 8007d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d38:	f7f9 f978 	bl	800102c <HAL_GetTick>
 8007d3c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0308 	and.w	r3, r3, #8
 8007d48:	2b08      	cmp	r3, #8
 8007d4a:	d12f      	bne.n	8007dac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d54:	2200      	movs	r2, #0
 8007d56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f88e 	bl	8007e7c <UART_WaitOnFlagUntilTimeout>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d022      	beq.n	8007dac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6e:	e853 3f00 	ldrex	r3, [r3]
 8007d72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	461a      	mov	r2, r3
 8007d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d84:	647b      	str	r3, [r7, #68]	; 0x44
 8007d86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d8c:	e841 2300 	strex	r3, r2, [r1]
 8007d90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1e6      	bne.n	8007d66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e063      	b.n	8007e74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0304 	and.w	r3, r3, #4
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d149      	bne.n	8007e4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f857 	bl	8007e7c <UART_WaitOnFlagUntilTimeout>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d03c      	beq.n	8007e4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	623b      	str	r3, [r7, #32]
   return(result);
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007de8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	461a      	mov	r2, r3
 8007df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007df2:	633b      	str	r3, [r7, #48]	; 0x30
 8007df4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e6      	bne.n	8007dd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	e853 3f00 	ldrex	r3, [r3]
 8007e14:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f023 0301 	bic.w	r3, r3, #1
 8007e1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3308      	adds	r3, #8
 8007e24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e26:	61fa      	str	r2, [r7, #28]
 8007e28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	69b9      	ldr	r1, [r7, #24]
 8007e2c:	69fa      	ldr	r2, [r7, #28]
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	617b      	str	r3, [r7, #20]
   return(result);
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e5      	bne.n	8007e06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e012      	b.n	8007e74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2220      	movs	r2, #32
 8007e52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3758      	adds	r7, #88	; 0x58
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	603b      	str	r3, [r7, #0]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e8c:	e049      	b.n	8007f22 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e94:	d045      	beq.n	8007f22 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e96:	f7f9 f8c9 	bl	800102c <HAL_GetTick>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	69ba      	ldr	r2, [r7, #24]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d302      	bcc.n	8007eac <UART_WaitOnFlagUntilTimeout+0x30>
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e048      	b.n	8007f42 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0304 	and.w	r3, r3, #4
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d031      	beq.n	8007f22 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	f003 0308 	and.w	r3, r3, #8
 8007ec8:	2b08      	cmp	r3, #8
 8007eca:	d110      	bne.n	8007eee <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2208      	movs	r2, #8
 8007ed2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f000 f839 	bl	8007f4c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2208      	movs	r2, #8
 8007ede:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e029      	b.n	8007f42 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007efc:	d111      	bne.n	8007f22 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 f81f 	bl	8007f4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2220      	movs	r2, #32
 8007f12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e00f      	b.n	8007f42 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69da      	ldr	r2, [r3, #28]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	bf0c      	ite	eq
 8007f32:	2301      	moveq	r3, #1
 8007f34:	2300      	movne	r3, #0
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	461a      	mov	r2, r3
 8007f3a:	79fb      	ldrb	r3, [r7, #7]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d0a6      	beq.n	8007e8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
	...

08007f4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b095      	sub	sp, #84	; 0x54
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5c:	e853 3f00 	ldrex	r3, [r3]
 8007f60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f72:	643b      	str	r3, [r7, #64]	; 0x40
 8007f74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e6      	bne.n	8007f54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3308      	adds	r3, #8
 8007f8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	e853 3f00 	ldrex	r3, [r3]
 8007f94:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f96:	69fa      	ldr	r2, [r7, #28]
 8007f98:	4b1e      	ldr	r3, [pc, #120]	; (8008014 <UART_EndRxTransfer+0xc8>)
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fa8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1e5      	bne.n	8007f86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d118      	bne.n	8007ff4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f023 0310 	bic.w	r3, r3, #16
 8007fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fe0:	61bb      	str	r3, [r7, #24]
 8007fe2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6979      	ldr	r1, [r7, #20]
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	613b      	str	r3, [r7, #16]
   return(result);
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e6      	bne.n	8007fc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008008:	bf00      	nop
 800800a:	3754      	adds	r7, #84	; 0x54
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	effffffe 	.word	0xeffffffe

08008018 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008024:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f7ff f856 	bl	80070e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800803c:	bf00      	nop
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	e853 3f00 	ldrex	r3, [r3]
 8008058:	60bb      	str	r3, [r7, #8]
   return(result);
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008060:	61fb      	str	r3, [r7, #28]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	61bb      	str	r3, [r7, #24]
 800806c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806e:	6979      	ldr	r1, [r7, #20]
 8008070:	69ba      	ldr	r2, [r7, #24]
 8008072:	e841 2300 	strex	r3, r2, [r1]
 8008076:	613b      	str	r3, [r7, #16]
   return(result);
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1e6      	bne.n	800804c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2220      	movs	r2, #32
 8008082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7ff f821 	bl	80070d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008092:	bf00      	nop
 8008094:	3720      	adds	r7, #32
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800809a:	b480      	push	{r7}
 800809c:	b083      	sub	sp, #12
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080a2:	bf00      	nop
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr

080080ae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b083      	sub	sp, #12
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80080b6:	bf00      	nop
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80080ca:	bf00      	nop
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b085      	sub	sp, #20
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d101      	bne.n	80080ec <HAL_UARTEx_DisableFifoMode+0x16>
 80080e8:	2302      	movs	r3, #2
 80080ea:	e027      	b.n	800813c <HAL_UARTEx_DisableFifoMode+0x66>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2224      	movs	r2, #36	; 0x24
 80080f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0201 	bic.w	r2, r2, #1
 8008112:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800811a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2220      	movs	r2, #32
 800812e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008158:	2b01      	cmp	r3, #1
 800815a:	d101      	bne.n	8008160 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800815c:	2302      	movs	r3, #2
 800815e:	e02d      	b.n	80081bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2224      	movs	r2, #36	; 0x24
 800816c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f022 0201 	bic.w	r2, r2, #1
 8008186:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	430a      	orrs	r2, r1
 800819a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f84f 	bl	8008240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2220      	movs	r2, #32
 80081ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d101      	bne.n	80081dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80081d8:	2302      	movs	r3, #2
 80081da:	e02d      	b.n	8008238 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2224      	movs	r2, #36	; 0x24
 80081e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0201 	bic.w	r2, r2, #1
 8008202:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	683a      	ldr	r2, [r7, #0]
 8008214:	430a      	orrs	r2, r1
 8008216:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f811 	bl	8008240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2220      	movs	r2, #32
 800822a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800824c:	2b00      	cmp	r3, #0
 800824e:	d108      	bne.n	8008262 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008260:	e031      	b.n	80082c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008262:	2310      	movs	r3, #16
 8008264:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008266:	2310      	movs	r3, #16
 8008268:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	0e5b      	lsrs	r3, r3, #25
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f003 0307 	and.w	r3, r3, #7
 8008278:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	0f5b      	lsrs	r3, r3, #29
 8008282:	b2db      	uxtb	r3, r3
 8008284:	f003 0307 	and.w	r3, r3, #7
 8008288:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800828a:	7bbb      	ldrb	r3, [r7, #14]
 800828c:	7b3a      	ldrb	r2, [r7, #12]
 800828e:	4911      	ldr	r1, [pc, #68]	; (80082d4 <UARTEx_SetNbDataToProcess+0x94>)
 8008290:	5c8a      	ldrb	r2, [r1, r2]
 8008292:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008296:	7b3a      	ldrb	r2, [r7, #12]
 8008298:	490f      	ldr	r1, [pc, #60]	; (80082d8 <UARTEx_SetNbDataToProcess+0x98>)
 800829a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800829c:	fb93 f3f2 	sdiv	r3, r3, r2
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
 80082aa:	7b7a      	ldrb	r2, [r7, #13]
 80082ac:	4909      	ldr	r1, [pc, #36]	; (80082d4 <UARTEx_SetNbDataToProcess+0x94>)
 80082ae:	5c8a      	ldrb	r2, [r1, r2]
 80082b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80082b4:	7b7a      	ldrb	r2, [r7, #13]
 80082b6:	4908      	ldr	r1, [pc, #32]	; (80082d8 <UARTEx_SetNbDataToProcess+0x98>)
 80082b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80082be:	b29a      	uxth	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80082c6:	bf00      	nop
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	08008cac 	.word	0x08008cac
 80082d8:	08008cb4 	.word	0x08008cb4

080082dc <sniprintf>:
 80082dc:	b40c      	push	{r2, r3}
 80082de:	b530      	push	{r4, r5, lr}
 80082e0:	4b17      	ldr	r3, [pc, #92]	; (8008340 <sniprintf+0x64>)
 80082e2:	1e0c      	subs	r4, r1, #0
 80082e4:	681d      	ldr	r5, [r3, #0]
 80082e6:	b09d      	sub	sp, #116	; 0x74
 80082e8:	da08      	bge.n	80082fc <sniprintf+0x20>
 80082ea:	238b      	movs	r3, #139	; 0x8b
 80082ec:	602b      	str	r3, [r5, #0]
 80082ee:	f04f 30ff 	mov.w	r0, #4294967295
 80082f2:	b01d      	add	sp, #116	; 0x74
 80082f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082f8:	b002      	add	sp, #8
 80082fa:	4770      	bx	lr
 80082fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008300:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008304:	bf14      	ite	ne
 8008306:	f104 33ff 	addne.w	r3, r4, #4294967295
 800830a:	4623      	moveq	r3, r4
 800830c:	9304      	str	r3, [sp, #16]
 800830e:	9307      	str	r3, [sp, #28]
 8008310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008314:	9002      	str	r0, [sp, #8]
 8008316:	9006      	str	r0, [sp, #24]
 8008318:	f8ad 3016 	strh.w	r3, [sp, #22]
 800831c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800831e:	ab21      	add	r3, sp, #132	; 0x84
 8008320:	a902      	add	r1, sp, #8
 8008322:	4628      	mov	r0, r5
 8008324:	9301      	str	r3, [sp, #4]
 8008326:	f000 f993 	bl	8008650 <_svfiprintf_r>
 800832a:	1c43      	adds	r3, r0, #1
 800832c:	bfbc      	itt	lt
 800832e:	238b      	movlt	r3, #139	; 0x8b
 8008330:	602b      	strlt	r3, [r5, #0]
 8008332:	2c00      	cmp	r4, #0
 8008334:	d0dd      	beq.n	80082f2 <sniprintf+0x16>
 8008336:	9b02      	ldr	r3, [sp, #8]
 8008338:	2200      	movs	r2, #0
 800833a:	701a      	strb	r2, [r3, #0]
 800833c:	e7d9      	b.n	80082f2 <sniprintf+0x16>
 800833e:	bf00      	nop
 8008340:	2400005c 	.word	0x2400005c

08008344 <memset>:
 8008344:	4402      	add	r2, r0
 8008346:	4603      	mov	r3, r0
 8008348:	4293      	cmp	r3, r2
 800834a:	d100      	bne.n	800834e <memset+0xa>
 800834c:	4770      	bx	lr
 800834e:	f803 1b01 	strb.w	r1, [r3], #1
 8008352:	e7f9      	b.n	8008348 <memset+0x4>

08008354 <__errno>:
 8008354:	4b01      	ldr	r3, [pc, #4]	; (800835c <__errno+0x8>)
 8008356:	6818      	ldr	r0, [r3, #0]
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	2400005c 	.word	0x2400005c

08008360 <__libc_init_array>:
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	4d0d      	ldr	r5, [pc, #52]	; (8008398 <__libc_init_array+0x38>)
 8008364:	4c0d      	ldr	r4, [pc, #52]	; (800839c <__libc_init_array+0x3c>)
 8008366:	1b64      	subs	r4, r4, r5
 8008368:	10a4      	asrs	r4, r4, #2
 800836a:	2600      	movs	r6, #0
 800836c:	42a6      	cmp	r6, r4
 800836e:	d109      	bne.n	8008384 <__libc_init_array+0x24>
 8008370:	4d0b      	ldr	r5, [pc, #44]	; (80083a0 <__libc_init_array+0x40>)
 8008372:	4c0c      	ldr	r4, [pc, #48]	; (80083a4 <__libc_init_array+0x44>)
 8008374:	f000 fc6a 	bl	8008c4c <_init>
 8008378:	1b64      	subs	r4, r4, r5
 800837a:	10a4      	asrs	r4, r4, #2
 800837c:	2600      	movs	r6, #0
 800837e:	42a6      	cmp	r6, r4
 8008380:	d105      	bne.n	800838e <__libc_init_array+0x2e>
 8008382:	bd70      	pop	{r4, r5, r6, pc}
 8008384:	f855 3b04 	ldr.w	r3, [r5], #4
 8008388:	4798      	blx	r3
 800838a:	3601      	adds	r6, #1
 800838c:	e7ee      	b.n	800836c <__libc_init_array+0xc>
 800838e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008392:	4798      	blx	r3
 8008394:	3601      	adds	r6, #1
 8008396:	e7f2      	b.n	800837e <__libc_init_array+0x1e>
 8008398:	08008cf8 	.word	0x08008cf8
 800839c:	08008cf8 	.word	0x08008cf8
 80083a0:	08008cf8 	.word	0x08008cf8
 80083a4:	08008cfc 	.word	0x08008cfc

080083a8 <__retarget_lock_acquire_recursive>:
 80083a8:	4770      	bx	lr

080083aa <__retarget_lock_release_recursive>:
 80083aa:	4770      	bx	lr

080083ac <_free_r>:
 80083ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083ae:	2900      	cmp	r1, #0
 80083b0:	d044      	beq.n	800843c <_free_r+0x90>
 80083b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083b6:	9001      	str	r0, [sp, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f1a1 0404 	sub.w	r4, r1, #4
 80083be:	bfb8      	it	lt
 80083c0:	18e4      	addlt	r4, r4, r3
 80083c2:	f000 f8df 	bl	8008584 <__malloc_lock>
 80083c6:	4a1e      	ldr	r2, [pc, #120]	; (8008440 <_free_r+0x94>)
 80083c8:	9801      	ldr	r0, [sp, #4]
 80083ca:	6813      	ldr	r3, [r2, #0]
 80083cc:	b933      	cbnz	r3, 80083dc <_free_r+0x30>
 80083ce:	6063      	str	r3, [r4, #4]
 80083d0:	6014      	str	r4, [r2, #0]
 80083d2:	b003      	add	sp, #12
 80083d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083d8:	f000 b8da 	b.w	8008590 <__malloc_unlock>
 80083dc:	42a3      	cmp	r3, r4
 80083de:	d908      	bls.n	80083f2 <_free_r+0x46>
 80083e0:	6825      	ldr	r5, [r4, #0]
 80083e2:	1961      	adds	r1, r4, r5
 80083e4:	428b      	cmp	r3, r1
 80083e6:	bf01      	itttt	eq
 80083e8:	6819      	ldreq	r1, [r3, #0]
 80083ea:	685b      	ldreq	r3, [r3, #4]
 80083ec:	1949      	addeq	r1, r1, r5
 80083ee:	6021      	streq	r1, [r4, #0]
 80083f0:	e7ed      	b.n	80083ce <_free_r+0x22>
 80083f2:	461a      	mov	r2, r3
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	b10b      	cbz	r3, 80083fc <_free_r+0x50>
 80083f8:	42a3      	cmp	r3, r4
 80083fa:	d9fa      	bls.n	80083f2 <_free_r+0x46>
 80083fc:	6811      	ldr	r1, [r2, #0]
 80083fe:	1855      	adds	r5, r2, r1
 8008400:	42a5      	cmp	r5, r4
 8008402:	d10b      	bne.n	800841c <_free_r+0x70>
 8008404:	6824      	ldr	r4, [r4, #0]
 8008406:	4421      	add	r1, r4
 8008408:	1854      	adds	r4, r2, r1
 800840a:	42a3      	cmp	r3, r4
 800840c:	6011      	str	r1, [r2, #0]
 800840e:	d1e0      	bne.n	80083d2 <_free_r+0x26>
 8008410:	681c      	ldr	r4, [r3, #0]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	6053      	str	r3, [r2, #4]
 8008416:	440c      	add	r4, r1
 8008418:	6014      	str	r4, [r2, #0]
 800841a:	e7da      	b.n	80083d2 <_free_r+0x26>
 800841c:	d902      	bls.n	8008424 <_free_r+0x78>
 800841e:	230c      	movs	r3, #12
 8008420:	6003      	str	r3, [r0, #0]
 8008422:	e7d6      	b.n	80083d2 <_free_r+0x26>
 8008424:	6825      	ldr	r5, [r4, #0]
 8008426:	1961      	adds	r1, r4, r5
 8008428:	428b      	cmp	r3, r1
 800842a:	bf04      	itt	eq
 800842c:	6819      	ldreq	r1, [r3, #0]
 800842e:	685b      	ldreq	r3, [r3, #4]
 8008430:	6063      	str	r3, [r4, #4]
 8008432:	bf04      	itt	eq
 8008434:	1949      	addeq	r1, r1, r5
 8008436:	6021      	streq	r1, [r4, #0]
 8008438:	6054      	str	r4, [r2, #4]
 800843a:	e7ca      	b.n	80083d2 <_free_r+0x26>
 800843c:	b003      	add	sp, #12
 800843e:	bd30      	pop	{r4, r5, pc}
 8008440:	24000414 	.word	0x24000414

08008444 <sbrk_aligned>:
 8008444:	b570      	push	{r4, r5, r6, lr}
 8008446:	4e0e      	ldr	r6, [pc, #56]	; (8008480 <sbrk_aligned+0x3c>)
 8008448:	460c      	mov	r4, r1
 800844a:	6831      	ldr	r1, [r6, #0]
 800844c:	4605      	mov	r5, r0
 800844e:	b911      	cbnz	r1, 8008456 <sbrk_aligned+0x12>
 8008450:	f000 fba6 	bl	8008ba0 <_sbrk_r>
 8008454:	6030      	str	r0, [r6, #0]
 8008456:	4621      	mov	r1, r4
 8008458:	4628      	mov	r0, r5
 800845a:	f000 fba1 	bl	8008ba0 <_sbrk_r>
 800845e:	1c43      	adds	r3, r0, #1
 8008460:	d00a      	beq.n	8008478 <sbrk_aligned+0x34>
 8008462:	1cc4      	adds	r4, r0, #3
 8008464:	f024 0403 	bic.w	r4, r4, #3
 8008468:	42a0      	cmp	r0, r4
 800846a:	d007      	beq.n	800847c <sbrk_aligned+0x38>
 800846c:	1a21      	subs	r1, r4, r0
 800846e:	4628      	mov	r0, r5
 8008470:	f000 fb96 	bl	8008ba0 <_sbrk_r>
 8008474:	3001      	adds	r0, #1
 8008476:	d101      	bne.n	800847c <sbrk_aligned+0x38>
 8008478:	f04f 34ff 	mov.w	r4, #4294967295
 800847c:	4620      	mov	r0, r4
 800847e:	bd70      	pop	{r4, r5, r6, pc}
 8008480:	24000418 	.word	0x24000418

08008484 <_malloc_r>:
 8008484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008488:	1ccd      	adds	r5, r1, #3
 800848a:	f025 0503 	bic.w	r5, r5, #3
 800848e:	3508      	adds	r5, #8
 8008490:	2d0c      	cmp	r5, #12
 8008492:	bf38      	it	cc
 8008494:	250c      	movcc	r5, #12
 8008496:	2d00      	cmp	r5, #0
 8008498:	4607      	mov	r7, r0
 800849a:	db01      	blt.n	80084a0 <_malloc_r+0x1c>
 800849c:	42a9      	cmp	r1, r5
 800849e:	d905      	bls.n	80084ac <_malloc_r+0x28>
 80084a0:	230c      	movs	r3, #12
 80084a2:	603b      	str	r3, [r7, #0]
 80084a4:	2600      	movs	r6, #0
 80084a6:	4630      	mov	r0, r6
 80084a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008580 <_malloc_r+0xfc>
 80084b0:	f000 f868 	bl	8008584 <__malloc_lock>
 80084b4:	f8d8 3000 	ldr.w	r3, [r8]
 80084b8:	461c      	mov	r4, r3
 80084ba:	bb5c      	cbnz	r4, 8008514 <_malloc_r+0x90>
 80084bc:	4629      	mov	r1, r5
 80084be:	4638      	mov	r0, r7
 80084c0:	f7ff ffc0 	bl	8008444 <sbrk_aligned>
 80084c4:	1c43      	adds	r3, r0, #1
 80084c6:	4604      	mov	r4, r0
 80084c8:	d155      	bne.n	8008576 <_malloc_r+0xf2>
 80084ca:	f8d8 4000 	ldr.w	r4, [r8]
 80084ce:	4626      	mov	r6, r4
 80084d0:	2e00      	cmp	r6, #0
 80084d2:	d145      	bne.n	8008560 <_malloc_r+0xdc>
 80084d4:	2c00      	cmp	r4, #0
 80084d6:	d048      	beq.n	800856a <_malloc_r+0xe6>
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	4631      	mov	r1, r6
 80084dc:	4638      	mov	r0, r7
 80084de:	eb04 0903 	add.w	r9, r4, r3
 80084e2:	f000 fb5d 	bl	8008ba0 <_sbrk_r>
 80084e6:	4581      	cmp	r9, r0
 80084e8:	d13f      	bne.n	800856a <_malloc_r+0xe6>
 80084ea:	6821      	ldr	r1, [r4, #0]
 80084ec:	1a6d      	subs	r5, r5, r1
 80084ee:	4629      	mov	r1, r5
 80084f0:	4638      	mov	r0, r7
 80084f2:	f7ff ffa7 	bl	8008444 <sbrk_aligned>
 80084f6:	3001      	adds	r0, #1
 80084f8:	d037      	beq.n	800856a <_malloc_r+0xe6>
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	442b      	add	r3, r5
 80084fe:	6023      	str	r3, [r4, #0]
 8008500:	f8d8 3000 	ldr.w	r3, [r8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d038      	beq.n	800857a <_malloc_r+0xf6>
 8008508:	685a      	ldr	r2, [r3, #4]
 800850a:	42a2      	cmp	r2, r4
 800850c:	d12b      	bne.n	8008566 <_malloc_r+0xe2>
 800850e:	2200      	movs	r2, #0
 8008510:	605a      	str	r2, [r3, #4]
 8008512:	e00f      	b.n	8008534 <_malloc_r+0xb0>
 8008514:	6822      	ldr	r2, [r4, #0]
 8008516:	1b52      	subs	r2, r2, r5
 8008518:	d41f      	bmi.n	800855a <_malloc_r+0xd6>
 800851a:	2a0b      	cmp	r2, #11
 800851c:	d917      	bls.n	800854e <_malloc_r+0xca>
 800851e:	1961      	adds	r1, r4, r5
 8008520:	42a3      	cmp	r3, r4
 8008522:	6025      	str	r5, [r4, #0]
 8008524:	bf18      	it	ne
 8008526:	6059      	strne	r1, [r3, #4]
 8008528:	6863      	ldr	r3, [r4, #4]
 800852a:	bf08      	it	eq
 800852c:	f8c8 1000 	streq.w	r1, [r8]
 8008530:	5162      	str	r2, [r4, r5]
 8008532:	604b      	str	r3, [r1, #4]
 8008534:	4638      	mov	r0, r7
 8008536:	f104 060b 	add.w	r6, r4, #11
 800853a:	f000 f829 	bl	8008590 <__malloc_unlock>
 800853e:	f026 0607 	bic.w	r6, r6, #7
 8008542:	1d23      	adds	r3, r4, #4
 8008544:	1af2      	subs	r2, r6, r3
 8008546:	d0ae      	beq.n	80084a6 <_malloc_r+0x22>
 8008548:	1b9b      	subs	r3, r3, r6
 800854a:	50a3      	str	r3, [r4, r2]
 800854c:	e7ab      	b.n	80084a6 <_malloc_r+0x22>
 800854e:	42a3      	cmp	r3, r4
 8008550:	6862      	ldr	r2, [r4, #4]
 8008552:	d1dd      	bne.n	8008510 <_malloc_r+0x8c>
 8008554:	f8c8 2000 	str.w	r2, [r8]
 8008558:	e7ec      	b.n	8008534 <_malloc_r+0xb0>
 800855a:	4623      	mov	r3, r4
 800855c:	6864      	ldr	r4, [r4, #4]
 800855e:	e7ac      	b.n	80084ba <_malloc_r+0x36>
 8008560:	4634      	mov	r4, r6
 8008562:	6876      	ldr	r6, [r6, #4]
 8008564:	e7b4      	b.n	80084d0 <_malloc_r+0x4c>
 8008566:	4613      	mov	r3, r2
 8008568:	e7cc      	b.n	8008504 <_malloc_r+0x80>
 800856a:	230c      	movs	r3, #12
 800856c:	603b      	str	r3, [r7, #0]
 800856e:	4638      	mov	r0, r7
 8008570:	f000 f80e 	bl	8008590 <__malloc_unlock>
 8008574:	e797      	b.n	80084a6 <_malloc_r+0x22>
 8008576:	6025      	str	r5, [r4, #0]
 8008578:	e7dc      	b.n	8008534 <_malloc_r+0xb0>
 800857a:	605b      	str	r3, [r3, #4]
 800857c:	deff      	udf	#255	; 0xff
 800857e:	bf00      	nop
 8008580:	24000414 	.word	0x24000414

08008584 <__malloc_lock>:
 8008584:	4801      	ldr	r0, [pc, #4]	; (800858c <__malloc_lock+0x8>)
 8008586:	f7ff bf0f 	b.w	80083a8 <__retarget_lock_acquire_recursive>
 800858a:	bf00      	nop
 800858c:	24000410 	.word	0x24000410

08008590 <__malloc_unlock>:
 8008590:	4801      	ldr	r0, [pc, #4]	; (8008598 <__malloc_unlock+0x8>)
 8008592:	f7ff bf0a 	b.w	80083aa <__retarget_lock_release_recursive>
 8008596:	bf00      	nop
 8008598:	24000410 	.word	0x24000410

0800859c <__ssputs_r>:
 800859c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a0:	688e      	ldr	r6, [r1, #8]
 80085a2:	461f      	mov	r7, r3
 80085a4:	42be      	cmp	r6, r7
 80085a6:	680b      	ldr	r3, [r1, #0]
 80085a8:	4682      	mov	sl, r0
 80085aa:	460c      	mov	r4, r1
 80085ac:	4690      	mov	r8, r2
 80085ae:	d82c      	bhi.n	800860a <__ssputs_r+0x6e>
 80085b0:	898a      	ldrh	r2, [r1, #12]
 80085b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085b6:	d026      	beq.n	8008606 <__ssputs_r+0x6a>
 80085b8:	6965      	ldr	r5, [r4, #20]
 80085ba:	6909      	ldr	r1, [r1, #16]
 80085bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085c0:	eba3 0901 	sub.w	r9, r3, r1
 80085c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085c8:	1c7b      	adds	r3, r7, #1
 80085ca:	444b      	add	r3, r9
 80085cc:	106d      	asrs	r5, r5, #1
 80085ce:	429d      	cmp	r5, r3
 80085d0:	bf38      	it	cc
 80085d2:	461d      	movcc	r5, r3
 80085d4:	0553      	lsls	r3, r2, #21
 80085d6:	d527      	bpl.n	8008628 <__ssputs_r+0x8c>
 80085d8:	4629      	mov	r1, r5
 80085da:	f7ff ff53 	bl	8008484 <_malloc_r>
 80085de:	4606      	mov	r6, r0
 80085e0:	b360      	cbz	r0, 800863c <__ssputs_r+0xa0>
 80085e2:	6921      	ldr	r1, [r4, #16]
 80085e4:	464a      	mov	r2, r9
 80085e6:	f000 faeb 	bl	8008bc0 <memcpy>
 80085ea:	89a3      	ldrh	r3, [r4, #12]
 80085ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085f4:	81a3      	strh	r3, [r4, #12]
 80085f6:	6126      	str	r6, [r4, #16]
 80085f8:	6165      	str	r5, [r4, #20]
 80085fa:	444e      	add	r6, r9
 80085fc:	eba5 0509 	sub.w	r5, r5, r9
 8008600:	6026      	str	r6, [r4, #0]
 8008602:	60a5      	str	r5, [r4, #8]
 8008604:	463e      	mov	r6, r7
 8008606:	42be      	cmp	r6, r7
 8008608:	d900      	bls.n	800860c <__ssputs_r+0x70>
 800860a:	463e      	mov	r6, r7
 800860c:	6820      	ldr	r0, [r4, #0]
 800860e:	4632      	mov	r2, r6
 8008610:	4641      	mov	r1, r8
 8008612:	f000 faab 	bl	8008b6c <memmove>
 8008616:	68a3      	ldr	r3, [r4, #8]
 8008618:	1b9b      	subs	r3, r3, r6
 800861a:	60a3      	str	r3, [r4, #8]
 800861c:	6823      	ldr	r3, [r4, #0]
 800861e:	4433      	add	r3, r6
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	2000      	movs	r0, #0
 8008624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008628:	462a      	mov	r2, r5
 800862a:	f000 fad7 	bl	8008bdc <_realloc_r>
 800862e:	4606      	mov	r6, r0
 8008630:	2800      	cmp	r0, #0
 8008632:	d1e0      	bne.n	80085f6 <__ssputs_r+0x5a>
 8008634:	6921      	ldr	r1, [r4, #16]
 8008636:	4650      	mov	r0, sl
 8008638:	f7ff feb8 	bl	80083ac <_free_r>
 800863c:	230c      	movs	r3, #12
 800863e:	f8ca 3000 	str.w	r3, [sl]
 8008642:	89a3      	ldrh	r3, [r4, #12]
 8008644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008648:	81a3      	strh	r3, [r4, #12]
 800864a:	f04f 30ff 	mov.w	r0, #4294967295
 800864e:	e7e9      	b.n	8008624 <__ssputs_r+0x88>

08008650 <_svfiprintf_r>:
 8008650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008654:	4698      	mov	r8, r3
 8008656:	898b      	ldrh	r3, [r1, #12]
 8008658:	061b      	lsls	r3, r3, #24
 800865a:	b09d      	sub	sp, #116	; 0x74
 800865c:	4607      	mov	r7, r0
 800865e:	460d      	mov	r5, r1
 8008660:	4614      	mov	r4, r2
 8008662:	d50e      	bpl.n	8008682 <_svfiprintf_r+0x32>
 8008664:	690b      	ldr	r3, [r1, #16]
 8008666:	b963      	cbnz	r3, 8008682 <_svfiprintf_r+0x32>
 8008668:	2140      	movs	r1, #64	; 0x40
 800866a:	f7ff ff0b 	bl	8008484 <_malloc_r>
 800866e:	6028      	str	r0, [r5, #0]
 8008670:	6128      	str	r0, [r5, #16]
 8008672:	b920      	cbnz	r0, 800867e <_svfiprintf_r+0x2e>
 8008674:	230c      	movs	r3, #12
 8008676:	603b      	str	r3, [r7, #0]
 8008678:	f04f 30ff 	mov.w	r0, #4294967295
 800867c:	e0d0      	b.n	8008820 <_svfiprintf_r+0x1d0>
 800867e:	2340      	movs	r3, #64	; 0x40
 8008680:	616b      	str	r3, [r5, #20]
 8008682:	2300      	movs	r3, #0
 8008684:	9309      	str	r3, [sp, #36]	; 0x24
 8008686:	2320      	movs	r3, #32
 8008688:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800868c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008690:	2330      	movs	r3, #48	; 0x30
 8008692:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008838 <_svfiprintf_r+0x1e8>
 8008696:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800869a:	f04f 0901 	mov.w	r9, #1
 800869e:	4623      	mov	r3, r4
 80086a0:	469a      	mov	sl, r3
 80086a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086a6:	b10a      	cbz	r2, 80086ac <_svfiprintf_r+0x5c>
 80086a8:	2a25      	cmp	r2, #37	; 0x25
 80086aa:	d1f9      	bne.n	80086a0 <_svfiprintf_r+0x50>
 80086ac:	ebba 0b04 	subs.w	fp, sl, r4
 80086b0:	d00b      	beq.n	80086ca <_svfiprintf_r+0x7a>
 80086b2:	465b      	mov	r3, fp
 80086b4:	4622      	mov	r2, r4
 80086b6:	4629      	mov	r1, r5
 80086b8:	4638      	mov	r0, r7
 80086ba:	f7ff ff6f 	bl	800859c <__ssputs_r>
 80086be:	3001      	adds	r0, #1
 80086c0:	f000 80a9 	beq.w	8008816 <_svfiprintf_r+0x1c6>
 80086c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086c6:	445a      	add	r2, fp
 80086c8:	9209      	str	r2, [sp, #36]	; 0x24
 80086ca:	f89a 3000 	ldrb.w	r3, [sl]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 80a1 	beq.w	8008816 <_svfiprintf_r+0x1c6>
 80086d4:	2300      	movs	r3, #0
 80086d6:	f04f 32ff 	mov.w	r2, #4294967295
 80086da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086de:	f10a 0a01 	add.w	sl, sl, #1
 80086e2:	9304      	str	r3, [sp, #16]
 80086e4:	9307      	str	r3, [sp, #28]
 80086e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086ea:	931a      	str	r3, [sp, #104]	; 0x68
 80086ec:	4654      	mov	r4, sl
 80086ee:	2205      	movs	r2, #5
 80086f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086f4:	4850      	ldr	r0, [pc, #320]	; (8008838 <_svfiprintf_r+0x1e8>)
 80086f6:	f7f7 fdf3 	bl	80002e0 <memchr>
 80086fa:	9a04      	ldr	r2, [sp, #16]
 80086fc:	b9d8      	cbnz	r0, 8008736 <_svfiprintf_r+0xe6>
 80086fe:	06d0      	lsls	r0, r2, #27
 8008700:	bf44      	itt	mi
 8008702:	2320      	movmi	r3, #32
 8008704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008708:	0711      	lsls	r1, r2, #28
 800870a:	bf44      	itt	mi
 800870c:	232b      	movmi	r3, #43	; 0x2b
 800870e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008712:	f89a 3000 	ldrb.w	r3, [sl]
 8008716:	2b2a      	cmp	r3, #42	; 0x2a
 8008718:	d015      	beq.n	8008746 <_svfiprintf_r+0xf6>
 800871a:	9a07      	ldr	r2, [sp, #28]
 800871c:	4654      	mov	r4, sl
 800871e:	2000      	movs	r0, #0
 8008720:	f04f 0c0a 	mov.w	ip, #10
 8008724:	4621      	mov	r1, r4
 8008726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800872a:	3b30      	subs	r3, #48	; 0x30
 800872c:	2b09      	cmp	r3, #9
 800872e:	d94d      	bls.n	80087cc <_svfiprintf_r+0x17c>
 8008730:	b1b0      	cbz	r0, 8008760 <_svfiprintf_r+0x110>
 8008732:	9207      	str	r2, [sp, #28]
 8008734:	e014      	b.n	8008760 <_svfiprintf_r+0x110>
 8008736:	eba0 0308 	sub.w	r3, r0, r8
 800873a:	fa09 f303 	lsl.w	r3, r9, r3
 800873e:	4313      	orrs	r3, r2
 8008740:	9304      	str	r3, [sp, #16]
 8008742:	46a2      	mov	sl, r4
 8008744:	e7d2      	b.n	80086ec <_svfiprintf_r+0x9c>
 8008746:	9b03      	ldr	r3, [sp, #12]
 8008748:	1d19      	adds	r1, r3, #4
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	9103      	str	r1, [sp, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	bfbb      	ittet	lt
 8008752:	425b      	neglt	r3, r3
 8008754:	f042 0202 	orrlt.w	r2, r2, #2
 8008758:	9307      	strge	r3, [sp, #28]
 800875a:	9307      	strlt	r3, [sp, #28]
 800875c:	bfb8      	it	lt
 800875e:	9204      	strlt	r2, [sp, #16]
 8008760:	7823      	ldrb	r3, [r4, #0]
 8008762:	2b2e      	cmp	r3, #46	; 0x2e
 8008764:	d10c      	bne.n	8008780 <_svfiprintf_r+0x130>
 8008766:	7863      	ldrb	r3, [r4, #1]
 8008768:	2b2a      	cmp	r3, #42	; 0x2a
 800876a:	d134      	bne.n	80087d6 <_svfiprintf_r+0x186>
 800876c:	9b03      	ldr	r3, [sp, #12]
 800876e:	1d1a      	adds	r2, r3, #4
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	9203      	str	r2, [sp, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	bfb8      	it	lt
 8008778:	f04f 33ff 	movlt.w	r3, #4294967295
 800877c:	3402      	adds	r4, #2
 800877e:	9305      	str	r3, [sp, #20]
 8008780:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008848 <_svfiprintf_r+0x1f8>
 8008784:	7821      	ldrb	r1, [r4, #0]
 8008786:	2203      	movs	r2, #3
 8008788:	4650      	mov	r0, sl
 800878a:	f7f7 fda9 	bl	80002e0 <memchr>
 800878e:	b138      	cbz	r0, 80087a0 <_svfiprintf_r+0x150>
 8008790:	9b04      	ldr	r3, [sp, #16]
 8008792:	eba0 000a 	sub.w	r0, r0, sl
 8008796:	2240      	movs	r2, #64	; 0x40
 8008798:	4082      	lsls	r2, r0
 800879a:	4313      	orrs	r3, r2
 800879c:	3401      	adds	r4, #1
 800879e:	9304      	str	r3, [sp, #16]
 80087a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087a4:	4825      	ldr	r0, [pc, #148]	; (800883c <_svfiprintf_r+0x1ec>)
 80087a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087aa:	2206      	movs	r2, #6
 80087ac:	f7f7 fd98 	bl	80002e0 <memchr>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d038      	beq.n	8008826 <_svfiprintf_r+0x1d6>
 80087b4:	4b22      	ldr	r3, [pc, #136]	; (8008840 <_svfiprintf_r+0x1f0>)
 80087b6:	bb1b      	cbnz	r3, 8008800 <_svfiprintf_r+0x1b0>
 80087b8:	9b03      	ldr	r3, [sp, #12]
 80087ba:	3307      	adds	r3, #7
 80087bc:	f023 0307 	bic.w	r3, r3, #7
 80087c0:	3308      	adds	r3, #8
 80087c2:	9303      	str	r3, [sp, #12]
 80087c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c6:	4433      	add	r3, r6
 80087c8:	9309      	str	r3, [sp, #36]	; 0x24
 80087ca:	e768      	b.n	800869e <_svfiprintf_r+0x4e>
 80087cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80087d0:	460c      	mov	r4, r1
 80087d2:	2001      	movs	r0, #1
 80087d4:	e7a6      	b.n	8008724 <_svfiprintf_r+0xd4>
 80087d6:	2300      	movs	r3, #0
 80087d8:	3401      	adds	r4, #1
 80087da:	9305      	str	r3, [sp, #20]
 80087dc:	4619      	mov	r1, r3
 80087de:	f04f 0c0a 	mov.w	ip, #10
 80087e2:	4620      	mov	r0, r4
 80087e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087e8:	3a30      	subs	r2, #48	; 0x30
 80087ea:	2a09      	cmp	r2, #9
 80087ec:	d903      	bls.n	80087f6 <_svfiprintf_r+0x1a6>
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0c6      	beq.n	8008780 <_svfiprintf_r+0x130>
 80087f2:	9105      	str	r1, [sp, #20]
 80087f4:	e7c4      	b.n	8008780 <_svfiprintf_r+0x130>
 80087f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80087fa:	4604      	mov	r4, r0
 80087fc:	2301      	movs	r3, #1
 80087fe:	e7f0      	b.n	80087e2 <_svfiprintf_r+0x192>
 8008800:	ab03      	add	r3, sp, #12
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	462a      	mov	r2, r5
 8008806:	4b0f      	ldr	r3, [pc, #60]	; (8008844 <_svfiprintf_r+0x1f4>)
 8008808:	a904      	add	r1, sp, #16
 800880a:	4638      	mov	r0, r7
 800880c:	f3af 8000 	nop.w
 8008810:	1c42      	adds	r2, r0, #1
 8008812:	4606      	mov	r6, r0
 8008814:	d1d6      	bne.n	80087c4 <_svfiprintf_r+0x174>
 8008816:	89ab      	ldrh	r3, [r5, #12]
 8008818:	065b      	lsls	r3, r3, #25
 800881a:	f53f af2d 	bmi.w	8008678 <_svfiprintf_r+0x28>
 800881e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008820:	b01d      	add	sp, #116	; 0x74
 8008822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008826:	ab03      	add	r3, sp, #12
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	462a      	mov	r2, r5
 800882c:	4b05      	ldr	r3, [pc, #20]	; (8008844 <_svfiprintf_r+0x1f4>)
 800882e:	a904      	add	r1, sp, #16
 8008830:	4638      	mov	r0, r7
 8008832:	f000 f879 	bl	8008928 <_printf_i>
 8008836:	e7eb      	b.n	8008810 <_svfiprintf_r+0x1c0>
 8008838:	08008cbc 	.word	0x08008cbc
 800883c:	08008cc6 	.word	0x08008cc6
 8008840:	00000000 	.word	0x00000000
 8008844:	0800859d 	.word	0x0800859d
 8008848:	08008cc2 	.word	0x08008cc2

0800884c <_printf_common>:
 800884c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008850:	4616      	mov	r6, r2
 8008852:	4699      	mov	r9, r3
 8008854:	688a      	ldr	r2, [r1, #8]
 8008856:	690b      	ldr	r3, [r1, #16]
 8008858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800885c:	4293      	cmp	r3, r2
 800885e:	bfb8      	it	lt
 8008860:	4613      	movlt	r3, r2
 8008862:	6033      	str	r3, [r6, #0]
 8008864:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008868:	4607      	mov	r7, r0
 800886a:	460c      	mov	r4, r1
 800886c:	b10a      	cbz	r2, 8008872 <_printf_common+0x26>
 800886e:	3301      	adds	r3, #1
 8008870:	6033      	str	r3, [r6, #0]
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	0699      	lsls	r1, r3, #26
 8008876:	bf42      	ittt	mi
 8008878:	6833      	ldrmi	r3, [r6, #0]
 800887a:	3302      	addmi	r3, #2
 800887c:	6033      	strmi	r3, [r6, #0]
 800887e:	6825      	ldr	r5, [r4, #0]
 8008880:	f015 0506 	ands.w	r5, r5, #6
 8008884:	d106      	bne.n	8008894 <_printf_common+0x48>
 8008886:	f104 0a19 	add.w	sl, r4, #25
 800888a:	68e3      	ldr	r3, [r4, #12]
 800888c:	6832      	ldr	r2, [r6, #0]
 800888e:	1a9b      	subs	r3, r3, r2
 8008890:	42ab      	cmp	r3, r5
 8008892:	dc26      	bgt.n	80088e2 <_printf_common+0x96>
 8008894:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008898:	1e13      	subs	r3, r2, #0
 800889a:	6822      	ldr	r2, [r4, #0]
 800889c:	bf18      	it	ne
 800889e:	2301      	movne	r3, #1
 80088a0:	0692      	lsls	r2, r2, #26
 80088a2:	d42b      	bmi.n	80088fc <_printf_common+0xb0>
 80088a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088a8:	4649      	mov	r1, r9
 80088aa:	4638      	mov	r0, r7
 80088ac:	47c0      	blx	r8
 80088ae:	3001      	adds	r0, #1
 80088b0:	d01e      	beq.n	80088f0 <_printf_common+0xa4>
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	6922      	ldr	r2, [r4, #16]
 80088b6:	f003 0306 	and.w	r3, r3, #6
 80088ba:	2b04      	cmp	r3, #4
 80088bc:	bf02      	ittt	eq
 80088be:	68e5      	ldreq	r5, [r4, #12]
 80088c0:	6833      	ldreq	r3, [r6, #0]
 80088c2:	1aed      	subeq	r5, r5, r3
 80088c4:	68a3      	ldr	r3, [r4, #8]
 80088c6:	bf0c      	ite	eq
 80088c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088cc:	2500      	movne	r5, #0
 80088ce:	4293      	cmp	r3, r2
 80088d0:	bfc4      	itt	gt
 80088d2:	1a9b      	subgt	r3, r3, r2
 80088d4:	18ed      	addgt	r5, r5, r3
 80088d6:	2600      	movs	r6, #0
 80088d8:	341a      	adds	r4, #26
 80088da:	42b5      	cmp	r5, r6
 80088dc:	d11a      	bne.n	8008914 <_printf_common+0xc8>
 80088de:	2000      	movs	r0, #0
 80088e0:	e008      	b.n	80088f4 <_printf_common+0xa8>
 80088e2:	2301      	movs	r3, #1
 80088e4:	4652      	mov	r2, sl
 80088e6:	4649      	mov	r1, r9
 80088e8:	4638      	mov	r0, r7
 80088ea:	47c0      	blx	r8
 80088ec:	3001      	adds	r0, #1
 80088ee:	d103      	bne.n	80088f8 <_printf_common+0xac>
 80088f0:	f04f 30ff 	mov.w	r0, #4294967295
 80088f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f8:	3501      	adds	r5, #1
 80088fa:	e7c6      	b.n	800888a <_printf_common+0x3e>
 80088fc:	18e1      	adds	r1, r4, r3
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	2030      	movs	r0, #48	; 0x30
 8008902:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008906:	4422      	add	r2, r4
 8008908:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800890c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008910:	3302      	adds	r3, #2
 8008912:	e7c7      	b.n	80088a4 <_printf_common+0x58>
 8008914:	2301      	movs	r3, #1
 8008916:	4622      	mov	r2, r4
 8008918:	4649      	mov	r1, r9
 800891a:	4638      	mov	r0, r7
 800891c:	47c0      	blx	r8
 800891e:	3001      	adds	r0, #1
 8008920:	d0e6      	beq.n	80088f0 <_printf_common+0xa4>
 8008922:	3601      	adds	r6, #1
 8008924:	e7d9      	b.n	80088da <_printf_common+0x8e>
	...

08008928 <_printf_i>:
 8008928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800892c:	7e0f      	ldrb	r7, [r1, #24]
 800892e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008930:	2f78      	cmp	r7, #120	; 0x78
 8008932:	4691      	mov	r9, r2
 8008934:	4680      	mov	r8, r0
 8008936:	460c      	mov	r4, r1
 8008938:	469a      	mov	sl, r3
 800893a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800893e:	d807      	bhi.n	8008950 <_printf_i+0x28>
 8008940:	2f62      	cmp	r7, #98	; 0x62
 8008942:	d80a      	bhi.n	800895a <_printf_i+0x32>
 8008944:	2f00      	cmp	r7, #0
 8008946:	f000 80d4 	beq.w	8008af2 <_printf_i+0x1ca>
 800894a:	2f58      	cmp	r7, #88	; 0x58
 800894c:	f000 80c0 	beq.w	8008ad0 <_printf_i+0x1a8>
 8008950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008958:	e03a      	b.n	80089d0 <_printf_i+0xa8>
 800895a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800895e:	2b15      	cmp	r3, #21
 8008960:	d8f6      	bhi.n	8008950 <_printf_i+0x28>
 8008962:	a101      	add	r1, pc, #4	; (adr r1, 8008968 <_printf_i+0x40>)
 8008964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008968:	080089c1 	.word	0x080089c1
 800896c:	080089d5 	.word	0x080089d5
 8008970:	08008951 	.word	0x08008951
 8008974:	08008951 	.word	0x08008951
 8008978:	08008951 	.word	0x08008951
 800897c:	08008951 	.word	0x08008951
 8008980:	080089d5 	.word	0x080089d5
 8008984:	08008951 	.word	0x08008951
 8008988:	08008951 	.word	0x08008951
 800898c:	08008951 	.word	0x08008951
 8008990:	08008951 	.word	0x08008951
 8008994:	08008ad9 	.word	0x08008ad9
 8008998:	08008a01 	.word	0x08008a01
 800899c:	08008a93 	.word	0x08008a93
 80089a0:	08008951 	.word	0x08008951
 80089a4:	08008951 	.word	0x08008951
 80089a8:	08008afb 	.word	0x08008afb
 80089ac:	08008951 	.word	0x08008951
 80089b0:	08008a01 	.word	0x08008a01
 80089b4:	08008951 	.word	0x08008951
 80089b8:	08008951 	.word	0x08008951
 80089bc:	08008a9b 	.word	0x08008a9b
 80089c0:	682b      	ldr	r3, [r5, #0]
 80089c2:	1d1a      	adds	r2, r3, #4
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	602a      	str	r2, [r5, #0]
 80089c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089d0:	2301      	movs	r3, #1
 80089d2:	e09f      	b.n	8008b14 <_printf_i+0x1ec>
 80089d4:	6820      	ldr	r0, [r4, #0]
 80089d6:	682b      	ldr	r3, [r5, #0]
 80089d8:	0607      	lsls	r7, r0, #24
 80089da:	f103 0104 	add.w	r1, r3, #4
 80089de:	6029      	str	r1, [r5, #0]
 80089e0:	d501      	bpl.n	80089e6 <_printf_i+0xbe>
 80089e2:	681e      	ldr	r6, [r3, #0]
 80089e4:	e003      	b.n	80089ee <_printf_i+0xc6>
 80089e6:	0646      	lsls	r6, r0, #25
 80089e8:	d5fb      	bpl.n	80089e2 <_printf_i+0xba>
 80089ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80089ee:	2e00      	cmp	r6, #0
 80089f0:	da03      	bge.n	80089fa <_printf_i+0xd2>
 80089f2:	232d      	movs	r3, #45	; 0x2d
 80089f4:	4276      	negs	r6, r6
 80089f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089fa:	485a      	ldr	r0, [pc, #360]	; (8008b64 <_printf_i+0x23c>)
 80089fc:	230a      	movs	r3, #10
 80089fe:	e012      	b.n	8008a26 <_printf_i+0xfe>
 8008a00:	682b      	ldr	r3, [r5, #0]
 8008a02:	6820      	ldr	r0, [r4, #0]
 8008a04:	1d19      	adds	r1, r3, #4
 8008a06:	6029      	str	r1, [r5, #0]
 8008a08:	0605      	lsls	r5, r0, #24
 8008a0a:	d501      	bpl.n	8008a10 <_printf_i+0xe8>
 8008a0c:	681e      	ldr	r6, [r3, #0]
 8008a0e:	e002      	b.n	8008a16 <_printf_i+0xee>
 8008a10:	0641      	lsls	r1, r0, #25
 8008a12:	d5fb      	bpl.n	8008a0c <_printf_i+0xe4>
 8008a14:	881e      	ldrh	r6, [r3, #0]
 8008a16:	4853      	ldr	r0, [pc, #332]	; (8008b64 <_printf_i+0x23c>)
 8008a18:	2f6f      	cmp	r7, #111	; 0x6f
 8008a1a:	bf0c      	ite	eq
 8008a1c:	2308      	moveq	r3, #8
 8008a1e:	230a      	movne	r3, #10
 8008a20:	2100      	movs	r1, #0
 8008a22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a26:	6865      	ldr	r5, [r4, #4]
 8008a28:	60a5      	str	r5, [r4, #8]
 8008a2a:	2d00      	cmp	r5, #0
 8008a2c:	bfa2      	ittt	ge
 8008a2e:	6821      	ldrge	r1, [r4, #0]
 8008a30:	f021 0104 	bicge.w	r1, r1, #4
 8008a34:	6021      	strge	r1, [r4, #0]
 8008a36:	b90e      	cbnz	r6, 8008a3c <_printf_i+0x114>
 8008a38:	2d00      	cmp	r5, #0
 8008a3a:	d04b      	beq.n	8008ad4 <_printf_i+0x1ac>
 8008a3c:	4615      	mov	r5, r2
 8008a3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a42:	fb03 6711 	mls	r7, r3, r1, r6
 8008a46:	5dc7      	ldrb	r7, [r0, r7]
 8008a48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a4c:	4637      	mov	r7, r6
 8008a4e:	42bb      	cmp	r3, r7
 8008a50:	460e      	mov	r6, r1
 8008a52:	d9f4      	bls.n	8008a3e <_printf_i+0x116>
 8008a54:	2b08      	cmp	r3, #8
 8008a56:	d10b      	bne.n	8008a70 <_printf_i+0x148>
 8008a58:	6823      	ldr	r3, [r4, #0]
 8008a5a:	07de      	lsls	r6, r3, #31
 8008a5c:	d508      	bpl.n	8008a70 <_printf_i+0x148>
 8008a5e:	6923      	ldr	r3, [r4, #16]
 8008a60:	6861      	ldr	r1, [r4, #4]
 8008a62:	4299      	cmp	r1, r3
 8008a64:	bfde      	ittt	le
 8008a66:	2330      	movle	r3, #48	; 0x30
 8008a68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a70:	1b52      	subs	r2, r2, r5
 8008a72:	6122      	str	r2, [r4, #16]
 8008a74:	f8cd a000 	str.w	sl, [sp]
 8008a78:	464b      	mov	r3, r9
 8008a7a:	aa03      	add	r2, sp, #12
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	4640      	mov	r0, r8
 8008a80:	f7ff fee4 	bl	800884c <_printf_common>
 8008a84:	3001      	adds	r0, #1
 8008a86:	d14a      	bne.n	8008b1e <_printf_i+0x1f6>
 8008a88:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8c:	b004      	add	sp, #16
 8008a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	f043 0320 	orr.w	r3, r3, #32
 8008a98:	6023      	str	r3, [r4, #0]
 8008a9a:	4833      	ldr	r0, [pc, #204]	; (8008b68 <_printf_i+0x240>)
 8008a9c:	2778      	movs	r7, #120	; 0x78
 8008a9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	6829      	ldr	r1, [r5, #0]
 8008aa6:	061f      	lsls	r7, r3, #24
 8008aa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008aac:	d402      	bmi.n	8008ab4 <_printf_i+0x18c>
 8008aae:	065f      	lsls	r7, r3, #25
 8008ab0:	bf48      	it	mi
 8008ab2:	b2b6      	uxthmi	r6, r6
 8008ab4:	07df      	lsls	r7, r3, #31
 8008ab6:	bf48      	it	mi
 8008ab8:	f043 0320 	orrmi.w	r3, r3, #32
 8008abc:	6029      	str	r1, [r5, #0]
 8008abe:	bf48      	it	mi
 8008ac0:	6023      	strmi	r3, [r4, #0]
 8008ac2:	b91e      	cbnz	r6, 8008acc <_printf_i+0x1a4>
 8008ac4:	6823      	ldr	r3, [r4, #0]
 8008ac6:	f023 0320 	bic.w	r3, r3, #32
 8008aca:	6023      	str	r3, [r4, #0]
 8008acc:	2310      	movs	r3, #16
 8008ace:	e7a7      	b.n	8008a20 <_printf_i+0xf8>
 8008ad0:	4824      	ldr	r0, [pc, #144]	; (8008b64 <_printf_i+0x23c>)
 8008ad2:	e7e4      	b.n	8008a9e <_printf_i+0x176>
 8008ad4:	4615      	mov	r5, r2
 8008ad6:	e7bd      	b.n	8008a54 <_printf_i+0x12c>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	6826      	ldr	r6, [r4, #0]
 8008adc:	6961      	ldr	r1, [r4, #20]
 8008ade:	1d18      	adds	r0, r3, #4
 8008ae0:	6028      	str	r0, [r5, #0]
 8008ae2:	0635      	lsls	r5, r6, #24
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	d501      	bpl.n	8008aec <_printf_i+0x1c4>
 8008ae8:	6019      	str	r1, [r3, #0]
 8008aea:	e002      	b.n	8008af2 <_printf_i+0x1ca>
 8008aec:	0670      	lsls	r0, r6, #25
 8008aee:	d5fb      	bpl.n	8008ae8 <_printf_i+0x1c0>
 8008af0:	8019      	strh	r1, [r3, #0]
 8008af2:	2300      	movs	r3, #0
 8008af4:	6123      	str	r3, [r4, #16]
 8008af6:	4615      	mov	r5, r2
 8008af8:	e7bc      	b.n	8008a74 <_printf_i+0x14c>
 8008afa:	682b      	ldr	r3, [r5, #0]
 8008afc:	1d1a      	adds	r2, r3, #4
 8008afe:	602a      	str	r2, [r5, #0]
 8008b00:	681d      	ldr	r5, [r3, #0]
 8008b02:	6862      	ldr	r2, [r4, #4]
 8008b04:	2100      	movs	r1, #0
 8008b06:	4628      	mov	r0, r5
 8008b08:	f7f7 fbea 	bl	80002e0 <memchr>
 8008b0c:	b108      	cbz	r0, 8008b12 <_printf_i+0x1ea>
 8008b0e:	1b40      	subs	r0, r0, r5
 8008b10:	6060      	str	r0, [r4, #4]
 8008b12:	6863      	ldr	r3, [r4, #4]
 8008b14:	6123      	str	r3, [r4, #16]
 8008b16:	2300      	movs	r3, #0
 8008b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b1c:	e7aa      	b.n	8008a74 <_printf_i+0x14c>
 8008b1e:	6923      	ldr	r3, [r4, #16]
 8008b20:	462a      	mov	r2, r5
 8008b22:	4649      	mov	r1, r9
 8008b24:	4640      	mov	r0, r8
 8008b26:	47d0      	blx	sl
 8008b28:	3001      	adds	r0, #1
 8008b2a:	d0ad      	beq.n	8008a88 <_printf_i+0x160>
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	079b      	lsls	r3, r3, #30
 8008b30:	d413      	bmi.n	8008b5a <_printf_i+0x232>
 8008b32:	68e0      	ldr	r0, [r4, #12]
 8008b34:	9b03      	ldr	r3, [sp, #12]
 8008b36:	4298      	cmp	r0, r3
 8008b38:	bfb8      	it	lt
 8008b3a:	4618      	movlt	r0, r3
 8008b3c:	e7a6      	b.n	8008a8c <_printf_i+0x164>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	4632      	mov	r2, r6
 8008b42:	4649      	mov	r1, r9
 8008b44:	4640      	mov	r0, r8
 8008b46:	47d0      	blx	sl
 8008b48:	3001      	adds	r0, #1
 8008b4a:	d09d      	beq.n	8008a88 <_printf_i+0x160>
 8008b4c:	3501      	adds	r5, #1
 8008b4e:	68e3      	ldr	r3, [r4, #12]
 8008b50:	9903      	ldr	r1, [sp, #12]
 8008b52:	1a5b      	subs	r3, r3, r1
 8008b54:	42ab      	cmp	r3, r5
 8008b56:	dcf2      	bgt.n	8008b3e <_printf_i+0x216>
 8008b58:	e7eb      	b.n	8008b32 <_printf_i+0x20a>
 8008b5a:	2500      	movs	r5, #0
 8008b5c:	f104 0619 	add.w	r6, r4, #25
 8008b60:	e7f5      	b.n	8008b4e <_printf_i+0x226>
 8008b62:	bf00      	nop
 8008b64:	08008ccd 	.word	0x08008ccd
 8008b68:	08008cde 	.word	0x08008cde

08008b6c <memmove>:
 8008b6c:	4288      	cmp	r0, r1
 8008b6e:	b510      	push	{r4, lr}
 8008b70:	eb01 0402 	add.w	r4, r1, r2
 8008b74:	d902      	bls.n	8008b7c <memmove+0x10>
 8008b76:	4284      	cmp	r4, r0
 8008b78:	4623      	mov	r3, r4
 8008b7a:	d807      	bhi.n	8008b8c <memmove+0x20>
 8008b7c:	1e43      	subs	r3, r0, #1
 8008b7e:	42a1      	cmp	r1, r4
 8008b80:	d008      	beq.n	8008b94 <memmove+0x28>
 8008b82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b8a:	e7f8      	b.n	8008b7e <memmove+0x12>
 8008b8c:	4402      	add	r2, r0
 8008b8e:	4601      	mov	r1, r0
 8008b90:	428a      	cmp	r2, r1
 8008b92:	d100      	bne.n	8008b96 <memmove+0x2a>
 8008b94:	bd10      	pop	{r4, pc}
 8008b96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b9e:	e7f7      	b.n	8008b90 <memmove+0x24>

08008ba0 <_sbrk_r>:
 8008ba0:	b538      	push	{r3, r4, r5, lr}
 8008ba2:	4d06      	ldr	r5, [pc, #24]	; (8008bbc <_sbrk_r+0x1c>)
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	4604      	mov	r4, r0
 8008ba8:	4608      	mov	r0, r1
 8008baa:	602b      	str	r3, [r5, #0]
 8008bac:	f7f7 ff98 	bl	8000ae0 <_sbrk>
 8008bb0:	1c43      	adds	r3, r0, #1
 8008bb2:	d102      	bne.n	8008bba <_sbrk_r+0x1a>
 8008bb4:	682b      	ldr	r3, [r5, #0]
 8008bb6:	b103      	cbz	r3, 8008bba <_sbrk_r+0x1a>
 8008bb8:	6023      	str	r3, [r4, #0]
 8008bba:	bd38      	pop	{r3, r4, r5, pc}
 8008bbc:	2400040c 	.word	0x2400040c

08008bc0 <memcpy>:
 8008bc0:	440a      	add	r2, r1
 8008bc2:	4291      	cmp	r1, r2
 8008bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bc8:	d100      	bne.n	8008bcc <memcpy+0xc>
 8008bca:	4770      	bx	lr
 8008bcc:	b510      	push	{r4, lr}
 8008bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bd6:	4291      	cmp	r1, r2
 8008bd8:	d1f9      	bne.n	8008bce <memcpy+0xe>
 8008bda:	bd10      	pop	{r4, pc}

08008bdc <_realloc_r>:
 8008bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be0:	4680      	mov	r8, r0
 8008be2:	4614      	mov	r4, r2
 8008be4:	460e      	mov	r6, r1
 8008be6:	b921      	cbnz	r1, 8008bf2 <_realloc_r+0x16>
 8008be8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bec:	4611      	mov	r1, r2
 8008bee:	f7ff bc49 	b.w	8008484 <_malloc_r>
 8008bf2:	b92a      	cbnz	r2, 8008c00 <_realloc_r+0x24>
 8008bf4:	f7ff fbda 	bl	80083ac <_free_r>
 8008bf8:	4625      	mov	r5, r4
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c00:	f000 f81b 	bl	8008c3a <_malloc_usable_size_r>
 8008c04:	4284      	cmp	r4, r0
 8008c06:	4607      	mov	r7, r0
 8008c08:	d802      	bhi.n	8008c10 <_realloc_r+0x34>
 8008c0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c0e:	d812      	bhi.n	8008c36 <_realloc_r+0x5a>
 8008c10:	4621      	mov	r1, r4
 8008c12:	4640      	mov	r0, r8
 8008c14:	f7ff fc36 	bl	8008484 <_malloc_r>
 8008c18:	4605      	mov	r5, r0
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	d0ed      	beq.n	8008bfa <_realloc_r+0x1e>
 8008c1e:	42bc      	cmp	r4, r7
 8008c20:	4622      	mov	r2, r4
 8008c22:	4631      	mov	r1, r6
 8008c24:	bf28      	it	cs
 8008c26:	463a      	movcs	r2, r7
 8008c28:	f7ff ffca 	bl	8008bc0 <memcpy>
 8008c2c:	4631      	mov	r1, r6
 8008c2e:	4640      	mov	r0, r8
 8008c30:	f7ff fbbc 	bl	80083ac <_free_r>
 8008c34:	e7e1      	b.n	8008bfa <_realloc_r+0x1e>
 8008c36:	4635      	mov	r5, r6
 8008c38:	e7df      	b.n	8008bfa <_realloc_r+0x1e>

08008c3a <_malloc_usable_size_r>:
 8008c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c3e:	1f18      	subs	r0, r3, #4
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	bfbc      	itt	lt
 8008c44:	580b      	ldrlt	r3, [r1, r0]
 8008c46:	18c0      	addlt	r0, r0, r3
 8008c48:	4770      	bx	lr
	...

08008c4c <_init>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	bf00      	nop
 8008c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c52:	bc08      	pop	{r3}
 8008c54:	469e      	mov	lr, r3
 8008c56:	4770      	bx	lr

08008c58 <_fini>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	bf00      	nop
 8008c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5e:	bc08      	pop	{r3}
 8008c60:	469e      	mov	lr, r3
 8008c62:	4770      	bx	lr
